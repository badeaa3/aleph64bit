      SUBROUTINE QYFIT(ILST,NTR,PSUM,VPSUM,IQCH,VOUT,VVOUT,VPSVX,CHI2)
C----------------------------------------------------------------------
CKEY YTOP VERTEX   /INTERNAL
C
C!    interface for simplified use of YTOP from alpha
C     H-G Moser 31-09-92
C
C     input parameters :    ILST        list of track numbers
C                           NTR         number of tracks
C     output           :    PSUM(5)     4-momentum of res. track, mass
C                           VPSUM(10)   covariance of 4-momentum
C                           VOUT(3)     vertex position
C                           VVOUT(6)    vertex covariance matrix
C                           VPSVX((3,3) correlation vertex <-> momentum
C                           CHI2        chi**2 of vertex, <0: error
C
C     particles created by this routine have particle names:
C
C     input particles are checked whether they are reconstructed tracks,
C     then the errors from the FRF2 bank will be used
C     if the input is a YTOP track, the error will be taken from the
C     YTOP vertex and track parameters
C
C----------------------------------------------------------------------
#ifndef DOC
      PARAMETER (NMAX=10, NMFRF=50, NMVFRF=150)
#include "qcde.h"
      REAL VOUT(3),VVOUT(6),VIN(3),VVIN(6)
      REAL HXOU(5,NMAX),VHXOU(15,NMAX)
      REAL TNUO(5,NMAX),VTNUO(15,NMAX)
      REAL PSUM(5),VPSUM(10),VPSVX(3,3),VMVX(3),VMPS(3)
      REAL FRF(NMFRF),VFRF(NMVFRF)
      REAL AMASS(NMAX),NMASS(NMAX),CMASS(NMAX)
      REAL ARR(4,4)
      INTEGER ITKLIST(NMAX),ITNLIST(NMAX)
      INTEGER ILST(*)
C
      REAL VINI(3),VVINI(6),VPSVI(3,3)
C
#include "qmacro.h"
      JQVRT(I,N) = KOQVRT + I * KCQVRT + N
C----------------------------------------------------------------------
C
          CHI2 = -1
C
          NCHR = 0
          NNEU = 0
          NTRK = 0
C
C         =================================================
C         first, for n <= NMAX fit all tracks to one vertex
C         =================================================
C
          IQCH    = 0
          DO ITRK = 1,MIN(NMAX,NTR)
          I = ILST(ITRK)
C
          NTRK = NTRK + 1
          INDF = 5 * (NTRK - 1)
          INDV = 15 * (NTRK - 1)
C
C         sum up the charge of all tracks
C
          IQCH = IQCH + KCH(I)
C
C         check whether the track has an end vertex
C
          IF(KENDV(I).GT.0) THEN
C
C         this track was generated by YTOP, hence the parameters have to
C         be restored via VTPAR
C
             IENDV = KENDV(I)
C
             CALL QVGET3(PSUM,I)
             CALL QVGETS(ARR,I)
             K = 0
             DO M = 1,3
               DO N=1,M
                 K = K + 1
                 VPSUM(K) = ARR(N,M)
                 VVINI(K) = QVEM(IENDV,N,M)
               ENDDO
             ENDDO
             DO M=1,3
              DO N = 1,3
                VPSVI(M,N) = RW(JQVRT(IENDV,3*(M-1)+N+JQVRET-1))
              ENDDO
             ENDDO
C
             VINI(1) = QVX(IENDV)
             VINI(2) = QVY(IENDV)
             VINI(3) = QVZ(IENDV)
C
             CALL YTPAR(KCH(I),VINI,VVINI,
     &                  PSUM,VPSUM,VPSVI,
     &                  FRF(INDF+1),VFRF(INDV+1), IFAIL)
             IF(IFAIL.NE.0) THEN
               CHI2 = -99.
               RETURN
             ENDIF
C
          IF(KCH(I).EQ.0 ) THEN
             NNEU = NNEU + 1
             ITNLIST(NNEU) = NTRK
             NMASS(NNEU)   = QM(I)
          ELSE
             NCHR = NCHR + 1
             ITKLIST(NCHR) = NTRK
             CMASS(NCHR)   = QM(I)
          ENDIF
C
          ELSE
C
C         this is an ordinary reconstructed track
C
          IF( .NOT.XFRF(I) ) RETURN
C
          NCHR = NCHR + 1
          CMASS(NCHR) = QM(I)
C
          ITKLIST(NCHR) = NTRK
C...........................................................
          FRF(INDF+1) = QFRFIR(I)
          FRF(INDF+2) = QFRFTL(I)
          FRF(INDF+3) = QFRFP0(I)
          FRF(INDF+4) = QFRFD0(I)
          FRF(INDF+5) = QFRFZ0(I)
C
          VFRF(INDV+ 1) = QFRFEM(I,1,1)
          VFRF(INDV+ 2) = QFRFEM(I,1,2)
          VFRF(INDV+ 3) = QFRFEM(I,2,2)
          VFRF(INDV+ 4) = QFRFEM(I,1,3)
          VFRF(INDV+ 5) = QFRFEM(I,2,3)
          VFRF(INDV+ 6) = QFRFEM(I,3,3)
          VFRF(INDV+ 7) = QFRFEM(I,1,4)
          VFRF(INDV+ 8) = QFRFEM(I,2,4)
          VFRF(INDV+ 9) = QFRFEM(I,3,4)
          VFRF(INDV+10) = QFRFEM(I,4,4)
          VFRF(INDV+11) = QFRFEM(I,1,5)
          VFRF(INDV+12) = QFRFEM(I,2,5)
          VFRF(INDV+13) = QFRFEM(I,3,5)
          VFRF(INDV+14) = QFRFEM(I,4,5)
          VFRF(INDV+15) = QFRFEM(I,5,5)
          ENDIF
C
          ENDDO
C
C         set up mass array
C
          NP = 0
          DO I2 = 1,NCHR
           NP = NP + 1
           AMASS(NP) = CMASS(I2)
          ENDDO
          DO I2 = 1,NNEU
           NP = NP + 1
           AMASS(NP) = NMASS(I2)
          ENDDO
C
C
          CALL YFMVTR(0,NCHR,NNEU,.TRUE.,.TRUE.,.TRUE.,.FALSE.,
     &    DUM  ,DUM   ,ITKLIST,
     &    5,15,
     &    FRF,VFRF,
     &    ITNLIST,5,15,
     &    FRF,VFRF,
     &    1,AMASS,
     &    VOUT ,VVOUT,
     &    HXOU,VHXOU,TNUO,VTNUO,
     &    PSUM,VPSUM,VPSVX,
     &    RMADS,DMASS,VMVX,VMPS,
     &    CHI2,IFAIL)
          IF(IFAIL.NE.0) THEN
            CHI2 = -FLOAT(IFAIL)
            RETURN
          ENDIF
C
C
C
C         ============================================================
C         for ITRK > NMAX  fit one track to the result of the previous
C         fit in a loop
C         ============================================================
C
          IF(NTR.GT.NMAX) THEN
          DO ITRK = NMAX+1,NTR
C
C         prepare output of last fit
C
          CALL YTPAR(IQCH,VOUT,VVOUT,
     &               PSUM,VPSUM,VPSVX,
     &               FRF(1),VFRF(1), IFAIL)
          IF(IFAIL.NE.0) THEN
               CHI2 = -99.
               RETURN
          ENDIF
          NNEU = 0
          NCHR = 0
          IF(IQCH.EQ.0) THEN
             NMASS(1) = RMADS
             NNEU = 1
             ITNLIST(1) = NNEU
          ELSE
             CMASS(1) = RMADS
             NCHR = 1
             ITKLIST(1) = NCHR
          ENDIF
C
          NTRK = 2
          INDF = 5 * (NTRK - 1)
          INDV = 15 * (NTRK - 1)
C
C         check whether the track has an end vertex
C
          IF(KENDV(I).GT.0) THEN
C
C         this track was generated by YTOP, hence the parameters have to
C         be restored via VTPAR
C
C         for neutral tracks the p - v correlation matrix seems to
C         be unimportant
C
             IENDV = KENDV(I)
C
             CALL QVGET3(PSUM,I)
             CALL QVGETS(ARR,I)
             K = 0
             DO M = 1,3
               DO N=1,M
                 K = K + 1
                 VPSUM(K) = ARR(N,M)
                 VVINI(K) = QVEM(IENDV,N,M)
               ENDDO
             ENDDO
             IF( RW(JQVRT(IENDV,JQVRET)).NE.-1) THEN
             DO M=1,3
              DO N = 1,3
                VPSVI(M,N) = RW(JQVRT(IENDV,3*(M-1)+N+JQVRET-1))
              ENDDO
             ENDDO
             ELSE
             DO M=1,3
              DO N = 1,3
                VPSVI(M,N) = 0.
              ENDDO
             ENDDO
             ENDIF
C
             VINI(1) = QVX(IENDV)
             VINI(2) = QVY(IENDV)
             VINI(3) = QVZ(IENDV)
C
             CALL YTPAR(KCH(I),VINI,VVINI,
     &                  PSUM,VPSUM,VPSVI,
     &                  FRF(INDF+1),VFRF(INDV+1), IFAIL)
             IF(IFAIL.NE.0) THEN
               CHI2 = -99.
               RETURN
             ENDIF
C
          IF(KCH(I).EQ.0 ) THEN
             NNEU = NNEU + 1
             ITNLIST(NNEU) = NTRK
             NMASS(NNEU)   = QM(I)
          ELSE
             NCHR = NCHR + 1
             ITNLIST(NCHR) = NTRK
             CMASS(NCHR)   = QM(I)
          ENDIF
C
          ELSE
C
C         this is an ordinary reconstructed track
C
          IF( .NOT.XFRF(I) ) THEN
            CHI2 = -1.
            RETURN
          ENDIF
C
          NCHR = NCHR + 1
          CMASS(NCHR) = QM(I)
C
          ITKLIST(NCHR) = NTRK
C...........................................................
          FRF(INDF+1) = QFRFIR(I)
          FRF(INDF+2) = QFRFTL(I)
          FRF(INDF+3) = QFRFP0(I)
          FRF(INDF+4) = QFRFD0(I)
          FRF(INDF+5) = QFRFZ0(I)
C
          VFRF(INDV+ 1) = QFRFEM(I,1,1)
          VFRF(INDV+ 2) = QFRFEM(I,1,2)
          VFRF(INDV+ 3) = QFRFEM(I,2,2)
          VFRF(INDV+ 4) = QFRFEM(I,1,3)
          VFRF(INDV+ 5) = QFRFEM(I,2,3)
          VFRF(INDV+ 6) = QFRFEM(I,3,3)
          VFRF(INDV+ 7) = QFRFEM(I,1,4)
          VFRF(INDV+ 8) = QFRFEM(I,2,4)
          VFRF(INDV+ 9) = QFRFEM(I,3,4)
          VFRF(INDV+10) = QFRFEM(I,4,4)
          VFRF(INDV+11) = QFRFEM(I,1,5)
          VFRF(INDV+12) = QFRFEM(I,2,5)
          VFRF(INDV+13) = QFRFEM(I,3,5)
          VFRF(INDV+14) = QFRFEM(I,4,5)
          VFRF(INDV+15) = QFRFEM(I,5,5)
          ENDIF
C
C         set up mass array
C
          NP = 0
          DO I2 = 1,NCHR
           NP = NP + 1
           AMASS(NP) = CMASS(I2)
          ENDDO
          DO I2 = 1,NNEU
           NP = NP + 1
           AMASS(NP) = NMASS(I2)
          ENDDO
C
C
          IQCH = IQCH + KCH(I)
C
          CALL YFMVTR(0,NCHR,NNEU,.TRUE.,.TRUE.,.TRUE.,.FALSE.,
     &    DUM  ,DUM   ,ITKLIST,
     &    5,15,
     &    FRF,VFRF,
     &    ITNLIST,5,15,
     &    FRF,VFRF,
     &    1,AMASS,
     &    VOUT ,VVOUT,
     &    HXOU,VHXOU,TNUO,VTNUO,
     &    PSUM,VPSUM,VPSVX,
     &    RMADS,DMASS,VMVX,VMPS,
     &    CHI2,IFAIL)
C
          IF(IFAIL.NE.0) THEN
            CHI2 = -FLOAT(IFAIL)
            RETURN
          ENDIF
C
      ENDDO
      ENDIF
C
C     =====================================================
C
      PSUM(4) = SQRT(RMADS**2+PSUM(1)**2+PSUM(2)**2+PSUM(3)**2)
      PSUM(5) = RMADS
C
C     calculate correct 4-momentum covariance matrix
C
C     chi**2 / NDF  NDF = 2 * NTRACK - 3 + 3 * NVERTEX
C
      NDF = NTR * 2 - 3
      CHI2 = CHI2 / FLOAT(NDF)
C
      IF (CHI2.LT.500.) THEN
        IF ((RMADS.GT.500.0).OR.(PSUM(1).GT.1000.0).OR.
     *    (PSUM(2).GT.1000.0).OR.(PSUM(3).GT.1000.0)) THEN
          CALL QWMESE('_QYFIT_ crazy values from YTOPOL fit.')
          WRITE(KUPRNT,980) CHI2,RMADS,PSUM(1),PSUM(2),PSUM(3)
          CHI2 = -100.0
          RETURN
        ENDIF
C Divide 1st to avoid arithmetic overflow in multiplications D.Jaffe 17jan94
        R1 = PSUM(1)/PSUM(4)
        R2 = PSUM(2)/PSUM(4)
        R3 = PSUM(3)/PSUM(4)
        R4 = RMADS/PSUM(4)
        VPSUM(10) = R1*R1*VPSUM(1) + R2*R2*VPSUM(3) +
     .              R3*R3*VPSUM(6) + R4*R4*DMASS*DMASS +
     .           2.*R1*(R2*VPSUM(2) + R3*VPSUM(4)) +
     .           2.*R2*R3*VPSUM(5) +
     .           2.*R4*(R1*VMPS(1) + R2*VMPS(2) + R3*VMPS(3))
        VPSUM(7) = R1*VPSUM(1) + R2*VPSUM(2) + R3*VPSUM(4)
     .           +  R4*VMPS(1)
        VPSUM(8) = R1*VPSUM(2) + R2*VPSUM(3) + R3*VPSUM(5)
     .           + R4*VMPS(2)
        VPSUM(9) = R1*VPSUM(4) + R2*VPSUM(5) + R3*VPSUM(6)
     .           + R4*VMPS(3)
      ELSE
        CHI2 = -9999
      ENDIF
C
      RETURN
  980 FORMAT(' CHI2=',E10.3,3X,'RMADS=',E12.5,3X,'PSUM:',3E12.5)
      END
#endif
