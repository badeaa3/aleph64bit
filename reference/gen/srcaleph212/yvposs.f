      SUBROUTINE YVPOSS(IENT,NVX,NHX,NEU,
     &  VXIN,VVXIN,
     &  IXHX,NSHX,NSVHX,HXI,VHXI,
     &  IXNU,NSNU,NSVNU,TNU,VTNU,
     &  JTREQ,MULIN,MNMUL,MXMUL,NEXCL,NSNGL,KSNGL)
C
C----------------------------------------------------------*
C!    finds all combinations of tracks that form a vertex
CKEY YTOP VERTEX
C!    Author :     G. Lutz   30/11/87
C!    Modified :   M. Bosman 01/12/88
C!    MODIFIED :   G.LUTZ  FEBRUARY 1991
C!
C!
C!    Description
C!    ===========
C!    finds all combinations of tracks that form a vertex
C!
C!  INPUT:
C!    IENT .........=1 .... GENERATE TRACK CROSSING TABLE ONLY
C!                  =2 .... FIND VERTICES WITHOUT CALC. OF CROSS TABLE
C!                  =3 .... GENERATE CROSS TABLE + VERTICES
C!    NVX ......... NUMBER INPUT VERTICES (USUALLY 1 OR ZERO)
C!    NHX ......... NUMBER OF HELIX INDICES
C!    NEU ......... NUMBER OF NEUTRAL TRACKS
C!    VXIN(3,I) ... X,Y,Z OF INPUT VERTEX I
C!    VVXIN(6,I) .. VARIANCE OF INPUT VERTEX I
C!    IXHX ........ HELIX INDICES FOR VERTEX FIT
C!                  ALSO ALLOWED TO BE ZERO; THEN IT IS IGNORED
C!    NSHX ........ SPACING BETWEEN CONSECUTIVE HELIX PAR.
C!    NSVHX ....... SPACING BETWEEN CONSECUTIVE HELIX VAR.
C!    HXI(I) ...... HELIX PARAMETERS
C!    VHXI(I) ..... HELIX VARIANCES
C!    IXNU ........ NUMBER OF NEUTRAL TR. INDICES FOR VERTEX FIT
C!    NSNU ........ SPACING BETWEEN CONSECUTIVE NEUTRAL TR. PAR.
C!    NSVNU ....... SPACING BETWEEN CONSECUTIVE NEUTRAL TR. VAR.
C!    TNU(I) ...... NEUTRAL TRACK PARAMETERS
C!    VTNU(I) ..... NEUTRAL TRACK VARIANCES
C!      JTREQ(1) ... # OF SETS OF TRACKS
C!            (2) ... NEGATIVE OF # OF TRACKS REQUIRED FROM FIRST SET
C!            (3,..)  TRACK INDICES IN FIRST SET; ZERO INDICES ARE SKIPP
C!            (...)   REPEAT FROM (2) FOR OTHER SETS
C!         MULIN ... STOP SEARCHING VERTICES IF MULTIPL.
C!                    IS HIGHEST FOUND - MULIN
C!      MNMUL ....  MINIMUM MULTIPLICITY OF VERTICES (DEFAULT=2)
C!      MXMUL ....  MAXIMUM MULTIPLICITY OF VERTICES (DEFAULT NPTR)
C!     NEXCL ....     NUMBER OF EXCLUDED TRACK COMBINATIONS
C!  OUTPUT:
C!     NSNGL ........ # OF TRKS FOUND WITHOUT CROSSING ANY (REQUIRED)
C!                    OTHER TRACKS
C!     KSNGL ........ INDICES OF TRACKS WITHOUT CROSSING
C!
C----------------------------------------------------------*
      SAVE
C
      INTEGER LMHLEN, LMHCOL, LMHROW
      PARAMETER (LMHLEN=2, LMHCOL=1, LMHROW=2)
C
      COMMON /BCS/   IW(1000)
      INTEGER IW
      REAL RW(1000)
      EQUIVALENCE (RW(1),IW(1))
C
C! YTOP array dimensions
      PARAMETER(NMSIZZ=31,MKDIMM=6,MAXTRK=186,MAXHLX=124,MAXNTR=62,
     &  MXVTOP=10,MXMULS=10,MAXVXP=50,MAXEXC=60,MXVTYP=2)
C! YTOP vertex summary
      COMMON/YVXPTO/ NTRV00(MAXVXP),
     +   ITRV00(MKDIMM,MAXVXP),VTXMS0(3,MAXVXP),
     +   CHIVMS(MAXVXP),NVPOSS,VARVMS(6,MAXVXP),
     +   MRKEXC(MKDIMM,MAXEXC)
C
      DIMENSION VXIN(3,*),VVXIN(6,*)
C  HELIX PARAMETERS
      DIMENSION IXHX(*),HXI(*),VHXI(*)
C  NEUTRAL TRACK PARAMETERS
      DIMENSION IXNU(*),TNU(*),VTNU(*)
      DIMENSION JTREQ(*),KSNGL(*)
C  ORIGINAL INDEX OF SELECTED TRACKS
C DIMENSION IPTR(MAXTRK),IPTRO(MAXTRK)
      DIMENSION IPTR(MAXTRK),IPTRO(MAXTRK)
      DIMENSION IXHXX(MAXHLX),IXNUU(MAXNTR)
C DIMENSION YMKST(MKDIMM, )
      DIMENSION YMKST(MKDIMM,10),NTREQ(10),NTSET(10)
C
C  TABLE FOR CROSSING PROPERTIES OF PAIRS OF TACKS
C  BIT J IN WORD I SET TO 1 IF TRACK I CROSSES TRACK J
C DIMENSION IJCRS(MKDIMM,MAXTRK) MCOMB(MKDIMM) JCOMB(MKDIMM) MMSET(MKDIM
      DIMENSION IJCRS(MKDIMM,MAXTRK),
     &      MCOMB(MKDIMM),JCOMB(MKDIMM),MMSET(MKDIMM)
C  # OF CROSSINGS OF TRACK I, # OF TRACKS WITH I CROSSINGS
C DIMENSION NJCRS(MAXTRK),KTCRS(MAXTRK)
      DIMENSION NJCRS(MAXTRK),KTCRS(MAXTRK)
C  VERTEX BETWEEN PAIRS OF TRACKS
C DIMENSION XITRV2(MAXTRK)
      DIMENSION VTX2(3),XITRV2(MAXTRK)
      DIMENSION VARV2(6)
C  ARRAY FOR INDICES OF TRACK COMBINATIONS
C DIMENSION IITR(MAXTRK),JJTR(MAXTRK),IJTR(MAXTRK)
      DIMENSION IITR(MAXTRK),JJTR(MAXTRK),IJTR(MAXTRK)
C  TEMPORARY ARRAY FOR PRINTING
C DIMENSION ITEMP(MAXTRK)
      DIMENSION ITEMP(MAXTRK)
C  FLAG TO BE SET IF ALL COMBINATIONS OF L TRACKS GIVE A POSSIBLE
C  VERTEX. FLAG IS USED FOR STOPPING FURTHER SEARCH OF VERTICES
      LOGICAL LCOMB
C  99.9% CONFIDENCE LIMITS FOR N DEGREES OF FREEDOM
      DIMENSION CONLM(20)
C     FLAG FOR RECALCULATING CROSSING TABLE
      LOGICAL LCROS
C
      LOGICAL LVAPC,LVAPP
C
      LOGICAL LMRK,LZERO
C
C
C
      DATA CONLM/10.8,13.8,16.3,18.5,20.5,22.5,24.3,26.1,27.8,29.6,
     1            31.3,32.9,34.5,36.1,37.7,39.2,40.8,42.3,43.8,45.3/
C
C
      DATA NENTY/0/
C
C
C-- Define the logical unit for printout
C
      LOUT = IW(6)
C
C
C     CALCULATION OF APPROXIMATIVE VERTEX?
      IF(NVX.GT.0) THEN
        LVAPC=.FALSE.
      ELSE
        LVAPC=.TRUE.
      ENDIF
C
      LCROS=.TRUE.
      IF(IENT.EQ.2) LCROS=.FALSE.
C
      MINMU=MNMUL
      MINMU=MAX0(MINMU,2)
C  RESHUFFLE INDICES OF TRACKS CONSIDERED IN VERTEX SEARCH
C  FIND HIGHEST TRACK INDEX USED
      NTRKS=0
      NPTR=0
      DO 50 I=1,NHX
        IF(IXHX(I).LE.0) GO TO 50
        NPTR=NPTR+1
        IPTR(NPTR)=IXHX(I)
        NTRKS=MAX0(NTRKS,IPTR(NPTR))
C     CHECK IF CROSSING TABLE HAS TO BE RECALCULATED
        IF(IPTR(NPTR).NE.IPTRO(NPTR)) LCROS=.TRUE.
        IPTRO(NPTR)=IPTR(NPTR)
   50 CONTINUE
      NPHX=NPTR
C
      DO 51 I=1,NEU
        IF(IXNU(I).LE.0) GO TO 51
        NPTR=NPTR+1
        IPTR(NPTR)=IXNU(I)+MAXHLX
        NTRKS=MAX0(NTRKS,IPTR(NPTR))
C     CHECK IF CROSSING TABLE HAS TO BE RECALCULATED
        IF(IPTR(NPTR).NE.IPTRO(NPTR)) LCROS=.TRUE.
        IPTRO(NPTR)=IPTR(NPTR)
   51 CONTINUE
C
      IF(NTRKS.LE.MAXTRK) GO TO 45
   45 CONTINUE
C
      IF(NTRKS.LT.MNMUL) THEN
        NSNGL=0
C-----
        NVPOSS=0
        RETURN
      ENDIF
C
C  INITIALIZE AND RESET TABLES
      DO 200 I=1,50
        NTRV00(I)=0
        CALL YMKZER(MKDIMM,NMSIZZ,ITRV00(1,I))
  200 CONTINUE
C
      NVPOSS=0
C
      IF(IENT.EQ.1) GO TO 1050
C
C =======  SET UP MARKERS FOR SETS OF TRACKS REQUIRED IN VERTEX =======
      II=1
      NSETR=JTREQ(1)
      IF(NSETR.LE.0) GO TO 700
      ISETR=0
C
      IF(NSETR.LT.10) GO TO 300
C
      RETURN
C
  300 CONTINUE
      II=II+1
      LWORD=JTREQ(II)
      IF(LWORD.GE.0) GO TO 400
C  NEW SET
      ISETR=ISETR+1
      CALL YMKZER(MKDIMM,NMSIZZ,YMKST(1,ISETR))
      NTSET(ISETR)=0
C
      IF(ISETR.GT.NSETR) GO TO 500
C
      NTREQ(ISETR)=-LWORD
C     SET MIN. MULTIPLICITY TO MAX OF TRACKS REQ. IN A SUBSET
      MINMU =MAX0(MINMU ,NTREQ(ISETR))
      GO TO 300
C
  400 CONTINUE
      IF(LWORD.LE.MAXTRK) GO TO 450
C
C
      RETURN
C
  450 CONTINUE
      IF(LWORD.EQ.0) GO TO 300
      NTSET(ISETR)=NTSET(ISETR)+1
      CALL YMKSET(MKDIMM,NMSIZZ,YMKST(1,ISETR),LWORD)
      GO TO 300
  500 CONTINUE
C
C     CHECK FOR SUFFICIENT TRACKS IN EACH SET
      DO 590 ISETR=1,NSETR
        IF(NTREQ(ISETR).LE.NTSET(ISETR)) GO TO 590
C     NOT ENOUGH TRACKS IN SET
        RETURN
C
  590 CONTINUE
C
  700 CONTINUE
C
C
C ==== END SET UP MARKERS FOR SETS OF TRACKS REQUIRED IN VERTEX =======
C
 1050 CONTINUE
C
      NMWD=(NPTR-1)/NMSIZZ+1
C
      IF(LCROS) THEN
C
C ================== SET UP CROSS TABLE  ==============================
        DO 100 I=1,MAXTRK
          CALL YMKZER(MKDIMM,NMSIZZ,IJCRS(1,I))
          NJCRS(I)=0
  100   CONTINUE
C
C
        NPTM1=NPTR-1
        DO 1800 I=1,NPTM1
          NH=0
          NU=0
          I1=I+1
          II=IPTR(I)
          IF(II.GT.MAXHLX) THEN
            NU=NU+1
            IXNUU(NU)=II-MAXHLX
          ELSE
            NH=NH+1
            IXHXX(NH)=II
          ENDIF
          CALL YMKSET(NMWD,NMSIZZ,IJCRS(1,I),I)
C
          NHO=NH
          NUO=NU
          DO 1700 J=I1,NPTR
            NH=NHO
            NU=NUO
C
            JJ=IPTR(J)
            IF(JJ.GT.MAXHLX) THEN
              NU=NU+1
              IXNUU(NU)=JJ-MAXHLX
            ELSE
              NH=NH+1
              IXHXX(NH)=JJ
            ENDIF
C
            LVAPP=LVAPC
            IF(NH.LT.2) LVAPP=.FALSE.
            CALL YFTVTR(NVX,NH,NU,LVAPP,VXIN,VVXIN,
     &        IXHXX,NSHX,NSVHX,HXI,VHXI,
     &        IXNUU,NSNU,NSVNU,TNU,VTNU,
     &        VTX2,VARV2,CHVX2,IFAIL)
C
            IF(IFAIL.NE.0) GO TO 1600
            NDF=2*(NH+NU)+3*(NVX-1)
            IF(CHVX2.GT.CONLM(NDF)) GO TO 1600
            CALL YMKSET(NMWD,NMSIZZ,IJCRS(1,I),J)
            NJCRS(I)=NJCRS(I)+1
            CALL YMKSET(NMWD,NMSIZZ,IJCRS(1,J),I)
            NJCRS(J)=NJCRS(J)+1
 1600       CONTINUE
 1700     CONTINUE
 1800   CONTINUE
        CALL YMKSET(NMWD,NMSIZZ,IJCRS(1,NPTR),NPTR)
C
C ++++++ OPTIONAL WRITE(LOUT,OF CROSSING TABLES
C
C  SEARCH FOR TRKS WITHOUT CROSSINGS; SHRINK ARRAYS AND CROSSING
C  TABLE
C
        NSNGL=0
 1900   CONTINUE
        NMWD0=(NTRKS-1)/NMSIZZ+1
        NMWD=(NPTR-1)/NMSIZZ+1
C
        DO 1950 KT=1,NPTR
          CALL YMKCNT(NMWD,NMSIZZ,NPTR,IJCRS(1,KT),N)
          IF(N.LE.1) GO TO 1920
C
          IF(NSETR.LE.0) GO TO 1950
C
          IF(IENT.EQ.1) GO TO 1950
C
C     REQUIRE CROSSING WITH AT LEAST ONE TRACK OF EVERY SUBSET
          DO 1910 ISETR=1,NSETR
C     JCOMB=0
            CALL YMKZER(NMWD0,NMSIZZ,JCOMB(1))
C
            DO 1905 I=1,NPTR
              CALL YMKTST(NMWD,NMSIZZ,IJCRS(1,KT),I,LMRK)
              IF(LMRK) THEN
                CALL YMKSET(NMWD0,NMSIZZ,JCOMB(1),IPTR(I))
              ENDIF
C
 1905       CONTINUE
C
C     IF(IAND(JCOMB     ,YMKST(ISETR)).EQ.0) GO TO 1920
            CALL YMKAND(NMWD0,NMSIZZ,JCOMB(1),YMKST(1,ISETR),JCOMB(1),
     &        LZERO)
            IF(LZERO) THEN
C     NO TRACK OF REQUIRED SET
              GO TO 1920
            ENDIF
            CALL YMKCNT(NMWD0,NMSIZZ,NTRKS,JCOMB(1),N)
            IF(N.GE.NTREQ(ISETR)) GO TO 1910
C     TOO FEW TRACKS OF REQUIRED SET
            GO TO 1920
C
 1910     CONTINUE
          GO TO 1950
C
 1920     NSNGL=NSNGL+1
          KSNGL(NSNGL)=IPTR(KT)
C     NON CROSSING TRACK FOUND : SHRINK
          KTR=KT

          NPTR=NPTR-1
          DO 1960 IT=KTR,NPTR
            IPTR(IT)=IPTR(IT+1)
            CALL YMKCOP(MKDIMM,IJCRS(1,IT+1),IJCRS(1,IT))
 1960     CONTINUE
          DO 1970 JT=1,NPTR
            IPTRO(JT)=IPTR(JT)
            CALL YMKSHR(NMWD,NMSIZZ,IJCRS(1,JT),KTR)
 1970     CONTINUE
C
          GO TO 1900
C
 1950   CONTINUE
C
 1980   CONTINUE
C
        IF(NSNGL.LE.0) GO TO 1990
C
C  RECALCULATE NUMBER OF CROSSINGS
        DO 1985 I=1,NPTR
          CALL YMKCNT(NMWD,NMSIZZ,NPTR,IJCRS(1,I),NJCRS(I))
          NJCRS(I)=NJCRS(I)-1
 1985   CONTINUE
C
 1990   CONTINUE
C ============== END SET UP CROSS TABLE  ==============================
C
      ENDIF
C
      IF(IENT.EQ.1) RETURN
C
C
C*********************
C
C
C  SEARCH FOR ALL VERTEX POSSIBILITIES
C
      NVPOSS=0
C
C CHECK IF ENOUGH TRACKS ARE PRESENT FOR REQ. VTX MULT.
      IF(NPTR.LT.MINMU) RETURN
C
C  LOOP OVER ALL TRACK COMBINATIONS, REDUCING IN EACH STEP THE
C  NUMBER OF TRACKS IN VERTEX BY ONE. STOP IF ALL COMBINATIONS
C  WITH A GIVEN NUMBER OF TRACKS LEAD TO A VERTEX
C
      MAXMU=MXMUL
      IF(MAXMU.LT.2.OR.MAXMU.GT.NPTR) MAXMU=NPTR
C     REDUCE MAXMU IF NOT ENOUGH TRACKS WITH SUFFICIENT CROSSINGS
 2020 CONTINUE
      NNTR=0
      DO 2030 I=1,NPTR
        ITR=IPTR(I)
        IF(NJCRS(I).GE.(MAXMU-1)) THEN
          NNTR=NNTR+1
        ENDIF
 2030 CONTINUE
      IF(NNTR.LT.MAXMU) THEN
        MAXMU=MAXMU-1
        GO TO 2020
      ENDIF
C
      IMIS1=NPTR-MAXMU
      IMIS2=NPTR-MINMU
      DO 4000 IMIST=IMIS1,IMIS2
        IF( NVPOSS .LE. 0 .OR. MULIN .LT. 0 ) GOTO 2050
C     STOP SEARCH FOR LOW MULTIPLICITY VERTICES?
        IF((NPTR-IMIST).LE.(NTRV00(1)-MULIN)) GO TO 5000
 2050   CONTINUE
        IREQ=NPTR-IMIST
C
C     SELECT TRACKS WITH SUFFICIENT NUMBER OF CROSSINGS
        NJPTR=0
C
        CALL YMKZER(NMWD,NMSIZZ,MMSET(1))
C
        DO 2070 KTR=1,NPTR
          IF(NJCRS(KTR).GE.(IREQ-1)) THEN
            NJPTR=NJPTR+1
            IJTR(NJPTR)=KTR
            CALL YMKSET(NMWD,NMSIZZ,MMSET(1),KTR)
          ENDIF
 2070   CONTINUE
C
C     REQUIRE SUFFICIENT CROSSINGS WITHIN SET
 2080   CONTINUE
C
        IF(NJPTR.LT.IREQ) THEN
C     TOO FEW TRACKS WITH SUFFICIENT CROSSINGS
          GO TO 4000
        ENDIF
C
        DO 2090 JTR=1,NJPTR
          CALL YMKIDC(NMWD,NMSIZZ,NPTR,IJCRS(1,IJTR(JTR)),MMSET(1),NN)
          IF(NN.LT.IREQ) THEN
C     REMOVE TRACK FROM REDUCED SET
            NJPTR=NJPTR-1
            CALL YMKCLE(NMWD,NMSIZZ,MMSET(1),IJTR(JTR))
            DO 2085 KTR=JTR,NJPTR
              IJTR(KTR)=IJTR(KTR+1)
 2085       CONTINUE
            GO TO 2080
          ENDIF
C
 2090   CONTINUE
C
        JJTR(1)=0
        LCOMB=.TRUE.
 2100   CONTINUE
        CALL COMBI(JJTR,NJPTR,IREQ)
C     COMBINATIONS EXHAUSTED?
        IF(JJTR(1).EQ.0) GO TO 3800
        DO 2095 IR=1,IREQ
          IITR(IR)=IJTR(JJTR(IR))
 2095   CONTINUE
C     MARKER FOR USED TRACKS
        CALL YMKZER(MKDIMM,NMSIZZ,MCOMB(1))
        CALL YMKZER(MKDIMM,NMSIZZ,JCOMB(1))
        DO 2200 I=1,IREQ
          CALL YMKSET(NMWD,NMSIZZ,MCOMB(1),IITR(I))
          CALL YMKSET(NMWD0,NMSIZZ,JCOMB(1),IPTR(IITR(I)))
C
 2200   CONTINUE
C
C     AVOID EXCLUDED TRACK COMBINATIONS
        IF(NEXCL.LE.0) GO TO 2250
        DO 2240 IEXCL=1,NEXCL
          CALL YMKIDT(NMWD0,NMSIZZ,JCOMB(1),MRKEXC(1,IEXCL),LMRK)
          IF(LMRK) GO TO 3500
 2240   CONTINUE
 2250   CONTINUE
C
C     CHECK IF SAME COMBINATION WAS ALREADY SUCCESSFUL
        IF(NVPOSS.LE.0) GO TO 2500
        DO 2400 IVP=1,NVPOSS
          CALL YMKMIS(NMWD0,NMSIZZ,JCOMB(1),ITRV00(1,IVP),LMRK)
          IF(.NOT.LMRK) GO TO 3400
C
 2400   CONTINUE
 2500   CONTINUE
C
C  CHECK IF REQUIRED TRACKS ARE CONTAINED IN VERTEX SET
        IF(NSETR.LE.0) GO TO 2550
        DO 2530 ISETR=1,NSETR
          CALL YMKIDC(NMWD0,NMSIZZ,NTRKS,JCOMB(1),YMKST(1,ISETR),NN)
          IF(NN.LT.NTREQ(ISETR)) THEN
C     NOT ENOUGH TRACKS FROM SET
            GO TO 3300
          ENDIF
C
 2530   CONTINUE
C
 2550   CONTINUE
C
C
C  CHECK IF ALL COMBINATIONS OF PAIRS CROSS
        DO 2600 IR=1,IREQ
          II=IITR(IR)
          CALL YMKMIS(NMWD,NMSIZZ,MCOMB(1),IJCRS(1,II),LMRK)
          IF(LMRK) THEN
C     NOT ALL PAIRS CROSSING
            GO TO 3200
          ENDIF
C
 2600   CONTINUE
C
C  LOOK FOR VERTEX OF SELECTED TRACKS
C
        NH=0
        NU=0
        DO 2800 IR=1,IREQ
          II=IITR(IR)
          ITR=IPTR(II)
          IF(ITR.GT.MAXHLX) THEN
            NU=NU+1
            IXNUU(NU)=ITR-MAXHLX
          ELSE
            NH=NH+1
            IXHXX(NH)=ITR
          ENDIF
C
 2800   CONTINUE
        NV=NVPOSS+1
C
        LVAPP=LVAPC
        IF(NH.LT.2) LVAPP=.FALSE.
        CALL YFTVTR(NVX,NH,NU,LVAPP,VXIN,VVXIN,
     &    IXHXX,NSHX,NSVHX,HXI,VHXI,
     &    IXNUU,NSNU,NSVNU,TNU,VTNU,
     &    VTXMS0(1,NV),VARVMS(1,NV),CHIVMS(NV),IFAIL)
C
C  CHECK IF VERTEX IS GOOD: TOTAL CHISQ, CCC MAX. CHISQ OF TRACK
        NDF=2*IREQ+3*(NVX-1)
CGEL*****======= TEMPORARY CODING
        IF(NDF.GT.20) GO TO 2860
        XILIM=CONLM(NDF)
        GO TO 2870
 2860   CONTINUE
        XILIM=2.25*NDF
 2870   CONTINUE
C
        IF(IFAIL.NE.0) GO TO 3000
        IF(CHIVMS(NV).GT.XILIM) GO TO 3000
C  VERTEX FOUND
        NVPOSS=NVPOSS+1
        NTRV00(NVPOSS)=IREQ
        CALL YMKCOP(MKDIMM,JCOMB(1),ITRV00(1,NVPOSS))
C
C  TOO MANY VERTICES FOUND
        IF( NVPOSS .GE. 50 ) GO TO 5000
C
        GO TO 2100
C
C
C  FAILURES IN VERTEX SEARCH
 3000   CONTINUE
C  TOTAL CHISQ OF VERTEX TOO HIGH
        GO TO 3300
 3200   CONTINUE
C     NOT ALL PAIRS CROSSING
        GO TO 3300
C
 3500   CONTINUE
C     VERTEX EXCLUDED BY PHYSICS REASONING
        GO TO 3300
C
 3300   CONTINUE
        LCOMB=.FALSE.
        GO TO 2100
 3400   CONTINUE
C  COMBINATION ALREADY SUCCESSFUL
        GO TO 2100
C
 3800   CONTINUE
C     ALL COMBINATIONS WITH SAME NUMBER OF TRACKS COMPLETED
CXCX correction 14/12/89 G.Lutz
        IF(LCOMB) THEN
C     All combinations of tracks have lead to vertices
C     exclude tracks from further search if they cross only
C     with oter tracks of the considered sample
          DO 3900 JTR=1,NJPTR
            KTR=IJTR(JTR)
            CALL YMKMIS(NMWD,NMSIZZ,IJCRS(KTR,1),MMSET(1),LMRK)
            IF(LMRK) THEN
C     track accepted
            ELSE
C     reject track from further search
              NJCRS(KTR)=0
            ENDIF
 3900     CONTINUE
        ENDIF
 4000 CONTINUE
 5000 CONTINUE
C
      RETURN
      END
