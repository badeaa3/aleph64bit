      SUBROUTINE ASKUSI(IGCOD)                                          ASKUSI 2
C--------------------------------------------------------------------   ASKUSI 3
C Initialization                 G. Bonneaud February 1989.             ASKUSI 4
C                                "     "     June     1989.             ASKUSI 5
C (JETSET7.3                     AM. Lutz    February 1994              ASKUSI 6
C  also e+e- s channel final state  B Bloch  May      1996              BBL96051
C--------------------------------------------------------------------   ASKUSI 7
      INTEGER LMHLEN, LMHCOL, LMHROW  ,LBCS                             BCS    2
      PARAMETER (LMHLEN=2, LMHCOL=1, LMHROW=2, LBCS=1000)               BCS    3
C                                                                       BCS    4
      COMMON /BCS/   IW(LBCS )                                          BCS    5
      INTEGER IW                                                        BCS    6
      REAL RW(LBCS)                                                     BCS    7
      EQUIVALENCE (RW(1),IW(1))                                         BCS    8
C                                                                       BCS    9
      COMMON / IDPART/ IA1                                              IDPART 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / KGCOMM / ISTA,IDPR,ECMS,WEIT,VRTEX(4),TABL(40),NEVENT(8) KGCOMM 2
      PARAMETER (L1MST=200, L1PAR=200)                                  LUN7COM2
      PARAMETER (L2PAR=500, L2PARF=2000 )                               LUN7COM3
      PARAMETER (LJNPAR=4000)                                           LUN7COM4
      COMMON /LUDAT1/ MSTU(L1MST),PARU(L1PAR),MSTJ(L1MST),PARJ(L1PAR)   LUN7COM5
      COMMON /LUDAT2/ KCHG(L2PAR,3),PMAS(L2PAR,4),PARF(L2PARF),VCKM(4,4)LUN7COM6
      COMMON /LUDAT3/ MDCY(L2PAR,3),MDME(L2PARF,2),BRAT(L2PARF),        LUN7COM7
     &                KFDP(L2PARF,5)                                    LUN7COM8
      COMMON /LUDAT4/ CHAF(L2PAR)                                       LUN7COM9
      CHARACTER*8 CHAF                                                  LUN7CO10
      COMMON /LUJETS/ N7LU,K7LU(LJNPAR,5),P7LU(LJNPAR,5),V7LU(LJNPAR,5) LUN7CO11
C                                                                       LUN7CO12
      COMMON / TAUBRA / GAMPRT(30),JLIST(30),NCHAN                      TAUBRA 2
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            TAUKLE 2
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            TAUKLE 3
      DIMENSION E1(3),E2(3),SDVRT(3)                                    ASKUSI15
C                                                                       ASKUSI16
C Generator code (see KINLIB DOC)                                       ASKUSI17
C                                                                       ASKUSI18
      PARAMETER ( IGCO = 4007 )                                         ASKUSI19
      PARAMETER ( IVER = 104  )                                         BBL96052
C                                                                       ASKUSI21
      PARAMETER (LPDEC = 48)                                            ASKUSI22
      INTEGER NODEC(LPDEC)                                              ASKUSI23
      INTEGER ALTABL,ALRLEP                                             ASKUSI24
      EXTERNAL ALTABL ,ALRLEP                                           ASKUSI25
      CHARACTER TNAM*12                                                 ASKUSI26
C - # of words/row in bank with index ID                                BMACRO 2
      LCOLS(ID) = IW(ID+1)                                              BMACRO 3
C - # of rows in bank with index ID                                     BMACRO 4
      LROWS(ID) = IW(ID+2)                                              BMACRO 5
C - index of next row in the bank with index ID                         BMACRO 6
      KNEXT(ID) = ID + LMHLEN + IW(ID+1)*IW(ID+2)                       BMACRO 7
C - index of row # NRBOS in the bank with index ID                      BMACRO 8
      KROW(ID,NRBOS) = ID + LMHLEN + IW(ID+1)*(NRBOS-1)                 BMACRO 9
C - # of free words in the bank with index ID                           BMACRO10
      LFRWRD(ID) = ID + IW(ID) - KNEXT(ID)                              BMACRO11
C - # of free rows in the bank with index ID                            BMACRO12
      LFRROW(ID) = LFRWRD(ID) / LCOLS(ID)                               BMACRO13
C - Lth integer element of the NRBOSth row of the bank with index ID    BMACRO14
      ITABL(ID,NRBOS,L) = IW(ID+LMHLEN+(NRBOS-1)*IW(ID+1)+L)            BMACRO15
C - Lth real element of the NRBOSth row of the bank with index ID       BMACRO16
      RTABL(ID,NRBOS,L) = RW(ID+LMHLEN+(NRBOS-1)*IW(ID+1)+L)            BMACRO17
C                                                                       BMACRO18
C                                                                       ASKUSI28
C   Return generator code                                               ASKUSI29
C                                                                       ASKUSI30
      IGCOD= IGCO                                                       ASKUSI31
      INUT = IW(5)                                                      ASKUSI32
      IOUT = IW(6)                                                      ASKUSI33
      WRITE(IOUT,101) IGCOD ,IVER                                       ASKUSI34
 101  FORMAT(/,10X,'KORL07 - CODE NUMBER =',I4,                         ASKUSI35
     &       /,10X,'**************************',                        ASKUSI36
     &       /,10X,' SUBVERSION  :',I10 ,                               ASKUSI37
     &   /,10x,'Last mod = July   4 ,1996  ')                           BBL96071
C                                                                       ASKUSI39
C Input parameters for the generator (see subroutine koralz for commentsASKUSI40
C                                                                       ASKUSI41
      ENE    = 45.625                                                   ASKUSI42
      AMZ    = 91.18                                                    ASKUSI43
      AMTOP  = 100.                                                     ASKUSI44
      AMH    = 100.                                                     ASKUSI45
      AMNUTA = 0.001                                                    ASKUSI46
      AMNEUT = 0.010                                                    ASKUSI47
      SINW2  = 0.2293                                                   ASKUSI48
      GAMM   = 2.484                                                    ASKUSI49
      KEYGSW = 4                                                        ASKUSI50
      KEYRAD = 12                   ! warning  new default YFS3.0       ASKUSI51
      KEYWLB = 1                                                        ASKUSI52
      ITFIN  = 1                                                        ASKUSI53
      NNEUT  = 3                                                        ASKUSI54
      XK0    = 0.01                                                     ASKUSI55
      VVMIN  = 0.00001                                                  ASKUSI56
      VVMAX  = 1.00000                                                  ASKUSI57
      KEYYFS = 1000011                                                  ASKUSI58
C                                                                       ASKUSI59
C Lund7.3 identifier for electron = -11                                 ASKUSI60
C                                                                       ASKUSI61
      KFB =-11                                                          ASKUSI62
      DO 10 I = 1,3                                                     ASKUSI63
       E1(I) = 0.                                                       ASKUSI64
   10  E2(I) = 0.                                                       ASKUSI65
      JAK1   =  0                                                       ASKUSI66
      JAK2   =  0                                                       ASKUSI67
      ISPIN  =  1                                                       ASKUSI68
      ITDKRC =  1                                                       ASKUSI69
      XK0DEC =  .001                                                    ASKUSI70
      GV     =  1.                                                      ASKUSI71
      GA     = -1.                                                      ASKUSI72
C                                                                       ASKUSI73
C  The default values can be changed by the DATA CARD GKR7              ASKUSI74
C                                                                       ASKUSI75
      NAGKOR = NAMIND('GKR7')                                           ASKUSI76
      JGENE = IW(NAGKOR)                                                ASKUSI77
      IF(JGENE.NE.0) THEN                                               ASKUSI78
       AMZ    = RW(JGENE+1)                                             ASKUSI79
       AMTOP  = RW(JGENE+2)                                             ASKUSI80
       AMH    = RW(JGENE+3)                                             ASKUSI81
       AMNUTA = RW(JGENE+4)                                             ASKUSI82
       AMNEUT = RW(JGENE+5)                                             ASKUSI83
       SINW2  = RW(JGENE+6)                                             ASKUSI84
       GAMM   = RW(JGENE+7)                                             ASKUSI85
       KEYGSW = IW(JGENE+8)                                             ASKUSI86
       KEYRAD = IW(JGENE+9)                                             ASKUSI87
       KEYWLB = IW(JGENE+10)                                            ASKUSI88
       ITFIN  = IW(JGENE+11)                                            ASKUSI89
       NNEUT  = IW(JGENE+12)                                            ASKUSI90
       XK0    = RW(JGENE+13)                                            ASKUSI91
       VVMIN  = RW(JGENE+14)                                            ASKUSI92
       VVMAX  = RW(JGENE+15)                                            ASKUSI93
       KEYYFS = IW(JGENE+16)                                            ASKUSI94
      ENDIF                                                             ASKUSI95
C                                                                       ASKUSI96
C  by the DATA CARD GBEA                                                ASKUSI97
C                                                                       ASKUSI98
      NAGBEA = NAMIND('GBE7')                                           ASKUSI99
      JGBEA = IW(NAGBEA)                                                ASKUS100
      IF(JGBEA.NE.0) THEN                                               ASKUS101
       ENE   = RW(JGBEA+1)                                              ASKUS102
       KFB   = IW(JGBEA+2)                                              ASKUS103
       E1(1) = RW(JGBEA+3)                                              ASKUS104
       E1(2) = RW(JGBEA+4)                                              ASKUS105
       E1(3) = RW(JGBEA+5)                                              ASKUS106
       E2(1) = RW(JGBEA+6)                                              ASKUS107
       E2(2) = RW(JGBEA+7)                                              ASKUS108
       E2(3) = RW(JGBEA+8)                                              ASKUS109
      ENDIF                                                             ASKUS110
C                                                                       ASKUS111
C  by the DATA CARD GTAU                                                ASKUS112
C                                                                       ASKUS113
      NAGTAU = NAMIND('GTAU')                                           ASKUS114
      JGTAU = IW(NAGTAU)                                                ASKUS115
      IF(JGTAU.NE.0) THEN                                               ASKUS116
       JAK1   = IW(JGTAU+1)                                             ASKUS117
       JAK2   = IW(JGTAU+2)                                             ASKUS118
       ISPIN  = IW(JGTAU+3)                                             ASKUS119
       ITDKRC = IW(JGTAU+4)                                             ASKUS120
       XK0DEC = RW(JGTAU+5)                                             ASKUS121
       GV     = RW(JGTAU+6)                                             ASKUS122
       GA     = RW(JGTAU+7)                                             ASKUS123
      ENDIF                                                             ASKUS124
C                                                                       ASKUS125
C  All the parameters are stored in TABL(I)                             ASKUS126
C                                                                       ASKUS127
      vvmax  = 1.0 -(1.8/ENE)**2                                        ASKUS128
      TABL(1)  = AMZ                                                    ASKUS129
      TABL(2)  = AMTOP                                                  ASKUS130
      TABL(3)  = AMH                                                    ASKUS131
      TABL(4)  = AMNUTA                                                 ASKUS132
      TABL(5)  = AMNEUT                                                 ASKUS133
      TABL(6)  = SINW2                                                  ASKUS134
      TABL(7)  = GAMM                                                   ASKUS135
      TABL(8)  = KEYGSW                                                 ASKUS136
      TABL(9)  = KEYRAD                                                 ASKUS137
      TABL(10) = KEYWLB                                                 ASKUS138
      TABL(11) = ITFIN                                                  ASKUS139
      TABL(12) = NNEUT                                                  ASKUS140
      TABL(13) = XK0                                                    ASKUS141
      TABL(14) = VVMIN                                                  ASKUS142
      TABL(15) = VVMAX                                                  ASKUS143
      TABL(34) = KEYYFS                                                 ASKUS144
      TABL(16) = ENE                                                    ASKUS145
      TABL(17) = KFB                                                    ASKUS146
      TABL(18) = E1(1)                                                  ASKUS147
      TABL(19) = E1(2)                                                  ASKUS148
      TABL(20) = E1(3)                                                  ASKUS149
      TABL(21) = E2(1)                                                  ASKUS150
      TABL(22) = E2(2)                                                  ASKUS151
      TABL(23) = E2(3)                                                  ASKUS152
      TABL(24) = JAK1                                                   ASKUS153
      TABL(25) = JAK2                                                   ASKUS154
      TABL(26) = ISPIN                                                  ASKUS155
      TABL(27) = ITDKRC                                                 ASKUS156
      TABL(28) = XK0DEC                                                 ASKUS157
      TABL(29) = GV                                                     ASKUS158
      TABL(30) = GA                                                     ASKUS159
C                                                                       ASKUS160
C  Main vertex initialization                                           ASKUS161
C                                                                       ASKUS162
      SDVRT(1) = 0.0185                                                 ASKUS163
      SDVRT(2) = 0.0008                                                 ASKUS164
      SDVRT(3) = 1.02                                                   ASKUS165
      NASVRT = NAMIND('SVRT')                                           ASKUS166
      JSVRT = IW(NASVRT)                                                ASKUS167
      IF(JSVRT.NE.0) THEN                                               ASKUS168
       SDVRT(1) = RW(JSVRT+1)                                           ASKUS169
       SDVRT(2) = RW(JSVRT+2)                                           ASKUS170
       SDVRT(3) = RW(JSVRT+3)                                           ASKUS171
      ENDIF                                                             ASKUS172
      TABL(31) = SDVRT(1)                                               ASKUS173
      TABL(32) = SDVRT(2)                                               ASKUS174
      TABL(33) = SDVRT(3)                                               ASKUS175
C                                                                       ASKUS176
C  Fill the KPAR bank with the generator parameters                     ASKUS177
C                                                                       ASKUS178
      NCOL = 34                                                         ASKUS179
      NROW = 1                                                          ASKUS180
      JKPAR = ALTABL('KPAR',NCOL,NROW,TABL,'2I,(F)','C')                ASKUS181
c                                                                       ASKUS182
C  Fill RLEP bank                                                       ASKUS183
       IEBEAM = NINT(ENE *1000  )                                       ASKUS184
       JRLEP = ALRLEP(IEBEAM,'    ',0,0,0)                              ASKUS185
C                                                                       ASKUS186
C Initialization event counters                                         ASKUS187
C                                                                       ASKUS188
      DO 20 I = 1,8                                                     ASKUS189
       NEVENT(I) = 0                                                    ASKUS190
   20 CONTINUE                                                          ASKUS191
C                                                                       ASKUS192
C Initialization particle data                                          ASKUS193
C                                                                       ASKUS194
      CALL KXL7PA (IPART,IKLIN)                                         ASKUS195
      IF (IPART.LE.0 .OR. IKLIN.LE.0) THEN                              ASKUS196
       WRITE (IOUT,'(1X,''ASKUSI :error in PART or KLIN bank - STOP - ''ASKUS197
     &                 ,2I3)') IPART,IKLIN                              ASKUS198
       STOP                                                             ASKUS199
      ENDIF                                                             ASKUS200
C                                                                       ASKUS201
CBBL + aml  modify Lund masses according to input masses                ASKUS202
      PMAS(LUCOMP(16),1)= AMNUTA                                        ASKUS203
      PMAS(LUCOMP(23),1)= AMZ                                           ASKUS204
      PMAS(LUCOMP(25),1)= AMH                                           ASKUS205
      PMAS(LUCOMP( 6),1)= AMTOP                                         ASKUS206
      PMAS(LUCOMP( 7),1)= 150.                                          ASKUS207
      PMAS(LUCOMP( 8),1)= 300.                                          ASKUS208
      ia1=20213                                  !jetset7.3 code for a1 ASKUS209
      PMAS(LUCOMP(ia1),1)= 1.251                                        ASKUS210
      PMAS(LUCOMP(ia1),2)= 0.599                                        ASKUS211
CBBL    aml                                                             ASKUS212
c                                                                       ASKUS213
C   Make sure that masses and width in PART bank are consistent         ASKUS214
C function KGPART returns the ALEPH code corresponding to the LUND code ASKUS215
C required.                                                             ASKUS216
C Z0(lund code=23) top (lund code=6)  Higgs (lund code=25)              ASKUS217
C a1(lund code=20213)                                                   ASKUS218
      NAPAR = NAMIND('PART')                                            ASKUS219
      JPART = IW(NAPAR)                                                 ASKUS220
      IZPART = KGPART(23)                                               ASKUS221
      IF (IZPART.GT.0)  THEN                                            ASKUS222
        ZMAS = PMAS(LUCOMP(23),1)                                       ASKUS223
        KPART = KROW(JPART,IZPART)                                      ASKUS224
        RW(KPART+6)=ZMAS                                                ASKUS225
        IANTI = ITABL(JPART,IZPART,10)                                  ASKUS226
        IF (IANTI.NE.IZPART) THEN                                       ASKUS227
          KAPAR = KROW(JPART,IANTI)                                     ASKUS228
          RW(KAPAR+6)=ZMAS                                              ASKUS229
        ENDIF                                                           ASKUS230
      ENDIF                                                             ASKUS231
      ITPART = KGPART(6)                                                ASKUS232
      IF (ITPART.GT.0)  THEN                                            ASKUS233
        ZMAS = PMAS(LUCOMP( 6),1)                                       ASKUS234
        KPART = KROW(JPART,ITPART)                                      ASKUS235
        RW(KPART+6)=ZMAS                                                ASKUS236
        IANTI = ITABL(JPART,ITPART,10)                                  ASKUS237
        IF (IANTI.NE.ITPART) THEN                                       ASKUS238
          KAPAR = KROW(JPART,IANTI)                                     ASKUS239
          RW(KAPAR+6)=ZMAS                                              ASKUS240
        ENDIF                                                           ASKUS241
      ENDIF                                                             ASKUS242
      IHPART = KGPART(25)                                               ASKUS243
      IF (IHPART.GT.0)  THEN                                            ASKUS244
        ZMAS = PMAS(LUCOMP(25),1)                                       ASKUS245
        KPART = KROW(JPART,IHPART)                                      ASKUS246
        RW(KPART+6)=ZMAS                                                ASKUS247
        IANTI = ITABL(JPART,IHPART,10)                                  ASKUS248
        IF (IANTI.NE.IHPART) THEN                                       ASKUS249
          KAPAR = KROW(JPART,IANTI)                                     ASKUS250
          RW(KAPAR+6)=ZMAS                                              ASKUS251
        ENDIF                                                           ASKUS252
      ENDIF                                                             ASKUS253
                                                                        ASKUS254
      IHPART = KGPART(20213)                                            ASKUS255
      IF (IHPART.GT.0)  THEN                                            ASKUS256
        ZMAS = PMAS(LUCOMP(20213),1)                                    ASKUS257
        ZWID = PMAS(LUCOMP(20213),2)                                    ASKUS258
        KPART = KROW(JPART,IHPART)                                      ASKUS259
        RW(KPART+6)=ZMAS                                                ASKUS260
        RW(KPART+9)=ZWID                                                ASKUS261
        IANTI = ITABL(JPART,IHPART,10)                                  ASKUS262
        IF (IANTI.NE.IHPART) THEN                                       ASKUS263
          KAPAR = KROW(JPART,IANTI)                                     ASKUS264
          RW(KAPAR+6)=ZMAS                                              ASKUS265
          RW(KAPAR+9)=ZWID                                              ASKUS266
        ENDIF                                                           ASKUS267
      ENDIF                                                             ASKUS268
C                                                                       ASKUS269
C                                                                       ASKUS270
C   Inhibit decays                                                      ASKUS271
C                                                                       ASKUS272
      MXDEC=KNODEC(NODEC,LPDEC)                                         ASKUS273
      MXDEC=MIN(MXDEC,LPDEC)                                            ASKUS274
      IF (MXDEC.GT.0) THEN                                              ASKUS275
         DO 50 I=1,MXDEC                                                ASKUS276
            IF (NODEC(I).GT.0) THEN                                     ASKUS277
               JIDB = NLINK('MDC1',NODEC(I))                            ASKUS278
               IF (JIDB .EQ. 0) MDCY(LUCOMP(NODEC(I)),1) = 0            ASKUS279
            ENDIF                                                       ASKUS280
   50    CONTINUE                                                       ASKUS281
      ENDIF                                                             ASKUS282
C                                                                       ASKUS283
C  Generator initialization                                             ASKUS284
C                                                                       ASKUS285
      LENTRY = 1                                                        ASKUS286
      CALL KORL04(LENTRY)                                               ASKUS287
C                                                                       ASKUS288
C    possibly update branching ratios  with card GKBR                   BBL95113
C                                                                       BBL95114
      NAGKBR = NAMIND('GKBR')                                           BBL95115
      JGKBR = IW(NAGKBR)                                                BBL95116
      IF(JGKBR.NE.0) THEN                                               BBL95117
C check consitency of length                                            BBL95118
        NLEN = IW(JGKBR)                                                BBL95119
        IF ( NLEN .NE.NCHAN+4 ) THEN                                    BBL95110
            WRITE (IW(6),'(1X,'' Inconsistent number of Brs should be'',BBL95111
     $                    I5,'' is '',I5)') NCHAN,NLEN-4                BBL95112
            CALL EXIT                                                   BBL95113
        ENDIF                                                           BBL95114
        BRA1   = RW(JGKBR+1)                                            BBL95115
        BRK0   = RW(JGKBR+2)                                            BBL95116
        BRK0B  = RW(JGKBR+3)                                            BBL95117
        BRKS   = RW(JGKBR+4)                                            BBL95118
        DO 51 I = 1,NCHAN                                               BBL95119
           GAMPRT(I) = RW(JGKBR+4+I)                                    BBL95120
 51     CONTINUE                                                        BBL95121
        IF ( GAMPRT(1).NE.1.) THEN                                      BBL95122
         DO 52 I = 1, NCHAN                                             BBL95123
           GAMPRT(I) = GAMPRT(I)/GAMPRT(1)                              BBL95124
 52      CONTINUE                                                       BBL95125
        ENDIF                                                           BBL95126
      ENDIF                                                             BBL95127
C                                                                       BBL95128
C   Store the version used in the job and the branching ratios in       ASKUS289
C   header bank  KORL                                                   ASKUS290
      NCOL = NCHAN+5                                                    ASKUS291
      NROW = 1                                                          ASKUS292
      TABL(1) = IVER                                                    ASKUS293
      TABL(2) = BRA1                                                    ASKUS294
      TABL(3) = BRK0                                                    ASKUS295
      TABL(4) = BRK0B                                                   ASKUS296
      TABL(5) = BRKS                                                    ASKUS297
      DO 57 IBR = 1,NCHAN                                               ASKUS298
          TABL(5+IBR) = GAMPRT(IBR)                                     ASKUS299
 57   CONTINUE                                                          ASKUS300
      JKORL = ALTABL('KORL',NCOL,NROW,TABL,'2I,(F)','C')                ASKUS301
                                                                        ASKUS302
C                                                                       ASKUS303
C  Print PART and KPAR banks                                            ASKUS304
C                                                                       ASKUS305
c     CALL LULIST(12)                                                   ASKUS306
c     CALL PRPART                                                       ASKUS307
      CALL PRTABL('RLEP',0)                                             ASKUS308
      CALL PRTABL('KPAR',0)                                             ASKUS309
      CALL PRTABL('KORL',0)                                             ASKUS310
C                                                                       ASKUS311
      RETURN                                                            ASKUS312
      END                                                               ASKUS313
      SUBROUTINE ASKUSE (IDP,IST,NTRK,NVRT,ECM,WEI)                     ASKUSE 2
C --------------------------------------------------------------------  ASKUSE 3
C Generation                     G. Bonneaud August, October 1988.      ASKUSE 4
C                                G. Bonneaud February 1989.             ASKUSE 5
C                                "     "     June     1989.             ASKUSE 6
C --------------------------------------------------------------------  ASKUSE 7
C--------------------------------------------------------------------   ASKUSE 8
C     input     : none                                                  ASKUSE 9
C                                                                       ASKUSE10
C     output    : 6 arguments                                           ASKUSE11
C          IDP    : process identification                              ASKUSE12
C          IST    : status flag ( 0 means ok)                           ASKUSE13
C          NTRK   : number of tracks generated and kept                 ASKUSE14
C          NVRT   : number of vertices generated                        ASKUSE15
C          ECM    : center of mass energy for the event                 ASKUSE16
C          WEI    : event weight always equal to 1                      ASKUSE17
C--------------------------------------------------------------------   ASKUSE18
      INTEGER LMHLEN, LMHCOL, LMHROW  ,LBCS                             BCS    2
      PARAMETER (LMHLEN=2, LMHCOL=1, LMHROW=2, LBCS=1000)               BCS    3
C                                                                       BCS    4
      COMMON /BCS/   IW(LBCS )                                          BCS    5
      INTEGER IW                                                        BCS    6
      REAL RW(LBCS)                                                     BCS    7
      EQUIVALENCE (RW(1),IW(1))                                         BCS    8
C                                                                       BCS    9
      COMMON / KGCOMM / ISTA,IDPR,ECMS,WEIT,VRTEX(4),TABL(40),NEVENT(8) KGCOMM 2
      PARAMETER (L1MST=200, L1PAR=200)                                  LUN7COM2
      PARAMETER (L2PAR=500, L2PARF=2000 )                               LUN7COM3
      PARAMETER (LJNPAR=4000)                                           LUN7COM4
      COMMON /LUDAT1/ MSTU(L1MST),PARU(L1PAR),MSTJ(L1MST),PARJ(L1PAR)   LUN7COM5
      COMMON /LUDAT2/ KCHG(L2PAR,3),PMAS(L2PAR,4),PARF(L2PARF),VCKM(4,4)LUN7COM6
      COMMON /LUDAT3/ MDCY(L2PAR,3),MDME(L2PARF,2),BRAT(L2PARF),        LUN7COM7
     &                KFDP(L2PARF,5)                                    LUN7COM8
      COMMON /LUDAT4/ CHAF(L2PAR)                                       LUN7COM9
      CHARACTER*8 CHAF                                                  LUN7CO10
      COMMON /LUJETS/ N7LU,K7LU(LJNPAR,5),P7LU(LJNPAR,5),V7LU(LJNPAR,5) LUN7CO11
C                                                                       LUN7CO12
      COMMON / TAUHEL / HELT1,HELT2                                     TAUHEL 2
      REAL*4 HELT1,HELT2                                                TAUHEL 3
      DIMENSION E1(3),E2(3)                                             ASKUSE23
      PARAMETER (LWP = 4)                                               ASKUSE24
C                                                                       ASKUSE25
      IST  = 0                                                          ASKUSE26
      IDP  = 0                                                          ASKUSE27
      ECM  = 0.                                                         ASKUSE28
      WEI  = 0.                                                         ASKUSE29
C                                                                       ASKUSE30
C  Generate primary vertex                                              ASKUSE31
C                                                                       ASKUSE32
      CALL RANNOR (RN1,RN2)                                             ASKUSE33
      CALL RANNOR (RN3,DUM)                                             ASKUSE34
      VRTEX(1) = RN1*TABL(31)                                           ASKUSE35
      VRTEX(2) = RN2*TABL(32)                                           ASKUSE36
      VRTEX(3) = RN3*TABL(33)                                           ASKUSE37
      VRTEX(4) = 0.                                                     ASKUSE38
C                                                                       ASKUSE39
C  Event generation                                                     ASKUSE40
C                                                                       ASKUSE41
      LENTRY = 2                                                        ASKUSE42
      NEVENT(1) = NEVENT(1) + 1                                         ASKUSE43
      CALL KORL04(LENTRY)                                               ASKUSE44
      IDP  = IDPR                                                       ASKUSE45
      ECM  = ECMS                                                       ASKUSE46
      WEI  = WEIT                                                       ASKUSE47
      IST  = ISTA                                                       ASKUSE48
      IF(IST.NE.0) THEN                                                 ASKUSE49
       NEVENT(4) = NEVENT(4) + 1                                        ASKUSE50
       GO TO 20                                                         ASKUSE51
      ENDIF                                                             ASKUSE52
C  decay remaining pi0's                                                ASKUSE53
      CALL LUEXEC                                                       ASKUSE54
C  Book all banks                                                       ASKUSE55
C                                                                       ASKUSE56
      CALL KXL7AL(VRTEX,ISTX,NVRT,NTRK)                                 BBL95083
      IST = ISTX                                                        BBL95084
      IF(IST.NE.0) THEN                                                 ASKUSE59
       NEVENT(5) = NEVENT(5) + 1                                        ASKUSE60
       GO TO 20                                                         ASKUSE61
      ENDIF                                                             ASKUSE62
C                                                                       ASKUSE63
C  Now book the polarization bank 'KPOL' if necessary                   ASKUSE64
C                                                                       ASKUSE65
      E1(3) = TABL(20)                                                  ASKUSE66
      E2(3) = TABL(23)                                                  ASKUSE67
      ISPIN = TABL(26)                                                  ASKUSE68
      IF(E1(3).NE.0..OR.E2(3).NE.0..OR.ISPIN.EQ.1) THEN                 ASKUSE69
       NPART = 4                                                        ASKUSE70
       LE = LMHLEN + NPART*LWP                                          ASKUSE71
       CALL AUBOS('KPOL',0,LE,JKPOL,IGARB)                              ASKUSE72
       CALL BLIST(IW,'E+','KPOL')                                       ASKUSE73
       CALL BKFMT('KPOL','2I,(I,3F)')                                   ASKUSE74
       IF(JKPOL.GT.0) THEN                                              ASKUSE75
        IW(JKPOL+LMHCOL) = LWP                                          ASKUSE76
        IW(JKPOL+LMHROW) = NPART                                        ASKUSE77
        IW(JKPOL+LMHLEN+1) = -1                                         ASKUSE78
        RW(JKPOL+LMHLEN+2) = TABL(18)                                   ASKUSE79
        RW(JKPOL+LMHLEN+3) = TABL(19)                                   ASKUSE80
        RW(JKPOL+LMHLEN+4) = TABL(20)                                   ASKUSE81
        IW(JKPOL+LMHLEN+LWP+1) = -2                                     ASKUSE82
        RW(JKPOL+LMHLEN+LWP+2) = TABL(21)                               ASKUSE83
        RW(JKPOL+LMHLEN+LWP+3) = TABL(22)                               ASKUSE84
        RW(JKPOL+LMHLEN+LWP+4) = -TABL(23)                              ASKUSE85
        IW(JKPOL+LMHLEN+2*LWP+1) = 1                                    ASKUSE86
        RW(JKPOL+LMHLEN+2*LWP+2) = 0.                                   ASKUSE87
        RW(JKPOL+LMHLEN+2*LWP+3) = 0.                                   ASKUSE88
        RW(JKPOL+LMHLEN+2*LWP+4) = HELT1                                ASKUSE89
        IW(JKPOL+LMHLEN+3*LWP+1) = 2                                    ASKUSE90
        RW(JKPOL+LMHLEN+3*LWP+2) = 0.                                   ASKUSE91
        RW(JKPOL+LMHLEN+3*LWP+3) = 0.                                   ASKUSE92
        RW(JKPOL+LMHLEN+3*LWP+4) = HELT2                                ASKUSE93
       ELSE                                                             ASKUSE94
        IST = 1                                                         ASKUSE95
        NEVENT(6) = NEVENT(6) + 1                                       ASKUSE96
       ENDIF                                                            ASKUSE97
      ENDIF                                                             ASKUSE98
C                                                                       ASKUSE99
C  Event counters                                                       ASKUS100
C                                                                       ASKUS101
      IF(IST.EQ.0) THEN                                                 ASKUS102
       NEVENT(2) = NEVENT(2) + 1                                        ASKUS103
       DO 10 IP = 1,N7LU                                                ASKUS104
        IF(K7LU(Ip,2).EQ.22) then                                       ASKUS105
         NEVENT(8) = NEVENT(8) + 1                                      ASKUS106
         GO TO 30                                                       ASKUS107
        ENDIF                                                           ASKUS108
   10  CONTINUE                                                         ASKUS109
       NEVENT(7) = NEVENT(7) + 1                                        ASKUS110
      ENDIF                                                             ASKUS111
   20 IF(IST.NE.0) NEVENT(3) = NEVENT(3) + 1                            ASKUS112
C                                                                       ASKUS113
   30 RETURN                                                            ASKUS114
      END                                                               ASKUS115
      SUBROUTINE USCJOB                                                 USCJOB 2
C --------------------------------------------------------------------  USCJOB 3
C End of generation              G. Bonneaud August, October 1988.      USCJOB 4
C --------------------------------------------------------------------  USCJOB 5
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / KGCOMM / ISTA,IDPR,ECMS,WEIT,VRTEX(4),TABL(40),NEVENT(8) KGCOMM 2
C                                                                       USCJOB 8
C End of generation                                                     USCJOB 9
C                                                                       USCJOB10
      LENTRY = 3                                                        USCJOB11
      CALL KORL04(LENTRY)                                               USCJOB12
C                                                                       USCJOB13
C Print event counters                                                  USCJOB14
C                                                                       USCJOB15
       WRITE(IOUT,101)                                                  USCJOB16
  101  FORMAT(//20X,'EVENTS STATISTICS',                                USCJOB17
     &         /20X,'*****************')                                USCJOB18
       WRITE(IOUT,102) NEVENT(1),NEVENT(2),NEVENT(3),                   USCJOB19
     &                 NEVENT(7),NEVENT(8)                              USCJOB20
  102  FORMAT(/5X,'# OF GENERATED EVENTS                      = ',I10,  USCJOB21
     &        /5X,'# OF ACCEPTED  EVENTS                      = ',I10,  USCJOB22
     &        /5X,'# OF REJECTED  EVENTS (ISTA # 0 in ASKUSE) = ',I10,  USCJOB23
     &        /5X,'# OF EVENTS WITHOUT PHOTON                 = ',I10,  USCJOB24
     &        /5X,'# OF EVENTS WITH PHOTON                    = ',I10)  USCJOB25
       WRITE(IOUT,103)                                                  USCJOB26
  103  FORMAT(//20X,'ERRORS STATISTICS',                                USCJOB27
     &         /20X,'*****************')                                USCJOB28
       WRITE(IOUT,104) NEVENT(4),NEVENT(5),NEVENT(6)                    USCJOB29
  104  FORMAT(/10X,'ISTA # 0 FROM KORL04        # OF REJECT = ',I10,    USCJOB30
     &        /10X,'ISTA # 0 FROM KXLUAL        # OF REJECT = ',I10,    USCJOB31
     &        /10X,'ISTA # 0 FROM JKPOL         # OF REJECT = ',I10)    USCJOB32
C                                                                       USCJOB33
      RETURN                                                            USCJOB34
      END                                                               USCJOB35
      SUBROUTINE KORL04(LENTRY)                                         KORL04 2
C --------------------------------------------------------------------  KORL04 3
C Korl07                                                                KORL04 4
C                                                                       KORL04 5
C --------------------------------------------------------------------  KORL04 6
C                                                                       KORL04 7
C     MONTE CARLO EVENT GENERATOR FOR THE PROCESSES                     KORL04 8
C                                                                       KORL04 9
C         E+(PB1) E-(PB2)   ---->  TAU+(QP) TAU-(QM)                    KORL0410
C                                                                       KORL0411
C     AND                                                               KORL0412
C                                                                       KORL0413
C         E+(PB1) E-(PB2)   ---->  TAU+(QP) TAU-(QM) PHOTON(PH)         KORL0414
C                                                                       KORL0415
C                                                                       KORL0416
C  THE INPUT QUANTITIES ARE                                             KORL0417
C ENE    ENERGY OF A BEAM (GEV)                                         KORL0418
C AMZ    Z0    MASS (GEV)                                               KORL0419
C AMTOP  TOP   MASS (GEV)                                               KORL0420
C AMH    HIGGS MASS (GEV)                                               KORL0421
C AMNUTA NEUTRINO TAU MASS (GEV)                                        KORL0422
C E1     =  SPIN POLARIZATION VECTOR FOR THE FIRST BEAM.                KORL0423
C E2     =  SPIN POLARIZATION VECTOR FOR THE SECOND BEAM,               KORL0424
C           BOTH IN THE CORRESPONDING BEAM PARTICLE REST FRAME          KORL0425
C           AND IN BOTH CASES THIRD AXIS DIRECTED ALONG FIRST BEAM,     KORL0426
C           I.E. EE1(3) AND -EE2(3) ARE HELICITIES.                     KORL0427
C ISPIN  =  0,1  SPIN EFFECTS IN DECAY SWITCHED OFF,ON.                 KORL0428
C INRAN  =  INITIALISATION CONSTANT FOR RAND. NUM. GEN. RNF100, POSITIVEKORL0429
C KEYGSW,   IMPLEMENTATION LEVEL OF GLASHOW-SALAM-WEINBERG MODEL:       KORL0430
C        =  0,  N0 Z0, ONLY PHOTON EXCHANGE, NO Z0, NO VAC. POL.,       KORL0431
C        =  1,  PHOTON AND Z0, NO VACUUM POLARISATIONS,                 KORL0432
C        =  2,  PHOTON AND Z0, GSW VACUUM POLARISATIONS INCLUDED,       KORL0433
C        =  3,  ALL GSW CORRECTIONS INCLUDED                            KORL0434
C KEYRAD =  0,  NO QED BREMSSTRAHLUNG,                                  KORL0435
C        =  1,  WITH QED BREMSSTRAHLUNG.                                KORL0436
C JAK1,JAK2, DECAY TYPE FOR TAU+ AND TAU-.                              KORL0437
C            DECAY MODES INCLUDED ARE:                                  KORL0438
C            JAK  =  1  ELECTRON DECAY                                  KORL0439
C                 =  2  MU  DECAY,                                      KORL0440
C                 =  3  PI DECAY ,                                      KORL0441
C                 =  4  RHO DECAY,                                      KORL0442
C                 =  5  A1  DECAY,                                      KORL0443
C                 =  0  INCLUSIVE:  JAK=1,2,3,4,5                       KORL0444
C                 = -1  NO DECAY.                                       KORL0445
C ITFIN  =  1  TAU PAIR PRODUCTION,                                     KORL0446
C        =  2  MUON PAIR PRODUCTION.                                    KORL0447
C KFB =11,-11 FLAVOUR CODE OF FIRST BEAM, KFB=11 FOR ELECTRON.          KORL0448
C ITDKRC=0 DECAY OF TAU USING TAUOLA,                                   KORL0449
C       >0 RESERVED FOR FUTURE DEVELOPEMENT.                            KORL0450
C GV AND GA ARE COUPLING CONSTANTS OF W-BOSON TO TAU LEPTON,            KORL0451
C       GV=1,GA=-1 REPRESENT THE STANDARD V-A COUPLING.                 KORL0452
C                                                                       KORL0453
C --------------------------------------------------------------------  KORL0454
      INTEGER LMHLEN, LMHCOL, LMHROW  ,LBCS                             BCS    2
      PARAMETER (LMHLEN=2, LMHCOL=1, LMHROW=2, LBCS=1000)               BCS    3
C                                                                       BCS    4
      COMMON /BCS/   IW(LBCS )                                          BCS    5
      INTEGER IW                                                        BCS    6
      REAL RW(LBCS)                                                     BCS    7
      EQUIVALENCE (RW(1),IW(1))                                         BCS    8
C                                                                       BCS    9
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / KGCOMM / ISTA,IDPR,ECMS,WEIT,VRTEX(4),TABL(40),NEVENT(8) KGCOMM 2
      COMMON / TAUHEL / HELT1,HELT2                                     TAUHEL 2
      REAL*4 HELT1,HELT2                                                TAUHEL 3
C                                                                       KORL0460
      DIMENSION PB1(4),PB2(4),XPAR(40)                                  KORL0461
      DIMENSION E1(3),E2(3)                                             KORL0462
      INTEGER NPAR(40)                                                  KORL0463
      INTEGER ALTABL                                                    KORL0464
      EXTERNAL ALTABL                                                   KORL0465
C                                                                       KORL0466
C                                                                       KORL0467
C  INITIALIZATION            *********************                      KORL0468
C                                                                       KORL0469
      IF(LENTRY.EQ.1) THEN                                              KORL0470
       NADEB = NAMIND('DEBU')                                           KORL0471
       JDEBU = IW(NADEB)                                                KORL0472
       IF(JDEBU.NE.0) THEN                                              KORL0473
        IDB1 = IW(JDEBU+1)                                              KORL0474
        IDB2 = IW(JDEBU+2)                                              KORL0475
       ENDIF                                                            KORL0476
C                                                                       KORL0477
C Initialization of XPAR and NPAR tables : generator's parameters       KORL0478
C                                                                       KORL0479
       NPAR(1)  = TABL(26)                                              KORL0480
       NPAR(2)  = 0.                                                    KORL0481
       NPAR(3)  = TABL(8)                                               KORL0482
       NPAR(4)  = TABL(9)                                               KORL0483
       NPAR(5)  = TABL(24)                                              KORL0484
       NPAR(6)  = TABL(25)                                              KORL0485
       NPAR(7)  = TABL(11)                                              KORL0486
       NPAR(8)  = TABL(27)                                              KORL0487
       NPAR(9)  = TABL(10)                                              KORL0488
       NPAR(11) = TABL(12)                                              KORL0489
       NPAR(12) = TABL(34)                                              KORL0490
       XPAR(1)  = TABL(1)                                               KORL0491
       XPAR(2)  = TABL(3)                                               KORL0492
       XPAR(3)  = TABL(2)                                               KORL0493
       XPAR(4)  = TABL(29)                                              KORL0494
       XPAR(5)  = TABL(30)                                              KORL0495
       XPAR(6)  = TABL(6)                                               KORL0496
       XPAR(7)  = TABL(7)                                               KORL0497
       XPAR(8)  = TABL(4)                                               KORL0498
       XPAR(9)  = TABL(5)                                               KORL0499
       XPAR(11) = TABL(13)                                              KORL0100
       XPAR(12) = TABL(14)                                              KORL0101
       XPAR(13) = TABL(15)                                              KORL0102
       XPAR(14) = TABL(28)                                              KORL0103
       DO 1 I = 1,3                                                     KORL0104
        E1(I) = TABL(17+I)                                              KORL0105
    1   E2(I) = TABL(20+I)                                              KORL0106
       PB1(1)  = 0.                                                     KORL0107
       PB1(2)  = 0.                                                     KORL0108
       PB1(3)  = TABL(16)                                               KORL0109
       PB1(4)  = TABL(16)                                               KORL0110
       DO 2 I=1,3                                                       KORL0111
    2  PB2(I) = -PB1(I)                                                 KORL0112
       PB2(4) =  PB1(4)                                                 KORL0113
       KFB    =  TABL(17)                                               KORL0114
C                                                                       KORL0115
C KORALZ initialization step                                            KORL0116
C                                                                       KORL0117
       NMODE  = -1                                                      KORL0118
       CALL KORALZ(NMODE,KFB,PB1,E1,-KFB,PB2,E2,XPAR,NPAR)              KORL0119
C                                                                       KORL0120
C Booking histos                                                        KORL0121
C                                                                       KORL0122
       ITFIN = NPAR(7)                                                  KORL0123
       CALL BUKERD(NMODE,ITFIN)                                         KORL0124
C                                                                       KORL0125
       RETURN                                                           KORL0126
      ENDIF                                                             KORL0127
C                                                                       KORL0128
C  EVENT GENERATION          *********************                      KORL0129
C                                                                       KORL0130
      IF(LENTRY.EQ.2) THEN                                              KORL0131
C                                                                       KORL0132
C Event generation                                                      KORL0133
C                                                                       KORL0134
       NMODE = 0                                                        KORL0135
       CALL KORALZ(NMODE,KFB,PB1,E1,-KFB,PB2,E2,XPAR,NPAR)              KORL0136
C                                                                       KORL0137
c Converts /HEPEVT/ common to LUND7.3 commons                           KORL0138
       call LUHEPC(2)                                                   KORL0139
c                                                                       KORL0140
       ECMS = 2.*TABL(16)                                               KORL0141
       WEIT = 1.                                                        KORL0142
       ISTA = 0                                                         KORL0143
C                                                                       KORL0144
C Update process code                                                   KORL0145
C                                                                       KORL0146
       IF(ITFIN.EQ.1) THEN                                              KORL0147
        ID1 = JAKP                                                      KORL0148
        ID2 = JAKM                                                      KORL0149
        IDPR = 100*ID1+ID2                                              KORL0150
        XPR = FLOAT(IDPR)                                               KORL0151
        if(helt1.gt.0)                                                  KORL0152
     &  CALL HFILL(10000,FLOAT(ID1)+.1,FLOAT(ID2)+.1,1.)                KORL0153
        if(helt1.lt.0)                                                  KORL0154
     &  CALL HFILL(20000,FLOAT(ID1)+.1,FLOAT(ID2)+.1,1.)                KORL0155
       ELSE                                                             KORL0156
        IDPR= ITFIN                                                     KORL0157
       ENDIF                                                            KORL0158
C                                                                       KORL0159
C Print first events depending of DEBUG option                          KORL0160
C                                                                       KORL0161
       IF(NEVENT(1).GE.IDB1.AND.NEVENT(1).LE.IDB2) THEN                 KORL0162
        CALL DUMPL8                                                     KORL0163
        CALL LULIST(2)                                                  KORL0164
       ENDIF                                                            KORL0165
C                                                                       KORL0166
C Fill histos                                                           KORL0167
C                                                                       KORL0168
       CALL BUKERD(NMODE,ITFIN)                                         KORL0169
C                                                                       KORL0170
       RETURN                                                           KORL0171
      ENDIF                                                             KORL0172
C                                                                       KORL0173
C  END OF GENERATION         *********************                      KORL0174
C                                                                       KORL0175
      IF(LENTRY.EQ.3) THEN                                              KORL0176
C                                                                       KORL0177
C Generator end                                                         KORL0178
C                                                                       KORL0179
       NMODE = 1                                                        KORL0180
       NPAR1 = 0                                                        KORL0181
       NPAR2 = 0                                                        KORL0182
       CALL KORALZ(NMODE,NPAR1,PB1,E1,NPAR2,PB2,E2,XPAR,NPAR)           KORL0183
C                                                                       KORL0184
C Print histos                                                          KORL0185
C                                                                       KORL0186
       CALL BUKERD(NMODE,ITFIN)                                         KORL0187
      ENDIF                                                             KORL0188
C                                                                       KORL0189
      RETURN                                                            KORL0190
      END                                                               KORL0191
      SUBROUTINE BUKERD(IMOD,ITFIN)                                     BUKERD 2
C --------------------------------------------------------------------  BUKERD 3
C Book histos                    G. Bonneaud August, October 1988.      BUKERD 4
C                    modified by A.M. Lutz    October 1988.             BUKERD 5
C                                G. Bonneaud February 1989.             BUKERD 6
C                                AM.Lutz     February 1989.             BUKERD 7
C                                 B Bloch    May      1996              BBL96054
C --------------------------------------------------------------------  BUKERD 8
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      PARAMETER (L1MST=200, L1PAR=200)                                  LUN7COM2
      PARAMETER (L2PAR=500, L2PARF=2000 )                               LUN7COM3
      PARAMETER (LJNPAR=4000)                                           LUN7COM4
      COMMON /LUDAT1/ MSTU(L1MST),PARU(L1PAR),MSTJ(L1MST),PARJ(L1PAR)   LUN7COM5
      COMMON /LUDAT2/ KCHG(L2PAR,3),PMAS(L2PAR,4),PARF(L2PARF),VCKM(4,4)LUN7COM6
      COMMON /LUDAT3/ MDCY(L2PAR,3),MDME(L2PARF,2),BRAT(L2PARF),        LUN7COM7
     &                KFDP(L2PARF,5)                                    LUN7COM8
      COMMON /LUDAT4/ CHAF(L2PAR)                                       LUN7COM9
      CHARACTER*8 CHAF                                                  LUN7CO10
      COMMON /LUJETS/ N7LU,K7LU(LJNPAR,5),P7LU(LJNPAR,5),V7LU(LJNPAR,5) LUN7CO11
C                                                                       LUN7CO12
      COMMON / UTIL4 / AQP(4),AQM(4),APH(4)                             UTIL4  2
      REAL*4           AQP   ,AQM   ,APH                                UTIL4  3
      COMMON / IDFC  / IDFF                                             IDFC   2
      COMMON / KGCOMM / ISTA,IDPR,ECMS,WEIT,VRTEX(4),TABL(40),NEVENT(8) KGCOMM 2
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / TAUHEL / HELT1,HELT2                                     TAUHEL 2
      REAL*4 HELT1,HELT2                                                TAUHEL 3
c     COMMON /PAWC/ HB(100000)                                          BUKERD16
      DIMENSION PVIS(2)                                                 BUKERD17
c                                                                       BUKERD18
      dimension qp(5,10,2),nch(2),nneu(2),ipfori(2),xlam(4)             BUKERD19
      real*8 lambda                                                     BUKERD20
      lambda(x,y,z) = x**2+y**2+z**2-2*x*y-2*x*z-2*y*z                  BUKERD21
                                                                        BUKERD22
C                                                                       BUKERD23
C     ====================                                              BUKERD24
C                                                                       BUKERD25
      IF(IMOD.EQ.-1) THEN                                               BUKERD26
C                                                                       BUKERD27
      IF(ITFIN.EQ.2) THEN                                               BUKERD28
       CALL HTITLE('MU+ MU- GAMMA(s) FINAL STATE')                      BUKERD29
       CALL HBOOK1(10001,'MU+ energy distribution $',50,0.,50.,0.)      BUKERD30
       CALL HIDOPT(10001,'LOGY')                                        BUKERD31
       CALL HBOOK1(10002,'MU+ polar angle distribution$',41,-1.,1.05,0.)BUKERD32
       CALL HIDOPT(10002,'LOGY')                                        BUKERD33
       CALL HBOOK1(10003,'MU+ azimuthal angle distribution $',          BUKERD34
     &                                                   40,0.,360.,0.) BUKERD35
       CALL HBOOK1(10004,'MU- energy distribution $',50,0.,50.,0.)      BUKERD36
       CALL HIDOPT(10004,'LOGY')                                        BUKERD37
       CALL HBOOK1(10005,'MU- polar angle distribution$',41,-1.,1.05,0.)BUKERD38
       CALL HIDOPT(10005,'LOGY')                                        BUKERD39
       CALL HBOOK1(10006,'MU- azimuthal angle distribution $',          BUKERD40
     &                                                   40,0.,360.,0.) BUKERD41
       CALL HBOOK1(10007,'MU+/MU- accolinearity distribution (degr.)$', BUKERD42
     &                                                   40,0.,180.,0.) BUKERD43
       CALL HIDOPT(10007,'LOGY')                                        BUKERD44
       CALL HBOOK1(10008,'MU+/MU- accoplanarity distribution (degr.)$', BUKERD45
     &                                                   40,0.,180.,0.) BUKERD46
       CALL HIDOPT(10008,'LOGY')                                        BUKERD47
       CALL HBOOK1(10009,'Photon multiplicity $',40,0.,40.,0.)          BUKERD48
       CALL HBOOK1(10010,'Photon energy distribution $',50,0.,50.,0.)   BUKERD49
       CALL HIDOPT(10010,'LOGY')                                        BUKERD50
       CALL HBOOK1(10011,'Photon angular spectrum $', 50,-1.,1.,0.)     BUKERD51
       CALL HIDOPT(10011,'LOGY')                                        BUKERD52
C                                                                       BUKERD53
      ELSE IF(ITFIN.EQ.4) THEN                                          BBL96055
       CALL HTITLE('e+ e- GAMMA(s) FINAL STATE s channel only')         BBL96056
       CALL HBOOK1(10001,'e+ energy distribution ',50,0.,50.,0.)        BBL96057
       CALL HIDOPT(10001,'LOGY')                                        BBL96058
       CALL HBOOK1(10002,'e+ polar angle distribution',41,-1.,1.05,0.)  BBL96059
       CALL HIDOPT(10002,'LOGY')                                        BBL96010
       CALL HBOOK1(10003,'e+ azimuthal angle distribution ',            BBL96011
     &                                                   40,0.,360.,0.) BBL96012
       CALL HBOOK1(10004,'e- energy distribution ',50,0.,50.,0.)        BBL96013
       CALL HIDOPT(10004,'LOGY')                                        BBL96014
       CALL HBOOK1(10005,'e- polar angle distribution',41,-1.,1.05,0.)  BBL96015
       CALL HIDOPT(10005,'LOGY')                                        BBL96016
       CALL HBOOK1(10006,'e- azimuthal angle distribution ',            BBL96017
     &                                                   40,0.,360.,0.) BBL96018
       CALL HBOOK1(10007,'e+/e- accolinearity distribution (degr.)',    BBL96019
     &                                                   40,0.,180.,0.) BBL96020
       CALL HIDOPT(10007,'LOGY')                                        BBL96021
       CALL HBOOK1(10008,'e+/e- accoplanarity distribution (degr.)',    BBL96022
     &                                                   40,0.,180.,0.) BBL96023
       CALL HIDOPT(10008,'LOGY')                                        BBL96024
       CALL HBOOK1(10009,'Photon multiplicity ',40,0.,40.,0.)           BBL96025
       CALL HBOOK1(10010,'Photon energy distribution ',50,0.,50.,0.)    BBL96026
       CALL HIDOPT(10010,'LOGY')                                        BBL96027
       CALL HBOOK1(10011,'Photon angular spectrum ', 50,-1.,1.,0.)      BBL96028
       CALL HIDOPT(10011,'LOGY')                                        BBL96029
C                                                                       BBL96030
      ELSE IF(ITFIN.EQ.1) THEN                                          BUKERD54
       CALL HTITLE('TAU+ TAU- GAMMA(s) FINAL STATE')                    BUKERD55
       CALL HTABLE(10000,'TAU DECAY MODES P=+1$',                       BUKERD56
     & 30,0.,30.,30,.0,30.,0.)                                          BUKERD57
       CALL HTABLE(20000,'TAU DECAY MODES P=-1$',                       BUKERD58
     & 30,0.,30.,30,.0,30.,0.)                                          BUKERD59
       CALL HBOOK1(10001,'E/Ebeam     Photon $', 50,0.,1.,0.)           BUKERD60
       CALL HIDOPT(10001,'LOGY')                                        BUKERD61
       CALL HBOOK1(10002,'angular spectrum Photon $', 50,-1.,1.,0.)     BUKERD62
       CALL HIDOPT(10002,'LOGY')                                        BUKERD63
       CALL HBOOK1(10101,'E/Ebeam   Electron $', 50,0.,1.,0.)           BUKERD64
       CALL HBOOK1(10201,'E/Ebeam       Muon $', 50,0.,1.,0.)           BUKERD65
       CALL HBOOK1(10301,'E/Ebeam         pi $', 50,0.,1.,0.)           BUKERD66
       CALL HBOOK1(10404,'mpipi0         rho $',50,.0,2.5,0.)           BUKERD67
       CALL HBOOK1(10405,'mpipi0**2          $',71,.0,3.55,0.)          BUKERD68
       CALL HBOOK1(10504,'m3pi      a1->3pic $',50,.68,1.68,0.)         BUKERD69
       CALL HBOOK1(10505,'m3pi**2         a1 $',71,.0,3.55,0.)          BUKERD70
       CALL HBOOK1(10506,'m2pi (opp sign)    $',50,.0,1.5,0.)           BUKERD71
       CALL HBOOK1(10507,'m2pi (like sign)   $',50,.0,1.5,.0)           BUKERD72
       CALL HBOOK1(10508,'3pic spectr.funct. $',50,.7,1.70,0.)          BUKERD73
       CALL HBOOK1(10554,'m3pi     a1->pi2pi0$',50,.68,1.68,0.)         BUKERD74
       CALL HBOOK1(10555,'mpi2pi0**2         $',71,.0,3.55,0.)          BUKERD75
       CALL HBOOK1(10556,'m2pi0              $',50,.0,1.5,0.)           BUKERD76
       CALL HBOOK1(10557,'mpipi0             $',50,.0,1.5,0.)           BUKERD77
       CALL HBOOK1(10558,'pi2pi0 spectr.funct.$',50,.7,1.70,0.)         BUKERD78
       CALL HBOOK1(10601,'E/Ebeam          K $', 50,0.,1.,0.)           BUKERD79
       CALL HBOOK1(10704,'mKpi             K*$',50,.0,2.5,0.)           BUKERD80
       CALL HBOOK1(10705,'mKpi**2            $',71,.0,3.55,0.)          BUKERD81
       CALL HBOOK1(10804,'m4pi         3pipi0$',50,.7,2.1,0.)           BUKERD82
       CALL HBOOK1(10805,'m4pi**2      3pipi0$',71,.0,3.55,0.)          BUKERD83
       CALL HBOOK1(10806,'m3pi         3pipi0$',50,.0,2.5,0.)           BUKERD84
       CALL HBOOK1(10807,'m2pi         3pipi0$',50,.0,2.5,0.)           BUKERD85
       CALL HBOOK1(10808,'4pic spectr.funct. $',50,.7,1.70,0.)          BUKERD86
       CALL HBOOK1(10904,'m4pi         pi3pi0$',50,.7,2.1,0.)           BUKERD87
       CALL HBOOK1(10905,'m4pi**2      pi3pi0$',71,.0,3.55,0.)          BUKERD88
       CALL HBOOK1(10906,'m3pi         pi3pi0$',50,.0,2.5,0.)           BUKERD89
       CALL HBOOK1(10907,'m2pi         pi3pi0$',50,.0,2.5,0.)           BUKERD90
       CALL HBOOK1(10908,'4pic spectr.funct. $',50,.7,1.70,0.)          BUKERD91
       CALL HBOOK1(11004,'m5pi        3pi2pi0$',50,.0,2.5,0.)           BUKERD92
       CALL HBOOK1(11005,'m5pi+-**2   3pi2pi0$',71,.0,3.55,0.)          BUKERD93
       CALL HBOOK1(11006,'m3pi        3pi2pi0$',50,.0,2.5,0.)           BUKERD94
       CALL HBOOK1(11007,'m4pi        3pi2pi0$',50,.0,2.5,0.)           BUKERD95
       CALL HBOOK1(11008,'5pi spectr.funct.  $',50,.7,1.70,0.)          BUKERD96
       CALL HBOOK1(11104,'m5pi          5pi+-$',50,.0,2.5,0.)           BUKERD97
       CALL HBOOK1(11105,'m5pi**2       5pi+-$',71,.0,3.55,0.)          BUKERD98
       CALL HBOOK1(11106,'m3pi          5pi+-$',50,.0,2.5,0.)           BUKERD99
       CALL HBOOK1(11107,'m4pi          5pi+-$',50,.0,2.5,0.)           BUKER100
       CALL HBOOK1(11108,'5pi spectr.funct.  $',50,.7,1.70,0.)          BUKER101
       CALL HBOOK1(11204,'m6pi        5pi pi0$',50,.0,2.5,0.)           BUKER102
       CALL HBOOK1(11205,'m6pi**2     5pi pi0$',71,.0,3.55,0.)          BUKER103
       CALL HBOOK1(11206,'m3pi        5pi pi0$',50,.0,2.5,0.)           BUKER104
       CALL HBOOK1(11207,'m4pi        5pi pi0$',50,.0,2.5,0.)           BUKER105
       CALL HBOOK1(11304,'m6pi        3pi3pi0$',50,.0,2.5,0.)           BUKER106
       CALL HBOOK1(11305,'m6pi**2     3pi3pi0$',71,.0,3.55,0.)          BUKER107
       CALL HBOOK1(11306,'m3pi        3pi3pi0$',50,.0,2.5,0.)           BUKER108
       CALL HBOOK1(11307,'m4pi        3pi3pi0$',50,.0,2.5,0.)           BUKER109
       CALL HBOOK1(11404,'mKpiK       K-pi-K+$',50,.0,2.5,0.)           BUKER110
       CALL HBOOK1(11405,'mKpiK**2           $',71,.0,3.55,0.)          BUKER111
       CALL HBOOK1(11406,'mKk         K-pi-K+$',50,.0,2.0,.0)           BUKER112
       CALL HBOOK1(11407,'mKpi        K-pi-K $',50,.0,2.0,.0)           BUKER113
       CALL HBOOK1(11504,'mKpiK      K0pi-K0b$',50,.0,2.5,0.)           BUKER114
       CALL HBOOK1(11505,'mKpiK**2           $',71,.0,3.55,0.)          BUKER115
       CALL HBOOK1(11506,'mKK        K0pi-K0b$',50,.0,2.0,.0)           BUKER116
       CALL HBOOK1(11507,'mKpi       K0pi-K0b$',50,.0,2.0,.0)           BUKER117
       CALL HBOOK1(11604,'mKpiK       K-pi0K0$',50,.0,2.5,0.)           BUKER118
       CALL HBOOK1(11605,'mKpiK**2           $',71,.0,3.55,0.)          BUKER119
       CALL HBOOK1(11606,'mKK         K-pi0K0$',50,.0,2.0,.0)           BUKER120
       CALL HBOOK1(11607,'mKpi        K-pi0K0$',50,.0,2.0,.0)           BUKER121
       CALL HBOOK1(11704,'mKpipi     pi0pi0K-$',50,.0,2.5,0.)           BUKER122
       CALL HBOOK1(11705,'mKpipi*2           $',71,.0,3.55,0.)          BUKER123
       CALL HBOOK1(11706,'mKpi       pi0pi0K-$',50,.0,2.0,.0)           BUKER124
       CALL HBOOK1(11707,'mKpi       pi0pi0K-$',50,.0,2.0,.0)           BUKER125
       CALL HBOOK1(11804,'mKpipi     K-pi-pi+$',50,.0,2.5,0.)           BUKER126
       CALL HBOOK1(11805,'mKpipi**2          $',71,.0,3.55,0.)          BUKER127
       CALL HBOOK1(11806,'mKpi       K-pi-pi+$',50,.0,2.0,.0)           BUKER128
       CALL HBOOK1(11807,'mpipi      K-pi-pi+$',50,.0,2.0,.0)           BUKER129
       CALL HBOOK1(11904,'mKpipi    pi-K0bpi+$',50,.0,2.5,0.)           BUKER130
       CALL HBOOK1(11905,'mKpipi**2          $',71,.0,3.55,0.)          BUKER131
       CALL HBOOK1(11906,'mpipi     pi-K0bpi+$',50,.0,2.0,.0)           BUKER132
       CALL HBOOK1(11907,'mKpi      pi-K0bpi+$',50,.0,2.0,.0)           BUKER133
       CALL HBOOK1(12204,'K-K0 mass          $',50,.0,2.5,0.)           BUKER134
       CALL HBOOK1(12205,'K-K0 mass**2       $',71,.0,3.55,0.)          BUKER135
       CALL HBOOK1(12208,'K-K0 spectr.funct. $',50,.7,1.70,0.)          BUKER136
       CALL HIDOPT(0,'STAT')                                            BUKER137
       CALL HBPRO(0,.0)                                                 BUKER138
       nevpr = 0                                                        BUKER139
       ampi2  =  ampi**2                                                BUKER140
       amtau2 = amtau**2                                                BUKER141
      ELSE IF(ITFIN.EQ.3) THEN                                          BUKER142
       CALL HTITLE('NU NUBAR GAMMA(s) FINAL STATE')                     BUKER143
       CALL HBOOK1(10009,'Photon multiplicity $',40,0.,40.,0.)          BUKER144
       CALL HBOOK1(10010,'Photon energy distribution $',50,0.,50.,0.)   BUKER145
       CALL HIDOPT(10010,'LOGY')                                        BUKER146
       CALL HBOOK1(10011,'PHOTON ANGULAR SPECTRUM $', 50,-1.,1.,0.)     BUKER147
       CALL HIDOPT(10011,'LOGY')                                        BUKER148
      ELSE IF(ITFIN.GT.3) THEN                                          BUKER149
       CALL HTITLE('Q QBAR  GAMMA(s) FINAL STATE')                      BUKER150
       CALL HBOOK1(10001,'QBAR energy distribution $',50,0.,50.,0.)     BUKER151
       CALL HIDOPT(10001,'LOGY')                                        BUKER152
       CALL HBOOK1(10002,'QBAR polar angle distribution',41,-1.,1.05,0.)BUKER153
       CALL HIDOPT(10002,'LOGY')                                        BUKER154
       CALL HBOOK1(10003,'QBAR azimuthal angle distribution ',          BUKER155
     &                                                   40,0.,360.,0.) BUKER156
       CALL HBOOK1(10004,'Q   energy distribution $',50,0.,50.,0.)      BUKER157
       CALL HIDOPT(10004,'LOGY')                                        BUKER158
       CALL HBOOK1(10005,'Q   polar angle distribution$',41,-1.,1.05,0.)BUKER159
       CALL HIDOPT(10005,'LOGY')                                        BUKER160
       CALL HBOOK1(10006,'Q   azimuthal angle distribution $',          BUKER161
     &                                                   40,0.,360.,0.) BUKER162
       CALL HBOOK1(10007,'QBAR/Q  accolinearity distribution (degr.)$', BUKER163
     &                                                   40,0.,180.,0.) BUKER164
       CALL HIDOPT(10007,'LOGY')                                        BUKER165
       CALL HBOOK1(10008,'QBAR/Q  accoplanarity distribution (degr.)$', BUKER166
     &                                                   40,0.,180.,0.) BUKER167
       CALL HIDOPT(10008,'LOGY')                                        BUKER168
       CALL HBOOK1(10009,'Photon multiplicity $',40,0.,40.,0.)          BUKER169
       CALL HBOOK1(10010,'Photon energy distribution $',50,0.,50.,0.)   BUKER170
       CALL HIDOPT(10010,'LOGY')                                        BUKER171
       CALL HBOOK1(10011,'Photon angular spectrum $', 50,-1.,1.,0.)     BUKER172
       CALL HIDOPT(10011,'LOGY')                                        BUKER173
      ENDIF                                                             BUKER174
C                                                                       BUKER175
C     =======================                                           BUKER176
C                                                                       BUKER177
      ELSE IF(IMOD.EQ.0) THEN                                           BUKER178
C                                                                       BUKER179
      IF(ITFIN.GE.2) THEN                                               BUKER180
       IF (ITFIN.NE.3) THEN                                             BUKER181
       CALL HFILL(10001,p7lu(3,4),0.,1.)                                BUKER182
       THEMUP = p7lu(3,3)/p7lu(3,4)                                     BUKER183
       IF(THEMUP.GE. 1.) THEMUP =  0.999999                             BUKER184
       IF(THEMUP.LE.-1.) THEMUP = -0.999999                             BUKER185
       CALL HFILL(10002,THEMUP,0.,1.)                                   BUKER186
       PHIMUP = p7lu(3,2)/SQRT(p7lu(3,1)**2+p7lu(3,2)**2)               BUKER187
       PHIMUP = 180.*ACOS(PHIMUP)/3.14159                               BUKER188
       IF(p7lu(3,1).LT.0.) PHIMUP = 360. - PHIMUP                       BUKER189
       CALL HFILL(10003,PHIMUP,0.,1.)                                   BUKER190
       CALL HFILL(10004,p7lu(4,4),0.,1.)                                BUKER191
       THEMUM = p7lu(4,3)/p7lu(4,4)                                     BUKER192
       IF(THEMUM.GE. 1.) THEMUM =  0.999999                             BUKER193
       IF(THEMUM.LE.-1.) THEMUM = -0.999999                             BUKER194
       CALL HFILL(10005,THEMUM,0.,1.)                                   BUKER195
       PHIMUM = p7lu(4,2)/SQRT(p7lu(4,1)**2+p7lu(4,2)**2)               BUKER196
       PHIMUM = ACOS(PHIMUM)                                            BUKER197
       PHIMUM = 180.*PHIMUM/3.14159                                     BUKER198
       IF(p7lu(4,1).LT.0.) PHIMUM = 360. - PHIMUM                       BUKER199
       CALL HFILL(10006,PHIMUM,0.,1.)                                   BUKER200
       ACCOLI = p7lu(3,1)*p7lu(4,1)+p7lu(3,2)*p7lu(4,2)+                BUKER201
     &          p7lu(3,3)*p7lu(4,3)                                     BUKER202
       ACCOLI = ACCOLI/                                                 BUKER203
     &           (SQRT(p7lu(3,1)**2+p7lu(3,2)**2+p7lu(3,3)**2)*         BUKER204
     &            SQRT(p7lu(4,1)**2+p7lu(4,2)**2+p7lu(4,3)**2))         BUKER205
       IF(ACCOLI.GE. 1.) ACCOLI =  0.999999                             BUKER206
       IF(ACCOLI.LE.-1.) ACCOLI = -0.999999                             BUKER207
       ACCOLI = 180.*(1.-ACOS(ACCOLI)/3.14159)                          BUKER208
       CALL HFILL(10007,ACCOLI,0.,1.)                                   BUKER209
       ACCOPL = p7lu(3,1)*p7lu(4,1)+p7lu(3,2)*p7lu(4,2)                 BUKER210
       ACCOPL = ACCOPL/(SQRT(p7lu(3,1)**2+p7lu(3,2)**2)*                BUKER211
     &                  SQRT(p7lu(4,1)**2+p7lu(4,2)**2))                BUKER212
       IF(ACCOPL.GE. 1.) ACCOPL =  0.999999                             BUKER213
       IF(ACCOPL.LE.-1.) ACCOPL = -0.999999                             BUKER214
       ACCOPL = 180.*(1.-ACOS(ACCOPL)/3.14159)                          BUKER215
       CALL HFILL(10008,ACCOPL,0.,1.)                                   BUKER216
       ENDIF                                                            BUKER217
       XPHOTON = n7lu - 4                                               BUKER218
       IF(XPHOTON.NE.0.) THEN                                           BUKER219
        CALL HFILL(10009,XPHOTON,0.,1.)                                 BUKER220
        DO 10 I = 5,n7lu                                                BUKER221
         THEPHO = p7lu(I,3)/p7lu(I,4)                                   BUKER222
         IF(THEPHO.GE. 1.) THEPHO =  0.999999                           BUKER223
         IF(THEPHO.LE.-1.) THEPHO = -0.999999                           BUKER224
         CALL HFILL(10011,THEPHO,0.,1.)                                 BUKER225
   10    CALL HFILL(10010,p7lu(I,4),0.,1.)                              BUKER226
       ENDIF                                                            BUKER227
C                                                                       BUKER228
      ELSE IF(ITFIN.EQ.1) THEN                                          BUKER229
       call vzero(nch,2)                                                BUKER230
       call vzero(nneu,2)                                               BUKER231
       call vzero(ipfori,2)                                             BUKER232
       call vzero(qp,5*10*2)                                            BUKER233
       ENE = p7lu(1,4)                                                  BUKER234
C PHOTON ENERGY AND ANGULAR SPECTRUM                                    BUKER235
       IF(APH(4).GT.0.0001) THEN                                        BUKER236
        CALL HFILL(10001,APH(4)/ENE,0.,1.)                              BUKER237
        THEPHO = APH(3)/APH(4)                                          BUKER238
        IF(THEPHO.GE. 1.) THEPHO =  0.999999                            BUKER239
        IF(THEPHO.LE.-1.) THEPHO = -0.999999                            BUKER240
        CALL HFILL(10002,THEPHO,0.,1.)                                  BUKER241
       ENDIF                                                            BUKER242
       DO 50 IP = 5,n7lu                                                BUKER243
CAM  SKIP RADIATIVE GAMMA OR UNSTABLE PARTICLE                          BUKER244
       IF(k7lu(IP,2).EQ.22.OR.k7lu(IP,1).ne.1) GO TO 50                 BUKER245
C                                                                       BUKER246
       IPORIG=k7lu(IP,3)                                                BUKER247
       KKFORI=k7lu(IPORIG,2)                                            BUKER248
       KFORIG=ABS(KKFORI)                                               BUKER249
 20    CONTINUE                                                         BUKER250
cam jetset7.3 tau id = 15                                               BUKER251
       IF(KKFORI.NE.15.AND.KKFORI.NE.-15) THEN                          BUKER252
        IPORIG=k7lu(IPORIG,3)                                           BUKER253
        KKFORI=k7lu(IPORIG,2)                                           BUKER254
       ENDIF                                                            BUKER255
       IF(ABS(KKFORI).NE.15) GO TO 20                                   BUKER256
       IF    (KKFORI.EQ.+IDFF) THEN                                     BUKER257
         JAK=JAKP                                                       BUKER258
       ELSEIF(KKFORI.EQ.-IDFF) THEN                                     BUKER259
         JAK=JAKM                                                       BUKER260
       ELSE                                                             BUKER261
         print *,' illegal kforig in bukerd',                           BUKER262
     &   IP,KKFORI,k7lu(IP,3),k7lu(IP,2),k7lu(k7lu(IP,3),3),            BUKER263
     &   k7lu(k7lu(IP,3),2),IPORIG                                      BUKER264
         STOP                                                           BUKER265
       ENDIF                                                            BUKER266
       it = iporig - 2                                                  BUKER267
       if (it.gt.2) then                                                BUKER268
         print *,' illegal iporig in bukerd',                           BUKER269
     &   ip,kkfori,k7lu(ip,3),k7lu(ip,2),k7lu(k7lu(ip,3),3),            BUKER270
     &   k7lu(k7lu(ip,3),2),iporig                                      BUKER271
         stop                                                           BUKER272
       endif                                                            BUKER273
c                                                                       BUKER274
       IH0 = 10000 + jak*100                                            BUKER275
C                                                                       BUKER276
       xmod = sqrt(p7lu(ip,1)*p7lu(ip,1)+                               BUKER277
     &        p7lu(ip,2)*p7lu(ip,2)+p7lu(ip,3)*p7lu(ip,3))              BUKER278
       call hfill(ih0+1, p7lu(ip,4)/ene ,0.,1.)                         BUKER279
       isgn=sign(1,k7lu(ip,2))                                          BUKER280
       call hfill(ih0+2, isgn*p7lu(ip,3)/xmod,0.,1.)                    BUKER281
c                                                                       BUKER282
       ikod = abs(k7lu(ip,2))                                           BUKER283
                                                                        BUKER284
cam jetset7.3 id's : pi = 211;  K = 321                                 BUKER285
c                    pi0= 111; K0l= 130 ; K0s= 310                      BUKER286
       if (ikod.eq.211.or.ikod.eq.321                                   BUKER287
     & .or.ikod.eq.111.or.ikod.eq.130.or.ikod.eq.310) then              BUKER288
c                                                                       BUKER289
C multiparticle channels : store final particles for mass plots         BUKER290
         if (ikod.eq.211.or.ikod.eq.321) then                           BUKER291
           nch(it) = nch(it)+1                                          BUKER292
         elseif (ikod.eq.111.or.ikod.eq.130.or.ikod.eq.310) then        BUKER293
           nneu(it) = nneu(it)+1                                        BUKER294
         endif                                                          BUKER295
         n = nneu(it) + nch(it)                                         BUKER296
         do 53 i=1,4                                                    BUKER297
 53      qp(i,n,it) = p7lu(ip,i)                                        BUKER298
         qp(5,n,it) = k7lu(ip,2)/abs(k7lu(ip,2))                        BUKER299
         qp(5,n,it) = qp(5,n,it)                                        BUKER300
     &   *k7lu(iporig,2)/abs(k7lu(iporig,2))                            BUKER301
         ipfori(it) = iporig                                            BUKER302
       endif                                                            BUKER303
c                                                                       BUKER304
 50    CONTINUE                                                         BUKER305
       do 60 it=1,2                                                     BUKER306
       if (it.eq.1) jak = jakp                                          BUKER307
       if (it.eq.2) jak = jakm                                          BUKER308
       ih0 = 10000 + jak*100                                            BUKER309
       if (jak.eq.5.and.nneu(it).ne.0) ih0=ih0+50                       BUKER310
       ntrt = nch(it) + nneu(it)                                        BUKER311
       if (ntrt.gt.1) then                                              BUKER312
c        call vzero (qp(1,7,it),5*4)                                    BUKER313
         do 58 itr=1,ntrt                                               BUKER314
 58      call vadd(qp(1,itr,it),qp(1,7,it),qp(1,7,it),4)                BUKER315
         xmb2=qp(4,7,it)**2-qp(1,7,it)**2-qp(2,7,it)**2-qp(3,7,it)**2   BUKER316
         xmb = sqrt(xmb2)                                               BUKER317
         call hfill(ih0+4,xmb,1.,1.)                                    BUKER318
         call hfill(ih0+5,xmb2,1.,1.)                                   BUKER319
* spectral function                                                     BUKER320
         v1 = 1./( (amtau2-xmb2)**2 * (amtau2+2.*xmb2) * xmb)           BUKER321
         call hfill(ih0+8,xmb,1.,v1)                                    BUKER322
c                                                                       BUKER323
* following assumes part 1 and part 2 play similar roles                BUKER324
* following assumes resonances in m1x and m2x if any                    BUKER325
         call vadd(qp(1,1,it),qp(1,2,it),qp(1,8,it),4)                  BUKER326
         call vadd(qp(1,1,it),qp(1,3,it),qp(1,9,it),4)                  BUKER327
         call vadd(qp(1,2,it),qp(1,3,it),qp(1,10,it),4)                 BUKER328
         xm12=qp(4,8,it)**2-qp(1,8,it)**2-qp(2,8,it)**2-qp(3,8,it)**2   BUKER329
         xm12= sqrt(xm12)                                               BUKER330
         xm13=qp(4,9,it)**2-qp(1,9,it)**2-qp(2,9,it)**2-qp(3,9,it)**2   BUKER331
         xm13= sqrt(xm13)                                               BUKER332
         xm23=                                                          BUKER333
     &   qp(4,10,it)**2-qp(1,10,it)**2-qp(2,10,it)**2-qp(3,10,it)**2    BUKER334
         xm23= sqrt(xm23)                                               BUKER335
         if (ntrt.ge.4) then                                            BUKER336
          call vadd(qp(1,4,it),qp(1,9,it),qp(1,9,it),4)                 BUKER337
          call vadd(qp(1,4,it),qp(1,10,it),qp(1,10,it),4)               BUKER338
          xm134 =                                                       BUKER339
     &    qp(4,9,it)**2-qp(1,9,it)**2-qp(2,9,it)**2-qp(3,9,it)**2       BUKER340
          xm134 = sqrt(xm134)                                           BUKER341
          xm234 =                                                       BUKER342
     &    qp(4,10,it)**2-qp(1,10,it)**2-qp(2,10,it)**2-qp(3,10,it)**2   BUKER343
          xm234 = sqrt(xm234)                                           BUKER344
          if (ntrt.ge.5) then                                           BUKER345
           call vadd(qp(1,5,it),qp(1,9,it),qp(1,9,it),4)                BUKER346
           call vadd(qp(1,5,it),qp(1,10,it),qp(1,10,it),4)              BUKER347
           xm1345=                                                      BUKER348
     &     qp(4,9,it)**2-qp(1,9,it)**2-qp(2,9,it)**2-qp(3,9,it)**2      BUKER349
           xm1345= sqrt(xm1345)                                         BUKER350
           xm2345=                                                      BUKER351
     &     qp(4,10,it)**2-qp(1,10,it)**2-qp(2,10,it)**2-qp(3,10,it)**2  BUKER352
           xm2345= sqrt(xm2345)                                         BUKER353
          endif                                                         BUKER354
         endif                                                          BUKER355
c                                                                       BUKER356
         if      (jak.eq.5) then                                        BUKER357
c a1 channels                                                           BUKER358
           call hfill( ih0+6,xm13,1.,1.)                                BUKER359
           call hfill( ih0+6,xm23,1.,1.)                                BUKER360
           call hfill( ih0+7,xm12,1.,1.)                                BUKER361
c                                                                       BUKER362
         else if (jak.ge.8.and.jak.le.9 ) then                          BUKER363
c 4pi channels                                                          BUKER364
           call hfill( ih0+6,xm134,1.,1.)                               BUKER365
           call hfill( ih0+6,xm234,1.,1.)                               BUKER366
           call hfill( ih0+7,xm13,1.,1.)                                BUKER367
           call hfill( ih0+7,xm23,1.,1.)                                BUKER368
c                                                                       BUKER369
         else if (jak.ge.10.and.jak.le.13) then                         BUKER370
c 5pi 6pi channels                                                      BUKER371
           call hfill( ih0+6,xm134,1.,1.)                               BUKER372
           call hfill( ih0+6,xm234,1.,1.)                               BUKER373
           call hfill( ih0+7,xm1345,1.,1.)                              BUKER374
           call hfill( ih0+7,xm2345,1.,1.)                              BUKER375
c                                                                       BUKER376
         else if (jak.ge.14.and.jak.le.18) then                         BUKER377
c KKpi and Kpipi channels                                               BUKER378
           call hfill( ih0+6,xm13,1.,1.)                                BUKER379
           call hfill( ih0+7,xm23,1.,1.)                                BUKER380
c                                                                       BUKER381
         endif                                                          BUKER382
       endif                                                            BUKER383
60     continue                                                         BUKER384
      ENDIF                                                             BUKER385
C                                                                       BUKER386
C     ========================                                          BUKER387
C                                                                       BUKER388
      ELSE IF(IMOD.EQ. 1) THEN                                          BUKER389
C                                                                       BUKER390
       CALL HMINIM(0,0.)                                                BUKER391
       CALL HIDOPT(0,'1EVL')                                            BUKER392
       CALL HIDOPT(0,'INTE')                                            BUKER393
       CALL HINDEX                                                      BUKER394
      ENDIF                                                             BUKER395
C                                                                       BUKER396
      RETURN                                                            BUKER397
      END                                                               BUKER398
      SUBROUTINE KORALZ(MODE,KF1,PB1,EE1,KF2,PB2,EE2,XPAR,NPAR)         KORALZ 2
C=====================================================================C KORALZ 3
C=====================================================================C KORALZ 4
C        KK  KK    OOO    KKKKK      KKK     LL     ZZZZZZ            C KORALZ 5
C        KK KK   OO   OO  KK  KK    KK KKK   LL        ZZ             C KORALZ 6
C        KKK     OO   OO  KKKK     KK   KK   LL      ZZ               C KORALZ 7
C        KK KK   OO   OO  KK KK    KKKKKKK   LL     ZZ                C KORALZ 8
C        KK  KK    OOO    KK  KK   KK   KK   LLLLL  ZZZZZZ            C KORALZ 9
C=====================================================================C KORALZ10
C=======================   VERSION 4.0 ================================ KORALZ11
C====================================================================== KORALZ12
C======================= NOVEMBER 1993  =============================== KORALZ13
C====================================================================== KORALZ14
C       MONTE CARLO EVENT GENERATOR FOR THE COMBINED                  C KORALZ15
C    TAU/MU PAIR PRODUCTION AND DECAY PROCESS AT LEP/SLC              C KORALZ16
C    (it contains YFS3 multiphoton generator as a part)               C KORALZ17
C                                                                     C KORALZ18
C                      Authors                                        C KORALZ19
C  S. JADACH     /1,2/   B.F.L. WARD   /3/  Z. WAS    /1,2/           C KORALZ20
C                                                                     C KORALZ21
C      /1/  INSTITUTE OF NUCLEAR PHYS. CRACOW                         C KORALZ22
C      /2/  CERN, Geneva                                              C KORALZ23
C      /3/  Universuty of Tennessee Knoxville, Tennessee              C KORALZ24
C====================================================================== KORALZ25
C====================================================================== KORALZ26
C== ACKNOWLEDGEMENTS : AUTHORS OF THE PROGRAM ARE INDEBTED           == KORALZ27
C== TO ALL USERS OF THE PROGRAM WHO PROVIDED INVALUABLE HELP         == KORALZ28
C== IN DEBUGGING THE PROGRAM, SPECIAL THANKS GO TO                   == KORALZ29
C== F. BOILLOT, G. BONNEAUD, A. M. LUTZ WHO HELPED TO ORGANIZE       == KORALZ30
C== THE CODE AND TO PUT IT INTO HISTORIAN.                           == KORALZ31
C== THE NEUTRINO MODE OF THE PROGRAM WAS DEVELOPPED WITH THE ACTIVE  == KORALZ32
C== PARTICIPATION OF P. COLAS AND L. MIRABITO FROM SACLAY            == KORALZ33
C== SEE MUNICH REPORT MPI-PAE-EXP-EL-211 (1989)                      == KORALZ34
C====================================================================== KORALZ35
C                                                                       KORALZ36
C    IMPORTANT NOTE:                                                    KORALZ37
C    BEFORE USING THIS PROGRAM YOU MAY CONTACT Z. WAS                   KORALZ38
C       THROUGH EARNET/BITNET, WASM at CERNVM,                          KORALZ39
C    AND, PERHAPS, YOU WILL GET A BETTER VERSION!!!                     KORALZ40
C    PLEASE ALSO REPORT ANY NOTICED ERROR OR ANY OTHER PROBLEM          KORALZ41
C                   ***                                                 KORALZ42
C --------------------------------------------------------------------- KORALZ43
C --------------------------------------------------------------------- KORALZ44
C KORALZ IS THE COMMUNICATION CENTER FOR THE INPUT INFORMATION,         KORALZ45
C*MWG*  ALL OUTPUT IS CODED IN COMMON / HEPEVT /                        KORALZ46
C*MWG*  ACCORDING TO STANDARD PDG CONVENTIONS.                          KORALZ47
C                                                                       KORALZ48
C Calling arguments                                                     KORALZ49
C =================                                                     KORALZ50
C MODE=-1 initialization or reinitialization mode,                      KORALZ51
C         prior to generation, obligatory.                              KORALZ52
C     = 0 generation mode, m.c. event is generated.                     KORALZ53
C     = 1 postgeneration mode, printouts, optional.                     KORALZ54
C                                                                       KORALZ55
C if MODE=-1 then all parameters are input data:                        KORALZ56
C    =======                                                            KORALZ57
C*MWG* KF1 = 11,-11 flavour code of first beam, KF1=11 for electron.    KORALZ58
C*MWG* KF2 = 11,-11 flavour code of second beam, KF2=-11 for positron.  KORALZ59
C PB1 = four momentum of the first beam.                                KORALZ60
C PB2 = four momentum of the second beam.                               KORALZ61
C EE1 = spin polarization vector for the first beam.                    KORALZ62
C EE2 = spin polarization vector for the second beam,                   KORALZ63
C       both in the corresponding beam particle rest frame              KORALZ64
C       and in both cases third axis directed along first beam,         KORALZ65
C       i.e. EE1(3) and -EE2(3) are helicities.                         KORALZ66
C       only EE1(3) EE2(3) can be nonzero (longitudinal polarization    KORALZ67
C                                          only)                        KORALZ68
C other input parameters are hidden in XPAR and NPAR.                   KORALZ69
C NPAR(1)          =ISPIN              spin effects in decay            KORALZ70
C NPAR(2)          =inran (OBSOLETE!)                                   KORALZ71
C NPAR(3)          =KEYGSW             level of GSW corrections         KORALZ72
C NPAR(4)          =KEYRAD             bremsstrahlung                   KORALZ73
C NPAR(5)          =JAK1               decay type of 1-st tau           KORALZ74
C NPAR(6)          =JAK2               decay type of 2-nd tau           KORALZ75
C NPAR(7)          =ITFIN              type of the final fermion        KORALZ76
C NPAR(8)          =ITDKRC             radiation in tau decay           KORALZ77
C NPAR(9)          =KEYWLB             type of electroweak library      KORALZ78
C NPAR(11)         =nneut : number of neutrinos in the nunubar option   KORALZ79
C NPAR(12)         =KEYYFS steering parameter of YFS3 see routine EXPANDKORALZ80
C                          and its own KEYRAD.                          KORALZ81
C  (The user has to change the width himself, this parameter has no     KORALZ82
C   effect on the other final states.)                                  KORALZ83
C XPAR( 1)=AMZ     =   mass of Z0 boson                                 KORALZ84
C XPAR( 2)=AMH     =   mass of Higgs boson                              KORALZ85
C XPAR( 3)=AMTOP   =   mass of top quark                                KORALZ86
C XPAR( 4)=GV      =   W-tau coupling in tau decay                      KORALZ87
C XPAR( 5)=GA      =   W-tau coupling in tau decay                      KORALZ88
C XPAR( 6)=SWSQ    =   only for KEYGSW<2,                               KORALZ89
C XPAR( 7)=GAMMZ   =   only for KEYGSW<2, Z0 width.                     KORALZ90
C XPAR( 8)=AMNUTA  =   mass of tau neutrino in decay.                   KORALZ91
C XPAR( 9)=amneut  = neutrino mass used in nu-nubar option              KORALZ92
C                    assumed unique (= AMNUTA by default)               KORALZ93
C                    or quark to be generated mass (in quark mode)      KORALZ94
C XPAR(11)=XK0     =   soft/hard cut   (single bremmstrahlung)          KORALZ95
C XPAR(12)=VVMIN   =   minimum v for YFS2, should be 1.E-5or less,      KORALZ96
C XPAR(13)=VVMAX   =   maximum v, (v=1-s'/s, sqrt(s')=final pair mass)  KORALZ97
C XPAR(14)=XK0DEC  =   soft/hard cut in tau decay                       KORALZ98
C                                                                       KORALZ99
C KEYGSW=  0 Z0, NO GAMMA, BORN APPROXIMATION                           KORAL100
C       =  1 Z0+Gamma, Born approximation                               KORAL101
C       =  2 Z0+Gamma, vacuum polarizations ON (no more supported       KORAL102
C       =  3 electroweak corrections switched ON (no more supported     KORAL103
C       =  4 electroweak corrections switched ON in a way               KORAL104
C            consistent with the higher orders of QED.                  KORAL105
C KEYRAD   The type of the QED bremsstrahlung                           KORAL106
C KEYRAD=  0, no bremsstrahlung                                         KORAL107
C       =  1, single bremsstrahlung                                     KORAL108
C       =  2, single bremsstrahlung, no QED ini-fin interference        KORAL109
C             note that internal variable KEYRAD is set to 1.           KORAL110
C KEYRAD= 10, single bremsstralung but exponentiaited spectrum          KORAL111
C       = 11, YFS2/YFS3 generation; backward compatibility option in TRAKORAL112
C       = 12, YFS2/YFS3 generation; default                             KORAL113
C       =111, backward compatibility option                             KORAL114
C       =112, backward compatibility option                             KORAL115
C ISPIN = 0,1  spin effects in decay switched OFF/ON                    KORAL116
C INRAN = initialisation constant for rand. num. gen. rnf100, positive, KORAL117
C         obsolete!!                                                    KORAL118
C ITFIN =1 tau pair production,                                         KORAL119
C       =2 muon pair production.                                        KORAL120
C       =3 nunub pair production.                                       KORAL121
C       =501-506 quark pair production.                                 KORAL122
C ITDKRC=0 no rad. corr. in tau decay                                   KORAL123
C       =1 with rad. corr. in tau decay                                 KORAL124
C JAK1  = -1 no decay                                                   KORAL125
C       =  0 inclusive decay                                            KORAL126
C       =  1,2 electron and muon decays                                 KORAL127
C       =  3 pi decay                                                   KORAL128
C       =  4,5 rho and a_1 decays                                       KORAL129
C       =  6,7 K   and K*  decays                                       KORAL130
C       =  8 ...                                                        KORAL131
C       ...                                                             KORAL132
C JAK2  = the same as for JAK1                                          KORAL133
C KEYWLB=1,2 electroweak corrections due to first or second choice      KORAL134
C         ======                                                        KORAL135
C else if MODE=0 then all parameters are ignored                        KORAL136
C         ======                                                        KORAL137
C else if MODE=1 then                                                   KORAL138
C         ======                                                        KORAL139
C NPAR(10)= nevtot, no. of generated events,                            KORAL140
C XPAR(10)= cstcm,  integrated total cross section in cm**2 units,      KORAL141
C XPAR(16)= CSTCM,  integrated total cross section in cm**2 units,      KORAL142
C XPAR(17)= CSTNB,  integrated total cross section in nb units,         KORAL143
C XPAR(18)= DCSNB,  error on cross section,                             KORAL144
C XPAR(20+I)= GAMPMC(I) branching ratios,                               KORAL145
C are output information provided for the user.                         KORAL146
C endif                                                                 KORAL147
C         ======                                                        KORAL148
C the user may add other internal parameters to npar and xpar           KORAL149
C a possible candidate is the list of the tau decay branching           KORAL150
C ratios GAMPRT in  / TAUBRA / GAMPRT(30),JLIST(30),NCHAN.              KORAL151
C at present GAMPRT is initialised in INITDK (norm. to tau>e nu nu chan KORAL152
C                                                                       KORAL153
C ===================================================================== KORAL154
C                                                                       KORAL155
C Modified by AM. Lutz/G.Bonneaud  (Nov 1988-Jan 1989)                  KORAL156
C to provide unique initialisations of (almost) all parameters, masses, KORAL157
C and physical constants.                                               KORAL158
C                                                                       KORAL159
C ===================================================================== KORAL160
C     called by : ASKUSI,ASKUSE                                         KORAL161
C ---------------------------------------------------------             KORAL162
C     IMPLICIT LOGICAL(A-H,O-Z)                                         KORAL163
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
       COMMON /GSWLIB/ KEYWLB                                           GSWLIB 2
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      COMMON / FINUS / CSTCM,ERREL                                      FINUS  2
      REAL*8           CSTCM,ERREL                                      FINUS  3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / TAUHEL / HELT1,HELT2                                     TAUHEL 2
      REAL*4 HELT1,HELT2                                                TAUHEL 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / TAURAD / XK0DEC,ITDKRC                                   TAURAD 2
      REAL*8            XK0DEC                                          TAURAD 3
      COMMON /NEWMOD/  AMNEUT,NNEUT                                     NEWMOD 2
      REAL*8           AMNEUT                                           NEWMOD 3
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
      REAL*4   PB1(4),EE1(3),PB2(4),EE2(3),XPAR(40)                     KORAL180
      INTEGER  NPAR(40)                                                 KORAL181
      REAL*4   POL1(4),POL2(4)                                          KORAL182
C                                                                       KORAL183
      IF(MODE.EQ.-1) THEN                                               KORAL184
C ================================================    INITIALISATIONS   KORAL185
C                                                                       KORAL186
        IEVEN = 0                                                       KORAL187
C                                                                       KORAL188
C  DECODE INPUT PARAMETERS SET BY DATA CARDS                            KORAL189
C  -----------------------------------------                            KORAL190
        ISPIN = NPAR(1)                                                 KORAL191
        INRAN = NPAR(2)                                                 KORAL192
        KEYGSW= NPAR(3)                                                 KORAL193
        IF (NPAR(4).NE.2) THEN                                          KORAL194
          KEYRAD= NPAR(4)                                               KORAL195
          KBRINI= 1                                                     KORAL196
          KBRFIN= 1                                                     KORAL197
          KBRINT= 1                                                     KORAL198
        ELSE                                                            KORAL199
          KEYRAD= 1                                                     KORAL200
          KBRINI= 1                                                     KORAL201
          KBRFIN= 1                                                     KORAL202
          KBRINT= 0                                                     KORAL203
        ENDIF                                                           KORAL204
        JAK1  = NPAR(5)                                                 KORAL205
        JAK2  = NPAR(6)                                                 KORAL206
        ITFIN = NPAR(7)                                                 KORAL207
        ITDKRC= NPAR(8)                                                 KORAL208
        KEYWLB= NPAR(9)                                                 KORAL209
        KEYYFS= NPAR(12)                                                KORAL210
        AMZ   = DBLE(XPAR(1))                                           KORAL211
        AMH   = DBLE(XPAR(2))                                           KORAL212
        AMTOP = DBLE(XPAR(3))                                           KORAL213
C                                                                       KORAL214
C       W-BOSON COUPLINGS TO FINAL STATE TAU (IN DECAY) FROM INPUT      KORAL215
        GV=XPAR( 4)                                                     KORAL216
        GA=XPAR( 5)                                                     KORAL217
C       TAUNEUTRINO MASS FROM INPUT                                     KORAL218
        AMNUTA= XPAR(8)                                                 KORAL219
C       SOFT/HARD BREMMSTRAHLUNG CUT in tau decay FROM INPUT            KORAL220
        XK0DEC= XPAR(14)                                                KORAL221
        IF(ITFIN.EQ.3) THEN                                             KORAL222
C         Initialization related  to nu nubar option only               KORAL223
          NNEUT=NPAR(11)                                                KORAL224
          AMNEUT=XPAR( 9)                                               KORAL225
        ENDIF                                                           KORAL226
C                                                                       KORAL227
        IF(ITFIN.GT.500) THEN                                           KORAL228
C         Initialization related  to quark option only                  KORAL229
          AMNEUT=XPAR( 9)                                               KORAL230
        ENDIF                                                           KORAL231
C                                                                       KORAL232
        IF(KEYGSW.LE.1) THEN                                            KORAL233
C         INITIALISE SIN2W AND Z WIDTH IF NOT RECOMPUTED                KORAL234
          SWSQ  =DBLE(XPAR(6))                                          KORAL235
          GAMMZ =DBLE(XPAR(7))                                          KORAL236
        ENDIF                                                           KORAL237
C                                                                       KORAL238
C       INITIALISATION OF QED RAD. CORR.                                KORAL239
C**     SOFT/HARD BREMMSTRAHLUNG CUT                                    KORAL240
        XK0   =XPAR(11)                                                 KORAL241
C**     DEFINITION OF EXTRA PARAMETERS FOR EXPAND                       KORAL242
        VVMIN =XPAR(12)                                                 KORAL243
        VVMAX =XPAR(13)                                                 KORAL244
C                                                                       KORAL245
C PRINT INPUT PARAMETERS                                                KORAL246
C ----------------------                                                KORAL247
        WRITE(IOUT,7000) KF1,KF2,PB1(3),PB1(4),PB2(3),PB2(4),           KORAL248
     &  EE1(3),EE2(3)                                                   KORAL249
        WRITE(IOUT,7001) ISPIN,KEYGSW,KEYRAD+1-KBRINT,                  KORAL250
     &  JAK1,JAK2,ITFIN,ITDKRC,KEYWLB,NNEUT                             KORAL251
        WRITE(IOUT,7002) AMZ,AMH,AMTOP,                                 KORAL252
     &  GV,GA,AMNUTA,XK0DEC,                                            KORAL253
     &  XK0,VVMIN,VVMAX,AMNEUT                                          KORAL254
C                                                                       KORAL255
C CHECK INPUT PARAMETERS                                                KORAL256
C ----------------------                                                KORAL257
C*MWG*  BEAM IDENTIFIERS KF1=11,-11 DENOTE  ELECTRON, POSITRON          KORAL258
        IF(IABS(KF1).NE.11.OR.IABS(KF2).NE.11)        GOTO 900          KORAL259
        IF(KF1*KF2.GT.0)                              GOTO 900          KORAL260
        SUMPT=0                                                         KORAL261
        DO 20 I=1,2                                                     KORAL262
        SUMPT=SUMPT+PB1(I)                                              KORAL263
  20    SUMPT=SUMPT+PB2(I)                                              KORAL264
        IF(SUMPT.GT.0.0001)                           GOTO 902          KORAL265
        IF (     PB1(3) .NE. ABS(PB1(4))                                KORAL266
     &  .OR. ABS(PB2(3)).NE. ABS(PB2(4))                                KORAL267
     &  .OR.PB1(4).NE.PB2(4).OR.PB1(3).NE.(-PB2(3)) ) GOTO 903          KORAL268
        IF(PB1(4).LE.0)                               GOTO 903          KORAL269
C**     POLARISATION VECTORS OF BEAMS                                   KORAL270
        IF (EE1(3)*EE2(3).LT.-.5D0) THEN                                KORAL271
          WRITE(IOUT,101)                                               KORAL272
  101     FORMAT('WARNING: PROGRAM IS NOT COMPLETELY O(ALPHA) FOR       KORAL273
     $    STRONGLY POLARIZED E+ AND E-')                                KORAL274
        ENDIF                                                           KORAL275
        SUMPT=0                                                         KORAL276
        DO 25 I=1,2                                                     KORAL277
        SUMPT=SUMPT+ ABS(EE1(I))                                        KORAL278
  25    SUMPT=SUMPT+ ABS(EE2(I))                                        KORAL279
        IF(SUMPT.GT.1D-8)                             GOTO 904          KORAL280
        IF( ABS(EE1(3)).GT.1.OR. ABS(EE2(3)).GT.1)    GOTO 904          KORAL281
C                                                                       KORAL282
C**     SWITCHES                                                        KORAL283
        IF(KEYRAD.GT.9.AND.KEYGSW.EQ.3)               GOTO 905          KORAL284
        IF(KEYRAD.GT.2.AND.KEYRAD.LT.10)              GOTO 905          KORAL285
        IF(KEYGSW.LT.-1.OR.KEYGSW.GT.4)               GOTO 905          KORAL286
        IF(KEYGSW.EQ.2 .OR.KEYGSW.EQ.3)               GOTO 905          KORAL287
        IF(KEYGSW.EQ.0.AND.KEYWLB.EQ.2)               GOTO 913          KORAL288
        IF(KEYWLB.NE.1.AND.KEYWLB.NE.2)               GOTO 905          KORAL289
C                                                                       KORAL290
        IF(ISPIN.LT.0.OR.ISPIN.GT.1)                  GOTO 906          KORAL291
Change KMO start                                                        KORAL292
        IF (ITFIN .LE. 500 .OR. ITFIN .GT. 506) THEN                    KORAL293
          IF(ITFIN.EQ.0.OR.ITFIN.GT.4)                GOTO 907          BBL96031
        END IF                                                          KORAL295
Change KMO end                                                          KORAL296
C                                                                       KORAL297
C**     CUT OFF VALUES                                                  KORAL298
        IF(KEYRAD.LE.1.AND.VVMAX.GT.1.D0)             GOTO 908          KORAL299
        IF(KEYRAD.LE.1.AND.XK0.LT..0025D0)            GOTO 908          KORAL300
      IF(ITFIN.EQ.1.AND.ITDKRC.NE.0.AND.XK0DEC.LT..00049D0)   GOTO 909  KORAL301
        IF(ITFIN.EQ.3.AND.KEYWLB.NE.1)                GOTO 910          KORAL302
        IF(ITFIN.GT.9.AND.KEYWLB.NE.1)                GOTO 910          KORAL303
        IF((ITFIN.GT.2).and.(itfin.ne.4)                                BBL96032
     $               .AND.KEYYFS.NE.1000001.AND.KEYRAD.GT.10) GOTO 916  BBL96033
C -------------------------------------------------------------------   KORAL305
C INITIALISE MASSES OF STABLE PARTICLES                                 KORAL306
C                                                                       KORAL307
        CALL INIMAS                                                     KORAL308
C                                                                       KORAL309
C -------------------------------------------------------------------   KORAL310
C INITIALISE BEAM AND FINAL STATE PARAMETERS                            KORAL311
C                                                                       KORAL312
        CALL INIREA (KF1,PB1,EE1,KF2,PB2,EE2,ITFIN)                     KORAL313
C                                                                       KORAL314
C -------------------------------------------------------------------   KORAL315
C INITIALISE PHYSICAL CONSTANTS AND RAD.CORR. PARAMETERS                KORAL316
C                                                                       KORAL317
        CALL INIPHY                                                     KORAL318
C INITIALIZE PHOTOS                                                     KORAL319
        CALL PHOINI                                                     KORAL320
        CALL INIPHX(XK0DEC)                                             KORAL321
C                                                                       KORAL322
C PRINT SOME PARAMETERS SET PRIOR TO THIS POINT                         KORAL323
        WRITE(IOUT,7005) GAMMZ,AMW,SWSQ,AMFIN                           KORAL324
        IF(DABS(SWSQ).GT.1D0) GOTO 905                                  KORAL325
C                                                                       KORAL326
C -------------------------------------------------------------------   KORAL327
C INITIALISATION OF TAU DECAY PACKAGE TAUOLA                            KORAL328
C                                                                       KORAL329
        IF(ITFIN.EQ.1) THEN                                             KORAL330
          CALL INITDK                                                   KORAL331
        ENDIF                                                           KORAL332
C                                                                       KORAL333
C -------------------------------------------------------------------   KORAL334
C INITIALISE EVENTx                                                     KORAL335
C                                                                       KORAL336
        CALL EVENTZ(-1,KEYYFS)                                          KORAL337
C                                                                       KORAL338
C --------------------------------------------------------------------  KORAL339
C                                                                       KORAL340
      ELSEIF(MODE.EQ.0) THEN                                            KORAL341
C ================================================    LOOP OVER EVENTS  KORAL342
C                                                                       KORAL343
        IEVEN=IEVEN+1                                                   KORAL344
C --------------------------------------------------------------------  KORAL345
C FERMION PAIR PRODUCTION PROCESS                                       KORAL346
C                                                                       KORAL347
        CALL EVENTZ(0,KEYYFS)                                           KORAL348
C                                                                       KORAL349
C --------------------------------------------------------------------  KORAL350
C*MWG*  FILLING HEPEVT RECORD WITH BEAMS FERMIONS AND PHOTON  (ZTOHEP)  KORAL351
C                                                                       KORAL352
        DO 125 I=1,4                                                    KORAL353
        POL1(I)=0                                                       KORAL354
 125    POL2(I)=0                                                       KORAL355
        CALL ZTOHEP                                                     KORAL356
C*MWG*                                                                  KORAL357
C --------------------------------------------------------------------  KORAL358
C SPIN ASSIGNMENTS                                                      KORAL359
        IF(ISPIN.NE.0) THEN                                             KORAL360
          CALL SPIGEN(POL1,POL2)                                        KORAL361
          HELT1= POL1(3)                                                KORAL362
          HELT2=-POL2(3)                                                KORAL363
        ENDIF                                                           KORAL364
C                                                                       KORAL365
C --------------------------------------------------------------------  KORAL366
C TAU DECAYS                                                            KORAL367
        IF(ITFIN .EQ. 1) THEN                                           KORAL368
          KTO=1                                                         KORAL369
          CALL DEXAY(KTO,POL1)                                          KORAL370
          KTO=2                                                         KORAL371
          CALL DEXAY(KTO,POL2)                                          KORAL372
        IF (ITDKRC.EQ.1) THEN                                           KORAL373
         CALL PHOTOS(3)                                                 KORAL374
         CALL PHOTOS(4)                                                 KORAL375
        ENDIF                                                           KORAL376
        ENDIF                                                           KORAL377
C                                                                       KORAL378
C --------------------------------------------------------------------  KORAL379
C                                                                       KORAL380
      ELSEIF(MODE.EQ.1) THEN                                            KORAL381
C ================================================    FINAL STATISTICS  KORAL382
C                                                                       KORAL383
C CALCULATE TOTAL CROSS SECTION                                         KORAL384
        CALL EVENTZ(1,KEYYFS)                                           KORAL385
        CSTNB= CSTCM*1.E33                                              KORAL386
        DCSNB= ERREL*CSTNB                                              KORAL387
        NPAR(10)=IEVEN                                                  KORAL388
C ZW here input parameters were overwritten 4.06.89                     KORAL389
        XPAR(10)=CSTCM                                                  KORAL390
        XPAR(16)=CSTCM                                                  KORAL391
        XPAR(17)=CSTNB                                                  KORAL392
        XPAR(18)=DCSNB                                                  KORAL393
C                                                                       KORAL394
C --------------------------------------------------------------------  KORAL395
C CALCULATE tau PARTIAL DECAY WIDTHS                                    KORAL396
        IF(ITFIN.EQ.1) THEN                                             KORAL397
          CALL DEXAY(100)                                               KORAL398
          DO 180 I=1,22                                                 KORAL399
 180      XPAR(20+I)= GAMPMC(I)                                         KORAL400
        ENDIF                                                           KORAL401
C                                                                       KORAL402
C --------------------------------------------------------------------  KORAL403
C FINAL REPORT                                                          KORAL404
        WRITE(IOUT,7010) IEVEN,CSTNB,DCSNB,ERREL                        KORAL405
C                                                                       KORAL406
C --------------------------------------------------------------------  KORAL407
      ELSE                                                              KORAL408
C ======================================================= ILLEGAL MODE  KORAL409
        GOTO 901                                                        KORAL410
      ENDIF                                                             KORAL411
C     =====                                                             KORAL412
C                                                                       KORAL413
      RETURN                                                            KORAL414
C                                                                       KORAL415
  900 WRITE(IOUT,9900)                                                  KORAL416
 9900 FORMAT(' KORALZ: NONSENSE VALUE OF BEAM IDENTIFIER')              KORAL417
      STOP                                                              KORAL418
  901 WRITE(IOUT,9901)                                                  KORAL419
 9901 FORMAT(' KORALZ: NONSENSE VALUE OF MODE ')                        KORAL420
      STOP                                                              KORAL421
  902 WRITE(IOUT,9902)                                                  KORAL422
 9902 FORMAT(' KORALZ: NO TRANSV. MOM. ALLOWED FOR BEAMS ')             KORAL423
      STOP                                                              KORAL424
  903 WRITE(IOUT,9903)                                                  KORAL425
 9903 FORMAT(' KORALZ: SOME WRONG BEAM MOM. COMPONENT    ',/,           KORAL426
     $ 'TO FLIP BEAM DIRECTIONS USE KF1, KF2: BEAM IDENTIFIERS')        KORAL427
      STOP                                                              KORAL428
  904 WRITE(IOUT,9904)                                                  KORAL429
 9904 FORMAT(' KORALZ: WRONG BEAM POLARIZATION ')                       KORAL430
      STOP                                                              KORAL431
  905 WRITE(IOUT,9905)                                                  KORAL432
 9905 FORMAT(' KORALZ: BAD KEYGSW OR KEYRAD OR KEYWLB ')                KORAL433
      STOP                                                              KORAL434
  906 WRITE(IOUT,9906)                                                  KORAL435
 9906 FORMAT(' KORALZ: BAD ISPIN ')                                     KORAL436
      STOP                                                              KORAL437
  907 WRITE(IOUT,9907)                                                  KORAL438
 9907 FORMAT(' KORALZ: BAD ITFIN ')                                     KORAL439
      STOP                                                              KORAL440
  908 WRITE(IOUT,9908)                                                  KORAL441
 9908 FORMAT(' KORALZ: XK0 AND/OR VVMAX OUT OF RANGE FOR CHOSEN KEYRAD')KORAL442
      STOP                                                              KORAL443
  909 WRITE(IOUT,9909) XK0DEC                                           KORAL444
 9909 FORMAT(' KORALZ: XK0DEC OUT OF RANGE ',E10.5)                     KORAL445
      STOP                                                              KORAL446
  910 WRITE(IOUT,9910)                                                  KORAL447
 9910 FORMAT('KORALZ: combination of ITFIN and KEYWLB not yet possibl.')KORAL448
      STOP                                                              KORAL449
  913 WRITE(IOUT,9913)                                                  KORAL450
 9913 FORMAT(' KORALZ: Wrong value of NPR(9)=KEYWLB ')                  KORAL451
      STOP                                                              KORAL452
  916 WRITE(IOUT,9916)                                                  KORAL453
 9916 FORMAT                                                            KORAL454
     $ (' KORALZ: Wrong combination  of NPR(12)=KEYYFS, NPR(7)=ITFIN ') KORAL455
      STOP                                                              KORAL456
C                                                                       KORAL457
 7000 FORMAT(///1X,15(5HKKKKK)                                          KORAL458
     $ /,' K',     25X,'======== KORALZ VERSION 4.0 ===========',9X,1HK KORAL459
     $ /,' K',     25X,'==To be published in Comp Phys Comm====',9X,1HK KORAL460
     $ /,' K',     25X,'=last registerd corrections Nov 21, 93=',9X,1HK KORAL461
     $ /,' K',     25X,'==Authors: S. Jadach, B. Ward =========',9X,1HK KORAL462
     $ /,' K',     25X,'==========      Z. Was        =========',9X,1HK KORAL463
     $ /,' K',     25X,'=========== INPUT PARAMETERS ==========',9X,1HK KORAL464
     $ /,' K',I20  ,5X,'KF1    =  FIRST BEAM IDENTIFIER        ',9X,1HK KORAL465
     $ /,' K',I20  ,5X,'KF2    =  SECOND BEAM IDENTIFIER       ',9X,1HK KORAL466
     $ /,' K',     25X,'==== FOUR MOMENTA OF THE BEAMS ========',9X,1HK KORAL467
     $ /,' K',F20.9,5X,'PB1(3) =  FIRST BEAM, 3-RD COMPONENT   ',9X,1HK KORAL468
     $ /,' K',F20.9,5X,'PB1(4) =              0-TH COMPONENT   ',9X,1HK KORAL469
     $ /,' K',F20.9,5X,'PB2(3) = SECOND BEAM, 3-RD COMPONENT   ',9X,1HK KORAL470
     $ /,' K',F20.9,5X,'PB2(4) =              0-TH COMPONENT   ',9X,1HK KORAL471
     $ /,' K',     25X,'==== SPIN VECTORS OF THE BEAMS ========',9X,1HK KORAL472
     $ /,' K',F20.9,5X,'E1(3)  =  FIRST BEAM, 3-RD COMPONENT   ',9X,1HK KORAL473
     $ /,' K',F20.9,5X,'E2(3)  = SECOND BEAM  3-RD COMPONENT   ',9X,1HK)KORAL474
 7001 FORMAT(                                                           KORAL475
     $   ' K',     25X,'====== INPUT PARAMS IN NPAR ===========',9X,1HK KORAL476
     $ /,' K',I20  ,5X,'ISPIN    =  SPIN EFFECTS SWITCH        ',9X,1HK KORAL477
     $ /,' K',I20  ,5X,'KEYGSW   =  GSW IMPLEMENTATION LEVEL   ',9X,1HK KORAL478
     $ /,' K',I20  ,5X,'KEYRAD   =  BREMSSTRAHLUNG   SWITCH    ',9X,1HK KORAL479
     $ /,' K',I20  ,5X,'JAK1     =  DECAY TYPE FIRST  TAU      ',9X,1HK KORAL480
     $ /,' K',I20  ,5X,'JAK2     =  DECAY TYPE SECOND TAU      ',9X,1HK KORAL481
     $ /,' K',I20  ,5X,'ITFIN    =  TAU/MUON ...  PROD. SWITCH ',9X,1HK KORAL482
     $ /,' K',I20  ,5X,'ITDKRC   =  SWITCH FOR RC IN TAU DECAY ',9X,1HK KORAL483
     $ /,' K',I20  ,5X,'KEYWLB   =  type of electroweak library',9X,1HK KORAL484
     $ /,' K',I20  ,5X,'NNEUT    =  number of neutrinos (nunu) ',9X,1HK)KORAL485
 7002 FORMAT(                                                           KORAL486
     $   ' K',     25X,'====== INPUT PARAMS IN XPAR ===========',9X,1HK KORAL487
     $ /,' K',F20.9,5X,'AMZ  = MASS OF Z0 BOSON                ',9X,1HK KORAL488
     $ /,' K',F20.9,5X,'AMH  = MASS OF HIGGS BOSON             ',9X,1HK KORAL489
     $ /,' K',F20.9,5X,'AMTOP= MASS OF TOP QUARK               ',9X,1HK KORAL490
     $ /,' K',F20.9,5X,'GV   = VECTOR COUPLING CONST. IN DECAY ',9X,1HK KORAL491
     $ /,' K',F20.9,5X,'GA   = AXIAL  COUPLING CONST. IN DECAY ',9X,1HK KORAL492
     $ /,' K',F20.9,5X,'AMNUTA= MASS OF TAU-NEUTRINO  IN DECAY ',9X,1HK KORAL493
     $ /,' K',F20.9,5X,'XK0DEC= SOFT PHOTON CUTOFF IN TAU DEC. ',9X,1HK KORAL494
     $ /,' K',F20.9,5X,'XK0   = SOFT PHOTON CUT OFF            ',9X,1HK KORAL495
     $ /,' K',F20.9,5X,'VVMIN = MIN.VAL. OF V PARAM. IN YFS    ',9X,1HK KORAL496
     $ /,' K',F20.9,5X,'VVMAX = MAX.VAL. OF V PARAM. IN YFS    ',9X,1HK KORAL497
     $ /,' K',F20.9,5X,'AMNEUT= neutrino (quark) f. state mass ',9X,1HK KORAL498
     $  /,1X,15(5HKKKKK)/)                                              KORAL499
 7005 FORMAT(///1X,15(5HKKKKK)                                          KORAL500
     $ /,' K',     25X,'==== OTHER PARAMETERS SET IN KORALZ====',9X,1HK KORAL501
     $ /,' K',F20.9,5X,'GAMM   =  Z0 BOSON WIDTH, CALCULATED   ',9X,1HK KORAL502
     $ /,' K',F20.9,5X,'AMW    =  W  BOSON MASS,  CALCULATED   ',9X,1HK KORAL503
     $ /,' K',F20.9,5X,'SWSQ   =  SIN**2(THETAWEINBERG)        ',9X,1HK KORAL504
     $ /,' K',F20.9,5X,'AMFIN  =  OUTGOING FERMION MASS        ',9X,1HK KORAL505
     $  /,1X,15(5HKKKKK)/)                                              KORAL506
 7010 FORMAT(///1X,15(5HKKKKK)                                          KORAL507
     $ /,' K',     25X,'======== KORALZ VERSION 4.0 ===========',9X,1HK KORAL508
     $ /,' K',     25X,'==To be published in Comp Phys Comm====',9X,1HK KORAL509
     $ /,' K',     25X,'==Authors: S. Jadach, B. Ward =========',9X,1HK KORAL510
     $ /,' K',     25X,'==========      Z. Was        =========',9X,1HK KORAL511
     $ /,' K',     25X,'============= FINAL REPORT ============',9X,1HK KORAL512
     $ /,' K',I20  ,5X,'Number of generated events             ',9X,1HK KORAL513
     $ /,' K',F20.9,5X,'Total cross sections in nanobarns      ',9X,1HK KORAL514
     $ /,' K',F20.9,5X,'Absolute error                         ',9X,1HK KORAL515
     $ /,' K',F20.9,5X,'Relative error                         ',9X,1HK KORAL516
     $ /,1X,15(5HKKKKK)/)                                               KORAL517
      END                                                               KORAL518
      SUBROUTINE INIMAS                                                 INIMAS 2
C ----------------------------------------------------------------------INIMAS 3
C     INITIALISATION OF MASSES                                          INIMAS 4
C                                                                       INIMAS 5
C     called by : KORALZ                                                INIMAS 6
C ----------------------------------------------------------------------INIMAS 7
      COMMON / IDPART/ IA1                                              IDPART 2
      PARAMETER (L1MST=200, L1PAR=200)                                  LUN7COM2
      PARAMETER (L2PAR=500, L2PARF=2000 )                               LUN7COM3
      PARAMETER (LJNPAR=4000)                                           LUN7COM4
      COMMON /LUDAT1/ MSTU(L1MST),PARU(L1PAR),MSTJ(L1MST),PARJ(L1PAR)   LUN7COM5
      COMMON /LUDAT2/ KCHG(L2PAR,3),PMAS(L2PAR,4),PARF(L2PARF),VCKM(4,4)LUN7COM6
      COMMON /LUDAT3/ MDCY(L2PAR,3),MDME(L2PARF,2),BRAT(L2PARF),        LUN7COM7
     &                KFDP(L2PARF,5)                                    LUN7COM8
      COMMON /LUDAT4/ CHAF(L2PAR)                                       LUN7COM9
      CHARACTER*8 CHAF                                                  LUN7CO10
      COMMON /LUJETS/ N7LU,K7LU(LJNPAR,5),P7LU(LJNPAR,5),V7LU(LJNPAR,5) LUN7CO11
C                                                                       LUN7CO12
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
C                                                                       INIMAS11
C IN-COMING / OUT-GOING  FERMION MASSES                                 INIMAS12
      AMTAU  = 1.777                                                    INIMAS13
      AMEL   = 0.0005111                                                INIMAS14
      AMNUE  = 0.0                                                      INIMAS15
      AMMU   = 0.105659                                                 INIMAS16
      AMNUMU = 0.00                                                     INIMAS17
C                                                                       INIMAS18
C MASSES USED IN TAU DECAYS                                             INIMAS19
      AMPIZ  = 0.134964                                                 INIMAS20
      AMPI   = 0.139568                                                 INIMAS21
      AMRO   = 0.7714                                                   INIMAS22
      GAMRO  = 0.153                                                    INIMAS23
cam   AMRO   = 0.773                                                    INIMAS24
cam   GAMRO  = 0.145                                                    INIMAS25
      AMA1   =  PMAS(LUCOMP(ia1),1)       ! AMA1   = 1.251              INIMAS26
      GAMA1  =  PMAS(LUCOMP(ia1),2)       ! GAMA1  = 0.599              INIMAS27
      print *,'INIMAS a1 mass= ',ama1,gama1                             INIMAS28
      AMK    = 0.493667                                                 INIMAS29
      AMKZ   = 0.49772                                                  INIMAS30
      AMKST  = 0.8921                                                   INIMAS31
      GAMKST = 0.0513                                                   INIMAS32
C                                                                       INIMAS33
      RETURN                                                            INIMAS34
      END                                                               INIMAS35
      SUBROUTINE INIREA (KF1,PB1,EE1,KF2,PB2,EE2,ITFIN)                 INIREA 2
C-----------------------------------------------------                  INIREA 3
C                                                                       INIREA 4
C INITIALISE REACTION FROM INPUT ARGUMENTS                              INIREA 5
C                                                                       INIREA 6
C     called by : KORALZ                                                INIREA 7
C                                                                       INIREA 8
C-----------------------------------------------------                  INIREA 9
      COMMON / BEAMS / XPB1(4),XPB2(4),KFB1,KFB2                        BEAMS  2
      REAL*4           XPB1   ,XPB2                                     BEAMS  3
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / INSPIN / SEPS1,SEPS2                                     INSPIN 2
      REAL*8            SEPS1,SEPS2                                     INSPIN 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / IDFC  / IDFF                                             IDFC   2
      COMMON /NEWMOD/  AMNEUT,NNEUT                                     NEWMOD 2
      REAL*8           AMNEUT                                           NEWMOD 3
      REAL*4 PB1(4),EE1(3),PB2(4),EE2(3)                                INIREA16
C                                                                       INIREA17
        KFB1=KF1                                                        INIREA18
        KFB2=KF2                                                        INIREA19
C       BEAM MOMENTA                                                    INIREA20
        DO 15 I=1,4                                                     INIREA21
        XPB1(I)=PB1(I)                                                  INIREA22
   15   XPB2(I)=PB2(I)                                                  INIREA23
        SEPS1=EE1(3)                                                    INIREA24
        SEPS2=EE2(3)                                                    INIREA25
        ENE=XPB1(4)                                                     INIREA26
C                                                                       INIREA27
C       DETERMINE WHETHER BEAM ALONG Z-AXIS IS AN ELECTR. OR POSITRON   INIREA28
C       FOR IDE<0 PB1 (ALONG Z-AXIS) REPRESENTS POSITRON                INIREA29
        IDE= 2*KFB1/IABS(KFB1)                                          INIREA30
C                                                                       INIREA31
C       DETERMINE WHETHER QP REPRESENT PARTICLE OR  ANTIPART.           INIREA32
C                                      (IDF<0)  OR   (IDF>0             INIREA33
      IF(ITFIN.LE.2.or.itfin.eq.4) THEN                                 BBL96034
C       ABS(IDF) = 2 MEANS THAT IT'S A LEPTON                           INIREA35
C       IDF=-2 MEANS THAT QP IS THE 4-MOMENTUM OF TAU+ (OR MU+)         INIREA36
        IDF= 2*KFB1/IABS(KFB1)                                          INIREA37
      ELSEIF(ITFIN.EQ.3) THEN                                           INIREA38
C       ABS(IDF) = 1 MEANS THAT IT'S A NEUTRINO                         INIREA39
C       IDF=-1 MEANS THAT QP IS THE 4-MOMENTUM OF NUBAR                 INIREA40
        IDF=   KFB1/IABS(KFB1)                                          INIREA41
      ENDIF                                                             INIREA42
C                                                                       INIREA43
C       INITIAL FERMION MASS ( ELECTRON !)                              INIREA44
        AMIN=AMEL                                                       INIREA45
C                                                                       INIREA46
C       FINAL FERMION  MASS ETC.                                        INIREA47
        IF(ITFIN .EQ. 1) THEN                                           INIREA48
C*MWG* TAU CASE: PDG-code of tau- is 15                                 INIREA49
          AMFIN = AMTAU                                                 INIREA50
          IDFF = 15*IDF/IABS(IDF)                                       INIREA51
        ELSEIF(ITFIN .EQ. 2) THEN                                       INIREA52
C*MWG* MUON CASE: PDG-code of mu- is 13                                 INIREA53
          AMFIN = AMMU                                                  INIREA54
          IDFF = 13*IDF/IABS(IDF)                                       INIREA55
C DECAY SUPRESSED                                                       INIREA56
          JAK1=-1                                                       INIREA57
          JAK2=-1                                                       INIREA58
        ELSEIF(ITFIN .EQ. 3) THEN                                       INIREA59
C*MWG* NU CASE: PDG-code of nu_tau is 16                                INIREA60
          AMFIN = AMNEUT                                                INIREA61
          IDFF = 16*IDF/IABS(IDF)                                       INIREA62
C DECAY SUPRESSED                                                       INIREA63
          JAK1=-1                                                       INIREA64
          JAK2=-1                                                       INIREA65
        ELSEIF(ITFIN .EQ. 4) THEN                                       BBL96035
C*bbl* e CASE: PDG-code of el is 11 only s channel , no t channel       BBL96036
          AMFIN = AMEL                                                  BBL96037
          IDFF = 11*IDF/IABS(IDF)                                       BBL96038
C DECAY SUPRESSED                                                       BBL96039
          JAK1=-1                                                       BBL96040
          JAK2=-1                                                       BBL96041
Change KMO start                                                        INIREA66
        ELSE                                                            INIREA67
          IAA  = ABS(ITFIN)-500                                         INIREA68
          IF (IAA .EQ. 2 .OR. IAA .EQ. 4 .OR. IAA .EQ. 6) THEN          INIREA69
            IDF= 3*KFB1/IABS(KFB1)                                      INIREA70
          ELSE                                                          INIREA71
            IDF= 4*KFB1/IABS(KFB1)                                      INIREA72
          END IF                                                        INIREA73
          AMFIN = AMNEUT                                                INIREA74
          IDFF = SIGN(IAA,IDF)                                          INIREA75
Change KMO end                                                          INIREA76
        ENDIF                                                           INIREA77
C                                                                       INIREA78
      RETURN                                                            INIREA79
      END                                                               INIREA80
      SUBROUTINE INIVTX                                                 INIVTX 2
C ----------------------------------------------------------------------INIVTX 3
C                                                                       INIVTX 4
C     INITIALISATION OF COUPLING CONSTANTS AND FERMION-GAMMA / Z0 VERTEXINIVTX 5
C                                                                       INIVTX 6
C     called by : KORALZ                                                INIVTX 7
C ----------------------------------------------------------------------INIVTX 8
      IMPLICIT REAL*8 (A-H,O-Z)                                         INIVTX 9
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / GAUSPM /SS,POLN,T3E,QE,T3F,QF                            GAUSPM 2
     &                ,XUPGI   ,XUPZI   ,XUPGF   ,XUPZF                 GAUSPM 3
     &                ,NDIAG0,NDIAGA,KEYA,KEYZ                          GAUSPM 4
     &                ,ITCE,JTCE,ITCF,JTCF,KOLOR                        GAUSPM 5
      REAL*8           SS,POLN,T3E,QE,T3F,QF                            GAUSPM 6
     &                ,XUPGI(2),XUPZI(2),XUPGF(2),XUPZF(2)              GAUSPM 7
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
C                                                                       INIVTX14
      ITCE=IDE/IABS(IDE)                                                INIVTX15
      JTCE=(1-ITCE)/2                                                   INIVTX16
      ITCF=IDF/IABS(IDF)                                                INIVTX17
      JTCF=(1-ITCF)/2                                                   INIVTX18
      CALL GIVIZO( IDE, 1,AIZOR,QE,KDUMM)                               INIVTX19
      CALL GIVIZO( IDE,-1,AIZOL,QE,KDUMM)                               INIVTX20
      XUPGI(1)=QE                                                       INIVTX21
      XUPGI(2)=QE                                                       INIVTX22
      T3E    = AIZOL+AIZOR                                              INIVTX23
      XUPZI(1)=(AIZOR-QE*SWSQ)/SQRT(SWSQ*(1-SWSQ))                      INIVTX24
      XUPZI(2)=(AIZOL-QE*SWSQ)/SQRT(SWSQ*(1-SWSQ))                      INIVTX25
      CALL GIVIZO( IDF, 1,AIZOR,QF,KOLOR)                               INIVTX26
      CALL GIVIZO( IDF,-1,AIZOL,QF,KOLOR)                               INIVTX27
      XUPGF(1)=QF                                                       INIVTX28
      XUPGF(2)=QF                                                       INIVTX29
      T3F    =  AIZOL+AIZOR                                             INIVTX30
      XUPZF(1)=(AIZOR-QF*SWSQ)/SQRT(SWSQ*(1-SWSQ))                      INIVTX31
      XUPZF(2)=(AIZOL-QF*SWSQ)/SQRT(SWSQ*(1-SWSQ))                      INIVTX32
C                                                                       INIVTX33
      NDIAG0=2                                                          INIVTX34
      NDIAGA=11                                                         INIVTX35
      KEYA  = 1                                                         INIVTX36
      KEYZ  = 1                                                         INIVTX37
C                                                                       INIVTX38
C                                                                       INIVTX39
      RETURN                                                            INIVTX40
      END                                                               INIVTX41
      SUBROUTINE INITDK                                                 INITDK 2
C ----------------------------------------------------------------------INITDK 3
C     INITIALISATION OF TAU DECAY PARAMETERS  and routines              INITDK 4
C                                                                       INITDK 5
C     called by : KORALZ                                                INITDK 6
C ----------------------------------------------------------------------INITDK 7
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / TAUBRA / GAMPRT(30),JLIST(30),NCHAN                      TAUBRA 2
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            TAUKLE 2
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            TAUKLE 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      REAL*4 PI                                                         INITDK13
C                                                                       INITDK14
C LIST OF BRANCHING RATIOS                                              INITDK15
CAM normalised to e nu nutau channel                                    INITDK16
CAM                  enu   munu   pinu  rhonu   A1nu   Knu    K*nu   pi'INITDK17
CAM   DATA JLIST  /    1,     2,     3,     4,     5,     6,     7,     INITDK18
CAM               /0.1779,0.1731,0.1106,0.2530,0.1811,0.0072,0.0139     AML95091
CAM   DATA GAMPRT / 1.000,0.9732,0.6217,1.4221,1.0180,0.0405,0.0781     AML95092
CAM   DATA GAMPRT /1.000,0.9676,0.6154,1.3503,1.0225,0.0368,O.O758      INITDK20
CAM                                                                     INITDK21
C                                                                       INITDK22
C    conventions of particles names                                     INITDK23
c                                                                       INITDK24
cam  mode (JAK)                     8                     9             INITDK25
CAM  channel          pi- pi- pi0 pi+              3pi0 pi-             INITDK26
cam  particle code  -1,-1, 2, 1, 0, 0,     2, 2, 2,-1, 0, 0,            INITDK27
CAM  BR relative to electron    .2414,                .0601,            AML95093
c                                                                       INITDK29
*                                  10                    11             INITDK30
*    1                     3pi+- 2pi0                 5pi+-             INITDK31
*    1              -1,-1, 1, 2, 2, 0,    -1,-1,-1, 1, 1, 0,            INITDK32
*    1                          .0281,                .0045,            AML95094
                                                                        INITDK34
*                                  12                    13             INITDK35
*    2                      5pi+- pi0            3pi+- 3pi0             INITDK36
*    2              -1,-1,-1, 1, 1, 2,    -1,-1, 1, 2, 2, 2,            INITDK37
*    2                          .0010,                .0062,            AML95095
                                                                        INITDK39
*                                  14                    15             INITDK40
*    3                      K- pi- K+             K0 pi- KB             INITDK41
*    3              -3,-1, 3, 0, 0, 0,     4,-1,-4, 0, 0, 0,            INITDK42
*    3                          .0096,                .0169,            AML95096
                                                                        INITDK44
*                                  16                    17             INITDK45
*    4                      K- pi0 K0               2pi0 K-             INITDK46
*    4              -3, 2, 4, 0, 0, 0,     2, 2,-3, 0, 0, 0,            INITDK47
*    4                          .0056,                .0045,            AML95097
                                                                        INITDK49
*                                  18                    19             INITDK50
*    5                     K- pi- pi+            pi- KB pi0             INITDK51
*    5              -3,-1, 1, 0, 0, 0,    -1,-4, 2, 0, 0, 0,            INITDK52
*    5                          .0219,                .0180,            AML95098
                                                                        INITDK54
*                                  20                    21             INITDK55
*    6                    eta pi- pi0         pi- pi0 gamma             INITDK56
*    6               9,-1, 2, 0, 0, 0,    -1, 2, 8, 0, 0, 0,            INITDK57
*    6                          .0096,                .0088,            AML95099
                                                                        INITDK59
*                                  22   /                               INITDK60
*    7                          K- K0   /                               INITDK61
*    7                          -3, 4   /                               INITDK62
*    7                          .0146   /                               AML95010
                                                                        INITDK64
C                                                                       INITDK65
      DIMENSION NOPIK(6,NMODE),NPIK(NMODE)                              INITDK66
CAM   outgoing multiplicity and flavors of multi-pion /multi-K modes    INITDK67
      DATA   NPIK  /                4,                    4,            INITDK68
     1                              5,                    5,            INITDK69
     2                              6,                    6,            INITDK70
     3                              3,                    3,            INITDK71
     4                              3,                    3,            INITDK72
     5                              3,                    3,            INITDK73
     6                              3,                    3,            INITDK74
     7                              2   /                               INITDK75
      DATA  NOPIK / -1,-1, 2, 1, 0, 0,     2, 2, 2,-1, 0, 0,            INITDK76
     1              -1,-1, 1, 2, 2, 0,    -1,-1,-1, 1, 1, 0,            INITDK77
     2              -1,-1,-1, 1, 1, 2,    -1,-1, 1, 2, 2, 2,            INITDK78
     3              -3,-1, 3, 0, 0, 0,     4,-1,-4, 0, 0, 0,            INITDK79
     4              -3, 2, 4, 0, 0, 0,     2, 2,-3, 0, 0, 0,            INITDK80
     5              -3,-1, 1, 0, 0, 0,    -1,-4, 2, 0, 0, 0,            INITDK81
     6               9,-1, 2, 0, 0, 0,    -1, 2, 8, 0, 0, 0,            INITDK82
     7              -3, 4, 0, 0, 0, 0   /                               INITDK83
C LIST OF BRANCHING RATIOS                                              INITDK84
      NCHAN = NMODE + 7                                                 INITDK85
      DO 1 I = 1,30                                                     INITDK86
      IF (I.LE.NCHAN) THEN                                              INITDK87
        JLIST(I) = I                                                    INITDK88
        IF(I.EQ. 1) GAMPRT(I) = 1.0000                                  INITDK89
        IF(I.EQ. 2) GAMPRT(I) =  .9732                                  AML95011
        IF(I.EQ. 3) GAMPRT(I) =  .6217                                  AML95012
        IF(I.EQ. 4) GAMPRT(I) = 1.4221                                  AML95013
        IF(I.EQ. 5) GAMPRT(I) = 1.0180                                  AML95014
        IF(I.EQ. 6) GAMPRT(I) =  .0405                                  AML95015
        IF(I.EQ. 7) GAMPRT(I) =  .0781                                  AML95016
        IF(I.EQ. 8) GAMPRT(I) =  .2414                                  AML95017
        IF(I.EQ. 9) GAMPRT(I) =  .0601                                  AML95018
        IF(I.EQ.10) GAMPRT(I) =  .0281                                  AML95019
        IF(I.EQ.11) GAMPRT(I) =  .0045                                  AML95020
        IF(I.EQ.12) GAMPRT(I) =  .0010                                  AML95021
        IF(I.EQ.13) GAMPRT(I) =  .0062                                  AML95022
        IF(I.EQ.14) GAMPRT(I) =  .0096                                  AML95023
        IF(I.EQ.15) GAMPRT(I) =  .0169                                  AML95024
        IF(I.EQ.16) GAMPRT(I) =  .0056                                  AML95025
        IF(I.EQ.17) GAMPRT(I) =  .0045                                  AML95026
        IF(I.EQ.18) GAMPRT(I) =  .0219                                  AML95027
        IF(I.EQ.19) GAMPRT(I) =  .0180                                  AML95028
        IF(I.EQ.20) GAMPRT(I) =  .0096                                  AML95029
        IF(I.EQ.21) GAMPRT(I) =  .0088                                  AML95030
        IF(I.EQ.22) GAMPRT(I) =  .0146                                  AML95031
        IF(I.EQ. 8) NAMES(I-7)='  TAU-  --> 2PI-   PI0   PI+   '        INITD111
        IF(I.EQ. 9) NAMES(I-7)='  TAU-  --> 3PI0         PI-   '        INITD112
        IF(I.EQ.10) NAMES(I-7)='  TAU-  --> 2PI-   PI+  2PI0   '        INITD113
        IF(I.EQ.11) NAMES(I-7)='  TAU-  --> 3PI-  2PI+         '        INITD114
        IF(I.EQ.12) NAMES(I-7)='  TAU-  --> 3PI-  2PI+   PI0   '        INITD115
        IF(I.EQ.13) NAMES(I-7)='  TAU-  --> 2PI-   PI+  3PI0   '        INITD116
        IF(I.EQ.14) NAMES(I-7)='  TAU-  -->  K-  PI-   K+      '        INITD117
        IF(I.EQ.15) NAMES(I-7)='  TAU-  -->  K0  PI-  K0B      '        INITD118
        IF(I.EQ.16) NAMES(I-7)='  TAU-  -->  K-  PI0   K0      '        INITD119
        IF(I.EQ.17) NAMES(I-7)='  TAU-  --> PI0  PI0   K-      '        INITD120
        IF(I.EQ.18) NAMES(I-7)='  TAU-  -->  K-  PI-  PI+      '        INITD121
        IF(I.EQ.19) NAMES(I-7)='  TAU-  --> PI-  K0B  PI0      '        INITD122
        IF(I.EQ.20) NAMES(I-7)='  TAU-  --> ETA  PI-  PI0      '        INITD123
        IF(I.EQ.21) NAMES(I-7)='  TAU-  --> PI-  PI0  GAM      '        INITD124
        IF(I.EQ.22) NAMES(I-7)='  TAU-  -->  K-  K0            '        INITD125
      ELSE                                                              INITD126
        JLIST(I) = 0                                                    INITD127
        GAMPRT(I) = 0.                                                  INITD128
      ENDIF                                                             INITD129
   1  CONTINUE                                                          INITD130
      DO I=1,NMODE                                                      INITD131
        MULPIK(I)=NPIK(I)                                               INITD132
        DO J=1,MULPIK(I)                                                INITD133
         IDFFIN(J,I)=NOPIK(J,I)                                         INITD134
        ENDDO                                                           INITD135
      ENDDO                                                             INITD136
C                                                                       INITD137
C                                                                       INITD138
c --- coefficients to fix ratio of:                                     INITD139
c --- (a1 -> 3pi+-)/(a1 -> pi+-2pi0) matrix elements (massless lim.)    INITD140
c --- probability of k0 to be ks                                        INITD141
c --- probability of k0b to be ks                                       INITD142
c --- ratio of coefficients for k*--> k0 pi-                            INITD143
c --- all coefficients should be in the range (0.0,1.0)                 INITD144
c --- their meaning is probability of the first choice only if one      INITD145
c --- neglects mass-phase space effects                                 INITD146
      BRA1=0.5                                                          INITD147
      BRK0=0.5                                                          INITD148
      BRK0B=0.5                                                         INITD149
      BRKS=0.6667                                                       INITD150
C                                                                       INITD151
C --- remaining constants                                               INITD152
      PI =4.*ATAN(1.)                                                   INITD153
      GFERMI = 1.16637E-5                                               INITD154
      CCABIB = 0.975                                                    INITD155
C      GV     = 1.0                                                     INITD156
C      GA     =-1.0                                                     INITD157
C ZW 13.04.89 HERE WAS AN ERROR                                         INITD158
      SCABIB = SQRT(1.-CCABIB**2)                                       INITD159
      GAMEL  = GFERMI**2*AMTAU**5/(192*PI**3)                           INITD160
C                                                                       INITD161
      CALL DEXAY(-1)                                                    INITD162
C                                                                       INITD163
      RETURN                                                            INITD164
      END                                                               INITD165
      FUNCTION DCDMAS(IDENT)                                            DCDMAS 2
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
c                                                                       DCDMAS 4
      IF      (IDENT.EQ. 1) THEN                                        DCDMAS 5
        APKMAS=AMPI                                                     DCDMAS 6
      ELSEIF  (IDENT.EQ.-1) THEN                                        DCDMAS 7
        APKMAS=AMPI                                                     DCDMAS 8
      ELSEIF  (IDENT.EQ. 2) THEN                                        DCDMAS 9
        APKMAS=AMPIZ                                                    DCDMAS10
      ELSEIF  (IDENT.EQ.-2) THEN                                        DCDMAS11
        APKMAS=AMPIZ                                                    DCDMAS12
      ELSEIF  (IDENT.EQ. 3) THEN                                        DCDMAS13
        APKMAS=AMK                                                      DCDMAS14
      ELSEIF  (IDENT.EQ.-3) THEN                                        DCDMAS15
        APKMAS=AMK                                                      DCDMAS16
      ELSEIF  (IDENT.EQ. 4) THEN                                        DCDMAS17
        APKMAS=AMKZ                                                     DCDMAS18
      ELSEIF  (IDENT.EQ.-4) THEN                                        DCDMAS19
        APKMAS=AMKZ                                                     DCDMAS20
      ELSEIF  (IDENT.EQ. 8) THEN                                        DCDMAS21
        APKMAS=0.0001                                                   DCDMAS22
      ELSEIF  (IDENT.EQ. 9) THEN                                        DCDMAS23
        APKMAS=0.5488                                                   DCDMAS24
      ELSE                                                              DCDMAS25
        PRINT *, 'STOP IN APKMAS, WRONG IDENT=',IDENT                   DCDMAS26
        STOP                                                            DCDMAS27
      ENDIF                                                             DCDMAS28
      DCDMAS=APKMAS                                                     DCDMAS29
      END                                                               DCDMAS30
      FUNCTION LUNPIK(ID,ISGN)                                          LUNPIK 2
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            TAUKLE 2
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            TAUKLE 3
c                                                                       LUNPIK 4
      IDENT=ID*ISGN                                                     LUNPIK 5
      IF      (IDENT.EQ. 1) THEN                                        LUNPIK 6
        IPKDEF= 211                                                     LUNPIK 7
      ELSEIF  (IDENT.EQ.-1) THEN                                        LUNPIK 8
        IPKDEF=-211                                                     LUNPIK 9
      ELSEIF  (IDENT.EQ. 2) THEN                                        LUNPIK10
        IPKDEF= 111                                                     LUNPIK11
      ELSEIF  (IDENT.EQ.-2) THEN                                        LUNPIK12
        IPKDEF= 111                                                     LUNPIK13
      ELSEIF  (IDENT.EQ. 3) THEN                                        LUNPIK14
        IPKDEF= 321                                                     LUNPIK15
      ELSEIF  (IDENT.EQ.-3) THEN                                        LUNPIK16
        IPKDEF=-321                                                     LUNPIK17
      ELSEIF  (IDENT.EQ. 4) THEN                                        LUNPIK18
C                                                                       LUNPIK19
C K0 --> K0_LONG (IS 130) / K0_SHORT (IS 310) = 1/1                     LUNPIK20
        CALL RANMAR(XIO,1)                                              LUNPIK21
        IF (XIO.GT.BRK0) THEN                                           LUNPIK22
          IPKDEF= 130                                                   LUNPIK23
        ELSE                                                            LUNPIK24
          IPKDEF= 310                                                   LUNPIK25
        ENDIF                                                           LUNPIK26
      ELSEIF  (IDENT.EQ.-4) THEN                                        LUNPIK27
C                                                                       LUNPIK28
C K0B--> K0_LONG (IS 130) / K0_SHORT (IS 310) = 1/1                     LUNPIK29
        CALL RANMAR(XIO,1)                                              LUNPIK30
        IF (XIO.GT.BRK0B) THEN                                          LUNPIK31
          IPKDEF= 130                                                   LUNPIK32
        ELSE                                                            LUNPIK33
          IPKDEF= 310                                                   LUNPIK34
        ENDIF                                                           LUNPIK35
      ELSEIF  (IDENT.EQ. 8) THEN                                        LUNPIK36
        IPKDEF= 22                                                      LUNPIK37
      ELSEIF  (IDENT.EQ.-8) THEN                                        LUNPIK38
        IPKDEF= 22                                                      LUNPIK39
      ELSEIF  (IDENT.EQ. 9) THEN                                        LUNPIK40
        IPKDEF= 221                                                     LUNPIK41
      ELSEIF  (IDENT.EQ.-9) THEN                                        LUNPIK42
        IPKDEF= 221                                                     LUNPIK43
      ELSE                                                              LUNPIK44
        PRINT *, 'STOP IN IPKDEF, WRONG IDENT=',IDENT                   LUNPIK45
        STOP                                                            LUNPIK46
      ENDIF                                                             LUNPIK47
      LUNPIK=IPKDEF                                                     LUNPIK48
      END                                                               LUNPIK49
      SUBROUTINE INIPHY                                                 INIPHY 2
C ----------------------------------------------------------------------INIPHY 3
C     INITIALISATION OF PHYSICAL PARAMETERS                             INIPHY 4
C     USED IN QED and/or GSW ROUTINES                                   INIPHY 5
C                                                                       INIPHY 6
C     called by : KORALZ                                                INIPHY 7
C ----------------------------------------------------------------------INIPHY 8
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
       COMMON /GSWLIB/ KEYWLB                                           GSWLIB 2
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*8   GAMW,GAMW0,GAMMZ0,GAMMX0,GAMMX,AMX,AMWW,SWSQR            INIPHY15
      REAL*8 PI8,MZ,MT,MH                                               INIPHY16
C                                                                       INIPHY17
      PI8    = 4.D0*DATAN(1.D0)                                         INIPHY18
      ALFINV = 137.03604D0                                              INIPHY19
      ALFPI  = 1D0/(ALFINV*PI8)                                         INIPHY20
C                                                                       INIPHY21
C -------------------------------------------------------------------   INIPHY22
C INITIALISATIONS OF THE GSW RAD CORR. SUBROGRAMS                       INIPHY23
C SET RELEVANT VARIABLES FOR KEYGSW>1                                   INIPHY24
      IF(KEYGSW.GE.2) THEN                                              INIPHY25
C       MASS OF Z     FROM INPUT       AMZ                              INIPHY26
C       MASS OF HIGGS FROM INPUT       AMH                              INIPHY27
C       MASS OF TOP   FROM INPUT       AMTOP                            INIPHY28
C**     CALCULATE W MASS OUT OF MUON LIFE TIME AND MASS OF Z0           INIPHY29
C**     CALCULATE SIN(THETAWEINBERG) OUT OF W MASS                      INIPHY30
C**     CALCULATE Z0 WIDTH                                              INIPHY31
C       -------------------------                                       INIPHY32
      IF     (KEYWLB.EQ.2 ) THEN                                        INIPHY33
         WRITE(IOUT,'('' ELECTROWEAK CORRECTIONS ACCORDING TO '')')     INIPHY34
         WRITE(IOUT,'('' second library                       '')')     INIPHY35
        CALL       HOLSTA(IDF,KEYGSW,AMZ,AMH,AMTOP)                     INIPHY36
        CALL       PRMOUT(AMX,GAMMX0,GAMMX,AMWW,GAMW0,GAMW,SWSQR)       INIPHY37
CHBU                                                                    INIPHY38
        AMW  =AMWW                                                      INIPHY39
        SWSQ =SWSQR                                                     INIPHY40
        GAMMZ=GAMMX                                                     INIPHY41
        GAMMZ0=GAMMZ                                                    INIPHY42
      ELSEIF (KEYWLB.EQ.1) THEN                                         INIPHY43
         WRITE(IOUT,'('' ELECTROWEAK CORRECTIONS ACCORDING TO '')')     INIPHY44
         WRITE(IOUT,'('' first library                        '')')     INIPHY45
        KEYTAB= 1                                                       INIPHY46
        MZ=AMZ                                                          INIPHY47
        MT=AMTOP                                                        INIPHY48
        MH=AMH                                                          INIPHY49
        CALL MASET(MZ,MH,MT)                                            INIPHY50
        CALL PRMOUT(AMX,GAMMZ0,GAMMX,AMWW,GAMW0,GAMW,SWSQR )            INIPHY51
        AMW  =AMWW                                                      INIPHY52
        SWSQ =SWSQR                                                     INIPHY53
        GAMMZ=GAMMZ0                                                    INIPHY54
      ENDIF                                                             INIPHY55
C                                                                       INIPHY56
      ENDIF                                                             INIPHY57
C**   INIT. OF COMMON /GAUSPM/                                          INIPHY58
      CALL INIVTX                                                       INIPHY59
      IF(KEYGSW.GE.2.AND.KEYWLB.EQ.1) THEN                              INIPHY60
C**     PRETABULATION OF VACUUM POL. FUNCTIONS                          INIPHY61
        CALL CINT                                                       INIPHY62
      ENDIF                                                             INIPHY63
C                                                                       INIPHY64
      RETURN                                                            INIPHY65
      END                                                               INIPHY66
      SUBROUTINE INIPHX(XK00)                                           INIPHX 2
C ----------------------------------------------------------------------INIPHX 3
C     INITIALISATION OF PARAMETERS                                      INIPHX 4
C     USED IN QED and/or GSW ROUTINES                                   INIPHX 5
C ----------------------------------------------------------------------INIPHX 6
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      REAL*8 PI8,XK00                                                   INIPHX 8
C                                                                       INIPHX 9
      PI8    = 4.D0*DATAN(1.D0)                                         INIPHX10
      ALFINV = 137.03604D0                                              INIPHX11
      ALFPI  = 1D0/(ALFINV*PI8)                                         INIPHX12
C---->      XK0=XK00                                                    INIPHX13
      END                                                               INIPHX14
      FUNCTION BORNS(MODE,SVAR,COSTHE,TA,TB)                            BORNS  2
C ----------------------------------------------------------------------BORNS  3
C THIS ROUTINE PROVIDES BORN CROSS SECTION. IT HAS THE SAME         *   BORNS  4
C STRUCTURE AS FUNTIS AND FUNTIH, THUS CAN BE USED AS SIMPLER       *   BORNS  5
C EXAMPLE OF THE METHOD APPLIED THERE                               *   BORNS  6
C 18.04. IT IS NOT SO SIMPLE NOW THERE ARE 2 MODES SIMPLE OLD ONE   *   BORNS  7
C AND THE NEW ONE WHERE ALSO ELECTROWEAK CORRECTIONS ARE ADDED      *   BORNS  8
C                                                                       BORNS  9
C     called by : BORNY, BORAS, BORNV, WAGA, WEIGHT                     BORNS 10
C ----------------------------------------------------------------------BORNS 11
      IMPLICIT REAL*8(A-H,O-Z)                                          BORNS 12
       COMMON /GSWLIB/ KEYWLB                                           GSWLIB 2
      IF(SVAR.LE.0.D0) THEN                                             BORNS 14
       BORNS=0.D0                                                       BORNS 15
       RETURN                                                           BORNS 16
      ENDIF                                                             BORNS 17
      IF (KEYWLB.EQ.1) THEN                                             BORNS 18
        BORNS=BORNR(MODE,SVAR,COSTHE,TA,TB)                             BORNS 19
      ELSE                                                              BORNS 20
        BORNS=BORNH(MODE,SVAR,COSTHE,TA,TB)                             BORNS 21
      ENDIF                                                             BORNS 22
      END                                                               BORNS 23
      SUBROUTINE PRMOUT(ZMASS,GAMZ0,GAMZ,WMASS,GAMW0,GAMW,SIN2W)        PRMOUT 2
C ----------------------------------------------------------------------PRMOUT 3
C  THIS SUBROUTINE CAN BE USED TO OBTAIN PARAMETERS OF THE GSW MODEL    PRMOUT 4
C  SIN2W = SIN SQUARED OF THE WEAK MIXING ANGLE                         PRMOUT 5
C  GAMZ0, GAMZ = LOWEST ORDER ESTIMATE, CORRECTED Z0 WIDTH              PRMOUT 6
C  WMASS = THE W BOSON MASS                                             PRMOUT 7
C  GMAW0 = LOWEST ORDER ESTIMATE OF W WIDTH                             PRMOUT 8
C                                                                       PRMOUT 9
C     called by : KORALZ, AMPGSW,CINTAA,CINTZZ,CINTZA, (FEEBOL)         PRMOUT10
C ----------------------------------------------------------------------PRMOUT11
      IMPLICIT REAL*8  (A-H,O-Z)                                        PRMOUT12
       COMMON /GSWLIB/ KEYWLB                                           GSWLIB 2
      IF (KEYWLB.EQ.1) THEN                                             PRMOUT14
        CALL PRMROB(ZMASS,GAMZ0,GAMZ,WMASS,GAMW0,GAMW,SIN2W)            PRMOUT15
      ELSE                                                              PRMOUT16
        CALL PRMHOL(ZMASS,GAMZ0,GAMZ,WMASS,GAMW0,GAMW,SIN2W)            PRMOUT17
      ENDIF                                                             PRMOUT18
      END                                                               PRMOUT19
      SUBROUTINE GIVIZO(IDFERM,IHELIC,SIZO3,CHARGE,KOLOR)               GIVIZO 2
C ----------------------------------------------------------------------GIVIZO 3
C PROVIDES ELECTRIC CHARGE AND WEAK IZOSPIN OF A FAMILY FERMION         GIVIZO 4
C IDFERM=1,2,3,4 DENOTES NEUTRINO, LEPTON, UP AND DOWN QUARK            GIVIZO 5
C NEGATIVE IDFERM=-1,-2,-3,-4, DENOTES ANTIPARTICLE                     GIVIZO 6
C IHELIC=+1,-1 DENOTES RIGHT AND LEFT HANDEDNES ( CHIRALITY)            GIVIZO 7
C SIZO3 IS THIRD PROJECTION OF WEAK IZOSPIN (PLUS MINUS HALF)           GIVIZO 8
C AND CHARGE IS ELECTRIC CHARGE IN UNITS OF ELECTRON CHARGE             GIVIZO 9
C KOLOR IS A QCD COLOUR, 1 FOR LEPTON, 3 FOR QUARKS                     GIVIZO10
C                                                                       GIVIZO11
C     called by : EVENTE, EVENTM, FUNTIH, .....                         GIVIZO12
C ----------------------------------------------------------------------GIVIZO13
      IMPLICIT REAL*8(A-H,O-Z)                                          GIVIZO14
C                                                                       GIVIZO15
      IF(IDFERM.EQ.0.OR.IABS(IDFERM).GT.4) GOTO 901                     GIVIZO16
      IF(IABS(IHELIC).NE.1)                GOTO 901                     GIVIZO17
      IH  =IHELIC                                                       GIVIZO18
      IDTYPE =IABS(IDFERM)                                              GIVIZO19
      IC  =IDFERM/IDTYPE                                                GIVIZO20
      LEPQUA=INT(IDTYPE*0.4999999D0)                                    GIVIZO21
      IUPDOW=IDTYPE-2*LEPQUA-1                                          GIVIZO22
      CHARGE  =(-IUPDOW+2D0/3D0*LEPQUA)*IC                              GIVIZO23
      SIZO3   =0.25D0*(IC-IH)*(1-2*IUPDOW)                              GIVIZO24
      KOLOR=1+2*LEPQUA                                                  GIVIZO25
C** NOTE THAT CONVENTIONALY Z0 COUPLING IS                              GIVIZO26
C** XOUPZ=(SIZO3-CHARGE*SWSQ)/SQRT(SWSQ*(1-SWSQ))                       GIVIZO27
      RETURN                                                            GIVIZO28
 901  PRINT *,' STOP IN GIVIZO: WRONG PARAMS.'                          GIVIZO29
      STOP                                                              GIVIZO30
      END                                                               GIVIZO31
      SUBROUTINE ZTOHEP                                                 ZTOHEP 2
C ----------------------------------------------------------------------ZTOHEP 3
C                                                                       ZTOHEP 4
C Koral-Z to HEPEVT                                                     ZTOHEP 5
C                                                                       ZTOHEP 6
C this routine fills the HEPEVT common block                            ZTOHEP 7
C with event kinematics from Koral-Z:                                   ZTOHEP 8
C *  initial beam particles (positions 1,2)                             ZTOHEP 9
C *  primary fermions of final state (3,4)                              ZTOHEP10
C *  radiative photons (IF NPHOTA>0) (5...4+NPHOTA)                     ZTOHEP11
C                                                                       ZTOHEP12
C WRITTEN BY MARTIN W. GRUENEWALD AND Z. WAS (91/02/02)                 ZTOHEP13
C                                                                       ZTOHEP14
C called by KORAL-Z                                                     ZTOHEP15
C                                                                       ZTOHEP16
C ----------------------------------------------------------------------ZTOHEP17
C                                                                       ZTOHEP18
      COMMON / MOMSE4 / AQF1(4),AQF2(4),ASPHUM(4),ASPHOT(100,4),NPHOTA  MOMSE4 2
      REAL*4            AQF1   ,AQF2   ,ASPHUM   ,ASPHOT                MOMSE4 3
      COMMON / BEAMS / XPB1(4),XPB2(4),KFB1,KFB2                        BEAMS  2
      REAL*4           XPB1   ,XPB2                                     BEAMS  3
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / IDFC  / IDFF                                             IDFC   2
C                                                                       ZTOHEP23
      REAL*4 APH(4),AM                                                  ZTOHEP24
C                                                                       ZTOHEP25
C initial state (1,2)                                                   ZTOHEP26
      AM=AMIN                                                           ZTOHEP27
      CALL FILHEP(1,3,KFB1,0,0,0,0,XPB1,AM,.TRUE.)                      ZTOHEP28
      CALL FILHEP(2,3,KFB2,0,0,0,0,XPB2,AM,.TRUE.)                      ZTOHEP29
C                                                                       ZTOHEP30
C primary final state fermions (3,4)                                    ZTOHEP31
      AM=AMFIN                                                          ZTOHEP32
      CALL FILHEP(3,1, IDFF,1,2,0,0,AQF1,AM,.TRUE.)                     ZTOHEP33
      CALL FILHEP(4,1,-IDFF,1,2,0,0,AQF2,AM,.TRUE.)                     ZTOHEP34
C                                                                       ZTOHEP35
C radiative photons (5...4+NPHOTA) (PDG-code for gamma is 22)           ZTOHEP36
      IF(NPHOTA.EQ.0)RETURN                                             ZTOHEP37
      IP=0                                                              ZTOHEP38
      DO I=1,NPHOTA                                                     ZTOHEP39
        DO J=1,4                                                        ZTOHEP40
          APH(J)=ASPHOT(I,J)                                            ZTOHEP41
        END DO                                                          ZTOHEP42
        IF (APH(4).GT.0.0) THEN                                         ZTOHEP43
          IP=IP+1                                                       ZTOHEP44
          CALL FILHEP(4+IP,1,22,1,2,0,0,APH,0.0,.TRUE.)                 ZTOHEP45
        END IF                                                          ZTOHEP46
      END DO                                                            ZTOHEP47
C                                                                       ZTOHEP48
      RETURN                                                            ZTOHEP49
      END                                                               ZTOHEP50
      SUBROUTINE EVENTZ(MODE,KEYYFS)                                    EVENTZ 2
C ----------------------------------------------------------------------EVENTZ 3
C STEERING ROUTINE MAKES A CHOICE BETWEEN MULTIPHOTON AND SINGLE        EVENTZ 4
C (OR ZERO) PHOTON GENERATOR                                            EVENTZ 5
C                                                                       EVENTZ 6
C     called by : KORALZ                                                EVENTZ 7
C ----------------------------------------------------------------------EVENTZ 8
      IMPLICIT REAL*8(A-H,O-Z)                                          EVENTZ 9
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
C                                                                       EVENTZ11
      IF     (KEYRAD.EQ.0.OR.KEYRAD.EQ.1.OR.KEYRAD.EQ.10) THEN          EVENTZ12
        CALL EVENTM(MODE)                                               EVENTZ13
      ELSEIF (KEYRAD.GT.10.AND.KEYRAD.LT.113) THEN                      EVENTZ14
        CALL EVENTE(MODE,KEYYFS)                                        EVENTZ15
      ELSE                                                              EVENTZ16
        PRINT *, 'STOP IN EVENTZ - WRONG KEYRAD'                        EVENTZ17
        STOP                                                            EVENTZ18
      ENDIF                                                             EVENTZ19
      END                                                               EVENTZ20
      SUBROUTINE SPIGEN(POL1,POL2)                                      SPIGEN 2
C ----------------------------------------------------------------------SPIGEN 3
C THIS ROUTINE GENERATES TAU SPIN CONFIGURATION                         SPIGEN 4
C output arguments :                                                    SPIGEN 5
C POL1,POL2 = tau polarisation                                          SPIGEN 6
C                                                                       SPIGEN 7
C     called by : KORALZ                                                SPIGEN 8
C ----------------------------------------------------------------------SPIGEN 9
      IMPLICIT REAL*8(A-H,O-Z)                                          SPIGEN10
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      REAL*4 POL1(4),POL2(4)                                            SPIGEN12
      REAL*4 RRR                                                        SPIGEN13
      DIMENSION SIGM(4)                                                 SPIGEN14
      DATA  INIT /0/                                                    SPIGEN15
C                                                                       SPIGEN16
      IF (INIT.EQ.0) THEN                                               SPIGEN17
        INIT=1                                                          SPIGEN18
        DO 20 K=1,4                                                     SPIGEN19
        POL1(K)=0.0                                                     SPIGEN20
 20     POL2(K)=0.0                                                     SPIGEN21
      ENDIF                                                             SPIGEN22
C CALCULATE RELATIVE WEIGHTS OF TAU SPIN CONFIGURATIONS                 SPIGEN23
      IF (KEYRAD.LT.11) THEN                                            SPIGEN24
        SIGM(1)=WEIGHT(1, 1D0, 1D0)                                     SPIGEN25
        SIGM(2)=WEIGHT(1,-1D0,-1D0)                                     SPIGEN26
        SIGM(3)=WEIGHT(1, 1D0,-1D0)                                     SPIGEN27
        SIGM(4)=WEIGHT(1,-1D0, 1D0)                                     SPIGEN28
      ELSE                                                              SPIGEN29
        SIGM(1)=WAGA(1, 1D0, 1D0)                                       SPIGEN30
        SIGM(2)=WAGA(1,-1D0,-1D0)                                       SPIGEN31
        SIGM(3)=WAGA(1, 1D0,-1D0)                                       SPIGEN32
        SIGM(4)=WAGA(1,-1D0, 1D0)                                       SPIGEN33
      ENDIF                                                             SPIGEN34
      XSUM=SIGM(1)+SIGM(2)+SIGM(3)+SIGM(4)                              SPIGEN35
C CHOOSE RANDOMLY SPINS OF TAUS ACCORDING TO CROSS SECTION              SPIGEN36
      CALL RANMAR(RRR,1)                                                SPIGEN37
      R=RRR                                                             SPIGEN38
      IF(    R.LT. SIGM(1)/XSUM) THEN                                   SPIGEN39
        T1= 1D0                                                         SPIGEN40
        T2= 1D0                                                         SPIGEN41
      ELSEIF(R.LT.(SIGM(1)+SIGM(2))/XSUM) THEN                          SPIGEN42
        T1=-1D0                                                         SPIGEN43
        T2=-1D0                                                         SPIGEN44
      ELSEIF(R.LT.(SIGM(1)+SIGM(2)+SIGM(3))/XSUM) THEN                  SPIGEN45
        T1= 1D0                                                         SPIGEN46
        T2=-1D0                                                         SPIGEN47
      ELSE                                                              SPIGEN48
        T1=-1D0                                                         SPIGEN49
        T2= 1D0                                                         SPIGEN50
      ENDIF                                                             SPIGEN51
      POL1(3)=T1                                                        SPIGEN52
      POL2(3)=T2                                                        SPIGEN53
      END                                                               SPIGEN54
      FUNCTION WAGA(MODE,TA,TB)                                         WAGA   2
C ----------------------------------------------------------------------WAGA   3
C THIS FUNCTION CALCULATES DIFFERENTIAL CROSS SECTION FOR EVERY EVENT   WAGA   4
C in multiphoton case (see WEIGHT for single photon mode).              WAGA   5
C  INPUT : MODE:                                                        WAGA   6
C                 0   FOR CALL FOR RAW CROSS SECTION                    WAGA   7
C                     NO VAC. POLARIZ & NO GSW &                        WAGA   8
C                     NO INTERFERENCE INIT - FINAL                      WAGA   9
C                 1   INITIALIZATION. CORRECT X. SECTION                WAGA  10
C                 2   CORRECT X. SECTION                                WAGA  11
C          TA,TB: TWICE OF TAU+ TAU- HELICITIES                         WAGA  12
C                                                                       WAGA  13
C     called by : SPIGEN                                                WAGA  14
C ----------------------------------------------------------------------WAGA  15
      IMPLICIT REAL*8(A-H,O-Z)                                          WAGA  16
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
C                                                                       WAGA  18
C IF MODE=0 CALCULATION OF ANGULAR VARIABLES FROM 4-MOMENTA             WAGA  19
      IF (MODE.EQ.0) THEN                                               WAGA  20
        CALL SKONTY(0,SVAR,CTHE)                                        WAGA  21
      ENDIF                                                             WAGA  22
      WAGA=BORNS(MODE,SVAR,CTHE,TA,TB)                                  WAGA  23
      END                                                               WAGA  24
      FUNCTION BORNY(SVAR)                                              BORNY  2
C ----------------------------------------------------------------------BORNY  3
C THIS ROUTINE CALCULATES TOTAL BORN CROSS SECTION.                     BORNY  4
C IT EXPLOITS THE FACT THAT BORN X. SECTION = A + B*C + D*C**2          BORNY  5
C                                                                       BORNY  6
C     called by : BONMA0, BONMA1, EXPAND, BREMKF, VVDIS                 BORNY  7
C ----------------------------------------------------------------------BORNY  8
      IMPLICIT REAL*8 (A-H,O-Z)                                         BORNY  9
C                                                                       BORNY 10
      FL=BORNS(0,SVAR,-1.D0,0.D0,0.D0)                                  BORNY 11
      FR=BORNS(0,SVAR, 1.D0,0.D0,0.D0)                                  BORNY 12
      F0=BORNS(0,SVAR, 0.D0,0.D0,0.D0)                                  BORNY 13
      BORNY=(FL+FR)/8.D0+ F0/2D0                                        BORNY 14
      END                                                               BORNY 15
      FUNCTION BORAS(SVAR)                                              BORAS  2
C ----------------------------------------------------------------------BORAS  3
C THIS ROUTINE CALCULATES  BORN ASYMMETRY.                              BORAS  4
C IT EXPLOITS THE FACT THAT BORN X. SECTION = A + B*C + D*C**2          BORAS  5
C                                                                       BORAS  6
C     called by : EVENTM                                                BORAS  7
C ----------------------------------------------------------------------BORAS  8
      IMPLICIT REAL*8 (A-H,O-Z)                                         BORAS  9
C                                                                       BORAS 10
      FL=BORNS(0,SVAR,-1.D0,0.D0,0.D0)                                  BORAS 11
      FR=BORNS(0,SVAR, 1.D0,0.D0,0.D0)                                  BORAS 12
      BORAS=FL/(FL+FR)                                                  BORAS 13
      END                                                               BORAS 14
      FUNCTION BORNV(SVAR,COSTHE)                                       BORNV  2
C ----------------------------------------------------------------------BORNV  3
C     called by : GCRUDE, GBETA0, GBETA1, GBETA2                        BORNV  4
C ----------------------------------------------------------------------BORNV  5
      IMPLICIT REAL*8(A-H,O-Z)                                          BORNV  6
      BORNV=   BORNS(0,SVAR,COSTHE,0D0,0.D0)                            BORNV  7
      END                                                               BORNV  8
      SUBROUTINE TRALO4(KTO,AP,BP,XMP)                                  TRALO4 2
C ----------------------------------------------------------------------TRALO4 3
* REAL*4 VERSION OF TRALOR                                              TRALO4 4
C     Modified AM. Lutz October 1988                                    TRALO4 5
C  INPUT PARAMETERS :                                                   TRALO4 6
C     KTO    : tau number                                               TRALO4 7
C     AP     : 4-momentum to be boosted/rotated                         TRALO4 8
C  output parameters                                                    TRALO4 9
C     BP     : 4-momentum after boost/rotation                          TRALO410
C     XMP    : mass corresponding to 4-momentum BP                      TRALO411
C              computed in double precision                             TRALO412
C                                                                       TRALO413
C     called by : DWLUxx                                                TRALO414
C ----------------------------------------------------------------------TRALO415
      REAL*4 AP(4),BP(4),XMP                                            TRALO416
      REAL*8 DP(4),DXMP                                                 TRALO417
                                                                        TRALO418
C                                                                       TRALO419
      DO 30 I=1,4                                                       TRALO420
  30  DP(I)=AP(I)                                                       TRALO421
      CALL TRALOR(KTO,DP,DP)                                            TRALO422
      DXMP =0D0                                                         TRALO423
      DO 31 I=1,3                                                       TRALO424
      DXMP =DXMP + DP(I)**2                                             TRALO425
  31  BP(I)=DP(I)                                                       TRALO426
      BP(4)=DP(4)                                                       TRALO427
      DXMP =DP(4)**2-DXMP                                               TRALO428
C ZW 21.03 TO AVOID AN OVERFLOW WHEN PHOTON MASS IS CALCULATED.         TRALO429
       IF(DXMP.NE.0D0) DXMP=DXMP / DSQRT(DABS(DXMP))                    TRALO430
      XMP  =DXMP                                                        TRALO431
      END                                                               TRALO432
      SUBROUTINE TRALOR(KTO,QQ,PP)                                      TRALOR 2
C ----------------------------------------------------------------------TRALOR 3
C THIS TRANSFORMS FROM FINAL FERMION REST FRAME TO LAB CMS              TRALOR 4
C KTO=1 FOR QP, KTO=2 FOR QM                                            TRALOR 5
C ADDITIONAL PARAMETER, NOW FROZEN AS DATA, >MODE< IF PUT TO ZERO       TRALOR 6
C SHORTENS THE TRANSFORMATION TREE. FOR MODE.NE.1, TRANSFORMATION       TRALOR 7
C GOES FROM THE REST FRAME OF THE FINAL STATE FERMION PAIR TO LAB.      TRALOR 8
C IT IS RECCOMENDED TO USE WHEN THE PROGRAM IS INTERFACED WITH THE      TRALOR 9
C QUARK FRAGMENTATION AND/OR Q-ONIA DECAY PROGRAMS.                     TRALOR10
C                                                                       TRALOR11
C     called by : TRALO4, EVENTM                                        TRALOR12
C ----------------------------------------------------------------------TRALOR13
      IMPLICIT REAL*8(A-H,O-Z)                                          TRALOR14
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / UTIL2 /  XK,C,S,CG,SG                                    UTIL2  2
      COMMON / UTIL3 / FIG,FI,IT,IBREM                                  UTIL3  2
      REAL*8 PP(4),QQ(4)                                                TRALOR19
      DATA PI /3.141592653589793238462643D0/                            TRALOR20
      DATA MODE /1/                                                     TRALOR21
      IF(KEYRAD.LE.10) THEN                                             TRALOR22
C       SINGLE PHOTON CASE                                              TRALOR23
        CALL TRASNG(MODE,ENE,AMFIN,AMEL,KTO,QQ,PP)                      TRALOR24
      ELSE                                                              TRALOR25
C       MULTIPLE PHOTON CASE                                            TRALOR26
        DO 7 K=1,4                                                      TRALOR27
 7      PP(K)=QQ(K)                                                     TRALOR28
        CALL TRAMLT(MODE,KTO,PP)                                        TRALOR29
      ENDIF                                                             TRALOR30
C     =====                                                             TRALOR31
      END                                                               TRALOR32
      SUBROUTINE TRAMLT(MODE,KTO,VEC)                                   TRAMLT 2
C ----------------------------------------------------------------------TRAMLT 3
C     *   MULTIPHOTON KINEMATICAL TREE                                  TRAMLT 4
C                                                                       TRAMLT 5
C     called by : TRALOR                                                TRAMLT 6
C ----------------------------------------------------------------------TRAMLT 7
C                                                                       TRAMLT 8
      IMPLICIT REAL*8(A-H,O-Z)                                          TRAMLT 9
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      DIMENSION VEC(4),PPB(4),PMB(4),PP(4),QQ(4)                        TRAMLT14
      PARAMETER(ISWITH=1000001)                                         TRAMLT15
C                                                                       TRAMLT16
      DO 8 K=1,4                                                        TRAMLT17
  8   QQ(K)=VEC(K)                                                      TRAMLT18
      IF ((KEYRAD.EQ.12)) THEN                                          TRAMLT19
C       relax                                                           TRAMLT20
      ELSE                                                              TRAMLT21
        CALL BDRESS(1,PPB,PMB,SVARX,CTHE)                               TRAMLT22
        EBEAM=SQRT(SVARX)/2D0                                           TRAMLT23
      ENDIF                                                             TRAMLT24
      CALL TRASNG(MODE,EBEAM,AMFIN,AMIN,KTO,QQ,PP)                      TRAMLT25
      CALL TRALOZ(1,-1,2D0*ENE  ,SPHUM,PPB,PMB,PP  ,QQ  )               TRAMLT26
C                                                                       TRAMLT27
      DO 9 L=1,4                                                        TRAMLT28
  9   VEC(L)=QQ(L)                                                      TRAMLT29
      END                                                               TRAMLT30
      SUBROUTINE TRALOZ(INIT,MOD,CMSENE,PHSUM,PPB,PMB,QVEC,PVEC)        TRALOZ 2
C ----------------------------------------------------------------------TRALOZ 3
C CALLED IN EVENTE                                                      TRALOZ 4
C TRANSFORMS FROM CMS TO VIRTUAL Z0 (GAMMA) REST FRAME                  TRALOZ 5
C FORTH (MODE= 1) OR BACK (MODE=-1)                                     TRALOZ 6
C IN FINAL   SYSTEM Z-AXIS PARALLEL TO DRESSED POSITRON BEAM            TRALOZ 7
C                                                                       TRALOZ 8
C     called by : PEDYVV, TRAMLT, EVENTE                                TRALOZ 9
C ----------------------------------------------------------------------TRALOZ10
      IMPLICIT REAL*8(A-H,O-Z)                                          TRALOZ11
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      PARAMETER(ISWITH=1000001)                                         TRALOZ15
      REAL*8 PVEC(4),QVEC(4),PHSUM(4)                                   TRALOZ16
      REAL*8 PPB(4),PMB(4)                                              TRALOZ17
      IF (KEYRAD.EQ.12) THEN                                            TRALOZ18
        DO K=1,4                                                        TRALOZ19
           PVEC(K)=QVEC(K)                                              TRALOZ20
        ENDDO                                                           TRALOZ21
      ELSE                                                              TRALOZ22
        CALL TRALOO(INIT,MOD,CMSENE,PHSUM,PPB,PMB,QVEC,PVEC)            TRALOZ23
      ENDIF                                                             TRALOZ24
C       note that TRALOO is identical to                                TRALOZ25
C       old TRALOZ backward compatible to KORALZ 3.8 may be removed     TRALOZ26
C       later after comparison tests. It cannot be used for the         TRALOZ27
C       YFS3 generating final bremsstrahlung.                           TRALOZ28
      END                                                               TRALOZ29
      SUBROUTINE TRALOO(INIT,MOD,CMSENE,PHSUM,PPB,PMB,QVEC,PVEC)        TRALOO 2
C ----------------------------------------------------------------------TRALOO 3
C CALLED IN EVENTE                                                      TRALOO 4
C TRANSFORMS FROM CMS TO VIRTUAL Z0 (GAMMA) REST FRAME                  TRALOO 5
C FORTH (MODE= 1) OR BACK (MODE=-1)                                     TRALOO 6
C IN FINAL   SYSTEM Z-AXIS PARALLEL TO DRESSED POSITRON BEAM            TRALOO 7
C                                                                       TRALOO 8
C     called by : PEDYVV, TRAMLT, EVENTE                                TRALOO 9
C ----------------------------------------------------------------------TRALOO10
      IMPLICIT REAL*8(A-H,O-Z)                                          TRALOO11
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      REAL*8 PVEC(4),QVEC(4),PHSUM(4),QSU(4)                            TRALOO13
      REAL*8 PPB(4),PMB(4),PPBT(4),PMBT(4)                              TRALOO14
C                                                                       TRALOO15
C ----------------------------------------------------------------------TRALOO16
C INITIALIZATION                                                        TRALOO17
      IF (INIT.EQ.0) THEN                                               TRALOO18
        NPH=0                                                           TRALOO19
        IF (PHSUM(4).GT.VVMIN*CMSENE/2D0) THEN                          TRALOO20
C       ======================================                          TRALOO21
C                                                                       TRALOO22
          NPH=1                                                         TRALOO23
          DO 10 K=1,4                                                   TRALOO24
          PPBT(K)=PPB(K)                                                TRALOO25
          PMBT(K)=PMB(K)                                                TRALOO26
   10     PVEC(K)=QVEC(K)                                               TRALOO27
          CALL GIQSU(CMSENE,PHSUM,QSU)                                  TRALOO28
          QSM =SQRT(QSU(4)**2-QSU(3)**2-QSU(2)**2-QSU(1)**2)            TRALOO29
          EXE =(QSU(4)+SQRT(QSU(3)**2+QSU(2)**2+QSU(1)**2))/QSM         TRALOO30
          FI   =ANGFI(QSU(1),QSU(2))                                    TRALOO31
          TH1  =ANGXY(QSU(3),SQRT(QSU(1)**2+QSU(2)**2))                 TRALOO32
          CALL ROTOD3(    -FI,PPBT,PPBT)                                TRALOO33
          CALL ROTOD2(   -TH1,PPBT,PPBT)                                TRALOO34
          CALL BOSTD3(1D0/EXE,PPBT,PPBT)                                TRALOO35
          TH2  =-ANGXY(PPBT(3),SQRT(PPBT(1)**2+PPBT(2)**2))             TRALOO36
C                                                                       TRALOO37
        ENDIF                                                           TRALOO38
C       =====                                                           TRALOO39
      ENDIF                                                             TRALOO40
C ----------------------------------------------------------------------TRALOO41
C                                                                       TRALOO42
C TRANSFORMATION                                                        TRALOO43
      DO 12 K=1,4                                                       TRALOO44
  12  PVEC(K)=QVEC(K)                                                   TRALOO45
      IF (NPH.EQ.1) THEN                                                TRALOO46
C     ==================                                                TRALOO47
        IF(    MOD.EQ.-1) THEN                                          TRALOO48
          CALL ROTOD2(    TH2,PVEC,PVEC)                                TRALOO49
          CALL BOSTD3(    EXE,PVEC,PVEC)                                TRALOO50
          CALL ROTOD2(    TH1,PVEC,PVEC)                                TRALOO51
          CALL ROTOD3(     FI,PVEC,PVEC)                                TRALOO52
        ELSEIF(MOD.EQ. 1) THEN                                          TRALOO53
          CALL ROTOD3(    -FI,PVEC,PVEC)                                TRALOO54
          CALL ROTOD2(   -TH1,PVEC,PVEC)                                TRALOO55
          CALL BOSTD3(1D0/EXE,PVEC,PVEC)                                TRALOO56
          CALL ROTOD2(   -TH2,PVEC,PVEC)                                TRALOO57
        ENDIF                                                           TRALOO58
C                                                                       TRALOO59
      ELSE                                                              TRALOO60
C     ====                                                              TRALOO61
C                                                                       TRALOO62
        DO 11 K=1,4                                                     TRALOO63
   11   PVEC(K)=QVEC(K)                                                 TRALOO64
C                                                                       TRALOO65
      ENDIF                                                             TRALOO66
C     =====                                                             TRALOO67
C                                                                       TRALOO68
      END                                                               TRALOO69
      SUBROUTINE TRASNG(MODE,ENE,AMFIN,AMEL,KTO,QQ,PP)                  TRASNG 2
C ----------------------------------------------------------------------TRASNG 3
C THIS TRANSFORMS FROM FINAL FERMION REST FRAME TO LAB CMS              TRASNG 4
C (OR Z0-GAMMA REST FRAME WHEN USED FOR MULTIPHOTON GENERATION)         TRASNG 5
C KTO=1 FOR QP, KTO=2 FOR QM                                            TRASNG 6
C SINGLE PHOTON KINEMATICAL TREE. IT IS USED FOR THE SINGLE             TRASNG 7
C OR NO PHOTON TRANSFORMATION, EITHER IN THE SINGLE BREM. MODE          TRASNG 8
C OR FOR THE FINAL STATE BREMSSTRAHLUNG BRANCH OF THE MULTIPHOTON       TRASNG 9
C GENERATION.                                                           TRASNG10
C                                                                       TRASNG11
C     CALLED BY : TRAMLT, EVENTE,TRALOR                                 TRASNG12
C ----------------------------------------------------------------------TRASNG13
      IMPLICIT REAL*8(A-H,O-Z)                                          TRASNG14
      PARAMETER(ISWITH=1000001)                                         TRASNG15
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      REAL*8 PP(4),QQ(4)                                                TRASNG18
      IF (KEYRAD.EQ.12) THEN                                            TRASNG19
          CALL TRANSF(KTO,QQ,PP)                                        TRASNG20
      ELSE                                                              TRASNG21
        CALL TRASNO(MODE,ENE,AMFIN,AMEL,KTO,QQ,PP)                      TRASNG22
      ENDIF                                                             TRASNG23
C       note that TRASNO is identical to old TRASNG                     TRASNG24
C       old TRASNG backward compatible to KORALZ 3.8 may be removed     TRASNG25
C       later after comparison tests. It cannot be used for the         TRASNG26
C       YFS3 generating final bremsstrahlung.                           TRASNG27
      END                                                               TRASNG28
      SUBROUTINE TRANSF(KTO,QQ,PP)                                      TRANSF 2
C new transformation routine to be used when YFS3 with final state      TRANSF 3
C bremsstrahlung is in use.                                             TRANSF 4
      IMPLICIT REAL*8(A-H,O-Z)                                          TRANSF 5
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
C*CA MOMINI                                                             TRANSF 7
      REAL*8 PP(4),QQ(4),RR(4),ZMS(4),F1(4),F2(4),SS(4),F0(4)           TRANSF 8
      DATA PI /3.141592653589793238462643D0/                            TRANSF 9
      DO KK=1,4                                                         TRANSF10
        ZMS(KK)=QF1(KK)+QF2(KK)                                         TRANSF11
         F0(KK)=0.D0                                                    TRANSF12
      ENDDO                                                             TRANSF13
      IF(KTO.EQ.1) THEN                                                 TRANSF14
         CALL BOSTDQ( 1,ZMS,QF1,F1)                                     TRANSF15
          F0(4)=F1(4)                                                   TRANSF16
          F0(3)= SQRT(F1(1)**2+F1(2)**2+F1(3)**2)                       TRANSF17
            FI=ANGFI(F1(1),F1(2))                                       TRANSF18
          TH=ANGXY(F1(3),SQRT(F1(1)**2+F1(2)**2))                       TRANSF19
         CALL BOSTDQ(-1, F0, QQ,SS)                                     TRANSF20
          CALL ROTOD2( TH,SS,SS)                                        TRANSF21
          CALL ROTOD3( FI,SS,RR)                                        TRANSF22
         CALL BOSTDQ(-1,ZMS, RR,PP)                                     TRANSF23
      ELSE                                                              TRANSF24
         CALL ROTOD1(PI,QQ,SS)                                          TRANSF25
         CALL BOSTDQ( 1,ZMS,QF2,F2)                                     TRANSF26
          F0(4)=F2(4)                                                   TRANSF27
          F0(3)=SQRT(F2(1)**2+F2(2)**2+F2(3)**2)                        TRANSF28
          FI=ANGFI( F2(1), F2(2))                                       TRANSF29
          TH=ANGXY( F2(3),SQRT(F2(1)**2+F2(2)**2))                      TRANSF30
         CALL BOSTDQ(-1, F0, SS,RR)                                     TRANSF31
          CALL ROTOD2( TH,RR,RR)                                        TRANSF32
          CALL ROTOD3( FI,RR,RR)                                        TRANSF33
         CALL BOSTDQ(-1,ZMS, RR,PP)                                     TRANSF34
      ENDIF                                                             TRANSF35
      END                                                               TRANSF36
      SUBROUTINE TRASNO(MODE,ENE,AMFIN,AMEL,KTO,QQ,PP)                  TRASNO 2
C ----------------------------------------------------------------------TRASNO 3
C THIS TRANSFORMS FROM FINAL FERMION REST FRAME TO LAB CMS              TRASNO 4
C (OR Z0-GAMMA REST FRAME WHEN USED FOR MULTIPHOTON GENERATION)         TRASNO 5
C KTO=1 FOR QP, KTO=2 FOR QM                                            TRASNO 6
C SINGLE PHOTON KINEMATICAL TREE. IT IS USED FOR THE SINGLE             TRASNO 7
C OR NO PHOTON TRANSFORMATION, EITHER IN THE SINGLE BREM. MODE          TRASNO 8
C OR FOR THE FINAL STATE BREMSSTRAHLUNG BRANCH OF THE MULTIPHOTON       TRASNO 9
C GENERATION.                                                           TRASNO10
C                                                                       TRASNO11
C     CALLED BY : TRAMLT, EVENTE,TRALOR                                 TRASNO12
C ----------------------------------------------------------------------TRASNO13
      IMPLICIT REAL*8(A-H,O-Z)                                          TRASNO14
      COMMON / UTIL2 /  XK,C,S,CG,SG                                    UTIL2  2
      COMMON / UTIL3 / FIG,FI,IT,IBREM                                  UTIL3  2
      REAL*8 PP(4),QQ(4)                                                TRASNO17
      DATA PI /3.141592653589793238462643D0/                            TRASNO18
                                                                        TRASNO19
        IF(IT.EQ.3) THEN                                                TRASNO20
          BET=SQRT(1-AMFIN**2/ENE**2)                                   TRASNO21
          EXF=(1+BET)/SQRT(AMFIN**2/ENE**2)                             TRASNO22
        ELSE                                                            TRASNO23
          BET=1-AMFIN**2/(1-XK)/ENE**2                                  TRASNO24
          IF(BET.LT.0D0) BET=0D0                                        TRASNO25
          BET=SQRT(BET)                                                 TRASNO26
          EXF=(1+BET)/SQRT(AMFIN**2/(1-XK)/ENE**2)                      TRASNO27
        ENDIF                                                           TRASNO28
C                                                                       TRASNO29
        IF (MODE.EQ.1) THEN                                             TRASNO30
C TRANSFORMATION FROM THE TAU REST FRAME TO THE TAU-TAU SYSTEM          TRASNO31
          IF(KTO.EQ.1) CALL ROTOD2(0D0,QQ,PP)                           TRASNO32
          IF(KTO.EQ.2) CALL ROTOD2( PI,QQ,PP)                           TRASNO33
C                                                                       TRASNO34
          CALL BOSTD3( EXF,PP,PP)                                       TRASNO35
          IF(KTO.EQ.2) CALL ROTOD2( PI,PP,PP)                           TRASNO36
        ENDIF                                                           TRASNO37
C                                                                       TRASNO38
        IF(IT.EQ.1) THEN                                                TRASNO39
          TH1=ANGXY(CG,SG)                                              TRASNO40
          EXE=  SQRT(1-XK)                                              TRASNO41
          TH2=ANGXY(C,S)                                                TRASNO42
          IF(IBREM.EQ.1) THEN                                           TRASNO43
            THR =ANGXY( XK+(2-XK)*CG , 2*SQRT(1-XK)*SG )                TRASNO44
            CALL TRALOI( FI, TH1,EXE,-THR, FIG, TH2,PP)                 TRASNO45
          ELSE                                                          TRASNO46
            THR =ANGXY( XK-(2-XK)*CG , 2*SQRT(1-XK)*SG )                TRASNO47
            CALL TRALOI( FI, TH1,EXE,-PI+THR, FIG,-TH2,PP)              TRASNO48
          ENDIF                                                         TRASNO49
C                                                                       TRASNO50
        ELSEIF(IT.EQ.2) THEN                                            TRASNO51
          TH=ANGXY(C,S)                                                 TRASNO52
          EXE=  SQRT(1-XK)                                              TRASNO53
          THG=ANGXY(CG,SG)                                              TRASNO54
          BET=SQRT(1-AMFIN**2/ENE**2/(1-XK))                            TRASNO55
          IF(IBREM.EQ.1) THEN                                           TRASNO56
            THR=ANGXY( 2*CG*BET-XK*CG*BET-XK ,2*SQRT(1-XK)*SG*BET )     TRASNO57
            CALL TRALOF( FI,  TH, FIG, THR,EXE,-THG,PP)                 TRASNO58
          ELSE                                                          TRASNO59
            THR=ANGXY(-2*CG*BET+XK*CG*BET-XK ,2*SQRT(1-XK)*SG*BET )     TRASNO60
            CALL TRALOF( FI,  TH,-FIG,-PI+THR,EXE, THG,PP)              TRASNO61
          ENDIF                                                         TRASNO62
        ELSE                                                            TRASNO63
          TH=ANGXY(C,S)                                                 TRASNO64
          CALL ROTOD1(-TH,PP,PP)                                        TRASNO65
          CALL ROTOD3(-FI,PP,PP)                                        TRASNO66
        ENDIF                                                           TRASNO67
      END                                                               TRASNO68
      SUBROUTINE TRALOI(FI,TH1,EX,THR,PSI,TH2,PVEC)                     TRALOI 2
C ----------------------------------------------------------------------TRALOI 3
C     INITIAL  STATE RADIATION BRANCH                                   TRALOI 4
C                                                                       TRALOI 5
C       CALLED BY : TRASNG                                              TRALOI 6
C ----------------------------------------------------------------------TRALOI 7
      IMPLICIT REAL*8(A-H,O-Z)                                          TRALOI 8
      REAL*8 PVEC(4)                                                    TRALOI 9
C                                                                       TRALOI10
      CALL ROTOD2( TH2,PVEC,PVEC)                                       TRALOI11
      CALL ROTOD3( PSI,PVEC,PVEC)                                       TRALOI12
      CALL ROTOD2( THR,PVEC,PVEC)                                       TRALOI13
      CALL BOSTD3(  EX,PVEC,PVEC)                                       TRALOI14
      CALL ROTOD2( TH1,PVEC,PVEC)                                       TRALOI15
      CALL ROTOD3(  FI,PVEC,PVEC)                                       TRALOI16
      END                                                               TRALOI17
      SUBROUTINE TRALOF(FI,TH1,FI2,THR,EX,THG,PVEC)                     TRALOF 2
C ----------------------------------------------------------------------TRALOF 3
C     FINAL  STATE RADIATION BRANCH                                     TRALOF 4
C                                                                       TRALOF 5
C       CALLED BY : TRASNG                                              TRALOF 6
C ----------------------------------------------------------------------TRALOF 7
      IMPLICIT REAL*8(A-H,O-Z)                                          TRALOF 8
      REAL*8 PVEC(4)                                                    TRALOF 9
C                                                                       TRALOF10
      CALL ROTOD2( THG,PVEC,PVEC)                                       TRALOF11
      CALL BOSTD3(  EX,PVEC,PVEC)                                       TRALOF12
      CALL ROTOD2( THR,PVEC,PVEC)                                       TRALOF13
      CALL ROTOD3( FI2,PVEC,PVEC)                                       TRALOF14
      CALL ROTOD2( TH1,PVEC,PVEC)                                       TRALOF15
      CALL ROTOD3(  FI,PVEC,PVEC)                                       TRALOF16
      END                                                               TRALOF17
      SUBROUTINE EVENTM(MODE)                                           EVENTM 2
C ----------------------------------------------------------------------EVENTM 3
C SINGLE PHOTON GENERATOR                                               EVENTM 4
C                                                                       EVENTM 5
C     called by : EVENTZ                                                EVENTM 6
C ----------------------------------------------------------------------EVENTM 7
      IMPLICIT REAL*8(A-H,O-Z)                                          EVENTM 8
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / GAUSPM /SS,POLN,T3E,QE,T3F,QF                            GAUSPM 2
     &                ,XUPGI   ,XUPZI   ,XUPGF   ,XUPZF                 GAUSPM 3
     &                ,NDIAG0,NDIAGA,KEYA,KEYZ                          GAUSPM 4
     &                ,ITCE,JTCE,ITCF,JTCF,KOLOR                        GAUSPM 5
      REAL*8           SS,POLN,T3E,QE,T3F,QF                            GAUSPM 6
     &                ,XUPGI(2),XUPZI(2),XUPGF(2),XUPZF(2)              GAUSPM 7
      COMMON / FINUS / CSTCM,ERREL                                      FINUS  2
      REAL*8           CSTCM,ERREL                                      FINUS  3
      COMMON / UTIL2 /  XK,C,S,CG,SG                                    UTIL2  2
      COMMON / UTIL3 / FIG,FI,IT,IBREM                                  UTIL3  2
      COMMON / UTIL4 / AQP(4),AQM(4),APH(4)                             UTIL4  2
      REAL*4           AQP   ,AQM   ,APH                                UTIL4  3
      COMMON / UTIL8 / QP(4),QM(4),PH(4)                                UTIL8  2
      REAL*8           QP   ,QM   ,PH                                   UTIL8  3
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / MOMSE4 / AQF1(4),AQF2(4),ASPHUM(4),ASPHOT(100,4),NPHOTA  MOMSE4 2
      REAL*4            AQF1   ,AQF2   ,ASPHUM   ,ASPHOT                MOMSE4 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
      REAL*8 SWT(3)                                                     EVENTM22
      REAL*4 RRR(4)                                                     EVENTM23
      DATA CMTR /389.385D-30/                                           EVENTM24
C                                                                       EVENTM25
C GENERATION OF THE PHOTON MOMENTUM XK AND DECISION ABOUT THE           EVENTM26
C TYPE OF THE RADIATION  IT=1,2,3 CORRESPONDS TO INITIAL STATE          EVENTM27
C RADIATION, FINAL STATE RADIATION AND SOFT PHOTON (XK.LT.XK0)          EVENTM28
C RADIATION                                                             EVENTM29
C                                                                       EVENTM30
      IF (MODE.EQ.-1) THEN                                              EVENTM31
C     INITIALIZATION IN EVENTM                                          EVENTM32
C     ====================                                              EVENTM33
CAM     VVMIN =1D-5                                                     EVENTM34
CAM     VVMAX =1D0                                                      EVENTM35
        DO 15 K=1,3                                                     EVENTM36
  15    SWT(K)=0.D0                                                     EVENTM37
        PI=4.D0*DATAN(1.D0)                                             EVENTM38
        ALF1=ALFPI                                                      EVENTM39
        IF(KEYRAD.EQ.0.OR.KBRINI.EQ.0) THEN                             EVENTM40
          BETI=0D0                                                      EVENTM41
          DELI=0D0                                                      EVENTM42
        ELSE                                                            EVENTM43
          QE2=QE*QE                                                     EVENTM44
          BILG=DLOG(4D0*ENE**2/AMIN**2)                                 EVENTM45
          BETI=2D0*QE2*ALF1*(BILG-1D0)                                  EVENTM46
          DELI=ALF1*QE2*(9D0*BILG+2D0*PI**2-12D0)/6D0                   EVENTM47
     $        +BETI*LOG(XK0)                                            EVENTM48
        ENDIF                                                           EVENTM49
        IF(KEYRAD.EQ.0.OR.KEYRAD.EQ.10.OR.KBRFIN.EQ.0) THEN             EVENTM50
          FACTOR=0D0                                                    EVENTM51
        ELSE                                                            EVENTM52
          FACTOR=1D0/(1.D0+DELI)                                        EVENTM53
          FACTOR=FACTOR*QF*QF                                           EVENTM54
        ENDIF                                                           EVENTM55
C INITIALISE QED CORRECTIONS                                            EVENTM56
        DUMMY=FUNSKA(-1,0.2D0)                                          EVENTM57
        CALL VESK8A(-1,X,Y)                                             EVENTM58
C                                                                       EVENTM59
      ELSEIF (MODE.EQ.0) THEN                                           EVENTM60
C     =======================                                           EVENTM61
    1   CONTINUE                                                        EVENTM62
        CALL RANMAR(RRR,4)                                              EVENTM63
C PHOTON ENERGY GENERATION - INITIAL BREMSSTRAHLUNG                     EVENTM64
        CALL VESK8A(0,XK,PAR2)                                          EVENTM65
        IF (KEYRAD.EQ.10) XK=VV                                         EVENTM66
        IF (XK.GT.XK0) THEN                                             EVENTM67
          IT=1                                                          EVENTM68
        ELSE                                                            EVENTM69
          IT=3                                                          EVENTM70
        ENDIF                                                           EVENTM71
C                                                                       EVENTM72
C PHOTON ENERGY GENERATION - FINAL BREMSSTRAHLUNG                       EVENTM73
        IF (XK.LE.XK0) THEN                                             EVENTM74
 333      XK=ALTPAR(4D0*ENE**2,AMFIN,XK0,FACTOR)                        EVENTM75
          IF (XK.GT.1D0-AMFIN**2/ENE**2) GO TO 333                      EVENTM76
          IF(XK.GT.XK0) IT=2                                            EVENTM77
        ENDIF                                                           EVENTM78
C                                                                       EVENTM79
C GENERATION OF THE ANGULAR VARIABLES                                   EVENTM80
        IF(IT.EQ.3) THEN                                                EVENTM81
C         SOFT PHOTON CASE  XK.LT.XK0                                   EVENTM82
          R=BORAS(4D0*ENE**2)                                           EVENTM83
C         ANGULAR DISTRIBUTION GENERATION                               EVENTM84
          CALL RRR7(R,C,S)                                              EVENTM85
        ELSEIF (IT.EQ.1) THEN                                           EVENTM86
C         HARD PHOTON CASE - INITIAL STATE                              EVENTM87
C         GENERATION OF THE PHOTON ANGULAR  DISTRIBUTION                EVENTM88
          CALL RRR6(XK,   AMIN**2/ENE**2,CG,SG,IBREM)                   EVENTM89
C         GENERATION OF THE FINAL FERMION DISTRIBUTION                  EVENTM90
          R=BORAS(4D0*ENE**2*(1D0-XK))                                  EVENTM91
          CALL RRR7(R,C,S)                                              EVENTM92
C         GENERATION OF THE ANGLE BETWEEN PHOTON-BEAM AND PHOTON-TAU PL EVENTM93
          RR1=RRR(1)                                                    EVENTM94
          FIG=-PI+2D0*PI*RR1                                            EVENTM95
        ELSEIF ( IT.EQ.2) THEN                                          EVENTM96
C         HARD PHOTON CASE - FINAL STATE                                EVENTM97
C         PHOTON ANGULAR COORDINATES GENERATION                         EVENTM98
          CALL RRR6(XK,   AMFIN**2/ENE**2/(1D0-XK),CG,SG,IBREM)         EVENTM99
          R=BORAS(4D0*ENE**2)                                           EVENT100
C         FERMION ANGULAR COORDINATES                                   EVENT101
          CALL RRR7(R,C,S)                                              EVENT102
C         GENERATION OF THE ANGLE BETWEEN PHOTON-BEAM AND PHOTON-TAU PL EVENT103
          RR2=RRR(2)                                                    EVENT104
          FIG=-PI+2D0*PI*RR2                                            EVENT105
        ENDIF                                                           EVENT106
C                                                                       EVENT107
C GENERATION OF THE ANGLE AROUND THE BEAM                               EVENT108
        RR3=RRR(3)                                                      EVENT109
        FI=-PI+2D0*PI*RR3                                               EVENT110
C CALCULATION OF 4 MOMENTA FROM ANGULAR VARIABLES                       EVENT111
        QP(4)=AMFIN                                                     EVENT112
        PH(4)=2.D0*ENE                                                  EVENT113
        QM(4)=AMFIN                                                     EVENT114
        DO 103 I=1,3                                                    EVENT115
        PH(I)=.0D0                                                      EVENT116
        QP(I)=.0D0                                                      EVENT117
  103   QM(I)=.0D0                                                      EVENT118
        CALL TRALOR(1,QP,QP)                                            EVENT119
        CALL TRALOR(2,QM,QM)                                            EVENT120
C                                                                       EVENT121
C INITIAL STATE BREMSSTRAHLUNG - PHOTON 4-MOMENTUM                      EVENT122
        IF(IT.EQ.1) THEN                                                EVENT123
C CALCULATED DIRECTLY FROM ANGLES                                       EVENT124
          PH(4)=XK    *ENE                                              EVENT125
          PH(3)=XK*CG *ENE                                              EVENT126
          PH(2)=0.D0  *ENE                                              EVENT127
          PH(1)=XK*SG *ENE                                              EVENT128
          CFI=COS(FI)                                                   EVENT129
          SFI=SIN(FI)                                                   EVENT130
          PH1    =CFI*PH(1)-SFI*PH(2)                                   EVENT131
          PH(2)=SFI*PH(1)+CFI*PH(2)                                     EVENT132
          PH(1)=PH1                                                     EVENT133
        ELSE                                                            EVENT134
          DO 304 I=1,4                                                  EVENT135
  304     PH(I)=PH(I)-QP(I)-QM(I)                                       EVENT136
        ENDIF                                                           EVENT137
C FILLING EXTRA COMMONS                                                 EVENT138
        NPHOT=1                                                         EVENT139
        IF (IT.EQ.3) NPHOT=0                                            EVENT140
        DO 40 I=1,4                                                     EVENT141
        DO 40 J=1,100                                                   EVENT142
 40     SPHOT(J,I)=0.D0                                                 EVENT143
        DO 30 I=1,4                                                     EVENT144
        QF1(I)=QP(I)                                                    EVENT145
        QF2(I)=QM(I)                                                    EVENT146
        SPHUM(I)=PH(I)                                                  EVENT147
        SPHOT(1,I)=PH(I)                                                EVENT148
        AQP(I)=QP(I)                                                    EVENT149
        AQM(I)=QM(I)                                                    EVENT150
 30     APH(I)=PH(I)                                                    EVENT151
        NPHOTA=NPHOT                                                    EVENT152
        DO 35 I=1,4                                                     EVENT153
        AQF1(I)=QF1(I)                                                  EVENT154
        AQF2(I)=QF2(I)                                                  EVENT155
        ASPHUM(I)=SPHUM(I)                                              EVENT156
        DO 36 II=1,100                                                  EVENT157
 36     ASPHOT(II,I)=SPHOT(II,I)                                        EVENT158
 35     CONTINUE                                                        EVENT159
C                                                                       EVENT160
        WT =WEIGHT(0,0.0D0,0.D0)                                        EVENT161
        WT =WEIGHT(1,0.D0,0.D0)/WT                                      EVENT162
        SWT(1)=SWT(1)+1D0                                               EVENT163
        SWT(2)=SWT(2)+WT                                                EVENT164
        SWT(3)=SWT(3)+WT*WT                                             EVENT165
C IMPOSING INTERFERENCE TERM ON THE GENERATED DISTRIBUTION              EVENT166
        RN=RRR(4)                                                       EVENT167
        IF(RN.GT.WT/2D0) GO TO 1                                        EVENT168
C                                                                       EVENT169
      ELSEIF (MODE.EQ. 1) THEN                                          EVENT170
C     ========================                                          EVENT171
        CALL VESK8A( 1,SIGT,ERR)                                        EVENT172
        AWT =SWT(2)/SWT(1)                                              EVENT173
        DWT =SQRT(SWT(3)/SWT(2)**2-1D0/SWT(1))                          EVENT174
        WRITE(6,*) 'SIGT=',SIGT,'ERR=',ERR                              EVENT175
        WRITE(6,*) 'AWT=',AWT,'+-',DWT                                  EVENT176
        CSTOT=SIGT*AWT                                                  EVENT177
        NTOT=INT(SWT(1))                                                EVENT178
        SIG0=4.D0*PI/ALFINV**2/3.D0/(4D0*ENE**2)                        EVENT179
        CSTCM=SIGT*AWT*SIG0*CMTR                                        EVENT180
        ERREL=SQRT(DWT**2+ERR**2)                                       EVENT181
      ENDIF                                                             EVENT182
C     =====                                                             EVENT183
      END                                                               EVENT184
      FUNCTION ALTPAR(TRANSF,AMFERM,EPSIL,FACTOR)                       ALTPAR 2
C ----------------------------------------------------------------------ALTPAR 3
C THIS FUNCTION RETURNS PHOTON MOMENTUM (IN SQRT(S)/2 UNITS)            ALTPAR 4
C FOR THE FINAL STATE BREMSSTRAHLUNG.                                   ALTPAR 5
C HARD BREMSSTRAHLUNG PART OF THE DISTRIBUTION CORRESPONDS TO  PRECISE  ALTPAR 6
C SINGLE BREMSSTRAHLUNG (ORDER ALPHA) RESULT AND NO-PHOTON PROBABILITY  ALTPAR 7
C IS ADJUSTED SUCH THAT THE INTEGRAL OVER ENTIRE DISTRIBUTION IS EQUAL  ALTPAR 8
C TO ONE PRECISELY (AS IN ALTARELLI-PARISI CASE).                       ALTPAR 9
C IN THE LEADING LOG THE DISTRIBUTION COINCIDES WITH THE ALTARELLI-     ALTPAR10
C PARISI DISTRIBUTION WHERE FERMION IS FRAGMENTING COLLINEARLY INTO A   ALTPAR11
C PHOTON AND FERMION.                                                   ALTPAR12
C                                                                       ALTPAR13
C    INPUT:                                                             ALTPAR14
C TRANSF   = TOTAL C.M. ENERGY SQUARED (GEV**2)                         ALTPAR15
C EPSIL    = INFRARED CUTOFF PARAMETER, DIMENSIONLESS, SMALL.           ALTPAR16
C AMFERM   = FERMION MASS (GEV)                                         ALTPAR17
C FACTOR   = NORMALLY EQUAL 1, OTHERWISE IT MAY BE USED TO REGULATE     ALTPAR18
C            THE STRENGTH OF THE BREMSTRAHLUNG (IT MULTIPLIES ALPHA).   ALTPAR19
C    OUTPUT:                                                            ALTPAR20
C RETURNED IS A FRACTION OF THE FERMION MOMENTUM  CARRIED BY PHOTON,    ALTPAR21
C DIMENSIONLESS, IN THE RANGE (0,1).                                    ALTPAR22
C                                                                       ALTPAR23
C     called by : EVENTE, EVENTM                                        ALTPAR24
C ----------------------------------------------------------------------ALTPAR25
      IMPLICIT REAL*8(A-H,O-Z)                                          ALTPAR26
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      REAL*4 RRN1,RRR(2)                                                ALTPAR28
      DATA PI /3.141592653589793238462643D0/                            ALTPAR29
C                                                                       ALTPAR30
C PROBABILITIES FOR HARD AND SOFT BREMSTRAHLUNG                         ALTPAR31
      BILG= LOG(TRANSF/AMFERM**2)                                       ALTPAR32
      PRHARD= 2D0 *ALFPI *(BILG-1D0) *( LOG(1D0/EPSIL)-.75D0 )          ALTPAR33
C NONLEADING TERM  FROM LOG(1-XK) PART OF DISTRIBUTION                  ALTPAR34
      PRHARD=PRHARD + ALFPI *( -PI**2/3D0 +1.25D0)                      ALTPAR35
      PRHARD=PRHARD*FACTOR                                              ALTPAR36
      PRSOFT=1D0-PRHARD                                                 ALTPAR37
      IF(PRSOFT.LT.0.10D0) GOTO 600                                     ALTPAR38
      CALL RANMAR(RRN1,1)                                               ALTPAR39
      RN1=RRN1                                                          ALTPAR40
      IF(RN1.LT.PRSOFT) THEN                                            ALTPAR41
C        NO PHOTON....  (IE. PHOTON BELOW EPSILON)                      ALTPAR42
         XK=0D0                                                         ALTPAR43
      ELSE                                                              ALTPAR44
C        HARD PHOTON...  (IE. PHOTON ABOVE EPSILON)                     ALTPAR45
  200    CONTINUE                                                       ALTPAR46
         CALL RANMAR(RRR,2)                                             ALTPAR47
         RN2=RRR(1)                                                     ALTPAR48
         RN3=RRR(2)                                                     ALTPAR49
         XK=  EXP(RN2* LOG(EPSIL))                                      ALTPAR50
         DIST0= 1D0/XK *(BILG-1D0)                                      ALTPAR51
         DIST1= (1D0+(1D0-XK)**2)/2D0/XK *(BILG +LOG(1D0-XK) -1D0)      ALTPAR52
         WEIGHT=DIST1/DIST0                                             ALTPAR53
         IF(RN3.GT.WEIGHT) GO TO 200                                    ALTPAR54
      ENDIF                                                             ALTPAR55
      ALTPAR=XK                                                         ALTPAR56
      RETURN                                                            ALTPAR57
  600 PRINT 1600,TRANSF,PRSOFT                                          ALTPAR58
 1600 FORMAT(' ++++++++++++++  STOP IN ALTPAR:',                        ALTPAR59
     $     /,'             TRANSF,PRSOFT,=' ,2F20.5)                    ALTPAR60
      STOP                                                              ALTPAR61
      END                                                               ALTPAR62
      FUNCTION FUNSKA(MODE,X)                                           FUNSKA 2
C ----------------------------------------------------------------------FUNSKA 3
C CALLED IN VESKO2                                                      FUNSKA 4
C PROVIDES V OR K DISTRIBUTION TO BE GENERATED                          FUNSKA 5
C                                                                       FUNSKA 6
C     called by : EVENTM, VESK8A, DESK8A                                FUNSKA 7
C ----------------------------------------------------------------------FUNSKA 8
      IMPLICIT REAL*8(A-H,O-Z)                                          FUNSKA 9
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
C                                                                       FUNSKA15
      IF(KEYRAD.EQ.0) THEN                                              FUNSKA16
        BLE=BONMA0(MODE,X)                                              FUNSKA17
        IF (X.GT.XK0) BLE=0.D0                                          FUNSKA18
        FUNSKA=BLE                                                      FUNSKA19
      ELSEIF(KEYRAD.EQ.1) THEN                                          FUNSKA20
        IF(KBRINI.EQ.0) THEN                                            FUNSKA21
          BLE=BONMA0(MODE,X)                                            FUNSKA22
          IF (X.GT.XK0) BLE=0.D0                                        FUNSKA23
          FUNSKA=BLE                                                    FUNSKA24
        ELSE                                                            FUNSKA25
          BLE=BONMA1(MODE,X)                                            FUNSKA26
          IF (X.GT.XK0) BLE=BLE *(1+(1-X)**2)/2D0                       FUNSKA27
          FUNSKA=BLE                                                    FUNSKA28
        ENDIF                                                           FUNSKA29
      ELSEIF (KEYRAD.GE.10.AND.KEYRAD.LT.113) THEN                      FUNSKA30
        FUNSKA=5                                                        FUNSKA31
      ELSE                                                              FUNSKA32
        WRITE (IOUT,*) 'STOP IN FUNSKO'                                 FUNSKA33
        STOP                                                            FUNSKA34
      ENDIF                                                             FUNSKA35
      END                                                               FUNSKA36
      FUNCTION BONMA0(MODE,XK)                                          BONMA0 2
C ----------------------------------------------------------------------BONMA0 3
C PHOTON SPECTRUM IN CASE OF NO PHOTONS - BORN ONLY                     BONMA0 4
C FAKED DISTRIBUTION                                                    BONMA0 5
C                                                                       BONMA0 6
C     called by : FUNSKO                                                BONMA0 7
C ----------------------------------------------------------------------BONMA0 8
      IMPLICIT REAL*8(A-H,O-Z)                                          BONMA0 9
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
C                                                                       BONMA014
      IF (MODE.EQ.-1) THEN                                              BONMA015
C     ====================                                              BONMA016
C       INITIALIZATION                                                  BONMA017
        CALL GIVIZO( IDE, 1,AIZOR,QE,KDUMM)                             BONMA018
        QE2=0.D0                                                        BONMA019
        SOFT=BORNY(4D0*ENE**2)                                          BONMA020
        F0=.5D0*BORNY(4D0*ENE**2)                                       BONMA021
        F1=XK0/(EXP(SOFT/F0)-1)                                         BONMA022
C FUNCTION RETURNS RATIO OF THE BORN TO INITIAL SOFT CROSS SECTION      BONMA023
        BONMA0=1D0                                                      BONMA024
C                                                                       BONMA025
C RUNNING MODE                                                          BONMA026
      ELSEIF (MODE.EQ.0 ) THEN                                          BONMA027
C     ==========================                                        BONMA028
        IF     (XK.LE.0D0 ) THEN                                        BONMA029
          BONMA0=0D0                                                    BONMA030
        ELSEIF (XK.LE.XK0 ) THEN                                        BONMA031
C         SOFT PHOTON CASE                                              BONMA032
          BONMA0=F0/(XK+F1)                                             BONMA033
        ELSE                                                            BONMA034
          BONMA0=0D0                                                    BONMA035
        ENDIF                                                           BONMA036
C                                                                       BONMA037
      ENDIF                                                             BONMA038
C     =====                                                             BONMA039
      END                                                               BONMA040
      FUNCTION BONMA1(MODE,XK)                                          BONMA1 2
C ----------------------------------------------------------------------BONMA1 3
C DISTRIBUTION OF K-VARIABLE,                                           BONMA1 4
C BONNEAU MARTIN FORMULA                                                BONMA1 5
C                                                                       BONMA1 6
C     called by : FUNSKO                                                BONMA1 7
C ----------------------------------------------------------------------BONMA1 8
      IMPLICIT REAL*8(A-H,O-Z)                                          BONMA1 9
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      DATA PI /3.141592653589793238462643D0/                            BONMA114
C                                                                       BONMA115
      IF(XK0.GT.VVMAX) GOTO 900                                         BONMA116
      QE=1D0                                                            BONMA117
      QE2=QE**2                                                         BONMA118
      SVAR=4D0*ENE**2                                                   BONMA119
      ALF1=ALFPI                                                        BONMA120
      BILG  =DLOG(4D0*ENE**2/AMIN**2)                                   BONMA121
      BETI  =2D0*QE2*ALF1*(BILG-1D0)                                    BONMA122
      BETIR =2D0*QE2*ALF1* BILG                                         BONMA123
      DELI  =ALF1*QE2*(1.5D0*BILG+PI**2/3D0-2D0)+ BETI*LOG(XK0)         BONMA124
      IF(    XK.LT.0D0) THEN                                            BONMA125
        DIST=0D0                                                        BONMA126
      ELSEIF(XK.LT.XK0) THEN                                            BONMA127
C DISTRIBUTION BELOW XK0 IS DESIGNED SUCH THAT THE INTEGRAL             BONMA128
C FROM 0 TO XK0 IS PRECISELY (1+DELI)*BORNY(SVAR)                       BONMA129
        EPS=XK0/(EXP((1D0+DELI)/BETI)-1D0)                              BONMA130
        DIST=BETI/(EPS+XK)*BORNY(SVAR)                                  BONMA131
      ELSEIF(XK.LT.VVMAX) THEN                                          BONMA132
C NOTE THAT 1/(1-XK) FACTOR BECAUSE BORNY IS IN R-UNITS                 BONMA133
        SOFDIS=    BETI/XK                                              BONMA134
C       SOFDIS=    BETIR/XK                                             BONMA135
        DIST=SOFDIS*BORNY(SVAR*(1D0-XK))/(1D0-XK)                       BONMA136
      ELSE                                                              BONMA137
        DIST=0D0                                                        BONMA138
      ENDIF                                                             BONMA139
      VV=XK                                                             BONMA140
C                                                                       BONMA141
      BONMA1=DIST                                                       BONMA142
      RETURN                                                            BONMA143
  900 WRITE(IOUT,*) '============= STOP IN BONMAR '                     BONMA144
      END                                                               BONMA145
      FUNCTION WEIGHT(MODE,TA,TB)                                       WEIGHT 2
C ----------------------------------------------------------------------WEIGHT 3
C THIS FUNCTION CALCULATES DIFFERENTIAL CROSS SECTION FOR EVERY EVENT   WEIGHT 4
C  INPUT : MODE:                                                        WEIGHT 5
C                 0   FOR CALL FOR RAW CROSS SECTION                    WEIGHT 6
C                     NO VAC. POLARIZ & NO GSW &                        WEIGHT 7
C                     NO INTERFERENCE INIT - FINAL                      WEIGHT 8
C                 1   INITIALIZATION. CORECT X. SECTION                 WEIGHT 9
C                 2   CORRECT X. SECTION                                WEIGHT10
C          TA,TB: TWICE OF TAU+ TAU- HELICITIES                         WEIGHT11
C                                                                       WEIGHT12
C     called by : EVENTE, EVENTM, SPIGEN, ALTPAR                        WEIGHT13
C ----------------------------------------------------------------------WEIGHT14
      IMPLICIT REAL*8(A-H,O-Z)                                          WEIGHT15
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      DATA ICONT/0/                                                     WEIGHT17
      ICONT=ICONT+1                                                     WEIGHT18
C IF MODE=0 CALCULATION OF ANGULAR VARIABLES FROM 4-MOMENTA             WEIGHT19
      CALL PEDYPR(MODE,XK,C1,S1,C2,S2,CF,SF,CG,SG)                      WEIGHT20
      IF(XK.GT.1.D-6) THEN                                              WEIGHT21
C        HARD PHOTON CASE                                               WEIGHT22
         FUNTI=FUNTIH(MODE,TA,TB)                                       WEIGHT23
      ELSE                                                              WEIGHT24
C        SOFT PHOTON CASE                                               WEIGHT25
         COSTHE=C1                                                      WEIGHT26
         FUNTI=FUNTIS(MODE,COSTHE,TA,TB)                                WEIGHT27
      ENDIF                                                             WEIGHT28
C                                                                       WEIGHT29
      IF (KEYGSW.EQ.4) THEN                                             WEIGHT30
        IF (MODE.EQ.0) THEN                                             WEIGHT31
          CALL SANGLE(0,SVAR,CTHE)                                      WEIGHT32
          GSWF0=BORNS(0,SVAR,CTHE,0D0,0D0)                              WEIGHT33
          GSWF1=BORNS(0,SVAR,CTHE,1D0,1D0)                              WEIGHT34
          GSWF2=BORNS(0,SVAR,CTHE,-1D0,-1D0)                            WEIGHT35
        ENDIF                                                           WEIGHT36
C THIS IS A PROTECTION AGAINST ZERO DIVIDE IN NUNUBAR CASE              WEIGHT37
        IF (DABS(GSWF0).LT.1D-12) GSWF0= 1.D0                           WEIGHT38
        IF (DABS(GSWF1).LT.1D-12) GSWF1= 1.D0                           WEIGHT39
        IF (DABS(GSWF2).LT.1D-12) GSWF2= 1.D0                           WEIGHT40
C                                                                       WEIGHT41
C                                                                       WEIGHT42
        IF (MODE.EQ.0) THEN                                             WEIGHT43
          GSWFA=1D0                                                     WEIGHT44
        ELSEIF (TA*TB.LT.-.5D0) THEN                                    WEIGHT45
          GSWFA=1D0                                                     WEIGHT46
        ELSEIF ( TA*TA.LT.0.5D0) THEN                                   WEIGHT47
          GSWFA=BORNS(MODE,SVAR,CTHE,0D0,0D0)/GSWF0                     WEIGHT48
        ELSEIF ( TA.GT.0.5D0)    THEN                                   WEIGHT49
          GSWFA=BORNS(MODE,SVAR,CTHE,1D0,1D0)/GSWF1                     WEIGHT50
        ELSEIF ( TA.LT.-0.5D0)   THEN                                   WEIGHT51
          GSWFA=BORNS(MODE,SVAR,CTHE,-1D0,-1D0)/GSWF2                   WEIGHT52
        ENDIF                                                           WEIGHT53
C                                                                       WEIGHT54
        FUNTI=FUNTI*GSWFA                                               WEIGHT55
      ENDIF                                                             WEIGHT56
C                                                                       WEIGHT57
      WEIGHT=FUNTI                                                      WEIGHT58
C     PRINT *, 'MODE',MODE,'TA',TA,'TB',TB,'WEIGHT=',WEIGHT             WEIGHT59
      END                                                               WEIGHT60
      SUBROUTINE SANGLE(MODE,SVAR,COSTHE)                               SANGLE 2
C ----------------------------------------------------------------------SANGLE 3
C THIS ROUTINE CALCULATES BORN LIKE VARIABLES FROM THE 4- MOMETA        SANGLE 4
C STORED IN UTIL. FOR MODE = 0 ANGULAR VARIABLES ARE CALCULATED         SANGLE 5
C AND MEMORIZED. FOR HIGHER MODES THEY ARE SUPPLIED.                    SANGLE 6
C FOR ULTRAHARD PHOTONS (EDGE OF PHASE SPACE) THIS ROUTINE MAY          SANGLE 7
C PRODUCE COSTHE.GT.1D0 .....                                           SANGLE 8
C                                                                       SANGLE 9
C     called by : WEIGHT                                                SANGLE10
C ----------------------------------------------------------------------SANGLE11
      IMPLICIT REAL*8(A-H,O-Z)                                          SANGLE12
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / UTIL8 / QP(4),QM(4),PH(4)                                UTIL8  2
      REAL*8           QP   ,QM   ,PH                                   UTIL8  3
      COMPLEX*16 CPRZ0M                                                 SANGLE15
      REAL*8 PP(4),PM(4),PP1(4),PM1(4),QP1(4),QM1(4),P(4),Q(4)          SANGLE16
      REAL*8 PP2(4),PM2(4),QP2(4),QM2(4)                                SANGLE17
      DATA  ICON /0/                                                    SANGLE18
C                                                                       SANGLE19
      IF (MODE.EQ.0) THEN                                               SANGLE20
C       INITIALIZATION OF THE  VARIABLES                                SANGLE21
C       ================================                                SANGLE22
C       4-MOMENTA OF BEAMS                                              SANGLE23
        DO 7 K=1,4                                                      SANGLE24
        PP(K)=0D0                                                       SANGLE25
    7   PM(K)=0D0                                                       SANGLE26
C                                                                       SANGLE27
        PP(4)= ENE                                                      SANGLE28
        PM(4)= ENE                                                      SANGLE29
        PP(3)= ENE                                                      SANGLE30
        PM(3)=-ENE                                                      SANGLE31
C 4-MOMENTA OF 'DRESSED' FERMIONS                                       SANGLE32
        DO 9 K=1,4                                                      SANGLE33
        PP1(K)=PP(K)                                                    SANGLE34
        PM1(K)=PM(K)                                                    SANGLE35
        QP1(K)=QP(K)                                                    SANGLE36
    9   QM1(K)=QM(K)                                                    SANGLE37
C ADDITION OF THE PHOTON PH TO FERMION OF MINIMAL MASS OF               SANGLE38
C FERMION PHOTON STATE                                                  SANGLE39
        DO 8 K=1,4                                                      SANGLE40
        PP2(K)=PP(K)-PH(K)                                              SANGLE41
        PM2(K)=PM(K)-PH(K)                                              SANGLE42
        QP2(K)=QP(K)+PH(K)                                              SANGLE43
    8   QM2(K)=QM(K)+PH(K)                                              SANGLE44
CC                                                                      SANGLE45
        CALL MULSK(PP2,PP2,XM1)                                         SANGLE46
        CALL MULSK(PM2,PM2,XM2)                                         SANGLE47
        CALL MULSK(QP2,QP2,XM3)                                         SANGLE48
        CALL MULSK(QM2,QM2,XM4)                                         SANGLE49
        XXKM=1D0-PH(4)/ENE                                              SANGLE50
        FACINI=CDABS(CPRZ0M(1,4D00*ENE**2*XXKM))**2                     SANGLE51
        FACFIN=CDABS(CPRZ0M(1,4D00*ENE**2))**2                          SANGLE52
        XM1=XM1/FACINI                                                  SANGLE53
        XM2=XM2/FACINI                                                  SANGLE54
        XM3=XM3/FACFIN                                                  SANGLE55
        XM4=XM4/FACFIN                                                  SANGLE56
        XM=MIN(-XM1,-XM2,XM3,XM4)                                       SANGLE57
C                                                                       SANGLE58
        DO 10 K=1,4                                                     SANGLE59
        IF     (XM1.EQ.-XM) THEN                                        SANGLE60
          PP1(K)=PP(K)-PH(K)                                            SANGLE61
        ELSEIF (XM2.EQ.-XM) THEN                                        SANGLE62
          PM1(K)=PM(K)-PH(K)                                            SANGLE63
        ELSEIF (XM3.EQ. XM) THEN                                        SANGLE64
          QP1(K)=QP(K)+PH(K)                                            SANGLE65
        ELSEIF (XM4.EQ. XM) THEN                                        SANGLE66
          QM1(K)=QM(K)+PH(K)                                            SANGLE67
        ELSE                                                            SANGLE68
          PRINT *,                                                      SANGLE69
     &    'SOMETHING IS STRANGE IN COMPILER MODIFY LOGIC OF SANGLE'     SANGLE70
        ENDIF                                                           SANGLE71
   10   CONTINUE                                                        SANGLE72
C CALCULATION OF THE S AND COSTHE CORRESPONDING TO THE HARD-BORN LIKE   SANGLE73
C KERNEL OF THE INTERACTION. USED ARE DRESSED 4-MOMENTA OF FERMIONS.    SANGLE74
        DO 15 K=1,4                                                     SANGLE75
        Q(K)=QP1(K)-PP1(K)                                              SANGLE76
   15   P(K)=PM1(K)+PP1(K)                                              SANGLE77
C                                                                       SANGLE78
        CALL MULSK(P,P,SVARI)                                           SANGLE79
        CALL MULSK(Q,Q,T)                                               SANGLE80
        CALL MULSK(PP1,PP1,XM1)                                         SANGLE81
        CALL MULSK(PM1,PM1,XM2)                                         SANGLE82
        CALL MULSK(QP1,QP1,XM3)                                         SANGLE83
        CALL MULSK(QM1,QM1,XM4)                                         SANGLE84
C                                                                       SANGLE85
        P2=(SVARI**2+(XM1-XM2)**2-2D0*SVARI*(XM1+XM2))/4D0/SVARI        SANGLE86
        Q2=(SVARI**2+(XM3-XM4)**2-2D0*SVARI*(XM3+XM4))/4D0/SVARI        SANGLE87
        COST=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3)))   SANGLE88
        IF(XM1.GE.XM2) THEN                                             SANGLE89
          COST=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) SANGLE90
          COSA=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) SANGLE91
        ELSE                                                            SANGLE92
          COST=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) SANGLE93
          COSA=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) SANGLE94
        ENDIF                                                           SANGLE95
C                                                                       SANGLE96
      ENDIF                                                             SANGLE97
C     =====                                                             SANGLE98
C* SETTING VALUES (FOR ALL MODES)                                       SANGLE99
C                                                                       SANGL100
      COSTHE=COST                                                       SANGL101
      SVAR=SVARI                                                        SANGL102
C     CALL DUMPL9(PP1,PM1,PH)                                           SANGL103
C     CALL DUMPL9(QP1,QM1,PH)                                           SANGL104
      ICON=ICON+1                                                       SANGL105
C ZW CORRECTION FOR SOME OVERFLOWS AT THE EDGE OF THE PHASE SPACE       SANGL106
      IF ( COSTHE.GE.1D0.OR.COSTHE.LE.-1D0 ) THEN                       SANGL107
        COSTHE=COSTHE/COSTHE**2                                         SANGL108
        IF ( COSTHE.EQ.1D0.OR.COSTHE.EQ.-1D0 ) COSTHE=COSTHE*.9999999   SANGL109
        PRINT *, '==== WARNING ===== SUBROUTINE SANGLE',ICON            SANGL110
        PRINT *, 'YOU HAVE RUN INTO THE PROBLEM AT THE EDGE OF THE PHASESANGL111
     $ SPACE. AD HOC CORRECTION HAS BEEN DONE! '                        SANGL112
      ENDIF                                                             SANGL113
      IF ( SVAR.LE.4D0*AMFIN**2) THEN                                   SANGL114
        SVAR=16D0*AMFIN**4/SVAR                                         SANGL115
        IF ( SVAR.EQ.4D0*AMFIN**2 ) SVAR=SVAR*1.00000001D0              SANGL116
        PRINT *, '==== WARNING ===== SUBROUTINE SANGLE',ICON            SANGL117
        PRINT *, 'YOU HAVE RUN INTO THE PROBLEM AT THE EDGE OF THE      SANGL118
     $  PHASE SPACE. AD HOC CORRECTION HAS BEEN DONE! '                 SANGL119
      ENDIF                                                             SANGL120
      RETURN                                                            SANGL121
      END                                                               SANGL122
      SUBROUTINE SKONTY(MODE,SVAR,COSTHE)                               SKONTY 2
C ----------------------------------------------------------------------SKONTY 3
C THIS ROUTINE CALCULATES BORN LIKE VARIABLES FROM THE 4- MOMETA        SKONTY 4
C STORED IN MOMSET. FOR MODE = 0 ANGULAR VARIABLES ARE CALCULATED       SKONTY 5
C AND MEMORIZED. FOR HIGHER MODES THEY ARE SUPPLIED.                    SKONTY 6
C FOR ULTRAHARD PHOTONS (EDGE OF PHASE SPACE) THIS ROUTINE MAY          SKONTY 7
C PRODUCE COSTHE.GT.1D0 .....                                           SKONTY 8
C                                                                       SKONTY 9
C     called by : WAGA, WEIGHT                                          SKONTY10
C ----------------------------------------------------------------------SKONTY11
      IMPLICIT REAL*8(A-H,O-Z)                                          SKONTY12
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      REAL*8 PP(4),PM(4),PP1(4),PM1(4),QP1(4),QM1(4),P(4),Q(4)          SKONTY17
      REAL*8 PP2(4),PM2(4),QP2(4),QM2(4)                                SKONTY18
      REAL*8 QP(4),QM(4),PH(4)                                          SKONTY19
      COMPLEX*16 CPRZ0M                                                 SKONTY20
      LOGICAL IFINI,BETTER                                              SKONTY21
C                                                                       SKONTY22
C     BETTER=.true. denotes mode of operation when photons are          SKONTY23
C     classified to be initial or final                                 SKONTY24
      DATA  BETTER /.TRUE./                                             SKONTY25
      DATA  ICON /0/                                                    SKONTY26
C                                                                       SKONTY27
      IF (MODE.EQ.0) THEN                                               SKONTY28
C      INITIALIZATION OF THE  VARIABLES                                 SKONTY29
C      ================================                                 SKONTY30
C                                                                       SKONTY31
C 4-MOMENTA OF BEAMS                                                    SKONTY32
        DO 7 K=1,4                                                      SKONTY33
        PP(K)=0D0                                                       SKONTY34
    7   PM(K)=0D0                                                       SKONTY35
C                                                                       SKONTY36
        PP(4)= ENE                                                      SKONTY37
        PM(4)= ENE                                                      SKONTY38
        PP(3)= ENE                                                      SKONTY39
        PM(3)=-ENE                                                      SKONTY40
C 4-MOMENTA OF 'DRESSED' FERMIONS                                       SKONTY41
        DO 9 K=1,4                                                      SKONTY42
        QP(K) =QF1(K)                                                   SKONTY43
        QM(K) =QF2(K)                                                   SKONTY44
        PP1(K)=PP(K)                                                    SKONTY45
        PM1(K)=PM(K)                                                    SKONTY46
        QP1(K)=QP(K)                                                    SKONTY47
    9   QM1(K)=QM(K)                                                    SKONTY48
C                                                                       SKONTY49
        DO 77 KPHOT=1,NPHOT                                             SKONTY50
C       == == =============                                             SKONTY51
C ADDITION OF THE PHOTON PH TO FERMION OF MINIMAL MASS OF               SKONTY52
C FERMION PHOTON STATE                                                  SKONTY53
        DO 8 K=1,4                                                      SKONTY54
        IFINI=KPHOT.LE.NPHOX                                            SKONTY55
        IF (IFINI) THEN                                                 SKONTY56
          PH (K)=XPHOT(KPHOT,K)                                         SKONTY57
        ELSE                                                            SKONTY58
          PH (K)=YPHOT(KPHOT-NPHOX,K)                                   SKONTY59
          IF(NPHOY.EQ.0) PH (K)=SPHOT(KPHOT,K)                          SKONTY60
        ENDIF                                                           SKONTY61
        PP2(K)=PP(K)-PH(K)                                              SKONTY62
        PM2(K)=PM(K)-PH(K)                                              SKONTY63
        QP2(K)=QP(K)+PH(K)                                              SKONTY64
    8   QM2(K)=QM(K)+PH(K)                                              SKONTY65
C                                                                       SKONTY66
        CALL MULSK(PP2,PP2,XM1)                                         SKONTY67
        CALL MULSK(PM2,PM2,XM2)                                         SKONTY68
        CALL MULSK(QP2,QP2,XM3)                                         SKONTY69
        CALL MULSK(QM2,QM2,XM4)                                         SKONTY70
        XXKM=1D0-PH(4)/ENE                                              SKONTY71
        FACINI=CDABS(CPRZ0M(1,4D00*ENE**2*XXKM))**2                     SKONTY72
        FACFIN=CDABS(CPRZ0M(1,4D00*ENE**2))**2                          SKONTY73
        XM1=XM1/FACINI                                                  SKONTY74
        XM2=XM2/FACINI                                                  SKONTY75
        XM3=XM3/FACFIN                                                  SKONTY76
        XM4=XM4/FACFIN                                                  SKONTY77
        IF (BETTER) THEN                                                SKONTY78
          IF (IFINI) THEN                                               SKONTY79
           XM=MIN(-XM1,-XM2,-XM1,-XM2)                                  SKONTY80
          ELSE                                                          SKONTY81
           XM=MIN( XM4, XM3, XM3, XM4)                                  SKONTY82
          ENDIF                                                         SKONTY83
        ELSE                                                            SKONTY84
           XM=MIN(-XM1,-XM2, XM3, XM4)                                  SKONTY85
        ENDIF                                                           SKONTY86
C                                                                       SKONTY87
        DO 10 K=1,4                                                     SKONTY88
        IF     (XM1.EQ.-XM) THEN                                        SKONTY89
          PP1(K)=PP1(K)-PH(K)                                           SKONTY90
        ELSEIF (XM2.EQ.-XM) THEN                                        SKONTY91
          PM1(K)=PM1(K)-PH(K)                                           SKONTY92
        ELSEIF (XM3.EQ. XM) THEN                                        SKONTY93
          QP1(K)=QP1(K)+PH(K)                                           SKONTY94
        ELSEIF (XM4.EQ. XM) THEN                                        SKONTY95
          QM1(K)=QM1(K)+PH(K)                                           SKONTY96
        ELSE                                                            SKONTY97
          PRINT *,                                                      SKONTY98
     &    'SOMETHING IS STRANGE IN COMPILER MODIFY LOGIC OF SANGLE'     SKONTY99
        ENDIF                                                           SKONT100
   10   CONTINUE                                                        SKONT101
   77   CONTINUE                                                        SKONT102
C  ==   ========                                                        SKONT103
C CALCULATION OF THE S AND COSTHE CORRESPONDING TO THE HARD-BORN LIKE   SKONT104
C KERNEL OF THE INTERACTION. USED ARE DRESSED 4-MOMENTA OF FERMIONS.    SKONT105
        DO 15 K=1,4                                                     SKONT106
        Q(K)=QP1(K)-PP1(K)                                              SKONT107
   15   P(K)=PM1(K)+PP1(K)                                              SKONT108
        CALL MULSK(P,P,SVARI)                                           SKONT109
        CALL MULSK(Q,Q,T)                                               SKONT110
        CALL MULSK(PP1,PP1,XM1)                                         SKONT111
        CALL MULSK(PM1,PM1,XM2)                                         SKONT112
        CALL MULSK(QP1,QP1,XM3)                                         SKONT113
        CALL MULSK(QM1,QM1,XM4)                                         SKONT114
C                                                                       SKONT115
        P2=(SVARI**2+(XM1-XM2)**2-2D0*SVARI*(XM1+XM2))/4D0/SVARI        SKONT116
        Q2=(SVARI**2+(XM3-XM4)**2-2D0*SVARI*(XM3+XM4))/4D0/SVARI        SKONT117
        COST=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3)))   SKONT118
        IF(XM1.GE.XM2) THEN                                             SKONT119
          COST=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) SKONT120
          COSA=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) SKONT121
        ELSE                                                            SKONT122
          COST=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) SKONT123
          COSA=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) SKONT124
        ENDIF                                                           SKONT125
                                                                        SKONT126
C                                                                       SKONT127
      ENDIF                                                             SKONT128
C     =====                                                             SKONT129
C* SETTING VALUES (FOR ALL MODES)                                       SKONT130
C                                                                       SKONT131
      COSTHE=COST                                                       SKONT132
      SVAR=SVARI                                                        SKONT133
      ICON=ICON+1                                                       SKONT134
C ZW CORRECTION FOR SOME OVERFLOWS AT THE EDGE OF THE PHASE SPACE       SKONT135
      IF ( COSTHE.GE.1D0.OR.COSTHE.LE.-1D0 ) THEN                       SKONT136
        COSTHE=COSTHE/COSTHE**2                                         SKONT137
        IF ( COSTHE.EQ.1D0.OR.COSTHE.EQ.-1D0 ) COSTHE=COSTHE*.9999999   SKONT138
        PRINT *, '==== WARNING ===== SUBROUTINE SKONTY',ICON            SKONT139
        PRINT *, 'YOU HAVE RUN INTO THE PROBLEM AT THE EDGE OF THE PHASESKONT140
     $ SPACE. AD HOC CORRECTION HAS BEEN DONE! '                        SKONT141
       CALL DUMPS(6)                                                    SKONT142
      ENDIF                                                             SKONT143
      IF ( SVAR.LE.4D0*AMFIN**2) THEN                                   SKONT144
        SVAR=16D0*AMFIN**4/SVAR                                         SKONT145
        IF ( SVAR.EQ.4D0*AMFIN**2 ) SVAR=SVAR*1.00000001D0              SKONT146
        PRINT *, '==== WARNING ===== SUBROUTINE SKONTY',ICON            SKONT147
        PRINT *, 'YOU HAVE RUN INTO THE PROBLEM AT THE EDGE OF THE      SKONT148
     $ SPACE. AD HOC CORRECTION HAS BEEN DONE! '                        SKONT149
       CALL DUMPS(6)                                                    SKONT150
      ENDIF                                                             SKONT151
      RETURN                                                            SKONT152
      END                                                               SKONT153
      SUBROUTINE BDRESS(MODE,PPBT,PMBT,SVAR,COSTHE)                     BDRESS 2
C ----------------------------------------------------------------------BDRESS 3
C THIS ROUTINE CALCULATES DRESSED BEAMS                                 BDRESS 4
C FOR ULTRAHARD PHOTONS (EDGE OF PHASE SPACE) THIS ROUTINE MAY          BDRESS 5
C PRODUCE COSTHE.GT.1D0 .....                                           BDRESS 6
C IT SHOULD NOT BE CALLED WITH THE MODE 0 AFTER GENERATION OF FINAL     BDRESS 7
C STATE PHOTON                                                          BDRESS 8
C                                                                       BDRESS 9
C     called by : PEDYVV, TRAAAA, EVENTE, WEIGHT                        BDRESS10
C ----------------------------------------------------------------------BDRESS11
      IMPLICIT REAL*8(A-H,O-Z)                                          BDRESS12
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      REAL*8 PP(4),PM(4),PP1(4),PM1(4),P(4),Q(4),PH(4)                  BDRESS15
      REAL*8 PP2(4),PM2(4),PPB(4),PMB(4),PPBT(4),PMBT(4)                BDRESS16
      DATA  ICON /0/                                                    BDRESS17
C                                                                       BDRESS18
      IF (MODE.EQ.0) THEN                                               BDRESS19
C       INITIALIZATION OF THE  VARIABLES                                BDRESS20
C       ================================                                BDRESS21
C                                                                       BDRESS22
C 4-MOMENTA OF BEAMS                                                    BDRESS23
        DO 7 K=1,4                                                      BDRESS24
        PP(K)=0D0                                                       BDRESS25
    7   PM(K)=0D0                                                       BDRESS26
C                                                                       BDRESS27
        PP(4)= ENE                                                      BDRESS28
        PM(4)= ENE                                                      BDRESS29
        PP(3)= ENE                                                      BDRESS30
        PM(3)=-ENE                                                      BDRESS31
C 4-MOMENTA OF 'DRESSED' FERMIONS                                       BDRESS32
        DO 9 K=1,4                                                      BDRESS33
        PP1(K)=PP(K)                                                    BDRESS34
        PM1(K)=PM(K)                                                    BDRESS35
    9   CONTINUE                                                        BDRESS36
C                                                                       BDRESS37
        DO 33 JPHOT=1,NPHOT                                             BDRESS38
C       == == =============                                             BDRESS39
C                                                                       BDRESS40
C ADDITION OF THE PHOTON PH TO FERMION OF MINIMAL MASS OF               BDRESS41
C FERMION PHOTON STATE                                                  BDRESS42
        DO 8 K=1,4                                                      BDRESS43
        PH(K)=SPHOT(JPHOT,K)                                            BDRESS44
        PP2(K)=PP(K)-PH(K)                                              BDRESS45
        PM2(K)=PM(K)-PH(K)                                              BDRESS46
    8   CONTINUE                                                        BDRESS47
C                                                                       BDRESS48
        CALL MULSK(PP2,PP2,XM1)                                         BDRESS49
        CALL MULSK(PM2,PM2,XM2)                                         BDRESS50
C                                                                       BDRESS51
        XM=MIN(-XM1,-XM2)                                               BDRESS52
C                                                                       BDRESS53
        DO 10 K=1,4                                                     BDRESS54
        IF     (XM1.EQ.-XM) THEN                                        BDRESS55
          PP1(K)=PP1(K)-PH(K)                                           BDRESS56
        ELSEIF (XM2.EQ.-XM) THEN                                        BDRESS57
          PM1(K)=PM1(K)-PH(K)                                           BDRESS58
        ELSE                                                            BDRESS59
          PRINT *,                                                      BDRESS60
     &    'SOMETHING IS STRANGE IN COMPILER MODIFY LOGIC OF SANGLE'     BDRESS61
        ENDIF                                                           BDRESS62
   10   CONTINUE                                                        BDRESS63
C                                                                       BDRESS64
   33   CONTINUE                                                        BDRESS65
C  ==   ========                                                        BDRESS66
C                                                                       BDRESS67
C CALCULATION OF THE S AND COSTHE CORRESPONDING TO THE HARD-BORN LIKE   BDRESS68
C KERNEL OF THE INTERACTION. USED ARE DRESSED 4-MOMENTA OF FERMIONS.    BDRESS69
        DO 15 K=1,4                                                     BDRESS70
        PPB(K)=PP1(K)                                                   BDRESS71
        PMB(K)=PM1(K)                                                   BDRESS72
        Q(K)=QF1(K)-PP1(K)                                              BDRESS73
   15   P(K)=PM1(K)+PP1(K)                                              BDRESS74
C                                                                       BDRESS75
        CALL MULSK(P,P,SVARI)                                           BDRESS76
        CALL MULSK(Q,Q,T)                                               BDRESS77
        CALL MULSK(PP1,PP1,XM1)                                         BDRESS78
        CALL MULSK(PM1,PM1,XM2)                                         BDRESS79
        CALL MULSK(QF1,QF1,XM3)                                         BDRESS80
        CALL MULSK(QF2,QF2,XM4)                                         BDRESS81
C                                                                       BDRESS82
        P2=(SVARI**2+(XM1-XM2)**2-2D0*SVARI*(XM1+XM2))/4D0/SVARI        BDRESS83
        Q2=(SVARI**2+(XM3-XM4)**2-2D0*SVARI*(XM3+XM4))/4D0/SVARI        BDRESS84
        IF(XM1.GE.XM2) THEN                                             BDRESS85
          COST=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) BDRESS86
          COSA=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) BDRESS87
        ELSE                                                            BDRESS88
          COST=.5D0/SQRT(P2*Q2)*(T-XM2-XM4+2D0*SQRT((P2+XM2)*(Q2+XM4))) BDRESS89
          COSA=.5D0/SQRT(P2*Q2)*(T-XM1-XM3+2D0*SQRT((P2+XM1)*(Q2+XM3))) BDRESS90
        ENDIF                                                           BDRESS91
C                                                                       BDRESS92
      ENDIF                                                             BDRESS93
C     =====                                                             BDRESS94
C* SETTING VALUES (FOR ALL MODES)                                       BDRESS95
C                                                                       BDRESS96
      COSTHE=COST                                                       BDRESS97
      SVAR=SVARI                                                        BDRESS98
      DO 16 K=1,4                                                       BDRESS99
      PPBT(K)=PPB(K)                                                    BDRES100
      PMBT(K)=PMB(K)                                                    BDRES101
   16 CONTINUE                                                          BDRES102
C     CALL DUMPL9(PP1,PM1,PH)                                           BDRES103
C     CALL DUMPL9(QP1,QM1,PH)                                           BDRES104
      ICON=ICON+1                                                       BDRES105
C ZW CORRECTION FOR SOME OVERFLOWS AT THE EDGE OF THE PHASE SPACE       BDRES106
      IF (COST.GE.1D0.OR.COST.LE.-1D0) THEN                             BDRES107
        PRINT *, '=== WARNING === SUBR. BDRESS',ICON,'costhe=',costhe   BDRES108
        PRINT *, '=== WARNING === SUBR. BDRESS',ICON,'cosa=',cosa       BDRES109
        PRINT *, '==== WARNING ===== SUBR. BDRESS',ICON,'svar=',svar    BDRES110
        CALL DUMPZ8('PP1',PP1 )                                         BDRES111
        CALL DUMPZ8('PM1',PM1 )                                         BDRES112
        CALL DUMPZ8('P  ',P   )                                         BDRES113
        CALL DUMPZ8('QF1',QF1 )                                         BDRES114
        CALL DUMPZ8('QF2',QF2 )                                         BDRES115
        CALL DUMPZ8('Q  ',Q )                                           BDRES116
        WRITE(6,*) 'SVARI=',SVARI,'T=',T                                BDRES117
        WRITE(6,*) 'XM1=',XM1,'XM2=',XM2,'XM3=',XM3,'XM4=',XM4          BDRES118
        WRITE(6,*) 'P2=',P2,'Q2=',Q2                                    BDRES119
        COSTHE=COSTHE/COSTHE**2                                         BDRES120
        IF ( COSTHE.EQ.1D0.OR.COSTHE.EQ.-1D0 ) COSTHE=COSTHE*.9999999   BDRES121
C       PRINT *, 'YOU HAVE RUN INTO THE PROBLEM AT THE EDGE OF THE PHASEBDRES122
C     $ SPACE. AD HOC CORRECTION HAS BEEN DONE! '                       BDRES123
      ENDIF                                                             BDRES124
      IF ( SVAR.LE.4D0*AMFIN**2) THEN                                   BDRES125
        PRINT *, '==== WARNING ===== SUBR. BDRESS',ICON,'svar=',svar    BDRES126
        SVAR=16D0*AMFIN**4/SVAR                                         BDRES127
        IF ( SVAR.EQ.4D0*AMFIN**2 ) SVAR=SVAR*1.00000001D0              BDRES128
      ENDIF                                                             BDRES129
      RETURN                                                            BDRES130
      END                                                               BDRES131
      FUNCTION FUNTIH(MODE,TA,TB)                                       FUNTIH 2
C ----------------------------------------------------------------------FUNTIH 3
C                                           *                           FUNTIH 4
C         HARD PHOTON CASE                  *                           FUNTIH 5
C                                           *                           FUNTIH 6
C                                                                       FUNTIH 7
C     called by : WEIGHT                                                FUNTIH 8
C ----------------------------------------------------------------------FUNTIH 9
      IMPLICIT REAL*8(A-H,O-Z)                                          FUNTIH10
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / GAUSPM /SS,POLN,T3E,QE,T3F,QF                            GAUSPM 2
     &                ,XUPGI   ,XUPZI   ,XUPGF   ,XUPZF                 GAUSPM 3
     &                ,NDIAG0,NDIAGA,KEYA,KEYZ                          GAUSPM 4
     &                ,ITCE,JTCE,ITCF,JTCF,KOLOR                        GAUSPM 5
      REAL*8           SS,POLN,T3E,QE,T3F,QF                            GAUSPM 6
     &                ,XUPGI(2),XUPZI(2),XUPGF(2),XUPZF(2)              GAUSPM 7
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / INSPIN / SEPS1,SEPS2                                     INSPIN 2
      REAL*8            SEPS1,SEPS2                                     INSPIN 3
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
      COMPLEX*16 CPRAM,CA0,CA1                                          FUNTIH16
      COMPLEX*16 CPRZ0M,CP0,CP1                                         FUNTIH17
      COMPLEX*16 T1(2,4,4),T2(2,4,4),ZERO                               FUNTIH18
      COMPLEX*16 ONEC,IMAG,DE0,DEK,CK,CL,CN,CX,SX                       FUNTIH19
      DATA INIT/0/                                                      FUNTIH20
C                                                                       FUNTIH21
      DE0(EPS,TAU)=CA0*SVAR*QE*QF*ONEC + CP0*SVAR                       FUNTIH22
     $ *XUPZI(1+INT(-EPS+1.999D0)/2)*XUPZF(1+INT(-TAU+1.999D0)/2)       FUNTIH23
      DEK(EPS,TAU)=CA1*SVAR*QE*QF*ONEC + CP1*SVAR                       FUNTIH24
     $ *XUPZI(1+INT(-EPS+1.999D0)/2)*XUPZF(1+INT(-TAU+1.999D0)/2)       FUNTIH25
C                                                                       FUNTIH26
C***************************************                                FUNTIH27
      IF(INIT.EQ.0) THEN                                                FUNTIH28
C  OFF INTERFERENCE WHEN EXPONENTIATION                                 FUNTIH29
        IF  (KEYRAD.GE.10) KBRINT=0                                     FUNTIH30
        IF  (KEYRAD.GE.10) KBRFIN=0                                     FUNTIH31
        ZERO=DCMPLX(0.D0,0.D0)                                          FUNTIH32
        IMAG=DCMPLX(0.D0,1.D0)                                          FUNTIH33
        ONEC=DCMPLX(1.D0,0.D0)                                          FUNTIH34
      ENDIF                                                             FUNTIH35
C                                                                       FUNTIH36
C****************************************                               FUNTIH37
      SVAR=4D0*ENE**2                                                   FUNTIH38
      XMEL =AMIN/ENE                                                    FUNTIH39
      XMFIN=AMFIN/ENE                                                   FUNTIH40
C** CALCULATE SPIN AMPLITUDES                                           FUNTIH41
C** BUT RECALCULATE ONLY IF IT IS NECESSARY                             FUNTIH42
      IF (MODE.LE.1) THEN                                               FUNTIH43
        CALL PEDYPR(1,XK,C1,S1,C2,S2,CF,SF,CG,SG)                       FUNTIH44
        BB=.5D0*XK/SQRT(1D0-XK)                                         FUNTIH45
        GB=(1.D0-.5D0*XK)/SQRT(1D0-XK)                                  FUNTIH46
        HINI= QE/(XMEL**2+S1**2)                                        FUNTIH47
        HFIN= QF/(XMFIN**2/(1D0-XK)                                     FUNTIH48
     $       +ABS(1D0-XMFIN**2/(1D0-XK))*S2**2)                         FUNTIH49
        POLAR1= SEPS1                                                   FUNTIH50
        POLAR2=-SEPS2                                                   FUNTIH51
C Z0 PROPAGATORS AND GAMMA VACUUM POLARIZATIONS                         FUNTIH52
        CP0 =CPRZ0M(MODE,SVAR)                                          FUNTIH53
        CP1 =CPRZ0M(MODE,SVAR*(1.D0-XK))                                FUNTIH54
        CA0 =CPRAM (MODE,SVAR)                                          FUNTIH55
        CA1 =CPRAM (MODE,SVAR*(1.D0-XK))                                FUNTIH56
        DO 140 J=1,2                                                    FUNTIH57
        DO 140 K=1,4                                                    FUNTIH58
        DO 140 I=1,4                                                    FUNTIH59
        T1 (J, I, K)= ZERO                                              FUNTIH60
  140   T2 (J, I, K)= ZERO                                              FUNTIH61
        DO 150 J=1,2                                                    FUNTIH62
        GE=(3.D0-2.D0*J)                                                FUNTIH63
        DO 150 K=1,2                                                    FUNTIH64
        DO 150 I=1,2                                                    FUNTIH65
        EPS=(3.D0-2.D0*I)                                               FUNTIH66
        TAU=(3.D0-2.D0*K)                                               FUNTIH67
        CX=GB*CF*ONEC+BB*SF*GE*IMAG                                     FUNTIH68
        SX=BB*CF*ONEC+GB*SF*GE*IMAG                                     FUNTIH69
        CK=-(EPS*TAU+C1*C2)*CX+S1*S2-GE*(TAU*C1+EPS*C2)*SX              FUNTIH70
        CN=(C1+GE*EPS)*(C2-C2*GE*TAU)*ONEC                              FUNTIH71
        CL=(C1-GE*EPS*C1)*(C2+GE*TAU)*ONEC                              FUNTIH72
C                                                                       FUNTIH73
        T1(J,I,K)  = IMAG/2.D0/BB*(GB-BB)*S1*HINI*                      FUNTIH74
     $               DEK(EPS,TAU)*CK                                    FUNTIH75
        T1(J,I+2,K)= 0.5D0*SQRT(1D0-XK)*XMEL*C1*HINI*                   FUNTIH76
     $               (CF*ONEC+SF*GE*IMAG)*DEK(-C1*EPS,TAU)*CL           FUNTIH77
        T2(J,I,K)  = IMAG/2.D0/BB*                                      FUNTIH78
     $              S2*HFIN*(CF*ONEC-SF*GE*IMAG)*DE0(EPS,TAU)*CK        FUNTIH79
        T2(J,I,K+2)= 0.5D0*XMFIN/SQRT(1D0-XK)*C2*HFIN*                  FUNTIH80
     $                DE0(EPS,-C2*TAU)*CN                               FUNTIH81
 150    CONTINUE                                                        FUNTIH82
      ENDIF                                                             FUNTIH83
C                                                                       FUNTIH84
      TOTINI=0.D0                                                       FUNTIH85
      TOTFIN=0.D0                                                       FUNTIH86
      TOTINT=0.D0                                                       FUNTIH87
      TOT=0.D0                                                          FUNTIH88
C CALCULATION OF THE CROSS SECTION                                      FUNTIH89
      DO 50 I=1,2                                                       FUNTIH90
      HELIC= 3-2*I                                                      FUNTIH91
      DO 50 J=1,2                                                       FUNTIH92
      HELIT= 3-2*J                                                      FUNTIH93
      FACTOR=KOLOR* (1D0+HELIC*POLAR1)*(1D0-HELIC*POLAR2)               FUNTIH94
      FACTOR=FACTOR*(1D0+HELIT*TA    )*(1D0+HELIT*TB)                   FUNTIH95
C                                                                       FUNTIH96
      FACTOF=KOLOR* (1D0+HELIC*POLAR1)*(1D0-HELIC*POLAR2)               FUNTIH97
      FACTOF=FACTOF*(1D0+HELIT*TA    )*(1D0-HELIT*TB)                   FUNTIH98
C                                                                       FUNTIH99
      IF (MODE.EQ.0)THEN                                                FUNTI100
        FACTOI=KOLOR* (1D0-HELIC*C1*POLAR1)*(1D0+HELIC*C1*POLAR2)       FUNTI101
      ELSE                                                              FUNTI102
        FACTOI=KOLOR* (1D0+HELIC*POLAR1)*(1D0+HELIC*POLAR2)             FUNTI103
      ENDIF                                                             FUNTI104
      FACTOI=FACTOI*(1D0+HELIT*TA    )*(1D0+HELIT*TB)                   FUNTI105
      DO 50 K=1,2                                                       FUNTI106
C INITIAL STATE RADIATION                                               FUNTI107
      TOTINI=TOTINI+  DREAL(T1(K,I  ,J  )*DCONJG(T1(K,I  ,J  )))*FACTOR FUNTI108
      TOTINI=TOTINI+  DREAL(T1(K,I+2,J  )*DCONJG(T1(K,I+2,J  )))*FACTOI FUNTI109
C FINAL STATE RADIATION                                                 FUNTI110
      TOTFIN=TOTFIN+  DREAL(T2(K,I  ,J  )*DCONJG(T2(K,I  ,J  )))*FACTOR FUNTI111
      TOTFIN=TOTFIN+  DREAL(T2(K,I  ,J+2)*DCONJG(T2(K,I  ,J+2)))*FACTOF FUNTI112
C INTERFERENCE                                                          FUNTI113
      TOTINT=TOTINT+2*DREAL(T1(K,I  ,J  )*DCONJG(T2(K,I  ,J  )))*FACTOR FUNTI114
  50  CONTINUE                                                          FUNTI115
      TOT=TOTINI*KBRINI+TOTFIN*KBRFIN+TOTINT*KBRINT                     FUNTI116
      IF (MODE.EQ.0)                                                    FUNTI117
     $TOT=TOTINI*KBRINI+TOTFIN*KBRFIN                                   FUNTI118
      FUNTIH=TOT*2.D0                                                   FUNTI119
      END                                                               FUNTI120
      FUNCTION FUNTIS(MODE,COSTHE,TA,TB)                                FUNTIS 2
C ----------------------------------------------------------------------FUNTIS 3
C                                            *                          FUNTIS 4
C          SOFT PHOTON CASE                  *                          FUNTIS 5
C                                                                       FUNTIS 6
C     called by : WEIGHT                                                FUNTIS 7
C ----------------------------------------------------------------------FUNTIS 8
      IMPLICIT REAL*8(A-H,O-Z)                                          FUNTIS 9
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / GAUSPM /SS,POLN,T3E,QE,T3F,QF                            GAUSPM 2
     &                ,XUPGI   ,XUPZI   ,XUPGF   ,XUPZF                 GAUSPM 3
     &                ,NDIAG0,NDIAGA,KEYA,KEYZ                          GAUSPM 4
     &                ,ITCE,JTCE,ITCF,JTCF,KOLOR                        GAUSPM 5
      REAL*8           SS,POLN,T3E,QE,T3F,QF                            GAUSPM 6
     &                ,XUPGI(2),XUPZI(2),XUPGF(2),XUPZF(2)              GAUSPM 7
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / INSPIN / SEPS1,SEPS2                                     INSPIN 2
      REAL*8            SEPS1,SEPS2                                     INSPIN 3
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
      COMPLEX*16 ABORN(2,2),APHOT(2,2),AZETT(2,2),BOXGG(2,2),BOXGZ(2,2) FUNTIS17
      COMPLEX*16 PROPA,PROPZ,CPRZ0M,ONE,XX1,XX2,ZZ1,ZZ2,COEFB,DEL2,DEL3 FUNTIS18
      COMPLEX*16 CPRAM                                                  FUNTIS19
      DATA ONE /(1D0,0D0)/                                              FUNTIS20
      DATA INIT/0/                                                      FUNTIS21
C ----------------------------------------------------------------------FUNTIS22
C***************************************                                FUNTIS23
      IF (TA*TB.LT.-0.5D0) THEN                                         FUNTIS24
        FUNTIS=0.D0                                                     FUNTIS25
        RETURN                                                          FUNTIS26
      ENDIF                                                             FUNTIS27
C****************************************                               FUNTIS28
C                                                                       FUNTIS29
      IF(INIT.EQ.0) THEN                                                FUNTIS30
        INIT=1                                                          FUNTIS31
C   OFF INTERFERENCE WHEN EXPONENTIATION                                FUNTIS32
        IF (KEYRAD.GE.10) KBRINT=0                                      FUNTIS33
        IF (KEYRAD.GE.10) KBRFIN=0                                      FUNTIS34
        PI=4.D0*DATAN(1.D0)                                             FUNTIS35
        ALF1=ALFPI                                                      FUNTIS36
        IF(KEYRAD.EQ.0) ALF1=0D0                                        FUNTIS37
C CHARGES IN BREMSSTRAHLUNG VERTICES TREATED SEPARATELY                 FUNTIS38
        QE2=QE**2                                                       FUNTIS39
        QF2=QF**2                                                       FUNTIS40
        QINFI=QE*QF                                                     FUNTIS41
        IF(KBRINI.EQ.0) QE2=0D0                                         FUNTIS42
        IF(KBRFIN.EQ.0) QF2=0D0                                         FUNTIS43
        IF(KBRINT.EQ.0) QINFI=0D0                                       FUNTIS44
      ENDIF                                                             FUNTIS45
C                                                                       FUNTIS46
      SVAR=4D0*ENE**2                                                   FUNTIS47
      IF (MODE.EQ.0) THEN                                               FUNTIS48
        IF(KEYRAD.NE.0) THEN                                            FUNTIS49
C****************************************                               FUNTIS50
C** SOFT REAL AND VIRTUAL PHOTON CORRECTIONS - INITIALIZATION           FUNTIS51
          BILG=DLOG(SVAR/AMIN**2)                                       FUNTIS52
          BETI=2D0*QE2*ALF1*(BILG-1D0)                                  FUNTIS53
          DELI=ALF1*QE2*(9D0*BILG+2D0*PI**2-12D0)/6D0                   FUNTIS54
     $        +BETI*LOG(XK0)                                            FUNTIS55
          BILGF=DLOG(SVAR/AMFIN**2)                                     FUNTIS56
          BETF =2D0*QF2*ALF1*(BILGF-1D0)                                FUNTIS57
          DELF =ALF1*QF2*(9D0*BILGF+2D0*PI**2-12D0)/6D0                 FUNTIS58
     $        +BETF*LOG(XK0)                                            FUNTIS59
          DELF0=ALF1*QF2*(9D0*BILGF                                     FUNTIS60
     $         +2D0*PI**2-16.5D0)/6D0 +BETF*LOG(XK0)                    FUNTIS61
          UP=1D0+COSTHE                                                 FUNTIS62
          UM=1D0-COSTHE                                                 FUNTIS63
          ALP=LOG(UP/2D0)                                               FUNTIS64
          ALM=LOG(UM/2D0)                                               FUNTIS65
          DELINT=  4D0*(ALM-ALP)*LOG(XK0)                               FUNTIS66
     $           + ALM**2-ALP**2-2D0*DILOGY(UM/2D0)+2D0*DILOGY(UP/2D0)  BBL95085
          DELINT=       QINFI*ALF1*DELINT                               FUNTIS68
C EXTRA TERMS DUE TO NARROWNES OF Z0 RESONANCE                          FUNTIS69
          GM=GAMMZ*AMZ/SVAR                                             FUNTIS70
          ZZ=1D0-AMZ**2/SVAR                                            FUNTIS71
          BETINT= 2D0*ALF1*(ALM-ALP)                                    FUNTIS72
          DEL2=(BETI+BETINT*QINFI)*                                     FUNTIS73
     $         (CDLOG(DCMPLX(ZZ,GM)) -CDLOG(DCMPLX((ZZ-XK0),GM)))       FUNTIS74
          DEL3=                                                         FUNTIS75
     $         BETI*ZZ/GM*(ATAN((XK0-ZZ)/GM)-ATAN(-ZZ/GM))              FUNTIS76
     $        -BETI*(CDLOG(DCMPLX(ZZ,GM)) -CDLOG(DCMPLX((ZZ-XK0),GM)))  FUNTIS77
C                                                                       FUNTIS78
        ELSE                                                            FUNTIS79
          DELI=0D0                                                      FUNTIS80
          DELF=0D0                                                      FUNTIS81
          DELINT=0D0                                                    FUNTIS82
          DELF0=0D0                                                     FUNTIS83
        ENDIF                                                           FUNTIS84
      ENDIF                                                             FUNTIS85
      IF (MODE.LE.1) THEN                                               FUNTIS86
C*** PROPAGATORS AND VACUUM POLARIZATIONS                               FUNTIS87
        PROPA =CPRAM (MODE,SVAR)                                        FUNTIS88
        PROPZ =CPRZ0M(MODE,SVAR)                                        FUNTIS89
C* BORN SPIN AMPLITUDES                                                 FUNTIS90
        DO 50 I=1,2                                                     FUNTIS91
        DO 50 J=1,2                                                     FUNTIS92
        REGULA= (3-2*I)*(3-2*J) + COSTHE                                FUNTIS93
        APHOT(I,J)=PROPA*DCMPLX(XUPGI(I)*XUPGF(J)*REGULA)               FUNTIS94
        AZETT(I,J)=PROPZ*DCMPLX(XUPZI(I)*XUPZF(J)*REGULA)               FUNTIS95
   50   ABORN(I,J)=APHOT(I,J)+AZETT(I,J)                                FUNTIS96
        IF(KEYRAD.NE.0) THEN                                            FUNTIS97
C****************************************                               FUNTIS98
C* SPIN AMPLITUDES FOR BOX GAMMA-GAMMA                                  FUNTIS99
          IF (MODE.EQ.0) CALL BGAM2(COSTHE,ZZ1,ZZ2)                     FUNTI100
          DO 70 I=1,2                                                   FUNTI101
          DO 70 J=1,2                                                   FUNTI102
          HELPRO= (3-2*I)*(3-2*J)                                       FUNTI103
          COEFB=PROPA*DCMPLX( XUPGI(I)*XUPGF(J) *.5D0*ALF1*QINFI )      FUNTI104
   70     BOXGG(I,J)=COEFB*(DCMPLX(HELPRO)*ZZ1 + ZZ2)                   FUNTI105
C****************************************                               FUNTI106
C* SPIN AMPLITUDES FOR BOX GAMMA-ZED                                    FUNTI107
C BOX GAMMA-Z0 VERSION OF PASCHOS ET. AL.                               FUNTI108
          IF (MODE.EQ.0) CALL BZED1(SVAR,AMZ,1D0,GAMMZ,COSTHE,XX1,XX2)  FUNTI109
          DO 75 I=1,2                                                   FUNTI110
          DO 75 J=1,2                                                   FUNTI111
          HELPRO= (3-2*I)*(3-2*J)                                       FUNTI112
          COEFB= PROPZ*DCMPLX( XUPZI(I)*XUPZF(J)*ALF1*QINFI )           FUNTI113
   75     BOXGZ(I,J)=COEFB*( DCMPLX(HELPRO)*XX1 + XX2 )                 FUNTI114
C****************************************                               FUNTI115
        ENDIF                                                           FUNTI116
C****************************************                               FUNTI117
      ENDIF                                                             FUNTI118
C                                                                       FUNTI119
C******************                                                     FUNTI120
C* IN CALCULATING CROSS SECTION ONLY DIAGONAL ELEMENTS                  FUNTI121
C* OF THE SPIN DENSITY MATRICES ENTER (LONGITUD. POL. ONLY.)            FUNTI122
C* HELICITY CONSERVATION EXPLICITLY OBEYED                              FUNTI123
      POLAR1=  (SEPS1)                                                  FUNTI124
      POLAR2= (-SEPS2)                                                  FUNTI125
      BORN=0D0                                                          FUNTI126
      GGBOX=0D0                                                         FUNTI127
      GZBOX=0D0                                                         FUNTI128
      SOFBRM=0D0                                                        FUNTI129
      DO 150 I=1,2                                                      FUNTI130
      HELIC= 3-2*I                                                      FUNTI131
      DO 150 J=1,2                                                      FUNTI132
      HELIT=3-2*J                                                       FUNTI133
      FACTOR=KOLOR*(1D0+HELIC*POLAR1)*(1D0-HELIC*POLAR2)/4D0            FUNTI134
      FACTOR=FACTOR*(1+HELIT*TA)*(1+HELIT*TB)                           FUNTI135
      BORN=BORN+CDABS(ABORN(I,J))**2*FACTOR                             FUNTI136
      IF(KEYRAD.NE.0) THEN                                              FUNTI137
        GGBOX=GGBOX+2D0* REAL( ABORN(I,J)*DCONJG(BOXGG(I,J)) )*FACTOR   FUNTI138
        GZBOX=GZBOX+2D0* REAL( ABORN(I,J)*DCONJG(BOXGZ(I,J)) )*FACTOR   FUNTI139
        SOFBRM=SOFBRM                                                   FUNTI140
     $          +2D0* REAL(ABORN(I,J)*DCONJG(AZETT(I,J)*DEL2))*FACTOR   FUNTI141
     $              + REAL(AZETT(I,J)*DCONJG(AZETT(I,J)*DEL3))*FACTOR   FUNTI142
      ENDIF                                                             FUNTI143
  150 CONTINUE                                                          FUNTI144
C************                                                           FUNTI145
      IF (KEYRAD.GE.10) SOFBRM=0D0                                      FUNTI146
      FUNT=BORN*(1D0+DELI+DELF+DELINT)+SOFBRM +GGBOX + GZBOX            FUNTI147
      IF (MODE.EQ. 0)  FUNT=BORN*(1D0+DELI+DELF0)                       FUNTI148
      IF (MODE.EQ.-1)  FUNT=BORN                                        FUNTI149
      IF(TA*TA.GT.0.5D0.AND.FUNT.LE.0.D0 ) FUNT=BORN                    FUNTI150
      IF(FUNT.LT.0.D0)  FUNT=0.D0                                       FUNTI151
      FUNT=FUNT *SVAR**2                                                FUNTI152
      FUNTIS =FUNT                                                      FUNTI153
      END                                                               FUNTI154
      SUBROUTINE BGAM2(COSTHE,ZZ1,ZZ2)                                  BGAM2  2
C ----------------------------------------------------------------------BGAM2  3
C BOX GAMMA-GAMMA AS IN MUSTRAAL AND KORAL-B                            BGAM2  4
C                                                                       BGAM2  5
C     called by : FUNTIS                                                BGAM2  6
C ----------------------------------------------------------------------BGAM2  7
      IMPLICIT REAL*8(A-H,O-Z)                                          BGAM2  8
      COMPLEX*16 ZZ1,ZZ2                                                BGAM2  9
      DATA PI /3.141592653589793238462643D0/                            BGAM2 10
C                                                                       BGAM2 11
      C=COSTHE                                                          BGAM2 12
      UP=1D0+COSTHE                                                     BGAM2 13
      UM=1D0-COSTHE                                                     BGAM2 14
      ALP=LOG(UP/2D0)                                                   BGAM2 15
      ALM=LOG(UM/2D0)                                                   BGAM2 16
      XZ1=-C/UP*ALM**2-C/UM*ALP**2+ALM-ALP                              BGAM2 17
      XZ2=-C/UP*ALM**2+C/UM*ALP**2+ALM+ALP                              BGAM2 18
      YZ1=-2D0*PI*C/UP*ALM-2D0*PI*C/UM*ALP                              BGAM2 19
      YZ2=-2D0*PI*C/UP*ALM+2D0*PI*C/UM*ALP+2D0*PI                       BGAM2 20
      ZZ1=DCMPLX(  XZ1,  YZ1+2D0*PI*(ALM-ALP)   )                       BGAM2 21
      ZZ2=DCMPLX(  XZ2,  YZ2+2D0*PI*(ALM-ALP)*C )                       BGAM2 22
      END                                                               BGAM2 23
      SUBROUTINE BZED1(SVAR,AMZ,XLAM,GAMMZ,COSTHE,ZED3,ZED4)            BZED1  2
C ----------------------------------------------------------------------BZED1  3
C GAMMA-Z0 BOX   FROM W.BROWN, R. DECKER, E. PASHOS                     BZED1  4
C PHYS. REV. LETT. 52(1984)1192                                         BZED1  5
C CALCULATES XX1 FOR BOX GAMA-Z                                         BZED1  6
C                                                                       BZED1  7
C     called by : FUNTIS                                                BZED1  8
C ----------------------------------------------------------------------BZED1  9
      IMPLICIT COMPLEX*16 (A-Z)                                         BZED1 10
      REAL*8 SVAR,AMZ,XLAM,GAMMZ,COSTHE                                 BZED1 11
C                                                                       BZED1 12
      E=DCMPLX(1.D0,0.D0)                                               BZED1 13
      F=DCMPLX(1.D0,-1.D-4)                                             BZED1 14
      CC=DCMPLX(COSTHE)                                                 BZED1 15
      MZ=DCMPLX(AMZ**2/SVAR,-AMZ*GAMMZ/SVAR)                            BZED1 16
      MGAM=DCMPLX(XLAM/SVAR,0.D0)                                       BZED1 17
      T=-(1-CC)/2                                                       BZED1 18
      U=-(1+CC)/2                                                       BZED1 19
      A=2*(1-CC)*FIU(MGAM,MZ,U,T)                                       BZED1 20
      B=2*(1+CC)*FIU(MGAM,MZ,T,U)                                       BZED1 21
      D=-CDLN(T/U,E)*CDLN(MGAM,E)                                       BZED1 22
      ZED3= A-B+D                                                       BZED1 23
      ZED4=-A-B+CC*D                                                    BZED1 24
      END                                                               BZED1 25
      FUNCTION FIU(MG,MZ,T,U)                                           FIU    2
C ----------------------------------------------------------------------FIU    3
C FORMULA  (11)  FROM W.BROWN, R. DECKER, E. PASHOS                     FIU    4
C PHYS. REV. LETT., 52 (1984), 1192                                     FIU    5
C Z0 PROPAGATOR REMOVED                                                 FIU    6
C                                                                       FIU    7
C     called by : BZED1                                                 FIU    8
C ----------------------------------------------------------------------FIU    9
      IMPLICIT COMPLEX*16 (A-Z)                                         FIU   10
C                                                                       FIU   11
      E=DCMPLX(-1.D0,0.D0)                                              FIU   12
      FIU=1/(MZ-1)*((CDLN(CDSQRT(T*U)/MG,E)                             FIU   13
     $ +2*CDLN((1-1/MZ),E))*CDLN((U/T),E)+SP((1+U/MZ),E)-SP((1+T/MZ),E))FIU   14
     $ +  (U-T-MZ)/U/U*                                                 FIU   15
     $    (CDLN((1-1/MZ),E)*CDLN((-T),E)+SP((1+T/MZ),E)-SP((1-1/MZ),E)) FIU   16
     $ +  1/U*((MZ-1)*CDLN((1-1/MZ),E)+CDLN(-T/MZ,E))                   FIU   17
      FIU=-.25D0*(MZ-1)*FIU                                             FIU   18
      END                                                               FIU   19
      FUNCTION CPRZ0M(MODE,S)                                           CPRZ0M 2
C ----------------------------------------------------------------------CPRZ0M 3
C THIS FUNCTION SUPPLIES TO THE PROGRAM Z0 PROPAGATOR                   CPRZ0M 4
C IT USES Z0 VACUUM POLARIZATION MEMORIZED IN THE FUNCTION CINTZZ.      CPRZ0M 5
C INPUT : S (GEV**2)   PHOTON ENERGY TRANSFER.                          CPRZ0M 6
C         MODE -INTERNAL KEY IN THE ALGORITHM,                          CPRZ0M 7
C                                                                       CPRZ0M 8
C     called by : FUNTIH, FUNTIS, FANTIH,FANTIS, BORNS, SANGLE, BDRESS, CPRZ0M 9
C                 SKONTY, AMPGSW                                        CPRZ0M10
C ----------------------------------------------------------------------CPRZ0M11
      IMPLICIT REAL*8(A-H,O-Z)                                          CPRZ0M12
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMPLEX*16 CPRZ0,SIGMA,CPRZ0M                                     CPRZ0M15
C                                                                       CPRZ0M16
          SIGMA=DCMPLX(0D0,S/AMZ*GAMMZ)                                 CPRZ0M17
          CPRZ0=DCMPLX((S-AMZ**2),0D0)                                  CPRZ0M18
          CPRZ0M=1/(CPRZ0+SIGMA)                                        CPRZ0M19
      END                                                               CPRZ0M20
      FUNCTION CPRAM(MODE,S)                                            CPRAM  2
C ----------------------------------------------------------------------CPRAM  3
C THIS FUNCTION SUPPLIES TO THE PROGRAM PHOTON PROPAGATOR               CPRAM  4
C IT USES PHOTON VACUUM POLARIZATION MEMORIZED IN THE FUNCTION CINTAA.  CPRAM  5
C INPUT : S (GEV**2)   PHOTON ENERGY TRANSFER.                          CPRAM  6
C         MODE -INTERNAL KEY IN THE ALGORITHM,                          CPRAM  7
C                                                                       CPRAM  8
C     called by : FUNTIH, ....                                          CPRAM  9
C ----------------------------------------------------------------------CPRAM 10
      IMPLICIT REAL*8(A-H,O-Z)                                          CPRAM 11
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMPLEX*16 CVPAAM,CPRAM,CSVAR                                     CPRAM 13
C                                                                       CPRAM 14
      CSVAR=S                                                           CPRAM 15
      IF (KEYGSW.EQ.0) THEN                                             CPRAM 16
        CPRAM=DCMPLX(0.D0,0.D0)                                         CPRAM 17
      ELSE                                                              CPRAM 18
        CVPAAM=DCMPLX(0D0,0D0)                                          CPRAM 19
        CPRAM=1D0/(CVPAAM+CSVAR)                                        CPRAM 20
      ENDIF                                                             CPRAM 21
      END                                                               CPRAM 22
      SUBROUTINE PEDYPR(MODE,XXK,CC1,SS1,CC2,SS2,CCF,SSF,CCG,SSG)       PEDYPR 2
C ----------------------------------------------------------------------PEDYPR 3
C THIS ROUTINE RECONSTRUCTS ANGULAR VARIABLES FROM THE 4- MOMETA        PEDYPR 4
C STORED IN UTIL. FOR MODE = 0 ANGULAR VARIABLES ARE CALCULATED         PEDYPR 5
C AND MEMORIZED. FOR HIGHER MODES THEY ARE SUPPLIED.                    PEDYPR 6
C                                                                       PEDYPR 7
C     called by : WEIGHT, FUNTIH                                        PEDYPR 8
C ----------------------------------------------------------------------PEDYPR 9
      IMPLICIT REAL*8(A-H,O-Z)                                          PEDYPR10
      COMMON / UTIL8 / QP(4),QM(4),PH(4)                                UTIL8  2
      REAL*8           QP   ,QM   ,PH                                   UTIL8  3
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      REAL*8 PI1(4),PI2(4),PIX(4),PIY(4)                                PEDYPR13
C                                                                       PEDYPR14
      IF (MODE.EQ.0) THEN                                               PEDYPR15
C     ===================                                               PEDYPR16
C INITIALIZATION OF THE ANGULAR VARIABLES                               PEDYPR17
        XK=PH(4)/ENE                                                    PEDYPR18
        IF (XK.GT.1.D-6) THEN                                           PEDYPR19
C                                                                       PEDYPR20
C HARD PHOTON CASE                                                      PEDYPR21
          CALL MULSK(PH,PH,AMP2)                                        PEDYPR22
          AMP=SQRT(ABS(AMP2))                                           PEDYPR23
          C1=PH(3)/SQRT(PH(4)**2-AMP**2)                                PEDYPR24
          S1=SQRT(1.D0-C1**2)                                           PEDYPR25
C CALCULATION OF C2 ---------------------------                         PEDYPR26
          DO 7 KKK=1,4                                                  PEDYPR27
          PI1(KKK)=QP(KKK)+QM(KKK)                                      PEDYPR28
   7      PI2(KKK)=QP(KKK)-QM(KKK)                                      PEDYPR29
          CALL MULSK(PH,QM,R)                                           PEDYPR30
          CALL MULSK(PH,QP,R1)                                          PEDYPR31
          CALL MULSK(PI1,PH,RV)                                         PEDYPR32
          CALL MULSK(PI2,PI2,RT)                                        PEDYPR33
          CALL MULSK(PI1,PI1,RU)                                        PEDYPR34
          C2=(R-R1)/SQRT(-RT)/SQRT(RV**2/RU-AMP**2)                     PEDYPR35
          S2=SQRT(1.D0-C2**2)                                           PEDYPR36
C REDEFINITION OF XK                                                    PEDYPR37
          XK=1D0-RU/4D0/ENE**2                                          PEDYPR38
C CALCULATION OF CG , SG -----------------------                        PEDYPR39
          CG= PH(2)/SQRT(PH(1)**2+PH(2)**2)                             PEDYPR40
          SG=-PH(1)/SQRT(PH(1)**2+PH(2)**2)                             PEDYPR41
C CALCULATION OF CF ----------------------------                        PEDYPR42
          PIX(1)=0.D0                                                   PEDYPR43
          PIX(2)=0.D0                                                   PEDYPR44
          PIX(3)=ENE                                                    PEDYPR45
          PIX(4)=0.D0                                                   PEDYPR46
C                                                                       PEDYPR47
          CALL MULVX(PH,QP,PI1)                                         PEDYPR48
          CALL MULVX(PH,PIX,PI2)                                        PEDYPR49
          CALL MULSK(PI1,PI2,R)                                         PEDYPR50
          CALL MULSK(PI1,PI1,R1)                                        PEDYPR51
          CALL MULSK(PI2,PI2,R2)                                        PEDYPR52
          CF=R/SQRT(R1*R2)                                              PEDYPR53
C CALCULATION OF SF ---------------------------                         PEDYPR54
          CALL MULSK3(PH,QP,R)                                          PEDYPR55
          CALL MULSK3(PH,PIX,R1)                                        PEDYPR56
          CALL MULSK3(PH,PH,R3)                                         PEDYPR57
          DO 9 KKK=1,4                                                  PEDYPR58
          PI1(KKK)=QP(KKK)-R/R3*PH(KKK)                                 PEDYPR59
   9      PI2(KKK)=PIX(KKK)-R1/R3*PH(KKK)                               PEDYPR60
C                                                                       PEDYPR61
          CALL MULVX(PI1,PI2,PIY)                                       PEDYPR62
          CALL MULSK3(PH,PIY,R)                                         PEDYPR63
          CALL MULSK3(PI1,PI1,R1)                                       PEDYPR64
          CALL MULSK3(PI2,PI2,R2)                                       PEDYPR65
          SF=-R/SQRT(-R1*R2*R3)                                         PEDYPR66
        ELSE                                                            PEDYPR67
C                                                                       PEDYPR68
C* SOFT PHOTON CASE                                                     PEDYPR69
          C1=QP(3)/SQRT(1.D0-AMFIN**2/ENE**2)/ENE                       PEDYPR70
          S1=SQRT(1.D0-C1**2)                                           PEDYPR71
          C2=1D0                                                        PEDYPR72
          S2=0D0                                                        PEDYPR73
          CF=1D0                                                        PEDYPR74
          SF=0D0                                                        PEDYPR75
C CALCULATION OF CG , SG -----------------------                        PEDYPR76
          IF (QP(1)**2+QP(2)**2.GT.0D0) THEN                            PEDYPR77
            CG= QP(2)/SQRT(QP(1)**2+QP(2)**2)                           PEDYPR78
            SG=-QP(1)/SQRT(QP(1)**2+QP(2)**2)                           PEDYPR79
          ELSE                                                          PEDYPR80
C ZW 31.12.88 HERE WAS AN ERROR, FOR THE VERYLONG SERIES IT COULD HAPPENPEDYPR81
C             THAT C1=1D0. THIS WAS A PROBLEM LATER IN THE CALCULATION. PEDYPR82
            CG=1D0                                                      PEDYPR83
            SG=0D0                                                      PEDYPR84
            C1=C1*0.9999999D0                                           PEDYPR85
          ENDIF                                                         PEDYPR86
        ENDIF                                                           PEDYPR87
      ENDIF                                                             PEDYPR88
C     =====                                                             PEDYPR89
C* SETTING VALUES (FOR ALL MODES)                                       PEDYPR90
C                                                                       PEDYPR91
      XXK=XK                                                            PEDYPR92
      CC1=C1                                                            PEDYPR93
      SS1=S1                                                            PEDYPR94
      CC2=C2                                                            PEDYPR95
      SS2=S2                                                            PEDYPR96
      CCF=CF                                                            PEDYPR97
      SSF=SF                                                            PEDYPR98
      CCG=CG                                                            PEDYPR99
      SSG=SG                                                            PEDYP100
      END                                                               PEDYP101
      SUBROUTINE MULVX(X,Y,R)                                           MULVX  2
C ----------------------------------------------------------------------MULVX  3
C ROUTINE USED IN PEDYPR.                                               MULVX  4
C IT CALCULATES VECTOR PRODUCT OF SPACE LIKE PARTS OF FOUR VECTORS      MULVX  5
C                                                                       MULVX  6
C     called by : PEDYVV,PEDYPR                                         MULVX  7
C ----------------------------------------------------------------------MULVX  8
      IMPLICIT REAL*8 (A-H,O-Z)                                         MULVX  9
      DIMENSION X(4),Y(4),R(4)                                          MULVX 10
C                                                                       MULVX 11
      R(4)=0.D0                                                         MULVX 12
      R(1)=X(2)*Y(3)-X(3)*Y(2)                                          MULVX 13
      R(2)=X(3)*Y(1)-X(1)*Y(3)                                          MULVX 14
      R(3)=X(1)*Y(2)-X(2)*Y(1)                                          MULVX 15
      END                                                               MULVX 16
      SUBROUTINE MULSK(X,Y,R)                                           MULSK  2
C ----------------------------------------------------------------------MULSK  3
C USED IN PEDYPR                                                        MULSK  4
C IT CALCULATES SCALAR PRODUCT OF FOUR VECTORS                          MULSK  5
C                                                                       MULSK  6
C     called by : PEDYVV,PEDYPR,SANGLE,BDRESS,SKONTY                    MULSK  7
C ----------------------------------------------------------------------MULSK  8
      IMPLICIT REAL*8 (A-H,O-Z)                                         MULSK  9
      DIMENSION X(4),Y(4)                                               MULSK 10
      R=X(4)*Y(4)-X(3)*Y(3)-X(2)*Y(2)-X(1)*Y(1)                         MULSK 11
      END                                                               MULSK 12
      SUBROUTINE MULSK3(X,Y,R)                                          MULSK3 2
C ----------------------------------------------------------------------MULSK3 3
C USED IN PEDYPR                                                        MULSK3 4
C IT CALCULATES SCALAR PRODUCT OF SPACE LIKE PARTS OF FOUR VECTORS      MULSK3 5
C                                                                       MULSK3 6
C     called by : PEDYVV, PEDYPR                                        MULSK3 7
C ----------------------------------------------------------------------MULSK3 8
      IMPLICIT REAL*8 (A-H,O-Z)                                         MULSK3 9
      DIMENSION X(4),Y(4)                                               MULSK310
C                                                                       MULSK311
      R=-X(3)*Y(3)-X(2)*Y(2)-X(1)*Y(1)                                  MULSK312
      END                                                               MULSK313
      SUBROUTINE RRR6(XK,AM2,CG,SG,IBREM)                               RRR6   2
C ----------------------------------------------------------------------RRR6   3
C THIS IS FUNCTIONALLY THE SAME ROUTINE RRR6 AS IN MUSTRAAL.            RRR6   4
C IT GENERATES PHOTON ANGLE AND THE BREMSSTRAHLUNG PARAMETER IBREM.     RRR6   5
C                                                                       RRR6   6
C     called by : EVENTE, EVENTM                                        RRR6   7
C ----------------------------------------------------------------------RRR6   8
      IMPLICIT REAL*8(A-H,O-Z)                                          RRR6   9
      REAL*4  RRR(3)                                                    RRR6  10
C                                                                       RRR6  11
   10 CONTINUE                                                          RRR6  12
      CALL RANMAR(RRR,3)                                                RRR6  13
C GENERATION OF THE RAW ANGULAR PHOTON DISTRIBUTION                     RRR6  14
      RN1=RRR(1)                                                        RRR6  15
      CALL ANGPHO(RN1,AM2,CG,SG)                                        RRR6  16
C SHAPING ---- FIRST STEP                                               RRR6  17
      EPS=AM2/(1.D0+SQRT(1.D0-AM2))                                     RRR6  18
      BETA=SQRT(1.D0-AM2)                                               RRR6  19
      DEL1=1.D0-CG*BETA                                                 RRR6  20
      DEL2=1.D0+CG*BETA                                                 RRR6  21
      DEL12=EPS/(1.D0-XK+1.D0/(1.D0-XK))*(DEL2/DEL1+DEL1/DEL2)          RRR6  22
      RN2=RRR(2)                                                        RRR6  23
      IF(RN2.GT.(1.D0-DEL12)) GO TO 10                                  RRR6  24
C                                                                       RRR6  25
C SHAPING ---- SECOND STEP                                              RRR6  26
      CHI1=(1.D0-.5D0*XK*DEL1)**2                                       RRR6  27
      CHI2=(1.D0-.5D0*XK*DEL2)**2                                       RRR6  28
      RN3=RRR(3)                                                        RRR6  29
      IF(RN3.GT.(CHI1+CHI2)/2.D0) GO TO 10                              RRR6  30
C                                                                       RRR6  31
C CHOICE OF THE KINEMATICAL MODE                                        RRR6  32
      IF(RN3.GT.CHI1/2.D0) THEN                                         RRR6  33
        IBREM=1                                                         RRR6  34
      ELSE                                                              RRR6  35
        IBREM=-1                                                        RRR6  36
      ENDIF                                                             RRR6  37
      END                                                               RRR6  38
      SUBROUTINE ANGPHO(RN1,AM2,COSTHG,SINTHG)                          ANGPHO 2
C ----------------------------------------------------------------------ANGPHO 3
C THIS ROUTINE GENERATES PHOTON ANGULAR DISTRIBUTION                    ANGPHO 4
C IN THE REST FRAME OF THE FERMION PAIR. THE DISTRIBUTION               ANGPHO 5
C IS TAKEN IN THE INFRAED LIMIT.                                        ANGPHO 6
C INPUT : AM2 = 4*MASSF**2/S WHERE MASSF IS FERMION MASS                ANGPHO 7
C               AND S IS FERMION PAIR EFFECTIVE MASS.                   ANGPHO 8
C OUTPUT: COSTHG, SINTHG, COS AND SIN OF THE PHOTON                     ANGPHO 9
C         ANGLE WITH RESPECT TO FERMIONS DIRECTION                      ANGPHO10
C                                                                       ANGPHO11
C     called by : RRR6                                                  ANGPHO12
C ----------------------------------------------------------------------ANGPHO13
      IMPLICIT REAL*8(A-H,O-Z)                                          ANGPHO14
      REAL*4 RRR                                                        ANGPHO15
C                                                                       ANGPHO16
      BETA=SQRT(1.D0-AM2)                                               ANGPHO17
      EPS=AM2/(1.D0+SQRT(1.D0-AM2))                                     ANGPHO18
      DEL1=(2.D0-EPS)*(EPS/(2.D0-EPS))**RN1                             ANGPHO19
      DEL2=2.D0-DEL1                                                    ANGPHO20
C SYMMETRIZATION                                                        ANGPHO21
      CALL RANMAR(RRR,1)                                                ANGPHO22
      RN2=RRR                                                           ANGPHO23
      IF(RN2.LE.0.5D0) THEN                                             ANGPHO24
        A=DEL1                                                          ANGPHO25
        DEL1=DEL2                                                       ANGPHO26
        DEL2=A                                                          ANGPHO27
      ENDIF                                                             ANGPHO28
C CALCULATION OF SIN AND COS THETA FROM INTERNAL VARIABLES              ANGPHO29
      COSTHG=(1.D0-DEL1)/BETA                                           ANGPHO30
      SINTHG=SQRT(DEL1*DEL2-AM2)/BETA                                   ANGPHO31
      END                                                               ANGPHO32
      SUBROUTINE RRR7(P,C,S)                                            RRR7   2
C ----------------------------------------------------------------------RRR7   3
C THIS SUBPROGRAM GENERATES (1-C)**2 OR (1+C)**2 DISTRIBUTION           RRR7   4
C WITH PROBABILITY  P AND  1-P                                          RRR7   5
C                                                                       RRR7   6
C     called by : EVENTM                                                RRR7   7
C ----------------------------------------------------------------------RRR7   8
      IMPLICIT REAL*8(A-H,O-Z)                                          RRR7   9
      REAL*4 RRR                                                        RRR7  10
C                                                                       RRR7  11
      CALL RANMAR(RRR,1)                                                RRR7  12
      X=RRR                                                             RRR7  13
      Z=0.D0                                                            RRR7  14
      IF(X.GT.P) Z=1.D0                                                 RRR7  15
      R=(X-Z*P)/(Z-P)                                                   RRR7  16
      C=(1.D0-2.D0*Z)*(1.D0-ABS(8.D0*R)**(1.D0/3.D0))                   RRR7  17
      S=SQRT(1-C*C)                                                     RRR7  18
      END                                                               RRR7  19
      SUBROUTINE GIQSU(CMSENE,PHSUM,QSU)                                GIQSU  2
C ----------------------------------------------------------------------GIQSU  3
C GIVEN CMS ENERGY (CMSENE) AND PHOTON SYSTEM TOTAL FOURMOM. (PHSUM)    GIQSU  4
C PROVIDES 4-MOMENTUM OF FERMION SYSTEM (QSU)                           GIQSU  5
C                                                                       GIQSU  6
C     called by : TRALOZ                                                GIQSU  7
C ----------------------------------------------------------------------GIQSU  8
      IMPLICIT REAL*8(A-H,O-Z)                                          GIQSU  9
      REAL*8 PHSUM(4),QSU(4)                                            GIQSU 10
C                                                                       GIQSU 11
      QSU(1)=       -PHSUM(1)                                           GIQSU 12
      QSU(2)=       -PHSUM(2)                                           GIQSU 13
      QSU(3)=       -PHSUM(3)                                           GIQSU 14
      QSU(4)=CMSENE -PHSUM(4)                                           GIQSU 15
*====================================================================== GIQSU 16
*==================END OF YFSGEN======================================= GIQSU 17
*====================================================================== GIQSU 18
      END                                                               GIQSU 19
      SUBROUTINE DUMPZ4(JK,PP)                                          DUMPZ4 2
C ----------------------------------------------------------------------DUMPZ4 3
C PRINTS SINGLE FOUR MOMENTUM                                           DUMPZ4 4
C                                                                       DUMPZ4 5
C     called by :                                                       DUMPZ4 6
C ----------------------------------------------------------------------DUMPZ4 7
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*4 PP(4)                                                      DUMPZ4 9
C                                                                       DUMPZ410
      AMS=PP(4)**2                                                      DUMPZ411
      DO 10 I=1,3                                                       DUMPZ412
   10 AMS=AMS-PP(I)**2                                                  DUMPZ413
      IF(AMS.GT.0.0) AMS=SQRT(AMS)                                      DUMPZ414
      WRITE (IOUT,1000)                                                 DUMPZ415
      WRITE (IOUT,1502) JK,(PP(I),I=1,4),AMS                            DUMPZ416
 1000 FORMAT(1X,'* DUMPZ4 *-------',8(10H----------))                   DUMPZ417
 1502 FORMAT(10X,I6,3X,'FOURMOMENTUM  ',5(1X,F12.5))                    DUMPZ418
C====================================================================== DUMPZ419
C================END OF JMCLIB========================================= DUMPZ420
C====================================================================== DUMPZ421
      END                                                               DUMPZ422
      SUBROUTINE DUMPZ8(CH,PP)                                          DUMPZ8 2
C ----------------------------------------------------------------------DUMPZ8 3
C PRINTS SINGLE FOUR MOMENTUM                                           DUMPZ8 4
C                                                                       DUMPZ8 5
C     called by : PEDYVV, TRAAAA, EVENTE, ...                           DUMPZ8 6
C ----------------------------------------------------------------------DUMPZ8 7
      IMPLICIT REAL*8(A-H,O-Z)                                          DUMPZ8 8
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*8 PP(4)                                                      DUMPZ810
      CHARACTER*4 CH                                                    DUMPZ811
C                                                                       DUMPZ812
      AMS=PP(4)**2                                                      DUMPZ813
      DO 10 I=1,3                                                       DUMPZ814
   10 AMS=AMS-PP(I)**2                                                  DUMPZ815
      IF(AMS.GT.0.0) AMS=SQRT(AMS)                                      DUMPZ816
      WRITE(IOUT,*) '--------------------------------------------------'DUMPZ817
      WRITE(IOUT,1502) CH,(PP(I),I=1,4),AMS                             DUMPZ818
 1502 FORMAT(1X,A4,1X,4F15.10,F10.6)                                    DUMPZ819
      END                                                               DUMPZ820
      SUBROUTINE DUMPL9(QP,QM,PH)                                       DUMPL9 2
C ----------------------------------------------------------------------DUMPL9 3
C FOR TESTS                                                             DUMPL9 4
C PRINT MOMENTA OF THE PRODUCTION PROCESS                               DUMPL9 5
C                                                                       DUMPL9 6
C     called by : KORALZ, SANGLE, BDRESS, SKONTY                        DUMPL9 7
C ----------------------------------------------------------------------DUMPL9 8
      IMPLICIT REAL  (A-H,O-Z)                                          DUMPL9 9
      DIMENSION QP(4),QM(4),PH(4)                                       DUMPL910
      DIMENSION SUM(4)                                                  DUMPL911
      DATA ICONT/0/                                                     DUMPL912
C                                                                       DUMPL913
      ICONT=ICONT+1                                                     DUMPL914
      IF (ICONT.GT.200) RETURN                                          DUMPL915
      DO 30 I=1,4                                                       DUMPL916
  30  SUM(I)=QP(I)+QM(I)+PH(I)                                          DUMPL917
      PRINT      1100,ICONT                                             DUMPL918
      AQP=     QP(4)**2-QP(3)**2-QP(2)**2-QP(1)**2                      DUMPL919
      AQM=     QM(4)**2-QM(3)**2-QM(2)**2-QM(1)**2                      DUMPL920
      APH=     PH(4)**2-PH(3)**2-PH(2)**2-PH(1)**2                      DUMPL921
      IF(AQP.GT.0.) AQP=SQRT(AQP)                                       DUMPL922
      IF(AQM.GT.0.) AQM=SQRT(AQM)                                       DUMPL923
      PRINT 1501, (QP(I),I=1,4),AQP                                     DUMPL924
      PRINT 1502, (QM(I),I=1,4),AQM                                     DUMPL925
      PRINT 1503, (PH(I),I=1,4),APH                                     DUMPL926
      PRINT 1600, ( SUM(I),I=1,4)                                       DUMPL927
 1100 FORMAT(  /20X,'MOMENTA FROM UTIL9,     PRINT NO.  ',I5/           DUMPL928
     &40X,'  P(1)',7X,'  P(2)',7X,'  P(3)',7X,'  P(4)',7X,'  MASS')     DUMPL929
 1501 FORMAT(20X,'QP  ',9X,5(1X,F12.5))                                 DUMPL930
 1502 FORMAT(20X,'QM  ',9X,5(1X,F12.5))                                 DUMPL931
 1503 FORMAT(20X,'PH  ',9X,5(1X,F12.5))                                 DUMPL932
 1600 FORMAT(20X,'SUM ',9X,5(1X,F12.5),/)                               DUMPL933
      END                                                               DUMPL934
      SUBROUTINE DUMPL8                                                 DUMPL8 2
C ----------------------------------------------------------------------DUMPL8 3
C FOR TESTS                                                             DUMPL8 4
C PRINT MOMENTA OF THE PRODUCTION PROCESS                               DUMPL8 5
C                                                                       DUMPL8 6
C     called by :                                                       DUMPL8 7
C ----------------------------------------------------------------------DUMPL8 8
      IMPLICIT REAL*8(A-H,O-Z)                                          DUMPL8 9
      COMMON / UTIL8 / QP(4),QM(4),PH(4)                                UTIL8  2
      REAL*8           QP   ,QM   ,PH                                   UTIL8  3
      DIMENSION SUM(4)                                                  DUMPL811
      DATA ICONT/0/                                                     DUMPL812
C                                                                       DUMPL813
      ICONT=ICONT+1                                                     DUMPL814
      DO 30 I=1,4                                                       DUMPL815
  30  SUM(I)=QP(I)+QM(I)+PH(I)                                          DUMPL816
      PRINT      1100,ICONT                                             DUMPL817
      AQP=     QP(4)**2-QP(3)**2-QP(2)**2-QP(1)**2                      DUMPL818
      AQM=     QM(4)**2-QM(3)**2-QM(2)**2-QM(1)**2                      DUMPL819
      APH=     PH(4)**2-PH(3)**2-PH(2)**2-PH(1)**2                      DUMPL820
      IF(AQP.GT.0.) AQP=SQRT(AQP)                                       DUMPL821
      IF(AQM.GT.0.) AQM=SQRT(AQM)                                       DUMPL822
      PRINT 1501, (QP(I),I=1,4),AQP                                     DUMPL823
      PRINT 1502, (QM(I),I=1,4),AQM                                     DUMPL824
      PRINT 1503, (PH(I),I=1,4),APH                                     DUMPL825
      PRINT 1600, ( SUM(I),I=1,4)                                       DUMPL826
 1100 FORMAT(  /20X,'MOMENTA FROM UTIL8,     EVENT NO.  ',I5/           DUMPL827
     &40X,'  P(1)',7X,'  P(2)',7X,'  P(3)',7X,'  P(4)',7X,'  MASS')     DUMPL828
 1501 FORMAT(20X,'QP  ',9X,5(1X,F12.5))                                 DUMPL829
 1502 FORMAT(20X,'QM  ',9X,5(1X,F12.5))                                 DUMPL830
 1503 FORMAT(20X,'PH  ',9X,5(1X,F12.5))                                 DUMPL831
 1600 FORMAT(20X,'SUM ',9X,5(1X,F12.5),/)                               DUMPL832
      END                                                               DUMPL833
      SUBROUTINE VESK8A(MODE,PAR1,PAR2)                                 VESK8A 2
C ----------------------------------------------------------------------VESK8A 3
C====================================================================== VESK8A 4
C====================================================================== VESK8A 5
C===================*** EXPLIB ***===================================== VESK8A 6
C=========GENERAL PURPOSE LIBRARY OF THE MONTE CARLO ================== VESK8A 7
C================AND LORENTZ KINEMATICS================================ VESK8A 8
C============= BY  S. JADACH,  APRIL 1986============================== VESK8A 9
C====================================================================== VESK8A10
C===================== V E S K 8 A ==================================== VESK8A11
C==================S. JADACH  SEPTEMBER 1985=========================== VESK8A12
C====================================================================== VESK8A13
C ONE DIMENSIONAL MONTE CARLO  SAMPLER.                                 VESK8A14
C DOUBLE PRECISION  FUNCTION FUNSKO IS THE DISTRIBUTION TO BE GENERATED VESK8A15
C JLIM1 IS THE NUMBER OF ENTRIES IN THE EQUIDISTANT LATICE WHICH        VESK8A16
C IS FORMED IN THE FIRST STAGE AND JLIM2 IS THE TOTAL MAXIMUM           VESK8A17
C NUMBER OF ENTRIES IN THE LATTICE, NOTE THAT DIMENSIONS OF             VESK8A18
C MATRICES IN /CESK8A/ SHOULD BE AT LEAST JLIM2+1 .                     VESK8A19
C FOR MILD FUNSKO JLIM2=128 IS ENOUGH.                                  VESK8A20
C TO CREATE AN INDEPENDANT VERSION REPLACE /ESK8A/=>/ESK8B/.            VESK8A21
C                                                                       VESK8A22
C     called by : EVENTM, KARLUD                                        VESK8A23
C ----------------------------------------------------------------------VESK8A24
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               VESK8A25
      COMMON / CESK8A / XX(1025),YY(1025),ZINT(1025),ZSUM,JMAX          VESK8A26
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*4 RRR(2)                                                     VESK8A28
      DATA JLIM1,JLIM2/16,257/                                          VESK8A29
      DATA IWARM/0/                                                     VESK8A30
C                                                                       VESK8A31
      IF(MODE.EQ.-1) THEN                                               VESK8A32
C     ===================                                               VESK8A33
C INITIALISATION PART, SEE VINSKO FOR MORE COMMENTS                     VESK8A34
        INIRAN=1                                                        VESK8A35
        IWARM=1                                                         VESK8A36
        WT=0.                                                           VESK8A37
        SWT=0.                                                          VESK8A38
        SSWT=0.                                                         VESK8A39
        NEVS=0                                                          VESK8A40
C INITIALISATION PART, SAMPLING DISTRIBUTION FUNSKO                     VESK8A41
C AND FILLING MATRICES XX,YY,ZINT ETC.                                  VESK8A42
        JMAX=1                                                          VESK8A43
        XX(1)=0.                                                        VESK8A44
        XX(2)=1.                                                        VESK8A45
        YY(1)=FUNSKA(0,XX(1))                                           VESK8A46
        YY(2)=FUNSKA(0,XX(2))                                           VESK8A47
        IF(YY(1).LT.0.0.OR.YY(2).LT.0.0) GO TO 999                      VESK8A48
        ZINT(1)=.5D0*(YY(2)+YY(1))*(XX(2)-XX(1))                        VESK8A49
C                                                                       VESK8A50
        JDIV=1                                                          VESK8A51
        DO 200 K=1,JLIM2-1                                              VESK8A52
        IF(JMAX.LT.JLIM1) THEN                                          VESK8A53
C...      NOTE THAT DESK8A INCREMENTS JMAX=JMAX+1 IN EVERY CALL         VESK8A54
          CALL DESK8A(JDIV)                                             VESK8A55
          JDIV=JDIV+2                                                   VESK8A56
          IF(JDIV.GT.JMAX) JDIV=1                                       VESK8A57
        ELSE                                                            VESK8A58
          JDIV=1                                                        VESK8A59
          ZMX=ZINT(1)                                                   VESK8A60
          DO 180 J=1,JMAX                                               VESK8A61
          IF(ZMX.LT.ZINT(J)) THEN                                       VESK8A62
            ZMX=ZINT(J)                                                 VESK8A63
            JDIV=J                                                      VESK8A64
          ENDIF                                                         VESK8A65
  180     CONTINUE                                                      VESK8A66
          CALL DESK8A(JDIV)                                             VESK8A67
        ENDIF                                                           VESK8A68
  200   CONTINUE                                                        VESK8A69
C                                                                       VESK8A70
C...    FINAL ADMINISTRATION, NORMALIZING ZINT ETC.                     VESK8A71
        ZSUM1=0.                                                        VESK8A72
        ZSUM =0.                                                        VESK8A73
        DO 220 J=1,JMAX                                                 VESK8A74
        ZSUM1=ZSUM1+ZINT(J)                                             VESK8A75
        YMAX= MAX( YY(J+1),YY(J))                                       VESK8A76
        ZINT(J)=YMAX*(XX(J+1)-XX(J))                                    VESK8A77
  220   ZSUM=ZSUM+ZINT(J)                                               VESK8A78
        SUM=0.                                                          VESK8A79
        DO 240 J=1,JMAX                                                 VESK8A80
        SUM=SUM+ZINT(J)                                                 VESK8A81
  240   ZINT(J)=SUM/ZSUM                                                VESK8A82
C                                                                       VESK8A83
      ELSE IF(MODE.EQ.0) THEN                                           VESK8A84
C     =======================                                           VESK8A85
C GENERATION PART                                                       VESK8A86
        IF(IWARM.EQ.0) GOTO 901                                         VESK8A87
  222 CONTINUE                                                          VESK8A88
        CALL RANMAR(RRR,2)                                              VESK8A89
        IF(WT.GT.1.) THEN                                               VESK8A90
          WT=WT-1.D0                                                    VESK8A91
        ELSE                                                            VESK8A92
          RNUMB=RRR(1)                                                  VESK8A93
          DO 215 J=1,JMAX                                               VESK8A94
          JSTOP=J                                                       VESK8A95
  215     IF(ZINT(J).GT.RNUMB) GOTO 216                                 VESK8A96
  216     CONTINUE                                                      VESK8A97
          IF(JSTOP.EQ.1) THEN                                           VESK8A98
            D=RNUMB/ZINT(1)                                             VESK8A99
          ELSE                                                          VESK8100
            D =(RNUMB-ZINT(JSTOP-1))/(ZINT(JSTOP)-ZINT(JSTOP-1))        VESK8101
          ENDIF                                                         VESK8102
          X=XX(JSTOP)*(1.D0 -D )+XX(JSTOP+1)*D                          VESK8103
          FN=FUNSKA(0,X)                                                VESK8104
          IF(FN.LT.0.) GOTO 999                                         VESK8105
          YYMAX=MAX(YY(JSTOP+1),YY(JSTOP))                              VESK8106
          WT=FN/YYMAX                                                   VESK8107
          NEVS=NEVS+1                                                   VESK8108
          SWT=SWT+WT                                                    VESK8109
          SSWT=SSWT+WT*WT                                               VESK8110
C         CALL HFILL(40,WT)                                             VESK8111
        ENDIF                                                           VESK8112
        RNUMB=RRR(2)                                                    VESK8113
        IF(RNUMB.GT.WT) GOTO 222                                        VESK8114
        PAR1=  X                                                        VESK8115
        PAR2=  FN                                                       VESK8116
C                                                                       VESK8117
      ELSE IF(MODE.EQ.1) THEN                                           VESK8118
C     =======================                                           VESK8119
C FINAL STATISTICS                                                      VESK8120
        CINTEG=ZSUM*SWT/FLOAT(NEVS)                                     VESK8121
        ERRINT=SQRT(SSWT/SWT**2-1.D0/FLOAT(NEVS))                       VESK8122
        PAR1=  CINTEG                                                   VESK8123
        PAR2=  ERRINT                                                   VESK8124
C                                                                       VESK8125
      ELSE                                                              VESK8126
C     ====                                                              VESK8127
        GOTO  902                                                       VESK8128
      ENDIF                                                             VESK8129
C     =====                                                             VESK8130
C                                                                       VESK8131
      RETURN                                                            VESK8132
 901  WRITE(IOUT,9010)                                                  VESK8133
 9010 FORMAT(' **** STOP IN VESK8A, LACK OF INITIALISATION')            VESK8134
      STOP                                                              VESK8135
 902  WRITE(IOUT,9020)                                                  VESK8136
 9020 FORMAT(' **** STOP IN VESK8A, WRONG MODE ')                       VESK8137
      STOP                                                              VESK8138
 999  WRITE(IOUT,9990)                                                  VESK8139
 9990 FORMAT(' **** STOP IN VESK8A, NEGATIVE VALUE OF FUNSKO ')         VESK8140
      STOP                                                              VESK8141
      END                                                               VESK8142
      SUBROUTINE DESK8A(JDIV)                                           DESK8A 2
C ----------------------------------------------------------------------DESK8A 3
C THIS ROUTINE BELONGS TO VESK8A PACKAGE                                DESK8A 4
C IT SUDIVIDES INTO TWO EQUAL PARTS THE INTERVAL                        DESK8A 5
C (XX(JDIV),XX(JDIV+1))  IN THE LATTICE                                 DESK8A 6
C                                                                       DESK8A 7
C     called by : VESK8A                                                DESK8A 8
C ----------------------------------------------------------------------DESK8A 9
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DESK8A10
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / CESK8A / XX(1025),YY(1025),ZINT(1025),ZSUM,JMAX          DESK8A12
C                                                                       DESK8A13
      XNEW=.5D0*(XX(JDIV) +XX(JDIV+1))                                  DESK8A14
      DO 100 J=JMAX,JDIV,-1                                             DESK8A15
      XX(J+2)  =XX(J+1)                                                 DESK8A16
      YY(J+2)  =YY(J+1)                                                 DESK8A17
  100 ZINT(J+1)=ZINT(J)                                                 DESK8A18
      XX(JDIV+1)= XNEW                                                  DESK8A19
      YY(JDIV+1)= FUNSKA(0,XNEW)                                        DESK8A20
      IF(YY(JDIV+1).LT.0.) GOTO 999                                     DESK8A21
      ZINT(JDIV)  =.5D0*(YY(JDIV+1)+YY(JDIV)  )*(XX(JDIV+1)-XX(JDIV)  ) DESK8A22
      ZINT(JDIV+1)=.5D0*(YY(JDIV+2)+YY(JDIV+1))*(XX(JDIV+2)-XX(JDIV+1)) DESK8A23
      JMAX=JMAX+1                                                       DESK8A24
      RETURN                                                            DESK8A25
  999 WRITE(IOUT,9000)                                                  DESK8A26
 9000 FORMAT(' **** STOP IN DESK8A, NEGATIVE VALUE OF FUNSKO ')         DESK8A27
      STOP                                                              DESK8A28
      END                                                               DESK8A29
      FUNCTION SP(Y,E)                                                  SP     2
C ----------------------------------------------------------------------SP     3
C  SPENCE FUNCTION OF Y+I*REAL(E) WHERE E IS AN INFINITESIMAL           SP     4
C                                                                       SP     5
C     called by : FIU, MATELM, ...                                      SP     6
C ----------------------------------------------------------------------SP     7
C     IMPLICIT LOGICAL (A-H,O-Z)                                        SP     8
      IMPLICIT REAL*8  (A-H,O-Z)                                        SP     9
      COMPLEX*16 Y,E,SP                                                 SP    10
      REAL*8 B(9),FACT                                                  SP    11
      COMPLEX*16 A,CLN,PISQ6,PROD,TERM,X,Z,ZSQ                          SP    12
      COMPLEX*16 CDLN                                                   SP    13
C                                                                       SP    14
      B(1)=1.D0/6.D0                                                    SP    15
      B(2)=-1.D0/30.D0                                                  SP    16
      B(3)=1.D0/42.D0                                                   SP    17
      B(4)=B(2)                                                         SP    18
      B(5)=5.D0/66.D0                                                   SP    19
      B(6)=-691.D0/2730.D0                                              SP    20
      B(7)=7.D0/6.D0                                                    SP    21
      B(8)=-3617.D0/510.D0                                              SP    22
      B(9)=43867.D0/798.D0                                              SP    23
      PISQ6=(1.6449340668482264D0,0.D0)                                 SP    24
      I1=0                                                              SP    25
      I2=0                                                              SP    26
      X=Y                                                               SP    27
      A=E                                                               SP    28
      IF(X.EQ.(0.D0,0.D0))THEN                                          SP    29
        SP=(0.D0,0.D0)                                                  SP    30
        RETURN                                                          SP    31
      ENDIF                                                             SP    32
      IF(X.EQ.(1.D0,0.D0))THEN                                          SP    33
        SP=PISQ6                                                        SP    34
        RETURN                                                          SP    35
      ENDIF                                                             SP    36
C  IF X LIES OUTSIDE THE UNIT CIRCLE THEN EVALUATE SP(1/X)              SP    37
      IF(CDABS(X).GT.1.D0)THEN                                          SP    38
        X=1.D0/X                                                        SP    39
        A=-A                                                            SP    40
        I1=1                                                            SP    41
      ENDIF                                                             SP    42
C  IF REAL(X)>1/2 THEN EVALUATE SP(1-X)                                 SP    43
      IF(DREAL(X).GT.0.5D0)THEN                                         SP    44
        X=1.D0-X                                                        SP    45
        A=-A                                                            SP    46
        I2=1                                                            SP    47
      ENDIF                                                             SP    48
C  EVALUATE SERIES FOR SP(X)                                            SP    49
      Z=-CDLN(1.D0-X,-A)                                                SP    50
      ZSQ=Z*Z                                                           SP    51
      SP=Z-ZSQ/4.D0                                                     SP    52
      PROD=Z                                                            SP    53
      FACT=1.D0                                                         SP    54
      DO 10 J=2,18,2                                                    SP    55
      FACT=FACT*DCMPLX(DBLE((J+1)*J))                                   SP    56
      PROD=PROD*ZSQ                                                     SP    57
      TERM=B(J/2)/FACT*PROD                                             SP    58
      SP=SP+TERM                                                        SP    59
      IF(CDABS(TERM/SP).LT.1.D-20)GO TO 20                              SP    60
10    CONTINUE                                                          SP    61
C  ADD APPROPRIATE LOGS TO OBTAIN SPENCE FUNCTION OF ORIGINAL ARGUEMENT SP    62
20    IF(I2.EQ.1)THEN                                                   SP    63
        SP=-SP+PISQ6-CDLN(X,A)*CDLN(1.D0-X,-A)                          SP    64
        X=1.D0-X                                                        SP    65
        A=-A                                                            SP    66
      ENDIF                                                             SP    67
      IF(I1.EQ.1)THEN                                                   SP    68
        CLN=CDLN(-X,-A)                                                 SP    69
        SP=-SP-PISQ6-CLN*CLN/2.D0                                       SP    70
      ENDIF                                                             SP    71
      RETURN                                                            SP    72
      END                                                               SP    73
      DOUBLE PRECISION FUNCTION DLI2(X)                                 DLI2   2
C ----------------------------------------------------------------------DLI2   3
C DILOGARITHM FOR X <= 1, APPROPRIATE FOR VALUES VERY CLOSE TO 0        DLI2   4
C                                                                       DLI2   5
C     called by : AIMPI                                                 DLI2   6
C ----------------------------------------------------------------------DLI2   7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DLI2   8
      COMPLEX*16 SP                                                     DLI2   9
C                                                                       DLI2  10
      IF (DABS(X).LE.1.D-15) THEN                                       DLI2  11
        DLI2=X                                                          DLI2  12
      ELSE                                                              DLI2  13
        DLI2=DREAL(SP(DCMPLX(X),DCMPLX(.1D1)))                          DLI2  14
      ENDIF                                                             DLI2  15
      RETURN                                                            DLI2  16
      END                                                               DLI2  17
      FUNCTION CDLN(X,A)                                                CDLN   2
C ----------------------------------------------------------------------CDLN   3
C  COMPLEX FUNCTIONS THAT TAKE ACCOUNT OF THE I*EPSILON PRESCRIPTION    CDLN   4
C              TO CALCULATE ANALYTIC STRUCTURE                          CDLN   5
C                                                                       CDLN   6
C  COMPLEX LOGARITHM OF X+I*REAL(A) WHERE A IS AN INFINITESIMAL         CDLN   7
C                                                                       CDLN   8
C     called by : BZED1, FIU, MATELM, ...                               CDLN   9
C ----------------------------------------------------------------------CDLN  10
C     IMPLICIT LOGICAL (A-H,O-Z)                                        CDLN  11
      IMPLICIT REAL*8  (A-H,O-Z)                                        CDLN  12
      COMPLEX*16 A,X,CDLN                                               CDLN  13
      COMPLEX*16 PI                                                     CDLN  14
      PI=(3.141592653589793238462643D0,0.D0)                            CDLN  15
      IF(DIMAG(X).EQ.0.D0.AND.DREAL(X).LE.0.D0)THEN                     CDLN  16
        CDLN=CDLOG(-X)+(0.D0,1.D0)*PI*DSIGN(1.D0,DREAL(A))              CDLN  17
      ELSE                                                              CDLN  18
        CDLN=CDLOG(X)                                                   CDLN  19
      END IF                                                            CDLN  20
      IF(DIMAG(CDLN).GT.DREAL(PI))CDLN=CDLN-(0.D0,1.D0)*PI              CDLN  21
      IF(DIMAG(CDLN).LT.DREAL(-PI))CDLN=CDLN+(0.D0,1.D0)*PI             CDLN  22
      RETURN                                                            CDLN  23
      END                                                               CDLN  24
                                                                        CDLN  25
      SUBROUTINE EVENTE(MODE,KEYYFS)                                    EVENTE 2
C ----------------------------------------------------------------------EVENTE 3
C  MULTIPHOTON GENERATOR                                                EVENTE 4
C                                                                       EVENTE 5
C     called by : EVENTZ                                                EVENTE 6
C ----------------------------------------------------------------------EVENTE 7
      IMPLICIT REAL*8(A-H,O-Z)                                          EVENTE 8
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BEAMPM / ENE ,AMIN,AMFIN,IDE,IDF                         BEAMPM 2
      REAL*8            ENE ,AMIN,AMFIN                                 BEAMPM 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      COMMON / GAUSPM /SS,POLN,T3E,QE,T3F,QF                            GAUSPM 2
     &                ,XUPGI   ,XUPZI   ,XUPGF   ,XUPZF                 GAUSPM 3
     &                ,NDIAG0,NDIAGA,KEYA,KEYZ                          GAUSPM 4
     &                ,ITCE,JTCE,ITCF,JTCF,KOLOR                        GAUSPM 5
      REAL*8           SS,POLN,T3E,QE,T3F,QF                            GAUSPM 6
     &                ,XUPGI(2),XUPZI(2),XUPGF(2),XUPZF(2)              GAUSPM 7
      COMMON / FINUS / CSTCM,ERREL                                      FINUS  2
      REAL*8           CSTCM,ERREL                                      FINUS  3
      COMMON / UTIL2 /  XK,C,S,CG,SG                                    UTIL2  2
      COMMON / UTIL3 / FIG,FI,IT,IBREM                                  UTIL3  2
      COMMON / UTIL8 / QP(4),QM(4),PH(4)                                UTIL8  2
      REAL*8           QP   ,QM   ,PH                                   UTIL8  3
      COMMON / UTIL4 / AQP(4),AQM(4),APH(4)                             UTIL4  2
      REAL*4           AQP   ,AQM   ,APH                                UTIL4  3
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMSE4 / AQF1(4),AQF2(4),ASPHUM(4),ASPHOT(100,4),NPHOTA  MOMSE4 2
      REAL*4            AQF1   ,AQF2   ,ASPHUM   ,ASPHOT                MOMSE4 3
      COMMON / GSWPRM /SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 2
      REAL*8           SWSQ,AMW,AMZ,AMH,AMTOP,GAMMZ                     GSWPRM 3
      COMMON / KEYSET / KEYGSW,KEYRAD,KEYTAB                            KEYSET 2
      COMMON / VVREK  / VVMIN,VVMAX,VV,BETI                             VVREK  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREK  3
      COMMON / KBREMS / KBRINI,KBRFIN,KBRINT                            KBREMS 2
      DOUBLE PRECISION  WTMOD,WTCRU1,WTCRU2,WTSET                       EVENTE25
      COMMON / WGTALL / WTMOD,WTCRU1,WTCRU2,WTSET(100)                  EVENTE26
      DIMENSION  XPAR(30),NPAR(30)                                      EVENTE27
      REAL*8 PPB(4),PMB(4)                                              EVENTE28
      REAL*4 RRR(4)                                                     EVENTE29
      DATA CMTR /389.385D-30/                                           EVENTE30
      DATA NEXPAN /0/                                                   EVENTE31
C                                                                       EVENTE32
C GENERATION OF THE PHOTON MOMENTUM XK AND DECISION ABOUT THE           EVENTE33
C TYPE OF THE RADIATION  IT=1,2,3 CORRESPONDS TO INITIAL STATE          EVENTE34
C RADIATION, FINAL STATE RADIATION AND SOFT PHOTON (XK.LT.XK0)          EVENTE35
C RADIATION                                                             EVENTE36
C                                                                       EVENTE37
C     INITIALIZATION IN EVENTE                                          EVENTE38
      IF (MODE.EQ.-1) THEN                                              EVENTE39
C       ====================                                            EVENTE40
        CALL WMONIT(  -1,13,DUMM1,DUMM2,DUMM3)                          EVENTE41
        PI=4.D0*DATAN(1.D0)                                             EVENTE42
        ALF1=ALFPI                                                      EVENTE43
        IF(KEYRAD.EQ.0.OR.KBRINI.EQ.0) THEN                             EVENTE44
          BETI=0D0                                                      EVENTE45
          DELI=0D0                                                      EVENTE46
        ELSE                                                            EVENTE47
          QE2=QE*QE                                                     EVENTE48
          BILG   = DLOG(4D0*ENE**2/AMIN**2)                             EVENTE49
          BETI=2D0*QE2*ALF1*(BILG-1D0)                                  EVENTE50
          DELI=ALF1*QE2*(9D0*BILG+2D0*PI**2-12D0)/6D0                   EVENTE51
     $        +BETI*LOG(XK0)                                            EVENTE52
        ENDIF                                                           EVENTE53
        IF(KEYRAD.EQ.0.OR.KBRFIN.EQ.0) THEN                             EVENTE54
          FACTOR=0D0                                                    EVENTE55
        ELSE                                                            EVENTE56
          FACTOR=1D0                                                    EVENTE57
          FACTOR=FACTOR*QF*QF                                           EVENTE58
        ENDIF                                                           EVENTE59
C                                                                       EVENTE60
C INITIALISE EXPAND                                                     EVENTE61
        IF (KEYRAD.GT.100) THEN                                         EVENTE62
          NPAR(1)=1000001                                               EVENTE63
        ELSE                                                            EVENTE64
          NPAR(1)=KEYYFS                                                EVENTE65
        ENDIF                                                           EVENTE66
        KEYRED=0                                                        EVENTE67
        NPAR(2)=KEYRED                                                  EVENTE68
C KEYWGT=0 is standard choice. 1 weigted events (tests only)            EVENTE69
        KEYWGT=0                                                        EVENTE70
        NPAR(3)=KEYWGT                                                  EVENTE71
        NPAR(4)=KEYGSW                                                  EVENTE72
        XPAR(1)=2D0*ENE                                                 EVENTE73
        XPAR(2)=AMZ                                                     EVENTE74
        XPAR(3)=SWSQ                                                    EVENTE75
        XPAR(4)=GAMMZ                                                   EVENTE76
        XPAR(5)=AMFIN                                                   EVENTE77
        XPAR(6)=VVMIN                                                   EVENTE78
        XPAR(7)=VVMAX                                                   EVENTE79
        CALL EXPAND(-1,XPAR,NPAR)                                       EVENTE80
C                                                                       EVENTE81
      ELSEIF (MODE.EQ.0) THEN                                           EVENTE82
C     =======================                                           EVENTE83
    1   CONTINUE                                                        EVENTE84
        CALL RANMAR(RRR,4)                                              EVENTE85
        CALL EXPAND( 0,XPAR,NPAR)                                       EVENTE86
        IF (WTMOD.LE.1D-35) goto 1                                      EVENTE87
C       ---------------------------------                               EVENTE88
C                                                                       EVENTE89
C FILLING EXTRA COMMONS                                                 EVENTE90
        DO 39 I=1,4                                                     EVENTE91
        QP(I)=QF1(I)                                                    EVENTE92
        QM(I)=QF2(I)                                                    EVENTE93
        PH(I)=SPHUM(I)                                                  EVENTE94
        AQP(I)=QP(I)                                                    EVENTE95
        AQM(I)=QM(I)                                                    EVENTE96
 39     APH(I)=PH(I)                                                    EVENTE97
        WT=1D0                                                          EVENTE98
        WTMAX=1.0100D0                                                  EVENTE99
        IF(KEYGSW.GT.1) THEN                                            EVENT100
             WT =WAGA(0,0.0D0,0.D0)                                     EVENT101
             WT =WAGA(1,0.0D0,0.D0)/WT                                  EVENT102
             WTMAX=2D0                                                  EVENT103
        ELSE                                                            EVENT104
             WTDUMM=WAGA(0,0.D0,0.D0)                                   EVENT105
        ENDIF                                                           EVENT106
        IF (KEYRAD.GT.100) WT=WT*(1D0+0.75*ALF1*QF**2)                  EVENT107
        RN=RRR(1)                                                       EVENT108
        CALL WMONIT(0,13,WT ,WTMAX,RN)                                  EVENT109
        IF(RN.GT.WT/WTMAX) GOTO 1                                       EVENT110
C                                                                       EVENT111
        IF (KEYRAD.EQ.11.OR.KEYRAD.GT.100) THEN                         EVENT112
          CALL BDRESS(0,PPB,PMB,SVARX,CTHE)                             EVENT113
        ELSE                                                            EVENT114
          SVARX=5.0                                                     EVENT115
          CTHE=0.0                                                      EVENT116
        ENDIF                                                           EVENT117
        IF (KEYRAD.GT.100.AND.KBRFIN.NE.0) THEN                         EVENT118
C         PHOTON ENERGY GENERATION - FINAL BREMSSTRAHLUNG               EVENT119
 333      XK=ALTPAR(SVARX,AMFIN,XK0,FACTOR)                             EVENT120
          IF (XK.GT.1D0-4D0*AMFIN**2/SVARX) GO TO 333                   EVENT121
        ELSE                                                            EVENT122
          XK=0D0                                                        EVENT123
        ENDIF                                                           EVENT124
        IT=3                                                            EVENT125
        IF (XK.GT.XK0) THEN                                             EVENT126
          IT=2                                                          EVENT127
C HARD PHOTON CASE - FINAL STATE                                        EVENT128
C         PHOTON ANGULAR COORDINATES GENERATION                         EVENT129
          CALL RRR6(XK,4D0*AMFIN**2/SVARX/(1D0-XK),CG,SG,IBREM)         EVENT130
C         FERMION ANGULAR COORDINATES                                   EVENT131
          C=CTHE                                                        EVENT132
C         IF (ABS(CTHE).GE.1D0) PRINT *, 'DUZE CTHE',CTHE,'S=',SVARX    EVENT133
          IF (ABS(CTHE).GE.1D0) C=CTHE/ABS(CTHE)                        EVENT134
          S=SQRT(1D0-C*C)                                               EVENT135
C         GENERATION OF THE ANGLE BETWEEN PHOTON-BEAM AND PHOTON-TAU PL EVENT136
          RR2=RRR(2)                                                    EVENT137
          FIG=-PI+2D0*PI*RR2                                            EVENT138
C                                                                       EVENT139
C         GENERATION OF THE ANGLE AROUND THE BEAM                       EVENT140
          RR3=RRR(3)                                                    EVENT141
          FI=-PI+2D0*PI*RR3                                             EVENT142
C         CALCULATION OF 4 MOMENTA FROM ANGULAR VARIABLES               EVENT143
          QP(4)=AMFIN                                                   EVENT144
          PH(4)=SQRT(SVARX)                                             EVENT145
          QM(4)=AMFIN                                                   EVENT146
          DO 103 I=1,3                                                  EVENT147
          PH(I)=.0D0                                                    EVENT148
          QP(I)=.0D0                                                    EVENT149
  103     QM(I)=.0D0                                                    EVENT150
          EBEAM=SQRT(SVARX)/2D0                                         EVENT151
          CALL TRASNG(1,EBEAM,AMFIN,AMIN,1,QP,QP)                       EVENT152
          CALL TRASNG(1,EBEAM,AMFIN,AMIN,2,QM,QM)                       EVENT153
          DO 304 I=1,4                                                  EVENT154
  304     PH(I)=PH(I)-QP(I)-QM(I)                                       EVENT155
          CALL TRALOZ(0,-1,2D0*ENE    ,SPHUM,PPB,PMB,QP,QP)             EVENT156
          CALL TRALOZ(1,-1,2D0*ENE    ,SPHUM,PPB,PMB,QM,QM)             EVENT157
          CALL TRALOZ(1,-1,2D0*ENE    ,SPHUM,PPB,PMB,PH,PH)             EVENT158
          NPHOT=NPHOT+1                                                 EVENT159
          DO 35 I=1,4                                                   EVENT160
          SPHUM(I)=SPHUM(I)+PH(I)                                       EVENT161
          SPHOT(NPHOT,I)=PH(I)                                          EVENT162
          QF2(I)=QM(I)                                                  EVENT163
  35      QF1(I)=QP(I)                                                  EVENT164
        ELSEIF ( XK.LE.XK0) THEN                                        EVENT165
C         FERMION ANGULAR COORDINATES                                   EVENT166
          C=CTHE                                                        EVENT167
          DO 49 I=1,4                                                   EVENT168
          QP(I)=QF1(I)                                                  EVENT169
          QM(I)=QF2(I)                                                  EVENT170
 49       CONTINUE                                                      EVENT171
                                                                        EVENT172
          IF (ABS(CTHE).GE.1D0) C=CTHE/ABS(CTHE)                        EVENT173
          S=SQRT(1D0-C*C)                                               EVENT174
C IN THE FOLLOWING WE WILL PERFORM TRANSFORMATION ON THE                EVENT175
C 4-MOMENTA GENERATED IN YFS-2 PROGRAM. THE PURPOSE IS TO HAVE          EVENT176
C 4-MOMENTA OF TAU PAIR TREATED EXACTLY THE SAME WAY AS DECAY           EVENT177
C PRODUCTS TO AVOID ROUNDING ERRORS.                                    EVENT178
          CALL TRALOZ(0, 1,2D0*ENE    ,SPHUM,PPB,PMB,QP,QP)             EVENT179
          FI =ANGXY(QP(2),QP(1))                                        EVENT180
          IF (QP(1).LT.0.D0) FI =-FI                                    EVENT181
C         CALCULATION OF 4 MOMENTA FROM ANGULAR VARIABLES               EVENT182
          QP(4)=AMFIN                                                   EVENT183
          QM(4)=AMFIN                                                   EVENT184
          DO 108 I=1,3                                                  EVENT185
          QP(I)=.0D0                                                    EVENT186
  108     QM(I)=.0D0                                                    EVENT187
          EBEAM=SQRT(SVARX)/2D0                                         EVENT188
          CALL TRASNG(1,EBEAM,AMFIN,AMIN,1,QP,QP)                       EVENT189
          CALL TRASNG(1,EBEAM,AMFIN,AMIN,2,QM,QM)                       EVENT190
          CALL TRALOZ(1,-1,2D0*ENE    ,SPHUM,PPB,PMB,QP,QP)             EVENT191
          CALL TRALOZ(1,-1,2D0*ENE    ,SPHUM,PPB,PMB,QM,QM)             EVENT192
          DO 36 I=1,4                                                   EVENT193
          QF2(I)=QM(I)                                                  EVENT194
  36      QF1(I)=QP(I)                                                  EVENT195
        ENDIF                                                           EVENT196
C                                                                       EVENT197
C FILLING EXTRA COMMONS                                                 EVENT198
        DO 30 I=1,4                                                     EVENT199
        QP(I)=QF1(I)                                                    EVENT200
        QM(I)=QF2(I)                                                    EVENT201
        PH(I)=SPHUM(I)                                                  EVENT202
        AQP(I)=QP(I)                                                    EVENT203
        AQM(I)=QM(I)                                                    EVENT204
 30     APH(I)=PH(I)                                                    EVENT205
        NPHOTA=NPHOT                                                    EVENT206
        DO 45 I=1,4                                                     EVENT207
        AQF1(I)=QF1(I)                                                  EVENT208
        AQF2(I)=QF2(I)                                                  EVENT209
        ASPHUM(I)=SPHUM(I)                                              EVENT210
        DO 46 II=1,100                                                  EVENT211
 46     ASPHOT(II,I)=SPHOT(II,I)                                        EVENT212
 45     CONTINUE                                                        EVENT213
C                                                                       EVENT214
C for tests on bossting spinning with final state brem.                 EVENT215
C if next line commented out no effect should be seen.                  EVENT216
      IF (KEYRAD.GT.100) WTDUMM=WAGA(0,0.D0,0.D0)                       EVENT217
      ELSEIF (MODE.EQ. 1) THEN                                          EVENT218
C     ========================                                          EVENT219
        IF (NEXPAN.EQ.0) THEN                                           EVENT220
          CALL EXPAND( 1,XPAR,NPAR)                                     EVENT221
          CALL EXPAND( 2,XPAR,NPAR)                                     EVENT222
          SIGT=XPAR(10)                                                 EVENT223
          SIGT=XPAR(12)                                                 EVENT224
          ERR=XPAR(11)                                                  EVENT225
          NEXPAN=1                                                      EVENT226
        ENDIF                                                           EVENT227
        WRITE(IOUT,*) '=========================================='      EVENT228
        WRITE(IOUT,*) '========= WEIGHTS IN EVENTE =============='      EVENT229
        WRITE(IOUT,*) '=========================================='      EVENT230
        CALL WMONIT(2,13,AWT,DWT,WMX)                                   EVENT231
        CALL WMONIT(1,13,AWT,DWT,WMX)                                   EVENT232
        CSTOT=SIGT*AWT                                                  EVENT233
        SIG0=4.D0*PI/ALFINV**2/3.D0/(4D0*ENE**2)                        EVENT234
        CSTCM=SIGT*AWT*SIG0*CMTR                                        EVENT235
        ERREL=SQRT(DWT**2+ERR**2)                                       EVENT236
      ENDIF                                                             EVENT237
C     =====                                                             EVENT238
      END                                                               EVENT239
C=============================================================          EVENT240
      SUBROUTINE MODEL(MODE,PAR1,PAR2)                                  MODEL  2
C     ********************************                                  MODEL  3
C---------------------------------------------------------------------- MODEL  4
C---------------Model for initial + final------------------------------ MODEL  5
C---------------------------------------------------------------------- MODEL  6
C THIS ROUTINE DEFINES WEIGHT FOR A MODEL TO BE IMPLEMENTED             MODEL  7
C ON TOP OF BASIC DISTRIBUTION FROM KARLUD                              MODEL  8
C Above VLIM1/2 the contribution from beta1/2 is not calculated,        MODEL  9
C This saves time, for precision 1D-4 use VLIM1=1.D-4 and VLIM2=0.04    MODEL 10
C              and for precision 1D-3 use VLIM1=1.D-3 and VLIM2=0.12    MODEL 11
C     **********************************                                MODEL 12
C new version january 1992                                              MODEL 13
C VERSION FEBRUARY 1990                                                 MODEL 14
C VERSION FROM CERN 28 NOV 89                                           MODEL 15
C FYFS CORRECTED                                                        MODEL 16
C BETA1 FOR FINA STATE TO BE CORRECTED, NO MODIFICATIONS DUE E.W.       MODEL 17
C.... XXKARL NOT A MODEL PARAMETER ANY MORE                             MODEL 18
C.....monitoring weight shifted to MONIN                                MODEL 19
C COSMETIC CHANGE IN GIFYFS                                             MODEL 20
C !!!!!!!  LOGBOOK of correction !!!!                                   MODEL 21
*** PARAMETER an IMPLICIT interchanged in UURHO                         MODEL 22
*** VVRHO and UURHO are made to be exactly the same as in YFSFIG        MODEL 23
                                                                        MODEL 24
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               MODEL 25
      PARAMETER(NPMX=25)                                                MODEL 26
      PARAMETER(VLIM1= 1.D-9, VLIM2= 1.D-9)                             MODEL 27
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / WGTALL / WTMOD,WTCRU1,WTCRU2,WTSET(100)                  MODEL 33
      SAVE / MOMINI /,/ MOMFIN /,/ WEKING /,/ KEYYFS /                  MODEL 34
      SAVE / WGTALL /,/ INOUT  /                                        MODEL 35
C Spying on weights.........                                            MODEL 36
      COMMON / BETSPY / BETA00,BETA01,BETA02,BETI01,BETI02,             MODEL 37
     $  BETA10(NPMX),BETA11(NPMX),BETA20(NPMX,NPMX),                    MODEL 38
     $  SFACX(NPMX),SFACY(NPMX),                                        MODEL 39
     $  BETX10(NPMX),BETX11(NPMX),BETY10(NPMX),BETY11(NPMX),            MODEL 40
     $  BETXX20(NPMX,NPMX),BETXY20(NPMX,NPMX),BETYY20(NPMX,NPMX),       MODEL 41
     $  BETI10(NPMX),BETI11(NPMX),BETI20(NPMX,NPMX),                    MODEL 42
     $  BETF10(NPMX),BETF11(NPMX),BETF20(NPMX,NPMX)                     MODEL 43
      SAVE / BETSPY /                                                   MODEL 44
C ...........                                                           MODEL 45
      DIMENSION P1(4),P2(4),QQ(4),PP(4),XX(4),XPH1(4),XPH2(4)           MODEL 46
      SAVE KEYBIN,KEYBFI,ICONT,ICLIM,ICLIM2                             MODEL 47
C                                                                       MODEL 48
      IF(MODE.EQ.-1) THEN                                               MODEL 49
C     ================================================================= MODEL 50
C     =====================INITIALIZATION============================== MODEL 51
C     ================================================================= MODEL 52
C ...Initial/final state bremsstrahlung switches                        MODEL 53
      KEYBIN  = MOD(KEYBRM,10)                                          MODEL 54
      KEYBFI  = MOD(KEYBRM,100)/10                                      MODEL 55
      IF(KEYBIN.EQ.1) CALL MONIN(-1)                                    MODEL 56
      ICONT =  0                                                        MODEL 57
      ICLIM =  0                                                        MODEL 58
      ICLIM2=  50                                                       MODEL 59
      ELSEIF(MODE.EQ.0) THEN                                            MODEL 60
C     ================================================================= MODEL 61
C     ===================MODEL X-SECTION=============================== MODEL 62
C     ================================================================= MODEL 63
      ICONT=ICONT+1                                                     MODEL 64
      WTMAX=3.5D0                                                       MODEL 65
      WTMDL=1D0                                                         MODEL 66
      DO 10 I=1,100                                                     MODEL 67
   10 WTSET(I)=0D0                                                      MODEL 68
C ...Return for events outside phase space                              MODEL 69
      IF(WTCRU1*WTCRU2.EQ.0D0) GOTO 770                                 MODEL 70
      CMSENE=2D0*ENE                                                    MODEL 71
C define beam momenta                                                   MODEL 72
      CALL GIBEA(CMSENE,AMEL,P1,P2)                                     MODEL 73
C define 4-mometum XX of (virtual) Z                                    MODEL 74
      DO 20 K=1,4                                                       MODEL 75
      PP(K)= P1(K)+ P2(K)                                               MODEL 76
      QQ(K)=YF1(K)+YF2(K)                                               MODEL 77
   20 XX(K)=XF1(K)+XF2(K)                                               MODEL 78
      SVAR  = PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                       MODEL 79
      SVAR1 = XX(4)**2-XX(3)**2-XX(2)**2-XX(1)**2                       MODEL 80
      SVAR2 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       MODEL 81
      VV = 1D0 -SVAR1/SVAR                                              MODEL 82
      UU = 1D0 -SVAR2/SVAR1                                             MODEL 83
C ...Crude distribution                                                 MODEL 84
      CALL NCRUDE(XX,DISCRU)                                            MODEL 85
C ...Beta0, up to first order                                           MODEL 86
      CALL NDIST0(XX,P1,P2,YF1,YF2,ANDIS,DELI1,DELI2,DELF1,DELF2)       MODEL 87
C ...Various versions of Beta0, initial+final                           MODEL 88
      BETA02 = ANDIS*(1D0+DELI1+DELI2)*(1D0+DELF1+DELF2)                MODEL 89
      BETA01 = ANDIS*(1D0+DELI1)*(1D0+DELF1)                            MODEL 90
      BETA00 = ANDIS                                                    MODEL 91
C ...Initial only                                                       MODEL 92
      BETI02 = ANDIS*(1D0+DELI1+DELI2)                                  MODEL 93
      BETI01 = ANDIS*(1D0+DELI1)                                        MODEL 94
      BETF01 = ANDIS*(1D0+DELF1)                                        MODEL 95
      IF(ICONT.LE.ICLIM) CALL NTEST0(XX,P1,P2,YF1,YF2)                  MODEL 96
                                                                        MODEL 97
C ...BETA1...BETA1...BETA1...BETA1...                                   MODEL 98
C ...Contributions from beta1 (divided by S-factors)                    MODEL 99
C ...First INITIAL state radiation                                      MODEL100
      SUMX10=0D0                                                        MODEL101
      SUMX11=0D0                                                        MODEL102
      SUMI11=0D0                                                        MODEL103
      IF(KEYBIN.EQ.1 .AND. VV.GT.VLIM1) THEN                            MODEL104
      DO  80 JPH=1,NPHOX                                                MODEL105
        DO 50 K=1,4                                                     MODEL106
   50   XPH1(K)=XPHOT(JPH,K)                                            MODEL107
        CALL SFACH0(P1,P2,XPH1,SFACJ)                                   MODEL108
        SFACX(JPH) = SFACJ                                              MODEL109
        CALL NDIST1(XX,P1,P2,YF1,YF2,XPH1,DIST,DXLI1)                   MODEL110
        DIST11=  DIST*(1D0+DXLI1)*(1+DELF1)                             MODEL111
        DIST10=  DIST                                                   MODEL112
        DISI11=  DIST*(1D0+DXLI1)                                       MODEL113
        IF(ICONT.LE.ICLIM) CALL NTEST1(XX,P1,P2,YF1,YF2,XPH1)           MODEL114
C ...BETX contains virtual final state corr. while BETI does not        MODEL115
c;;;; in O(alf1) factor 1+defl1 helps factorization                     MODEL116
        BETX10(JPH) = (DIST10 -BETA00*SFACJ )*(1+DELF1)                 MODEL117
        BETX11(JPH) =  DIST11 -BETA01*SFACJ                             MODEL118
        SUMX10      =  SUMX10 +BETX10(JPH) /SFACJ                       MODEL119
        SUMX11      =  SUMX11 +BETX11(JPH) /SFACJ                       MODEL120
        BETI10(JPH) =  DIST10 -BETA00*SFACJ                             MODEL121
        BETI11(JPH) =  DISI11 -BETI01*SFACJ                             MODEL122
        SUMI11      =  SUMI11 +BETI11(JPH) /SFACJ                       MODEL123
   80   CONTINUE                                                        MODEL124
      ELSE                                                              MODEL125
        DO 90 JPH=1,NPHOX                                               MODEL126
        SFACX(JPH)  = -1D0                                              MODEL127
        BETX10(JPH) =  0D0                                              MODEL128
        BETX11(JPH) =  0D0                                              MODEL129
        BETI10(JPH) =  0D0                                              MODEL130
        BETI11(JPH) =  0D0                                              MODEL131
   90   CONTINUE                                                        MODEL132
      ENDIF                                                             MODEL133
C ...FINAL state - beta1                                                MODEL134
      SUMY10=0D0                                                        MODEL135
      SUMY11=0D0                                                        MODEL136
      IF(KEYBFI.EQ.1 .AND. UU.GT.VLIM1) THEN                            MODEL137
      DO 120 JPH=1,NPHOY                                                MODEL138
        DO 115 K=1,4                                                    MODEL139
C note minus sign here!!!!                                              MODEL140
  115   XPH1(K)=-YPHOT(JPH,K)                                           MODEL141
        CALL SFACH0(YF1,YF2,XPH1,SFACJ)                                 MODEL142
        SFACY(JPH) = SFACJ                                              MODEL143
        CALL FDIST1(XX,P1,P2,YF1,YF2,XPH1,DIST,DYLF1)                   MODEL144
        DIST11=  DIST*(1D0+DYLF1)*(1+DELI1)                             MODEL145
        DIST10=  DIST                                                   MODEL146
        IF(ICONT.LE.ICLIM) CALL NTEST1(XX,YF1,YF2,P1,P2,XPH1)           MODEL147
C ...BETY comprises initial state virtual corrections!                  MODEL148
ccc;;; in O(alf1) factor 1+deli1 helps factorization                    MODEL149
        BETY10(JPH) = (DIST10 -BETA00*SFACJ  )*(1D0+DELI1)              MODEL150
        BETY11(JPH) =  DIST11 -BETA01*SFACJ                             MODEL151
        SUMY10      =  SUMY10 +BETY10(JPH) /SFACJ                       MODEL152
        SUMY11      =  SUMY11 +BETY11(JPH) /SFACJ                       MODEL153
        BETF10(JPH) =  DIST10 -BETA00*SFACJ                             MODEL154
        BETF11(JPH) =  DISI11 -BETF01*SFACJ                             MODEL155
  120   CONTINUE                                                        MODEL156
      ELSE                                                              MODEL157
        DO 125 JPH=1,NPHOY                                              MODEL158
        SFACY(JPH)  = -1D0                                              MODEL159
        BETY10(JPH) =  0D0                                              MODEL160
        BETY11(JPH) =  0D0                                              MODEL161
  125   CONTINUE                                                        MODEL162
      ENDIF                                                             MODEL163
                                                                        MODEL164
C ...BETA2...BETA2...BETA2...BETA2...                                   MODEL165
C contributions from beta2, pure INITIAL state                          MODEL166
      SUMXX2=0D0                                                        MODEL167
      IF(KEYBIN.EQ.1 .AND. VV.GT.VLIM2) THEN                            MODEL168
      DO 200 JPH2=2,NPHOX                                               MODEL169
      DO 200 JPH1=1,JPH2-1                                              MODEL170
         DO 150 K=1,4                                                   MODEL171
            XPH1(K)=XPHOT(JPH1,K)                                       MODEL172
  150       XPH2(K)=XPHOT(JPH2,K)                                       MODEL173
         CALL NDIST2(XX,P1,P2,YF1,YF2,XPH1,XPH2,DIST2)                  MODEL174
         IF(ICONT.LE.ICLIM) CALL NTEST2(XX,P1,P2,YF1,YF2,XPH1,XPH2)     MODEL175
         BETA2 = DIST2 -BETA00*SFACX(JPH1)*SFACX(JPH2)                  MODEL176
ccc  $          -BETX10(JPH1)*SFACX(JPH2) -BETX10(JPH2)*SFACX(JPH1)     MODEL177
     $          -BETI10(JPH1)*SFACX(JPH2) -BETI10(JPH2)*SFACX(JPH1)     MODEL178
         SUMXX2=SUMXX2 +BETA2 /SFACX(JPH1)/SFACX(JPH2)                  MODEL179
         BETXX20(JPH1,JPH2)=BETA2                                       MODEL180
  200    CONTINUE                                                       MODEL181
      ELSE                                                              MODEL182
      DO 205 JPH2=2,NPHOX                                               MODEL183
      DO 205 JPH1=1,NPHOX                                               MODEL184
         BETXX20(JPH1,JPH2)= 0D0                                        MODEL185
  205 CONTINUE                                                          MODEL186
      ENDIF                                                             MODEL187
C                                                                       MODEL188
C contributions from beta2, pure FINAL state                            MODEL189
      SUMYY2=0D0                                                        MODEL190
      IF(KEYBFI.EQ.1 .AND. UU.GT.VLIM2) THEN                            MODEL191
      DO 220 JPH2=2,NPHOY                                               MODEL192
      DO 220 JPH1=1,JPH2-1                                              MODEL193
         DO 218 K=1,4                                                   MODEL194
C note minus sign here!!!!                                              MODEL195
            XPH1(K)=-YPHOT(JPH1,K)                                      MODEL196
  218       XPH2(K)=-YPHOT(JPH2,K)                                      MODEL197
         CALL FDIST2(XX,P1,P2,YF1,YF2,XPH1,XPH2,DIST2)                  MODEL198
         IF(ICONT.LE.ICLIM) CALL NTEST2(XX,P1,P2,YF1,YF2,XPH1,XPH2)     MODEL199
         BETA2 = DIST2 -BETA00*SFACY(JPH1)*SFACY(JPH2)                  MODEL200
ccc  $          -BETY10(JPH1)*SFACY(JPH2) -BETY10(JPH2)*SFACY(JPH1)     MODEL201
     $          -BETF10(JPH1)*SFACY(JPH2) -BETF10(JPH2)*SFACY(JPH1)     MODEL202
         SUMYY2=SUMYY2 +BETA2 /SFACY(JPH1)/SFACY(JPH2)                  MODEL203
         BETYY20(JPH1,JPH2)=BETA2                                       MODEL204
  220    CONTINUE                                                       MODEL205
      ELSE                                                              MODEL206
      DO 222 JPH2=2,NPHOY                                               MODEL207
      DO 222 JPH1=1,NPHOY                                               MODEL208
         BETYY20(JPH1,JPH2)= 0D0                                        MODEL209
  222 CONTINUE                                                          MODEL210
      ENDIF                                                             MODEL211
C contributions from beta2, INITIAL/FINAL state                         MODEL212
C or in other terminology beta1_init*beta1_final                        MODEL213
      SUMXY2=0D0                                                        MODEL214
      IF(KEYBIN*KEYBFI.EQ.1 .AND. VV.GT.VLIM1.AND.UU.GT.VLIM1) THEN     MODEL215
      DO 240 JPH1=1,NPHOX                                               MODEL216
      DO 240 JPH2=1,NPHOY                                               MODEL217
         DO 230 K=1,4                                                   MODEL218
            XPH1(K)= XPHOT(JPH1,K)                                      MODEL219
C note minus sign here!!!!                                              MODEL220
  230       XPH2(K)=-YPHOT(JPH2,K)                                      MODEL221
         CALL NFDIST(XX,P1,P2,YF1,YF2,XPH1,XPH2,DIST2)                  MODEL222
         BETA2 = DIST2 -BETA00*SFACX(JPH1)*SFACY(JPH2)                  MODEL223
ccc  $          -BETX10(JPH1)*SFACY(JPH2) -BETY10(JPH2)*SFACX(JPH1)     MODEL224
     $          -BETI10(JPH1)*SFACY(JPH2) -BETF10(JPH2)*SFACX(JPH1)     MODEL225
         SUMXY2=SUMXY2 +BETA2 /SFACX(JPH1)/SFACY(JPH2)                  MODEL226
         BETXY20(JPH1,JPH2)=BETA2                                       MODEL227
  240    CONTINUE                                                       MODEL228
      ELSE                                                              MODEL229
      DO 245 JPH1=1,NPHOX                                               MODEL230
      DO 245 JPH2=1,NPHOY                                               MODEL231
         BETXY20(JPH1,JPH2)= 0D0                                        MODEL232
  245 CONTINUE                                                          MODEL233
      ENDIF                                                             MODEL234
C                                                                       MODEL235
C ...Remnant of the YFS formfactor for the final/final state            MODEL236
      CALL GIFYFS( P1, P2,FORINI)                                       MODEL237
      CALL GIFYFS(YF1,YF2,FORFIN)                                       MODEL238
      IF(KEYBIN.EQ.0) FORINI=1D0                                        MODEL239
      IF(KEYBFI.EQ.0) FORFIN=1D0                                        MODEL240
      FYFS = FORINI*FORFIN                                              MODEL241
C                                                                       MODEL242
C ...And the rejection weights = (new.distr/crude.distr)                MODEL243
C ========== INITIAL + FINAL =================                          MODEL244
C All beta's ---------------------------------                          MODEL245
      WTSET(71) =   FYFS*BETA00/DISCRU                                  MODEL246
      WTSET(72) =   FYFS*(BETA01+SUMX10+SUMY10+SUMXY2)/DISCRU           MODEL247
      WTSET(73) =   FYFS*                                               MODEL248
     &    (BETA02+SUMX11+SUMY11+SUMXX2 +SUMXY2 +SUMYY2 )/DISCRU         MODEL249
C First order, individual beta's -------------                          MODEL250
      WTSET(80) =   FYFS*BETA01/DISCRU                                  MODEL251
      WTSET(81) =   FYFS*(SUMX10+SUMY10)/DISCRU                         MODEL252
      WTSET(82) =   FYFS*(SUMX10)/DISCRU                                MODEL253
      WTSET(83) =   FYFS*(SUMY10)/DISCRU                                MODEL254
      WTSET(84) =   FYFS*(SUMXY2)/DISCRU                                MODEL255
C Second order, individual beta's ------------                          MODEL256
      WTSET(90) =   FYFS*BETA02/DISCRU                                  MODEL257
      WTSET(91) =   FYFS*(SUMX11+SUMY11)/DISCRU                         MODEL258
      WTSET(92) =   FYFS*(SUMXX2+SUMXY2+SUMYY2)/DISCRU                  MODEL259
      WTSET(93) =   FYFS*(SUMX11)/DISCRU                                MODEL260
      WTSET(94) =   FYFS*(SUMY11)/DISCRU                                MODEL261
      WTSET(95) =   FYFS*(SUMXX2)/DISCRU                                MODEL262
      WTSET(96) =   FYFS*(SUMXY2)/DISCRU                                MODEL263
      WTSET(97) =   FYFS*(SUMYY2)/DISCRU                                MODEL264
C ========= INITIAL STATE ALONE ==============                          MODEL265
C All beta's ---------------------------------                          MODEL266
      WTSET( 1) =   FORINI*BETA00/DISCRU                                MODEL267
      WTSET( 2) =   FORINI*(BETI01+SUMX10)/DISCRU                       MODEL268
      WTSET( 3) =   FORINI*(BETI02+SUMI11+SUMXX2)/DISCRU                MODEL269
C First order, individual beta's -------------                          MODEL270
      WTSET(10) =   FORINI*BETI01/DISCRU                                MODEL271
      WTSET(11) =   FORINI*SUMX10/DISCRU                                MODEL272
C Second order, individual beta's ------------                          MODEL273
      WTSET(20) =   FORINI*BETI02/DISCRU                                MODEL274
      WTSET(21) =   FORINI*SUMI11/DISCRU                                MODEL275
      WTSET(22) =   FORINI*SUMXX2/DISCRU                                MODEL276
C     ============================================                      MODEL277
C ...Model weight (the best)                                            MODEL278
      WTMDL     =   WTSET(73)                                           MODEL279
C ...tests on weights                                                   MODEL280
CC    IF(ICONT.LE.ICLIM2) CALL DUMPBT(IOUT)                             MODEL281
CC    IF(ICONT.LE.ICLIM2) CALL DUMPBT(   6)                             MODEL282
c      IF(ICONT.LE.ICLIM2.AND.NPHOY.GT.3) CALL DUMPBT(IOUT)             MODEL283
c      IF(ICONT.LE.ICLIM2.AND.NPHOY.GT.3) CALL DUMPBT(   6)             MODEL284
  770 CONTINUE                                                          MODEL285
      IF(KEYBIN.EQ.1) CALL MONIN(0)                                     MODEL286
      PAR1  = WTMAX                                                     MODEL287
      PAR2  = WTMDL                                                     MODEL288
      ELSE                                                              MODEL289
C     ================================================================= MODEL290
C     =====================FINAL WEIGHT REPORT========================= MODEL291
C     ================================================================= MODEL292
      IF(KEYBIN.EQ.1) CALL MONIN(1)                                     MODEL293
      IF(KEYBIN.EQ.0.AND.KEYBFI.EQ.1) CALL MONIF                        MODEL294
      ENDIF                                                             MODEL295
C     =====                                                             MODEL296
      END                                                               MODEL297
      SUBROUTINE MONIF                                                  MONIF  2
C     ****************                                                  MONIF  3
C  Monitornig weights and x-sections for the FINAL state bremss.        MONIF  4
C  Second, first and zero order X-sections                              MONIF  5
C     ***********************************                               MONIF  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               MONIF  7
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      COMMON / WGTALL / WTMOD,WTCRU1,WTCRU2,WTSET(100)                  MONIF 11
      SAVE / CMONIT/,/ WGTALL /,/ INOUT  /,/ BXFMTS /                   MONIF 12
      SAVE IDYFS                                                        MONIF 13
C --------------------------------------------------------------------  MONIF 14
C X-sctions in Born units (for the moment)                              MONIF 15
      XKARL = 1                                                         MONIF 16
      ERKARL= 0                                                         MONIF 17
      IDYFS = 0                                                         MONIF 18
      CALL GMONIT(1,IDYFS+73,DUMM1,DUMM2,DUMM3)                         MONIF 19
      XS03   =  XKARL*AVERWT                                            MONIF 20
      DXS03  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 21
      CALL GMONIT(1,IDYFS+72,DUMM1,DUMM2,DUMM3)                         MONIF 22
      XS02   =  XKARL*AVERWT                                            MONIF 23
      DXS02  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 24
      CALL GMONIT(1,IDYFS+71,DUMM1,DUMM2,DUMM3)                         MONIF 25
      XS01   =  XKARL*AVERWT                                            MONIF 26
      DXS01  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 27
      CALL GMONIT(1,IDYFS+75,DUMM1,DUMM2,DUMM3)                         MONIF 28
      XS05   =  XKARL*AVERWT                                            MONIF 29
      DXS05  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 30
      CALL GMONIT(1,IDYFS+74,DUMM1,DUMM2,DUMM3)                         MONIF 31
      XS04   =  XKARL*AVERWT                                            MONIF 32
      DXS04  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 33
C ...BETA CONTRIBUTIONS                                                 MONIF 34
      CALL GMONIT(1,IDYFS+90,DUMM1,DUMM2,DUMM3)                         MONIF 35
      XS20   =  XKARL*AVERWT                                            MONIF 36
      DXS20  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 37
      CALL GMONIT(1,IDYFS+91,DUMM1,DUMM2,DUMM3)                         MONIF 38
      XS21   =  XKARL*AVERWT                                            MONIF 39
      DXS21  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 40
      CALL GMONIT(1,IDYFS+92,DUMM1,DUMM2,DUMM3)                         MONIF 41
      XS22   =  XKARL*AVERWT                                            MONIF 42
      DXS22  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 43
      CALL GMONIT(1,IDYFS+80,DUMM1,DUMM2,DUMM3)                         MONIF 44
      XS10   =  XKARL*AVERWT                                            MONIF 45
      DXS10  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 46
      CALL GMONIT(1,IDYFS+81,DUMM1,DUMM2,DUMM3)                         MONIF 47
      XS11   =  XKARL*AVERWT                                            MONIF 48
      DXS11  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIF 49
C ......................Output window B...............................  MONIF 50
      WRITE(IOUT,BXOPE)                                                 MONIF 51
      WRITE(IOUT,BXTXT) '          MODEL  output - window B'            MONIF 52
      WRITE(IOUT,BXTXT) '          FINAL   state only      '            MONIF 53
      WRITE(IOUT,BXTXT) 'Analytical estimates of X-sections'            MONIF 54
      WRITE(IOUT,BXTXT) 'Units of Born X-section           '            MONIF 55
      PREC = 1D-5                                                       MONIF 56
      YS00 =      BREFKF( 300,PREC)                                     MONIF 57
      YS01 =      BREFKF( 301,PREC)                                     MONIF 58
      YS02 =      BREFKF( 302,PREC)                                     MONIF 59
      WRITE(IOUT,BXL1F) YS02,'X-section','O(alf2)','B1'                 MONIF 60
      WRITE(IOUT,BXL1F) YS01,'X-section','O(alf1)','B2'                 MONIF 61
      WRITE(IOUT,BXL1F) YS00,'X-section','O(alf0)','B3'                 MONIF 62
      WRITE(IOUT,BXL1F) YS02-YS01,'(O(alf2)-O(alf1))','/O(alf1)','B4'   MONIF 63
      WRITE(IOUT,BXL1F) YS01-YS00,'(O(alf1)-O(alf0))','/O(alf0)','B5'   MONIF 64
      YS20 = BREFKF( 320,PREC)                                          MONIF 65
      YS21 = BREFKF( 321,PREC)                                          MONIF 66
      YS22 = BREFKF( 322,PREC)                                          MONIF 67
      YS10 = BREFKF( 310,PREC)                                          MONIF 68
      YS11 = BREFKF( 311,PREC)                                          MONIF 69
      WRITE(IOUT,BXL1F) YS20,'Beta0          ','O(alf2)','B06'          MONIF 70
      WRITE(IOUT,BXL1F) YS21,'     Beta1     ','       ','B07'          MONIF 71
      WRITE(IOUT,BXL1F) YS22,'          Beta2','       ','B08'          MONIF 72
      WRITE(IOUT,BXL1F) YS10,'Beta0          ','O(alf1)','B09'          MONIF 73
      WRITE(IOUT,BXL1F) YS11,'     Beta1     ','       ','B10'          MONIF 74
      WRITE(IOUT,BXCLO)                                                 MONIF 75
C --------------------------------------------------------------------  MONIF 76
C ......................Output window C...............................  MONIF 77
      WRITE(IOUT,BXOPE)                                                 MONIF 78
      WRITE(IOUT,BXTXT) '             MODEL  output - window C'         MONIF 79
      WRITE(IOUT,BXTXT) ' FINAL   State  only'                          MONIF 80
      WRITE(IOUT,BXTXT) 'Comparison of MC and Analytical calc.'         MONIF 81
      WRITE(IOUT,BXTXT) '(MonteCarlo  - Analytical)/Analytical'         MONIF 82
      RS01 = XS01/YS00 -1                                               MONIF 83
      RS02 = XS02/YS01 -1                                               MONIF 84
      RS03 = XS03/YS02 -1                                               MONIF 85
      WRITE(IOUT,BXL2F) RS03,DXS03/YS02,'X-section','O(alf2)','C1'      MONIF 86
      WRITE(IOUT,BXL2F) RS02,DXS02/YS01,'X-section','O(alf1)','C2'      MONIF 87
      WRITE(IOUT,BXL2F) RS01,DXS01/YS00,'X-section','O(alf0)','C3'      MONIF 88
      WRITE(IOUT,BXTXT) 'Beta contributions'                            MONIF 89
      RS20 = XS20/YS20 -1                                               MONIF 90
      RS21 = XS21/YS21 -1                                               MONIF 91
      RS22 = XS22/YS22 -1                                               MONIF 92
      RS10 = XS10/YS10 -1                                               MONIF 93
      RS11 = XS11/YS11 -1                                               MONIF 94
      DRS20 = DXS20/YS20                                                MONIF 95
      DRS21 = DXS21/YS21                                                MONIF 96
      DRS22 = DXS22/YS22                                                MONIF 97
      DRS10 = DXS10/YS10                                                MONIF 98
      DRS11 = DXS11/YS11                                                MONIF 99
      WRITE(IOUT,BXL2F) RS20,DRS20,'Beta0          ','O(alf2)','C04'    MONIF100
      WRITE(IOUT,BXL2F) RS21,DRS21,'     Beta1     ','       ','C05'    MONIF101
      WRITE(IOUT,BXL2F) RS22,DRS22,'          Beta2','       ','C06'    MONIF102
      WRITE(IOUT,BXL2F) RS10,DRS10,'Beta0          ','O(alf1)','C07'    MONIF103
      WRITE(IOUT,BXL2F) RS11,DRS11,'     Beta1     ','       ','C08'    MONIF104
      WRITE(IOUT,BXCLO)                                                 MONIF105
C ...the end of the FINAL-state report..............................    MONIF106
      END                                                               MONIF107
      SUBROUTINE MONIN(MODE)                                            MONIN  2
C     **********************                                            MONIN  3
C  Monitornig weights and x-sections for the initial state bremss.      MONIN  4
C  Auxiliary weights on INITIAL STATE ONLY                              MONIN  5
C  Second, first and zero order X-sections                              MONIN  6
C     ***********************************                               MONIN  7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               MONIN  8
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      COMMON / WGTALL / WTMOD,WTCRU1,WTCRU2,WTSET(100)                  MONIN 12
      SAVE / CMONIT/,/ WGTALL /,/ INOUT  /,/ BXFMTS /                   MONIN 13
      SAVE IDYFS                                                        MONIN 14
                                                                        MONIN 15
      IF(MODE.EQ.-1) THEN                                               MONIN 16
C     ===================                                               MONIN 17
      IDYFS = 0                                                         MONIN 18
      CALL GMONIT(-1,IDYFS+ 1,0D0,1D0,1D0)                              MONIN 19
      CALL GMONIT(-1,IDYFS+ 2,0D0,1D0,1D0)                              MONIN 20
      CALL GMONIT(-1,IDYFS+ 3,0D0,1D0,1D0)                              MONIN 21
      CALL GMONIT(-1,IDYFS+ 4,0D0,1D0,1D0)                              MONIN 22
      CALL GMONIT(-1,IDYFS+ 5,0D0,1D0,1D0)                              MONIN 23
      CALL GMONIT(-1,IDYFS+10,0D0,1D0,1D0)                              MONIN 24
      CALL GMONIT(-1,IDYFS+11,0D0,1D0,1D0)                              MONIN 25
      CALL GMONIT(-1,IDYFS+20,0D0,1D0,1D0)                              MONIN 26
      CALL GMONIT(-1,IDYFS+21,0D0,1D0,1D0)                              MONIN 27
      CALL GMONIT(-1,IDYFS+22,0D0,1D0,1D0)                              MONIN 28
      ELSEIF(MODE.EQ.0) THEN                                            MONIN 29
C     ======================                                            MONIN 30
      WTMAX=2.5D0                                                       MONIN 31
      WTCRUD = WTCRU1*WTCRU2                                            MONIN 32
      CALL GMONIT(0,IDYFS+ 3,WTCRUD*WTSET( 3),WTMAX,0D0)                MONIN 33
      CALL GMONIT(0,IDYFS+ 2,WTCRUD*WTSET( 2),WTMAX,0D0)                MONIN 34
      CALL GMONIT(0,IDYFS+ 1,WTCRUD*WTSET( 1),WTMAX,0D0)                MONIN 35
C ...and differences                                                    MONIN 36
      CALL GMONIT(0,IDYFS+ 5,WTCRUD*(WTSET(3)-WTSET(2)),WTMAX,0D0)      MONIN 37
      CALL GMONIT(0,IDYFS+ 4,WTCRUD*(WTSET(2)-WTSET(1)),WTMAX,0D0)      MONIN 38
C ...Second order beta0,1,2                                             MONIN 39
      CALL GMONIT(0,IDYFS+20,WTCRUD*WTSET(20),WTMAX,0D0)                MONIN 40
      CALL GMONIT(0,IDYFS+21,WTCRUD*WTSET(21),WTMAX,0D0)                MONIN 41
      CALL GMONIT(0,IDYFS+22,WTCRUD*WTSET(22),WTMAX,0D0)                MONIN 42
C ...First order beta0,1                                                MONIN 43
      CALL GMONIT(0,IDYFS+10,WTCRUD*WTSET(10),WTMAX,0D0)                MONIN 44
      CALL GMONIT(0,IDYFS+11,WTCRUD*WTSET(11),WTMAX,0D0)                MONIN 45
      ELSEIF(MODE.EQ.1) THEN                                            MONIN 46
C     ======================                                            MONIN 47
      XKARL  = WTCRU1                                                   MONIN 48
      ERKARL = WTCRU2                                                   MONIN 49
C ........................Output window A...............................MONIN 50
      WRITE(IOUT,BXOPE)                                                 MONIN 51
      WRITE(IOUT,BXTXT) '        MODEL  output - window A '             MONIN 52
      WRITE(IOUT,BXTXT) '  Monte Carlo INITIAL state ONLY '             MONIN 53
      WRITE(IOUT,BXTXT) '           X-sections in R-units '             MONIN 54
      CALL GMONIT(1,IDYFS+ 3,DUMM1,DUMM2,DUMM3)                         MONIN 55
C)))))CALL GMONIT(2,IDYFS+ 3,DUMM1,DUMM2,DUMM3)                         MONIN 56
C     WRITE(2,*) ' YFSMOD, XKARL,AVERWT',XKARL,AVERWT                   MONIN 57
C))))))))                                                               MONIN 58
      XS03   =  XKARL*AVERWT                                            MONIN 59
      DXS03  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 60
      CALL GMONIT(1,IDYFS+ 2,DUMM1,DUMM2,DUMM3)                         MONIN 61
      XS02   =  XKARL*AVERWT                                            MONIN 62
      DXS02  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 63
      CALL GMONIT(1,IDYFS+ 1,DUMM1,DUMM2,DUMM3)                         MONIN 64
      XS01   =  XKARL*AVERWT                                            MONIN 65
      DXS01  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 66
      CALL GMONIT(1,IDYFS+ 5,DUMM1,DUMM2,DUMM3)                         MONIN 67
      XS05   =  XKARL*AVERWT                                            MONIN 68
      DXS05  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 69
      CALL GMONIT(1,IDYFS+ 4,DUMM1,DUMM2,DUMM3)                         MONIN 70
      XS04   =  XKARL*AVERWT                                            MONIN 71
      DXS04  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 72
      WRITE(IOUT,BXL2F) XS03,DXS03,'X-section','O(alf2)',  'A01'        MONIN 73
      WRITE(IOUT,BXL2F) XS02,DXS02,'X-section','O(alf1)',  'A02'        MONIN 74
      WRITE(IOUT,BXL2F) XS01,DXS01,'X-section','O(alf0)',  'A03'        MONIN 75
      IF(XS02.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN 76
     $ XS05/XS02,DXS05/XS02,'(O(alf2)-O(alf1))','/O(alf1)','A04'        MONIN 77
      IF(XS01.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN 78
     $ XS04/XS01,DXS04/XS01,'(O(alf1)-O(alf0))','/O(alf0)','A05'        MONIN 79
C ...Beta contributions absolute                                        MONIN 80
      CALL GMONIT(1,IDYFS+20,DUMM1,DUMM2,DUMM3)                         MONIN 81
      XS20   =  XKARL*AVERWT                                            MONIN 82
      DXS20  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 83
      CALL GMONIT(1,IDYFS+21,DUMM1,DUMM2,DUMM3)                         MONIN 84
      XS21   =  XKARL*AVERWT                                            MONIN 85
      DXS21  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 86
      CALL GMONIT(1,IDYFS+22,DUMM1,DUMM2,DUMM3)                         MONIN 87
      XS22   =  XKARL*AVERWT                                            MONIN 88
      DXS22  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 89
      CALL GMONIT(1,IDYFS+10,DUMM1,DUMM2,DUMM3)                         MONIN 90
      XS10   =  XKARL*AVERWT                                            MONIN 91
      DXS10  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 92
      CALL GMONIT(1,IDYFS+11,DUMM1,DUMM2,DUMM3)                         MONIN 93
      XS11   =  XKARL*AVERWT                                            MONIN 94
      DXS11  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  MONIN 95
      WRITE(IOUT,BXTXT) 'Beta contributions in R-units'                 MONIN 96
      WRITE(IOUT,BXL2F) XS20,DXS20,'Beta0          ','O(alf2)','A06'    MONIN 97
      WRITE(IOUT,BXL2F) XS21,DXS21,'     Beta1     ','       ','A07'    MONIN 98
      WRITE(IOUT,BXL2F) XS22,DXS22,'          Beta2','       ','A08'    MONIN 99
      WRITE(IOUT,BXL2F) XS10,DXS10,'Beta0          ','O(alf1)','A09'    MONIN100
      WRITE(IOUT,BXL2F) XS11,DXS11,'     Beta1     ','       ','A10'    MONIN101
      WRITE(IOUT,BXL2F) XS01,DXS01,'Beta0          ','O(alf0)','A11'    MONIN102
C ...Beta contributions relative                                        MONIN103
      WRITE(IOUT,BXTXT) 'Beta contributions - relative'                 MONIN104
      IF(XS03.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN105
     $ XS20/XS03,DXS20/XS03,'Bet0/(Bet0+1+2)','O(alf2)','A12'           MONIN106
      IF(XS03.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN107
     $ XS21/XS03,DXS21/XS03,'Bet1/(Bet0+1+2)','       ','A13'           MONIN108
      IF(XS03.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN109
     $ XS22/XS03,DXS22/XS03,'Bet2/(Bet0+1+2)','       ','A14'           MONIN110
      IF(XS02.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN111
     $ XS10/XS02,DXS10/XS02,'Bet0/(Bet0+1)','O(alf1)'  ,'A15'           MONIN112
      IF(XS02.NE.0D0) WRITE(IOUT,BXL2F)                                 MONIN113
     $ XS11/XS02,DXS11/XS02,'Bet1/(Bet0+1)','       '  ,'A16'           MONIN114
      WRITE(IOUT,BXCLO)                                                 MONIN115
C --------------------------------------------------------------------  MONIN116
C ......................Output window B...............................  MONIN117
      WRITE(IOUT,BXOPE)                                                 MONIN118
      WRITE(IOUT,BXTXT) '          MODEL  output - window B'            MONIN119
      WRITE(IOUT,BXTXT) '          INITIAL state only cont.'            MONIN120
      WRITE(IOUT,BXTXT) 'Analytical estimates of X-sections'            MONIN121
      PREC = 1D-5                                                       MONIN122
      YS00 =      BREMKF( 300,PREC)                                     MONIN123
      YS01 =      BREMKF( 301,PREC)                                     MONIN124
      YS02 =      BREMKF( 302,PREC)                                     MONIN125
      WRITE(IOUT,BXL1F) YS02,'X-section','O(alf2)','B1'                 MONIN126
      WRITE(IOUT,BXL1F) YS01,'X-section','O(alf1)','B2'                 MONIN127
      WRITE(IOUT,BXL1F) YS00,'X-section','O(alf0)','B3'                 MONIN128
      WRITE(IOUT,BXL1F) YS02-YS01,'(O(alf2)-O(alf1))','/O(alf1)','B4'   MONIN129
      WRITE(IOUT,BXL1F) YS01-YS00,'(O(alf1)-O(alf0))','/O(alf0)','B5'   MONIN130
      YS20 = BREMKF( 320,PREC)                                          MONIN131
      YS21 = BREMKF( 321,PREC)                                          MONIN132
      YS22 = BREMKF( 322,PREC)                                          MONIN133
      YS10 = BREMKF( 310,PREC)                                          MONIN134
      YS11 = BREMKF( 311,PREC)                                          MONIN135
      WRITE(IOUT,BXL1F) YS20,'Beta0          ','O(alf2)','B06'          MONIN136
      WRITE(IOUT,BXL1F) YS21,'     Beta1     ','       ','B07'          MONIN137
      WRITE(IOUT,BXL1F) YS22,'          Beta2','       ','B08'          MONIN138
      WRITE(IOUT,BXL1F) YS10,'Beta0          ','O(alf1)','B09'          MONIN139
      WRITE(IOUT,BXL1F) YS11,'     Beta1     ','       ','B10'          MONIN140
      WRITE(IOUT,BXCLO)                                                 MONIN141
C --------------------------------------------------------------------  MONIN142
C ......................Output window C...............................  MONIN143
      WRITE(IOUT,BXOPE)                                                 MONIN144
      WRITE(IOUT,BXTXT) '             MODEL  output - window C'         MONIN145
      WRITE(IOUT,BXTXT) '                  Initial State  only'         MONIN146
      WRITE(IOUT,BXTXT) 'Comparison of MC and Analytical calc.'         MONIN147
      WRITE(IOUT,BXTXT) '(MonteCarlo  - Analytical)/Analytical'         MONIN148
      RS01 = XS01/YS00 -1                                               MONIN149
      RS02 = XS02/YS01 -1                                               MONIN150
      RS03 = XS03/YS02 -1                                               MONIN151
      WRITE(IOUT,BXL2F) RS03,DXS03/YS02,'X-section','O(alf2)','C1'      MONIN152
      WRITE(IOUT,BXL2F) RS02,DXS02/YS01,'X-section','O(alf1)','C2'      MONIN153
      WRITE(IOUT,BXL2F) RS01,DXS01/YS00,'X-section','O(alf0)','C3'      MONIN154
      WRITE(IOUT,BXTXT) 'Beta contributions'                            MONIN155
      RS20 = XS20/YS20 -1                                               MONIN156
      RS21 = XS21/YS21 -1                                               MONIN157
      RS22 = XS22/YS22 -1                                               MONIN158
      RS10 = XS10/YS10 -1                                               MONIN159
      RS11 = XS11/YS11 -1                                               MONIN160
      DRS20 = DXS20/YS20                                                MONIN161
      DRS21 = DXS21/YS21                                                MONIN162
      DRS22 = DXS22/YS22                                                MONIN163
      DRS10 = DXS10/YS10                                                MONIN164
      DRS11 = DXS11/YS11                                                MONIN165
      WRITE(IOUT,BXL2F) RS20,DRS20,'Beta0          ','O(alf2)','C04'    MONIN166
      WRITE(IOUT,BXL2F) RS21,DRS21,'     Beta1     ','       ','C05'    MONIN167
      WRITE(IOUT,BXL2F) RS22,DRS22,'          Beta2','       ','C06'    MONIN168
      WRITE(IOUT,BXL2F) RS10,DRS10,'Beta0          ','O(alf1)','C07'    MONIN169
      WRITE(IOUT,BXL2F) RS11,DRS11,'     Beta1     ','       ','C08'    MONIN170
      WRITE(IOUT,BXCLO)                                                 MONIN171
C ...the end of the initial-state report..............................  MONIN172
      ELSE                                                              MONIN173
      WRITE(IOUT,*) ' +++++ WRONG MODE IN MONIN'                        MONIN174
      ENDIF                                                             MONIN175
C     =====                                                             MONIN176
      END                                                               MONIN177
      SUBROUTINE DUMPBT(IOUT)                                           DUMPBT 2
C     ***********************                                           DUMPBT 3
C     Prints out information on beta's                                  DUMPBT 4
C     ***********************************                               DUMPBT 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DUMPBT 6
      PARAMETER(NPMX=25)                                                DUMPBT 7
C Spying on weights.........                                            DUMPBT 8
      COMMON / BETSPY / BETA00,BETA01,BETA02,BETI01,BETI02,             DUMPBT 9
     $  BETA10(NPMX),BETA11(NPMX),BETA20(NPMX,NPMX),                    DUMPBT10
     $  SFACX(NPMX),SFACY(NPMX),                                        DUMPBT11
     $  BETX10(NPMX),BETX11(NPMX),BETY10(NPMX),BETY11(NPMX),            DUMPBT12
     $  BETXX20(NPMX,NPMX),BETXY20(NPMX,NPMX),BETYY20(NPMX,NPMX),       DUMPBT13
     $  BETI10(NPMX),BETI11(NPMX),BETI20(NPMX,NPMX),                    DUMPBT14
     $  BETF10(NPMX),BETF11(NPMX),BETF20(NPMX,NPMX)                     DUMPBT15
      SAVE / BETSPY /                                                   DUMPBT16
C ...........                                                           DUMPBT17
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      SAVE / MOMINI /,/ MOMFIN /                                        DUMPBT20
                                                                        DUMPBT21
      WRITE(IOUT,*) '--------------------<DUMBT>----------------------' DUMPBT22
 2000 FORMAT(A30,3F15.8/(5F15.8))                                       DUMPBT23
C ...Beta0                                                              DUMPBT24
      WRITE(IOUT,2000) ' Beta00, Beta01/Beta00, Beta02/Beta00'          DUMPBT25
     & ,BETA00,BETA01/BETA00,BETA02/BETA00                              DUMPBT26
C ...SFACI(i)                                                           DUMPBT27
 2002 FORMAT(A16,4E16.7/(5E16.7))                                       DUMPBT28
      IF(NPHOX.GT.0) WRITE(IOUT,2002) ' SFACX(i) ',(SFACX(I),I=1,NPHOX) DUMPBT29
      IF(NPHOY.GT.0) WRITE(IOUT,2002) ' SFACY(i) ',(SFACY(I),I=1,NPHOY) DUMPBT30
C ...Beta1   INITIAL state ...............                              DUMPBT31
      IF(NPHOX.GT.0) WRITE(IOUT,2000) ' Init. BetX10(i)/Beta00 ',       DUMPBT32
     $  ( BETX10(I)/SFACX(I)/BETA00  ,I=1,NPHOX)                        DUMPBT33
      IF(NPHOX.GT.0) WRITE(IOUT,2000) ' Init. BetX11(i)/Beta00 ',       DUMPBT34
     $  ( BETX11(I)/SFACX(I)/BETA00  ,I=1,NPHOX)                        DUMPBT35
                                                                        DUMPBT36
C ...Beta1   final state ...............                                DUMPBT37
      IF(NPHOY.GT.0) WRITE(IOUT,2000) ' Fin.  BetY10(i)/Beta00 ',       DUMPBT38
     $  ( BETY10(I)/SFACY(I)/BETA00  ,I=1,NPHOY)                        DUMPBT39
      IF(NPHOY.GT.0) WRITE(IOUT,2000) ' Fin.  BetY11(i)/Beta00 ',       DUMPBT40
     $  ( BETY11(I)/SFACY(I)/BETA00  ,I=1,NPHOY)                        DUMPBT41
                                                                        DUMPBT42
C ...Beta2 pure initial                                                 DUMPBT43
      IF(NPHOX.GE.2) THEN                                               DUMPBT44
      WRITE(IOUT,*) ' Init. state BetXX20(i,j)'                         DUMPBT45
      DO 100 J=2,NPHOX                                                  DUMPBT46
      WRITE(IOUT,'(  8F12.8)')                                          DUMPBT47
     $ (BETXX20(I,J)/SFACX(I)/SFACX(J)/BETA00,I=1,J-1)                  DUMPBT48
  100 CONTINUE                                                          DUMPBT49
      ENDIF                                                             DUMPBT50
C ...Beta2 pure final                                                   DUMPBT51
      IF(NPHOY.GE.2) THEN                                               DUMPBT52
      WRITE(IOUT,*) ' Final state BetYY20(i,j)'                         DUMPBT53
      DO 110 J=2,NPHOY                                                  DUMPBT54
      WRITE(IOUT,'(  8F20.16)')                                         DUMPBT55
     $ (BETYY20(I,J)/SFACY(I)/SFACY(J)/BETA00,I=1,J-1)                  DUMPBT56
  110 CONTINUE                                                          DUMPBT57
      ENDIF                                                             DUMPBT58
C ...Beta2 initial/final                                                DUMPBT59
      IF(NPHOX.GE.1 .AND. NPHOY.GE.1) THEN                              DUMPBT60
      WRITE(IOUT,*) ' In/fi state BetXY20(i,j)'                         DUMPBT61
      DO 120 J=1,NPHOY                                                  DUMPBT62
      WRITE(IOUT,'(  8F12.8)')                                          DUMPBT63
     $ (BETXY20(I,J)/SFACX(I)/SFACY(J)/BETA00,I=1,NPHOX)                DUMPBT64
  120 CONTINUE                                                          DUMPBT65
      ENDIF                                                             DUMPBT66
      END                                                               DUMPBT67
      SUBROUTINE NTEST0(QQ,P1,P2,Q1,Q2)                                 NTEST0 2
C     *********************************                                 NTEST0 3
C ...Testing redustion for Beta0                                        NTEST0 4
C     *********************************                                 NTEST0 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NTEST0 6
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 NTEST0 8
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*)                           NTEST0 9
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4)                             NTEST010
      DIMENSION PPR(4),QQR(4),QQ1(4)                                    NTEST011
C                                                                       NTEST012
      WRITE(IOUT,*) '-----------NTEST0---------==========='             NTEST013
      CALL REDUZ0(QQ,Q1,Q2,QR1,QR2)                                     NTEST014
      CALL REDUZ0(QQ,P1,P2,PR1,PR2)                                     NTEST015
      CALL BOSTDQ(1,QQ,QQ,QQ1)                                          NTEST016
      DO 10 K=1,4                                                       NTEST017
      PPR(K)=PR1(K)+PR2(K)-QQ1(K)                                       NTEST018
  10  QQR(K)=QR1(K)+QR2(K)-QQ1(K)                                       NTEST019
      call dumpt(2,' PPR    ',PPR)                                      NTEST020
      call dumpt(2,' QQR    ',QQR)                                      NTEST021
      call dumpt(2,'  PR1   ',PR1)                                      NTEST022
      call dumpt(2,'  PR2   ',PR2)                                      NTEST023
      call dumpt(2,'  QR1   ',QR1)                                      NTEST024
      call dumpt(2,'  QR2   ',QR2)                                      NTEST025
      CALL GTHET0(PR1,QR1,COSTH )                                       NTEST026
      WRITE(IOUT,'(A,3F20.12)') ' COSTH= ',COSTH                        NTEST027
      END                                                               NTEST028
      SUBROUTINE NTEST1(QQ,P1,P2,Q1,Q2,PH)                              NTEST1 2
C     ************************************                              NTEST1 3
C ...Testing reduction for beta1                                        NTEST1 4
C     ************************************                              NTEST1 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NTEST1 6
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 NTEST1 8
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH(*)                     NTEST1 9
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4),PHR(4)                      NTEST110
      DIMENSION PPR(4),QQR(4),PX1(4),PX2(4),QQ1(4),PPX(4)               NTEST111
C                                                                       NTEST112
      WRITE(IOUT,*) '-----------NTEST1---------<<<<<<<<<<<'             NTEST113
      CALL REDUZ0(QQ,Q1,Q2,QR1,QR2)                                     NTEST114
      CALL REDUZ1(QQ,P1,P2,PH,PR1,PR2,PHR)                              NTEST115
      CALL REDUZ0(QQ,P1,P2,PX1,PX2)                                     NTEST116
      CALL BOSTDQ(1,QQ,QQ,QQ1)                                          NTEST117
      DO 10 K=1,4                                                       NTEST118
      PPX(K)=PX1(K)+PX2(K)        -QQ1(K)                               NTEST119
      PPR(K)=PR1(K)+PR2(K)-PHR(K) -QQ1(K)                               NTEST120
  10  QQR(K)=QR1(K)+QR2(K)        -QQ1(K)                               NTEST121
      call dumpt(2,' PPX    ',PPX)                                      NTEST122
      call dumpt(2,' PPR    ',PPR)                                      NTEST123
      call dumpt(2,' QQR    ',QQR)                                      NTEST124
      call dumpt(2,'  PR1   ',PR1)                                      NTEST125
      call dumpt(2,'  PR2   ',PR2)                                      NTEST126
      call dumpt(2,'  PX1   ',PX1)                                      NTEST127
      call dumpt(2,'  PX2   ',PX2)                                      NTEST128
      call dumpt(2,'  QR1   ',QR1)                                      NTEST129
      call dumpt(2,'  QR2   ',QR2)                                      NTEST130
C Single bremsstrahlung Xsection                                        NTEST131
      CALL GSOFA1(P1,P2,PH,GF1,GF2)                                     NTEST132
      CALL GTHET1(PR1,PR2,QR1,COSTH1,COSTH2)                            NTEST133
      CALL SFACH0(P1,P2, PH ,SFACJ)                                     NTEST134
      CALL GTHET0(PX1,QR1,COSTH)                                        NTEST135
      WRITE(IOUT,'(A,3F20.12)') ' PH(4)= ',PH(4)                        NTEST136
      WRITE(IOUT,'(A,3F20.12)') ' COSTH= ',COSTH1-COSTH,COSTH2-COSTH    NTEST137
      WRITE(IOUT,'(A,3F20.12)') ' GF/SF= ',(GF1+GF2)/SFACJ              NTEST138
      END                                                               NTEST139
      SUBROUTINE NTEST2(QQ,P1,P2,Q1,Q2,PH1,PH2)                         NTEST2 2
C     *****************************************                         NTEST2 3
C ...Testing reduction for beta2                                        NTEST2 4
C     ************************************                              NTEST2 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NTEST2 6
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 NTEST2 8
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH1(*),PH2(*)             NTEST2 9
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4),PH1R(4),PH2R(4)             NTEST210
      DIMENSION PPR(4),QQR(4),PX1(4),PX2(4),QQ1(4)                      NTEST211
C                                                                       NTEST212
      WRITE(IOUT,*) '-----------NTEST2---------<<<<<<<<<<<'             NTEST213
      CALL REDUZ0(QQ,Q1,Q2,QR1,QR2)                                     NTEST214
      CALL REDUZ2(QQ,P1,P2,PH1,PH2,PR1,PR2,PH1R,PH2R)                   NTEST215
      CALL BOSTDQ(1,QQ,QQ,QQ1)                                          NTEST216
      DO 10 K=1,4                                                       NTEST217
      PPR(K)=PR1(K)+PR2(K)-PH1R(K)-PH2R(K) -QQ1(K)                      NTEST218
  10  QQR(K)=QR1(K)+QR2(K)                 -QQ1(K)                      NTEST219
      call dumpt(2,' PPR    ',PPR)                                      NTEST220
      call dumpt(2,' QQR    ',QQR)                                      NTEST221
      call dumpt(2,'  PR1   ',PR1)                                      NTEST222
      call dumpt(2,'  PR2   ',PR2)                                      NTEST223
      call dumpt(2,'  QR1   ',QR1)                                      NTEST224
      call dumpt(2,'  QR2   ',QR2)                                      NTEST225
C Single bremsstrahlung Xsection                                        NTEST226
      CALL GSOFA2(P1,P2,PH1,PH2,GF1,GF2)                                NTEST227
      CALL GTHET1(PR1,PR2,QR1,COSTH1,COSTH2)                            NTEST228
      CALL SFACH0(P1,P2, PH1,SFAC1)                                     NTEST229
      CALL SFACH0(P1,P2, PH2,SFAC2)                                     NTEST230
      CALL REDUZ0(QQ,P1,P2,PX1,PX2)                                     NTEST231
      CALL GTHET0(PX1,QR1,COSTH)                                        NTEST232
      WRITE(IOUT,'(A,3F20.12)') 'PHi(4)= ',PH1(4),PH2(4)                NTEST233
      WRITE(IOUT,'(A,3F20.12)') ' COSTH= ',COSTH1-COSTH,COSTH2-COSTH    NTEST234
      WRITE(IOUT,'(A,3F20.12)') ' GF/SF= ',(GF1+GF2)/SFAC1/SFAC2        NTEST235
      END                                                               NTEST236
      SUBROUTINE GIFYFS(P1,P2,FYFS)                                     GIFYFS 2
C     *****************************                                     GIFYFS 3
C YFS formfactor                                                        GIFYFS 4
C     *****************************                                     GIFYFS 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GIFYFS 6
      DIMENSION P1(*),P2(*)                                             GIFYFS 7
      PARAMETER( PI=3.1415926535897932D0, ALFINV=137.03604D0)           GIFYFS 8
      PARAMETER( ALF1=1D0/ALFINV/PI)                                    GIFYFS 9
                                                                        GIFYFS10
      SVAR   = (P1(4)+P2(4))**2-(P1(3)+P2(3))**2                        GIFYFS11
     $        -(P1(2)+P2(2))**2-(P1(1)+P2(1))**2                        GIFYFS12
      AMS    = P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                      GIFYFS13
      BILG  =  DLOG(SVAR/AMS)                                           GIFYFS14
      BETA  =  2*ALF1*(BILG-1)                                          GIFYFS15
      DELB  =  BETA/4 + ALF1*( -.5D0  +PI**2/3D0)                       GIFYFS16
      FYFS  =  EXP(DELB)                                                GIFYFS17
      END                                                               GIFYFS18
      SUBROUTINE NCRUDE(QQ,DISCRU)                                      NCRUDE 2
C     ****************************                                      NCRUDE 3
C provides crude distribution generated in KARLUD                       NCRUDE 4
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NCRUDE 5
      DIMENSION QQ(4)                                                   NCRUDE 6
      SVAR1  =  QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                     NCRUDE 7
C---      DISCRU =  BORNV(SVAR1,0D0)*4D0/3D0                            NCRUDE 8
      DISCRU =  BORNY(SVAR1)*4D0/3D0                                    NCRUDE 9
      END                                                               NCRUDE10
      SUBROUTINE NDIST0(XX,P1,P2,Q1,Q2,ANDIS,DELI1,DELI2,DELF1,DELF2)   NDIST0 2
C     ***************************************************************   NDIST0 3
C Provides elements of beta0,                                           NDIST0 4
C for transparency reasons the full reduction of momenta is done.       NDIST0 5
C     ***********************************                               NDIST0 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NDIST0 7
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      SAVE   / KEYYFS /                                                 NDIST0 9
      DIMENSION XX(*),P1(*),P2(*),Q1(*),Q2(*)                           NDIST010
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4)                             NDIST011
C                                                                       NDIST012
      CALL REDUZ0(XX,P1,P2,PR1,PR2)                                     NDIST013
      CALL REDUZ0(XX,Q1,Q2,QR1,QR2)                                     NDIST014
      CALL GTHET0(PR1,QR1,COSTH1)                                       NDIST015
      COSTH  = (PR1(1)*QR1(1) +PR1(2)*QR1(2) +PR1(3)*QR1(3))            NDIST016
     $            /SQRT((QR1(1)**2 +QR1(2)**2 +QR1(3)**2)               NDIST017
     $                 *(PR1(1)**2 +PR1(2)**2 +PR1(3)**2))              NDIST018
      SVAR1  = XX(4)**2-XX(3)**2-XX(2)-XX(1)**2                         NDIST019
      ANDIS  = BORNV (SVAR1,COSTH )                                     NDIST020
      CALL BVIRT0(P1,P2,DELI1,DELI2)                                    NDIST021
      CALL BVIRT0(Q1,Q2,DELF1,DELF2)                                    NDIST022
C ...Initial/final state bremsstrahlung switches                        NDIST023
      KEYBIN  = MOD(KEYBRM,10)                                          NDIST024
      KEYBFI  = MOD(KEYBRM,100)/10                                      NDIST025
      DELI1   = DELI1*KEYBIN                                            NDIST026
      DELI2   = DELI2*KEYBIN                                            NDIST027
      DELF1   = DELF1*KEYBFI                                            NDIST028
      DELF2   = DELF2*KEYBFI                                            NDIST029
      END                                                               NDIST030
      SUBROUTINE NDIST1(QQ,P1,P2,Q1,Q2,PH,DIST,DELI1)                   NDIST1 2
C     *********************************** ***********                   NDIST1 3
C Provides single bremsstrahlung distribution, INITIAL STATE            NDIST1 4
C INPUT:  P1,P2,Q1,Q2,PH, four momenta                                  NDIST1 5
C OUTPUT:                                                               NDIST1 6
C         DIST           is first order result, exact.                  NDIST1 7
C         DISI*(1+DELI1) is second erder LL+NLL result                  NDIST1 8
C     ***********************************                               NDIST1 9
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NDIST110
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      SAVE   / KEYYFS /                                                 NDIST112
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH(*)                     NDIST113
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4),PHR(4)                      NDIST114
C                                                                       NDIST115
      CALL REDUZ1(QQ,P1,P2,PH,PR1,PR2,PHR)                              NDIST116
      CALL REDUZ0(QQ,Q1,Q2,QR1,QR2)                                     NDIST117
C Single bremsstrahlung Xsection                                        NDIST118
      CALL GSOFA1(P1,P2,PH,GF1,GF2)                                     NDIST119
      CALL GTHET1(PR1,PR2,QR1,COSTH1,COSTH2)                            NDIST120
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       NDIST121
      ANDI11= BORNV(SVAR1,COSTH1)                                       NDIST122
      ANDI12= BORNV(SVAR1,COSTH2)                                       NDIST123
      DIST  =  GF1*ANDI11+ GF2*ANDI12                                   NDIST124
C Virtual correction in the second order case (K-factor style)          NDIST125
      CALL BVIRT1(P1,P2,PH,DELI1)                                       NDIST126
C ...Initial/final state bremsstrahlung switches                        NDIST127
      KEYBIN  = MOD(KEYBRM,10)                                          NDIST128
      DELI1   = DELI1*KEYBIN                                            NDIST129
      END                                                               NDIST130
      SUBROUTINE FDIST1(QQ,P1,P2,Q1,Q2,PH,DIST,DELF1)                   FDIST1 2
C     ***********************************************                   FDIST1 3
C Provides FIRST ORDER single FINAL state bremsstrahlung distribution   FDIST1 4
C INPUT:  QQ,P1,P2,Q1,Q2,PH, four momenta                               FDIST1 5
C OUTPUT:                                                               FDIST1 6
C         DIST           is first order result, exact.                  FDIST1 7
C         DIST*(1+DELF1) is scond order result, LL + NLL                FDIST1 8
C     ***********************************                               FDIST1 9
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               FDIST110
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH(*)                     FDIST111
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      SAVE   / KEYYFS /                                                 FDIST113
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4),PHR(4)                      FDIST114
C                                                                       FDIST115
      CALL REDUZ1(QQ,Q1,Q2,PH,QR1,QR2,PHR)                              FDIST116
      CALL REDUZ0(QQ,P1,P2,PR1,PR2)                                     FDIST117
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       FDIST118
C Infrared factor from reduced momenta                                  FDIST119
C Single bremsstrahlung Xsection                                        FDIST120
      CALL GSFIN1(Q1,Q2,PH,GF1,GF2)                                     FDIST121
      CALL GTHET1(QR1,QR2,PR1,COSTH1,COSTH2)                            FDIST122
      ANDI11= BORNV(SVAR1,COSTH1)                                       FDIST123
      ANDI12= BORNV(SVAR1,COSTH2)                                       FDIST124
      DIST  = GF1*ANDI11+ GF2*ANDI12                                    FDIST125
C Virtual correction in the second order case (K-factor style)          FDIST126
      CALL BVIRF1(Q1,Q2,PH,DELF1)                                       FDIST127
C ...Initial/final state bremsstrahlung switches                        FDIST128
      KEYBFI  = MOD(KEYBRM,100)/10                                      FDIST129
      DELF1   = DELF1*KEYBFI                                            FDIST130
      END                                                               FDIST131
      SUBROUTINE GSFIN1(P1,P2,PH,F1,F2)                                 GSFIN1 2
C     *********************************                                 GSFIN1 3
C Final state now! but P <=> replacement kept                           GSFIN1 4
C CALCULATES INGREDIENTS FOR REAL SINGLE PHOTON DIFF. XSECTION          GSFIN1 5
C     *****************************************                         GSFIN1 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GSFIN1 7
      DIMENSION PH(*),P1(*),P2(*)                                       GSFIN1 8
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          GSFIN1 9
      PK1= P1(4)*PH(4)-P1(1)*PH(1)-P1(2)*PH(2)-P1(3)*PH(3)              GSFIN110
      PK2= P2(4)*PH(4)-P2(1)*PH(1)-P2(2)*PH(2)-P2(3)*PH(3)              GSFIN111
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              GSFIN112
C                                                                       GSFIN113
      BB =  ABS(PK2)/PP                                                 GSFIN114
      AA =  ABS(PK1)/PP                                                 GSFIN115
      A  = AA/(1 +AA+BB)                                                GSFIN116
      B  = BB/(1 +AA+BB)                                                GSFIN117
      SFAC1  =  2D0*PP/PK1/PK2                                          GSFIN118
      AM = AM2/(2D0*PP)                                                 GSFIN119
      WWM= 1D0-AM*2D0*(1D0-A)*(1D0-B)/((1D0-A)**2+(1D0-B)**2)*(A/B+B/A) GSFIN120
      F1   = 0.5D0*(1D0-A)**2*WWM *SFAC1                                GSFIN121
      F2   = 0.5D0*(1D0-B)**2*WWM *SFAC1                                GSFIN122
      END                                                               GSFIN123
      SUBROUTINE NDIST2(QQ,P1,P2,Q1,Q2,PH1,PH2,DIST2)                   NDIST2 2
C     ***********************************************                   NDIST2 3
C Provides double bremsstrahlung distribution - INITIAL state brem.     NDIST2 4
C INPUT:  P1,P2,Q1,Q2,PH1,PH2, four momenta                             NDIST2 5
C OUTPUT: DIST2     double bremsstrahlung distribution                  NDIST2 6
C     ***********************************                               NDIST2 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NDIST2 8
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH1(*),PH2(*)             NDIST2 9
      DIMENSION PR1(4),PR2(4),PH1R(4),PH2R(4),QR1(4),QR2(4)             NDIST210
                                                                        NDIST211
      CALL REDUZ2(QQ,P1,P2,PH1,PH2,PR1,PR2,PH1R,PH2R)                   NDIST212
      CALL REDUZ0(QQ,Q1,Q2,QR1,QR2)                                     NDIST213
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       NDIST214
C infrared factors from reduced momenta                                 NDIST215
C double bremsstrahlung Xsect in next-to-leading log approx.            NDIST216
      CALL GSOFA2(P1,P2,PH1,PH2,GF1,GF2)                                NDIST217
      CALL GTHET1(PR1,PR2,QR1,COSTH1,COSTH2)                            NDIST218
      ANDI11= BORNV(SVAR1,COSTH1)                                       NDIST219
      ANDI12= BORNV(SVAR1,COSTH2)                                       NDIST220
      DIST2 =   GF1*ANDI11+   GF2*ANDI12                                NDIST221
      END                                                               NDIST222
      SUBROUTINE HSOFA2(P1,P2,PH1,PH2,F1,F2)                            HSOFA2 2
C     **************************************                            HSOFA2 3
C OLD VERSION                                                           HSOFA2 4
C CALCULATES INGREDIENTS FOR REAL DOUBLE PHOTON DIFF. XSECTION          HSOFA2 5
C     *****************************************                         HSOFA2 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               HSOFA2 7
      DIMENSION PH1(*),PH2(*),P1(*),P2(*)                               HSOFA2 8
C                                                                       HSOFA2 9
      WM (A  )=     (1D0-A)**2                                          HSOFA210
      WMS(A,B)=     ((1D0-A)**2+(1D0-B)**2)                             HSOFA211
      WWM(A,B)=                                                         HSOFA212
     $   1D0-AM*2D0*(1D0-A)*(1D0-B)/((1D0-A)**2+(1D0-B)**2)*(A/B+B/A)   HSOFA213
C                                                                       HSOFA214
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              HSOFA215
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          HSOFA216
      AM = AM2/(2D0*PP)                                                 HSOFA217
      B1 = (P2(4)*PH1(4)-P2(1)*PH1(1)-P2(2)*PH1(2)-P2(3)*PH1(3))/PP     HSOFA218
      A1 = (P1(4)*PH1(4)-P1(1)*PH1(1)-P1(2)*PH1(2)-P1(3)*PH1(3))/PP     HSOFA219
      B2 = (P2(4)*PH2(4)-P2(1)*PH2(1)-P2(2)*PH2(2)-P2(3)*PH2(3))/PP     HSOFA220
      A2 = (P1(4)*PH2(4)-P1(1)*PH2(1)-P1(2)*PH2(2)-P1(3)*PH2(3))/PP     HSOFA221
      SFAC1  =  2D0/(PP*A1*B1)*WWM(A1,B1)                               HSOFA222
      SFAC2  =  2D0/(PP*A2*B2)*WWM(A2,B2)                               HSOFA223
      A1P= A1/(1D0-A2)                                                  HSOFA224
      B1P= B1/(1D0-B2)                                                  HSOFA225
      A2P= A2/(1D0-A1)                                                  HSOFA226
      B2P= B2/(1D0-B1)                                                  HSOFA227
      IF((A1+B1).GT.(A2+B2)) THEN                                       HSOFA228
        X1=WM (A1   )*WMS(A2P,B2P) +WM (A1P    )*WMS(A2,B2)             HSOFA229
        X2=WM (   B1)*WMS(A2P,B2P) +WM (    B1P)*WMS(A2,B2)             HSOFA230
      ELSE                                                              HSOFA231
        X1=WM (A2   )*WMS(A1P,B1P) +WM (A2P    )*WMS(A1,B1)             HSOFA232
        X2=WM (   B2)*WMS(A1P,B1P) +WM (    B2P)*WMS(A1,B1)             HSOFA233
      ENDIF                                                             HSOFA234
      F1 = X1*SFAC1*SFAC2/8D0                                           HSOFA235
      F2 = X2*SFAC1*SFAC2/8D0                                           HSOFA236
      END                                                               HSOFA237
      SUBROUTINE GSOFA2(P1,P2,PH1,PH2,F1,F2)                            GSOFA2 2
C     **************************************                            GSOFA2 3
C NEW VERSION BY ELA WAS                                                GSOFA2 4
C CALCULATES INGREDIENTS FOR REAL DOUBLE PHOTON DIFF. XSECTION          GSOFA2 5
C     *****************************************                         GSOFA2 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GSOFA2 7
      DIMENSION PH1(*),PH2(*),P1(*),P2(*)                               GSOFA2 8
C                                                                       GSOFA2 9
      WM (A  )=     (1D0-A)**2                                          GSOFA210
      WMS(A,B)=     ((1D0-A)**2+(1D0-B)**2)                             GSOFA211
      WWM(A,B)=                                                         GSOFA212
     $   1D0-AM*2D0*(1D0-A)*(1D0-B)/((1D0-A)**2+(1D0-B)**2)*(A/B+B/A)   GSOFA213
C                                                                       GSOFA214
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              GSOFA215
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          GSOFA216
      AM = AM2/(2D0*PP)                                                 GSOFA217
      B1 = (P2(4)*PH1(4)-P2(1)*PH1(1)-P2(2)*PH1(2)-P2(3)*PH1(3))/PP     GSOFA218
      A1 = (P1(4)*PH1(4)-P1(1)*PH1(1)-P1(2)*PH1(2)-P1(3)*PH1(3))/PP     GSOFA219
      B2 = (P2(4)*PH2(4)-P2(1)*PH2(1)-P2(2)*PH2(2)-P2(3)*PH2(3))/PP     GSOFA220
      A2 = (P1(4)*PH2(4)-P1(1)*PH2(1)-P1(2)*PH2(2)-P1(3)*PH2(3))/PP     GSOFA221
      SFAC1  =  2D0/(PP*A1*B1)*WWM(A1,B1)                               GSOFA222
      SFAC2  =  2D0/(PP*A2*B2)*WWM(A2,B2)                               GSOFA223
      A1P= A1/(1D0-A2)                                                  GSOFA224
      B1P= B1/(1D0-B2)                                                  GSOFA225
      A2P= A2/(1D0-A1)                                                  GSOFA226
      B2P= B2/(1D0-B1)                                                  GSOFA227
      IF((A1+B1).GT.(A2+B2)) THEN                                       GSOFA228
        X1=WM (A1   )*WMS(A2P,B2P) +WM (A1P    )*WMS(A2,B2)             GSOFA229
        X2=WM (   B1)*WMS(A2P,B2P) +WM (    B1P)*WMS(A2,B2)             GSOFA230
      ELSE                                                              GSOFA231
        X1=WM (A2   )*WMS(A1P,B1P) +WM (A2P    )*WMS(A1,B1)             GSOFA232
        X2=WM (   B2)*WMS(A1P,B1P) +WM (    B2P)*WMS(A1,B1)             GSOFA233
      ENDIF                                                             GSOFA234
      F1 = X1*SFAC1*SFAC2/8D0                                           GSOFA235
      F2 = X2*SFAC1*SFAC2/8D0                                           GSOFA236
C.. correction ELA WAS november 1989................................    GSOFA237
C.. this correction reconstructs properly double collinear limit        GSOFA238
C.. and affects below photon-fermion angle  <0.1 amel/ene               GSOFA239
      SFAC1  =  2D0/(PP*A1*B1)                                          GSOFA240
      SFAC2  =  2D0/(PP*A2*B2)                                          GSOFA241
      WWM1=1D0-WWM(A1,B1)                                               GSOFA242
      WWM2=1D0-WWM(A2,B2)                                               GSOFA243
      DELT=(B2**2*A1**2+A2**2*B1**2)/(X1+X2)*2D0*                       GSOFA244
     #  ( 1D0/(A1+A2)**2+1D0/(B1+B2)**2)                                GSOFA245
      WMINF=1D0-WWM1-WWM2+WWM1*WWM2*(1D0+DELT)                          GSOFA246
      F1 = X1*SFAC1*SFAC2/8D0*WMINF                                     GSOFA247
      F2 = X2*SFAC1*SFAC2/8D0*WMINF                                     GSOFA248
C...end of correction............................................       GSOFA249
      END                                                               GSOFA250
      SUBROUTINE FDIST2(QQ,P1,P2,Q1,Q2,PH1,PH2,DIST2)                   FDIST2 2
C     ***********************************************                   FDIST2 3
C Provides double bremsstrahlung distribution - FINAL state brem.       FDIST2 4
C INPUT:  P1,P2,Q1,Q2,PH1,PH2, four momenta                             FDIST2 5
C OUTPUT: DIST2     double bremsstrahlung distribution                  FDIST2 6
C     ***********************************                               FDIST2 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               FDIST2 8
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH1(*),PH2(*)             FDIST2 9
      DIMENSION PR1(4),PR2(4),PH1R(4),PH2R(4),QR1(4),QR2(4)             FDIST210
                                                                        FDIST211
      CALL REDUZ2(QQ,Q1,Q2,PH1,PH2,QR1,QR2,PH1R,PH2R)                   FDIST212
      CALL REDUZ0(QQ,P1,P2,PR1,PR2)                                     FDIST213
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       FDIST214
C infrared factors from reduced momenta                                 FDIST215
C double bremsstrahlung Xsect in next-to-leading log approx.            FDIST216
      CALL GSFIN2(Q1,Q2,PH1,PH2,GF1,GF2)                                FDIST217
      CALL GTHET1(QR1,QR2,PR1,COSTH1,COSTH2)                            FDIST218
      ANDI11= BORNV(SVAR1,COSTH1)                                       FDIST219
      ANDI12= BORNV(SVAR1,COSTH2)                                       FDIST220
      DIST2 =   GF1*ANDI11+   GF2*ANDI12                                FDIST221
      END                                                               FDIST222
      SUBROUTINE GSFIN2(P1,P2,PH1,PH2,F1,F2)                            GSFIN2 2
C     **************************************                            GSFIN2 3
C CALCULATES INGREDIENTS FOR REAL DOUBLE PHOTON DIFF. XSECTION          GSFIN2 4
C     *****************************************                         GSFIN2 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GSFIN2 6
      DIMENSION PH1(*),PH2(*),P1(*),P2(*)                               GSFIN2 7
C                                                                       GSFIN2 8
      WM (A  )=     (1D0-A)**2                                          GSFIN2 9
      WMS(A,B)=     ((1D0-A)**2+(1D0-B)**2)                             GSFIN210
      WWM(A,B)=                                                         GSFIN211
     $   1D0-AM*2D0*(1D0-A)*(1D0-B)/((1D0-A)**2+(1D0-B)**2)*(A/B+B/A)   GSFIN212
C                                                                       GSFIN213
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              GSFIN214
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          GSFIN215
      AM = AM2/(2D0*PP)                                                 GSFIN216
      BB1=ABS(P2(4)*PH1(4)-P2(1)*PH1(1)-P2(2)*PH1(2)-P2(3)*PH1(3))/PP   GSFIN217
      AA1=ABS(P1(4)*PH1(4)-P1(1)*PH1(1)-P1(2)*PH1(2)-P1(3)*PH1(3))/PP   GSFIN218
      BB2=ABS(P2(4)*PH2(4)-P2(1)*PH2(1)-P2(2)*PH2(2)-P2(3)*PH2(3))/PP   GSFIN219
      AA2=ABS(P1(4)*PH2(4)-P1(1)*PH2(1)-P1(2)*PH2(2)-P1(3)*PH2(3))/PP   GSFIN220
      AA1P= AA1/(1D0+AA2)                                               GSFIN221
      BB1P= BB1/(1D0+BB2)                                               GSFIN222
      AA2P= AA2/(1D0+AA1)                                               GSFIN223
      BB2P= BB2/(1D0+BB1)                                               GSFIN224
      A1  = AA1/(1+AA1+BB1)                                             GSFIN225
      A2  = AA2/(1+AA2+BB2)                                             GSFIN226
      B1  = BB1/(1+AA1+BB1)                                             GSFIN227
      B2  = BB2/(1+AA2+BB2)                                             GSFIN228
      A1P = AA1P/(1+AA1P+BB1P)                                          GSFIN229
      A2P = AA2P/(1+AA2P+BB2P)                                          GSFIN230
      B1P = BB1P/(1+AA1P+BB1P)                                          GSFIN231
      B2P = BB2P/(1+AA2P+BB2P)                                          GSFIN232
      SFAC1  =  2D0/(PP*AA1*BB1)*WWM(A1,B1)                             GSFIN233
      SFAC2  =  2D0/(PP*AA2*BB2)*WWM(A2,B2)                             GSFIN234
      IF((A1+B1).GT.(A2+B2)) THEN                                       GSFIN235
        X1=WM (A1   )*WMS(A2P,B2P) +WM (A1P    )*WMS(A2,B2)             GSFIN236
        X2=WM (   B1)*WMS(A2P,B2P) +WM (    B1P)*WMS(A2,B2)             GSFIN237
      ELSE                                                              GSFIN238
        X1=WM (A2   )*WMS(A1P,B1P) +WM (A2P    )*WMS(A1,B1)             GSFIN239
        X2=WM (   B2)*WMS(A1P,B1P) +WM (    B2P)*WMS(A1,B1)             GSFIN240
      ENDIF                                                             GSFIN241
      F1 = X1*SFAC1*SFAC2/8D0                                           GSFIN242
      F2 = X2*SFAC1*SFAC2/8D0                                           GSFIN243
      END                                                               GSFIN244
      SUBROUTINE NFDIST(QQ,P1,P2,Q1,Q2,PH1,PH2,DIST2)                   NFDIST 2
C     ***********************************************                   NFDIST 3
C Provides distribution for simultaneous initial and final state        NFDIST 4
C single bremsstrahlung.                                                NFDIST 5
C INPUT:  P1,P2,Q1,Q2,PH1,PH2 four momenta                              NFDIST 6
C OUTPUT: DIST2 is second order result, leading+subleading log. appr.   NFDIST 7
C     ***********************************                               NFDIST 8
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               NFDIST 9
      DIMENSION QQ(*),P1(*),P2(*),Q1(*),Q2(*),PH1(*),PH2(*)             NFDIST10
      DIMENSION PR1(4),PR2(4),QR1(4),QR2(4),PHR1(4),PHR2(4)             NFDIST11
C                                                                       NFDIST12
      CALL REDUZ1(QQ,P1,P2,PH1,PR1,PR2,PHR1)                            NFDIST13
      CALL REDUZ1(QQ,Q1,Q2,PH2,QR1,QR2,PHR2)                            NFDIST14
C Single bremsstrahlung Xsection                                        NFDIST15
c;;                                                                     NFDIST16
ccc      CALL BVIRT1(P1,P2,PH1,DELI1)                                   NFDIST17
ccc      CALL BVIRF1(Q1,Q2,PH2,DELF1)                                   NFDIST18
      CALL GSOFA1(P1,P2,PH1,GI1,GI2)                                    NFDIST19
      CALL GSFIN1(Q1,Q2,PH2,GF1,GF2)                                    NFDIST20
      CALL GTHET3(PR1,PR2,QR1,QR2,CTH11,CTH12,CTH21,CTH22)              NFDIST21
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       NFDIST22
      ANDI11= BORNV(SVAR1,CTH11)                                        NFDIST23
      ANDI12= BORNV(SVAR1,CTH12)                                        NFDIST24
      ANDI21= BORNV(SVAR1,CTH21)                                        NFDIST25
      ANDI22= BORNV(SVAR1,CTH22)                                        NFDIST26
      DIST2 =  GI1*GF1*ANDI11+ GI1*GF2*ANDI12                           NFDIST27
     &        +GI2*GF1*ANDI21+ GI2*GF2*ANDI22                           NFDIST28
      END                                                               NFDIST29
      SUBROUTINE BVIRT0(P1,P2,DELS1,DELS2)                              BVIRT0 2
C     ************************************                              BVIRT0 3
C Virtual corrections to beta0                                          BVIRT0 4
C beta0 is equal Born*(1+DELS1+DELS2)                                   BVIRT0 5
C     ***********************************                               BVIRT0 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BVIRT0 7
      DIMENSION P1(*),P2(*)                                             BVIRT0 8
      PARAMETER(PI=3.1415926535897932D0, ALFINV=137.03604D0)            BVIRT0 9
      PARAMETER(ZET2= PI**2/6D0)                                        BVIRT010
      PARAMETER(ZET3= 1.2020569031595942854D0)                          BVIRT011
      PARAMETER(ALF1=1D0/ALFINV/PI)                                     BVIRT012
      SVAR   = (P1(4)+P2(4))**2-(P1(3)+P2(3))**2                        BVIRT013
     $        -(P1(2)+P2(2))**2-(P1(1)+P2(1))**2                        BVIRT014
      AMEL2  = P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                      BVIRT015
      BILG  =  DLOG(SVAR/AMEL2)                                         BVIRT016
      DELS1 =  ALF1*(BILG-1D0)                                          BVIRT017
      DELS2 =  ALF1**2 *0.5D0*BILG**2                                   BVIRT018
C Subleading terms                                                      BVIRT019
      DELS2 =  DELS2 + ALF1**2*(                                        BVIRT020
     $            -(13D0/16D0 +1.5D0*ZET2 -3D0*ZET3)*BILG               BVIRT021
     $            -16D0/5D0*ZET2*ZET2 +51D0/8D0*ZET2 +13D0/4D0          BVIRT022
     $            -4.5D0*ZET3 -6D0*ZET2*LOG(2D0) )                      BVIRT023
      END                                                               BVIRT024
      SUBROUTINE BVIRT1(P1,P2,PH,DELS1)                                 BVIRT1 2
C     *********************************                                 BVIRT1 3
C VIRTUAL CORRECTION TO BETA1                                           BVIRT1 4
C     ***********************************                               BVIRT1 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BVIRT1 6
      DIMENSION P1(*),P2(*),PH(*),PP(4)                                 BVIRT1 7
      PARAMETER(PI=3.1415926535897932D0, ALFINV=137.03604D0)            BVIRT1 8
      PARAMETER(ALF1=1D0/ALFINV/PI)                                     BVIRT1 9
C                                                                       BVIRT110
      DO 20 K=1,4                                                       BVIRT111
  20  PP(K)=P1(K)+P2(K)                                                 BVIRT112
      SVAR= PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                         BVIRT113
      XK= 2*(PH(4)*PP(4)-PH(3)*PP(3)-PH(2)*PP(2)-PH(1)*PP(1))/SVAR      BVIRT114
      AMEL2  = P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                      BVIRT115
      BILG  =  DLOG(SVAR/AMEL2)                                         BVIRT116
      DELS1 =  ALF1*(BILG-1D0)*(1D0-0.5D0*DLOG(1D0-XK))                 BVIRT117
      END                                                               BVIRT118
      SUBROUTINE BVIRF1(P1,P2,PH,DELS1)                                 BVIRF1 2
C     *********************************                                 BVIRF1 3
C VIRTUAL CORRECTION TO BETA1                                           BVIRF1 4
C     ***********************************                               BVIRF1 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BVIRF1 6
      DIMENSION P1(*),P2(*),PH(*),PP(4)                                 BVIRF1 7
      PARAMETER(PI=3.1415926535897932D0, ALFINV=137.03604D0)            BVIRF1 8
      PARAMETER(ALF1=1D0/ALFINV/PI)                                     BVIRF1 9
C                                                                       BVIRF110
      DO 20 K=1,4                                                       BVIRF111
  20  PP(K)=P1(K)+P2(K)                                                 BVIRF112
      SVAR= PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                         BVIRF113
      XK= 2*(PH(4)*PP(4)-PH(3)*PP(3)-PH(2)*PP(2)-PH(1)*PP(1))/SVAR      BVIRF114
      XK=ABS(XK)/(1+ABS(XK))                                            BVIRF115
      AMEL2  = P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                      BVIRF116
      BILG  =  DLOG(SVAR/AMEL2)                                         BVIRF117
      DELS1 =  ALF1*(BILG-1D0)*(1D0+0.5D0*DLOG(1D0-XK))                 BVIRF118
      END                                                               BVIRF119
      SUBROUTINE GSOFA1(P1,P2,PH,F1,F2)                                 GSOFA1 2
C     *********************************                                 GSOFA1 3
C CALCULATES INGREDIENTS FOR REAL SINGLE PHOTON DIFF. XSECTION          GSOFA1 4
C     *****************************************                         GSOFA1 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GSOFA1 6
      DIMENSION PH(*),P1(*),P2(*)                                       GSOFA1 7
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          GSOFA1 8
      PK1= P1(4)*PH(4)-P1(1)*PH(1)-P1(2)*PH(2)-P1(3)*PH(3)              GSOFA1 9
      PK2= P2(4)*PH(4)-P2(1)*PH(1)-P2(2)*PH(2)-P2(3)*PH(3)              GSOFA110
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              GSOFA111
      B  =  PK2/PP                                                      GSOFA112
      A  =  PK1/PP                                                      GSOFA113
      SFAC1  =  2D0*PP/PK1/PK2                                          GSOFA114
      AM = AM2/(2D0*PP)                                                 GSOFA115
      WWM= 1D0-AM*2D0*(1D0-A)*(1D0-B)/((1D0-A)**2+(1D0-B)**2)*(A/B+B/A) GSOFA116
      F1   = 0.5D0*(1D0-A)**2*WWM *SFAC1                                GSOFA117
      F2   = 0.5D0*(1D0-B)**2*WWM *SFAC1                                GSOFA118
      END                                                               GSOFA119
      SUBROUTINE SFACH0(P1,P2,PH,SFAC0)                                 SFACH0 2
C     *********************************                                 SFACH0 3
C CALCULATES SOFT FACTOR FOR REAL SOFT PHOTON.                          SFACH0 4
C     *********************************                                 SFACH0 5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               SFACH0 6
      DIMENSION PH(4),P1(4),P2(4)                                       SFACH0 7
      AM2= P1(4)**2-P1(1)**2-P1(2)**2-P1(3)**2                          SFACH0 8
      PK1= P1(4)*PH(4)-P1(1)*PH(1)-P1(2)*PH(2)-P1(3)*PH(3)              SFACH0 9
      PK2= P2(4)*PH(4)-P2(1)*PH(1)-P2(2)*PH(2)-P2(3)*PH(3)              SFACH010
      PP = P1(4)*P2(4)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3)              SFACH011
      SFAC0  =  2D0*PP/PK1/PK2 -AM2/PK1**2 -AM2/PK2**2                  SFACH012
      END                                                               SFACH013
      SUBROUTINE GTHET0(P1,Q1,COSTH)                                    GTHET0 2
C     ******************************                                    GTHET0 3
C Calculates CosTh between BEAM and FINAL fermion                       GTHET0 4
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GTHET0 5
      DIMENSION P1(*),Q1(*)                                             GTHET0 6
      COSTH  = (P1(1)*Q1(1) +P1(2)*Q1(2) +P1(3)*Q1(3))                  GTHET0 7
     $            /SQRT((Q1(1)**2 +Q1(2)**2 +Q1(3)**2)                  GTHET0 8
     $                 *(P1(1)**2 +P1(2)**2 +P1(3)**2))                 GTHET0 9
      END                                                               GTHET010
      SUBROUTINE GTHET1(P1,P2,Q1,COSTH1,COSTH2)                         GTHET1 2
C     *****************************************                         GTHET1 3
C Calculates CosTh1 and CosTh2 between BEAM amd FINAL                   GTHET1 4
C fermion momenta in final fermion rest frame Q1(4)+Q2(4)=0             GTHET1 5
C     ***********************************                               GTHET1 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GTHET1 7
      DIMENSION P1(*),P2(*),Q1(*)                                       GTHET1 8
      COSTH1 = (P1(1)*Q1(1) +P1(2)*Q1(2) +P1(3)*Q1(3))                  GTHET1 9
     $            /SQRT((Q1(1)**2 +Q1(2)**2 +Q1(3)**2)                  GTHET110
     $                 *(P1(1)**2 +P1(2)**2 +P1(3)**2))                 GTHET111
      COSTH2 =-(P2(1)*Q1(1) +P2(2)*Q1(2) +P2(3)*Q1(3))                  GTHET112
     $            /SQRT((Q1(1)**2 +Q1(2)**2 +Q1(3)**2)                  GTHET113
     $                 *(P2(1)**2 +P2(2)**2 +P2(3)**2))                 GTHET114
      END                                                               GTHET115
      SUBROUTINE GTHET3(P1,P2,Q1,Q2,CTH11,CTH12,CTH21,CTH22)            GTHET3 2
C     ***************************************************               GTHET3 3
C Calculates CosTh1 and CosTh2 between BEAM amd FINAL                   GTHET3 4
C fermion momenta in Z RESONANCE rest frame Q1(4)+Q2(4)=0               GTHET3 5
C     ***********************************                               GTHET3 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GTHET3 7
      DIMENSION P1(*),P2(*),Q1(*),Q2(*)                                 GTHET3 8
      Q1D=        SQRT(Q1(1)**2 +Q1(2)**2 +Q1(3)**2)                    GTHET3 9
      Q2D=        SQRT(Q2(1)**2 +Q2(2)**2 +Q2(3)**2)                    GTHET310
      P1D=        SQRT(P1(1)**2 +P1(2)**2 +P1(3)**2)                    GTHET311
      P2D=        SQRT(P2(1)**2 +P2(2)**2 +P2(3)**2)                    GTHET312
      CTH11 = (Q1(1)*P1(1) +Q1(2)*P1(2) +Q1(3)*P1(3))/Q1D/P1D           GTHET313
      CTH12 =-(Q1(1)*P2(1) +Q1(2)*P2(2) +Q1(3)*P2(3))/Q1D/P2D           GTHET314
      CTH21 =-(Q2(1)*P1(1) +Q2(2)*P1(2) +Q2(3)*P1(3))/Q2D/P1D           GTHET315
      CTH22 = (Q2(1)*P2(1) +Q2(2)*P2(2) +Q2(3)*P2(3))/Q2D/P2D           GTHET316
      END                                                               GTHET317
      SUBROUTINE TRALQQ(MODE,Q,P,R)                                     TRALQQ 2
C     *****************************                                     TRALQQ 3
C BOOST ALONG Z AXIS TO A FRAME WHERE QQ(3)=0                           TRALQQ 4
C AND NEXT ALONG TRANSVERSE DIRECTION OF QQ,                            TRALQQ 5
C FORTH (MODE = 1) OR BACK (MODE = -1).                                 TRALQQ 6
C Q MUST BE A TIMELIKE, P MAY BE ARBITRARY.                             TRALQQ 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               TRALQQ 8
      DIMENSION Q(*),P(*),R(*)                                          TRALQQ 9
      DIMENSION QL(4),QT(4)                                             TRALQQ10
      QL(4)=Q(4)                                                        TRALQQ11
      QL(3)=Q(3)                                                        TRALQQ12
      QL(2)=0D0                                                         TRALQQ13
      QL(1)=0D0                                                         TRALQQ14
      CALL BOSTDQ(1,QL,Q,QT)                                            TRALQQ15
      IF(MODE.EQ.1) THEN                                                TRALQQ16
        CALL BOSTDQ( 1,QL,P,R)                                          TRALQQ17
        CALL BOSTDQ( 1,QT,R,R)                                          TRALQQ18
      ELSE                                                              TRALQQ19
        CALL BOSTDQ(-1,QT,P,R)                                          TRALQQ20
        CALL BOSTDQ(-1,QL,R,R)                                          TRALQQ21
      ENDIF                                                             TRALQQ22
      END                                                               TRALQQ23
      SUBROUTINE REDUZ0(QQ,P1,P2,PR1,PR2)                               REDUZ0 2
C     ***********************************                               REDUZ0 3
C reduction of momenta for beta0, second one                            REDUZ0 4
C I.E. WE MAPP:   P1,P2 ==> PR1,PR2                                     REDUZ0 5
C such that  PR1+PR2 = QQ                                               REDUZ0 6
C Resulting PRi QRi are in QQ rest frame.                               REDUZ0 7
C     ***********************************                               REDUZ0 8
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               REDUZ0 9
      PARAMETER( EPS1 =1D-15)                                           REDUZ010
      DIMENSION QQ(4),P1(4),P2(4),PR1(4),PR2(4)                         REDUZ011
      DIMENSION PP(4),PX1(4),PX2(4),PPX(4)                              REDUZ012
C                                                                       REDUZ013
      DO 20 K=1,4                                                       REDUZ014
 20   PP(K)=P1(K)+P2(K)                                                 REDUZ015
      IF((PP(1)**2+PP(2)**2+PP(3)**2)/PP(4)**2 .GT. EPS1) THEN          REDUZ016
C transform all momenta to QQ rest-frame                                REDUZ017
         CALL BOSTDQ( 1,QQ,P1 ,PX1)                                     REDUZ018
         CALL BOSTDQ( 1,QQ,P2 ,PX2)                                     REDUZ019
         CALL BOSTDQ( 1,QQ,PP ,PPX)                                     REDUZ020
C transform all momenta to PP rest-frame                                REDUZ021
         CALL BOSTDQ( 1,PPX,PX1,PX1)                                    REDUZ022
         CALL BOSTDQ( 1,PPX,PX2,PX2)                                    REDUZ023
      ELSE                                                              REDUZ024
C do nothing if we are already in PP rest-frame                         REDUZ025
         DO 23 K=1,4                                                    REDUZ026
            PX1(K)=P1(K)                                                REDUZ027
   23       PX2(K)=P2(K)                                                REDUZ028
      ENDIF                                                             REDUZ029
C construct reduced beam momenta PR1,PR2                                REDUZ030
C note: they are understood to be in QQ rest-frame                      REDUZ031
      SVAR1 = QQ(4)**2-QQ(3)**2-QQ(2)**2-QQ(1)**2                       REDUZ032
      SVAR  = PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                       REDUZ033
      VV    = 1D0 -SVAR1/SVAR                                           REDUZ034
      IF(ABS(VV).GT. EPS1) THEN                                         REDUZ035
         AMEL2=  P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                    REDUZ036
         PR1(4)= SQRT(SVAR1)/2D0                                        REDUZ037
         PR2(4)= PR1(4)                                                 REDUZ038
         PXMOD = SQRT(PX1(1)**2+PX1(2)**2+PX1(3)**2)                    REDUZ039
         PRMOD = SQRT(PR1(4)**2-AMEL2)                                  REDUZ040
         DO 30 K=1,3                                                    REDUZ041
         PR1(K)= PX1(K)/PXMOD*PRMOD                                     REDUZ042
 30      PR2(K)= PX2(K)/PXMOD*PRMOD                                     REDUZ043
      ELSE                                                              REDUZ044
         DO 40 K=1,4                                                    REDUZ045
         PR1(K)= PX1(K)                                                 REDUZ046
 40      PR2(K)= PX2(K)                                                 REDUZ047
      ENDIF                                                             REDUZ048
      END                                                               REDUZ049
      SUBROUTINE REDUZ1(QQ,P1,P2,PH,PR1,PR2,PHR)                        REDUZ1 2
C     ******************************************                        REDUZ1 3
C reduction of 4-momenta for beta1                                      REDUZ1 4
C           P1,P2,PH ==--> PR1,PR2,PHR                                  REDUZ1 5
C such that  PR1+PR2 = QQ+PHR                                           REDUZ1 6
C     ***********************************                               REDUZ1 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               REDUZ1 8
      PARAMETER( EPS1 =1D-15)                                           REDUZ1 9
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 REDUZ111
      DIMENSION QQ(4), P1(4), P2(4), PH(4), PR1(4),PR2(4),PHR(4)        REDUZ112
      DIMENSION PP(4),QQK(4),PPX(4), PPK(4)                             REDUZ113
      DIMENSION PX1(4),PX2(4),PHX(4)                                    REDUZ114
C                                                                       REDUZ115
      DO 20 K=1,4                                                       REDUZ116
      PP(K)   = P1(K)+P2(K)                                             REDUZ117
      PPK(K)  = P1(K)+P2(K)-PH(K)                                       REDUZ118
 20   QQK(K)  = QQ(K)+PH(K)                                             REDUZ119
      SVAR  =  PP(4)**2 -PP(3)**2 -PP(2)**2 -PP(1)**2                   REDUZ120
      SVAR1 =  QQ(4)**2 -QQ(3)**2 -QQ(2)**2 -QQ(1)**2                   REDUZ121
      SS1   = PPK(4)**2-PPK(3)**2-PPK(2)**2-PPK(1)**2                   REDUZ122
      SS2   = QQK(4)**2-QQK(3)**2-QQK(2)**2-QQK(1)**2                   REDUZ123
      IF((PP(1)**2+PP(2)**2+PP(3)**2)/PP(4)**2 .GT. EPS1) THEN          REDUZ124
C transform all momenta to QQ rest-frame                                REDUZ125
         CALL BOSTDQ( 1,QQ,P1 ,PX1)                                     REDUZ126
         CALL BOSTDQ( 1,QQ,P2 ,PX2)                                     REDUZ127
         CALL BOSTDQ( 1,QQ,PH ,PHX)                                     REDUZ128
         CALL BOSTDQ( 1,QQ,PP ,PPX)                                     REDUZ129
C transform all momenta to PP rest-frame                                REDUZ130
         CALL BOSTDQ( 1,PPX,PX1,PX1)                                    REDUZ131
         CALL BOSTDQ( 1,PPX,PX2,PX2)                                    REDUZ132
         CALL BOSTDQ( 1,PPX,PHX,PHX)                                    REDUZ133
      ELSE                                                              REDUZ134
C do nothing if we are already in PP rest-frame                         REDUZ135
         DO 23 K=1,4                                                    REDUZ136
            PHX(K)=PH(K)                                                REDUZ137
            PX1(K)=P1(K)                                                REDUZ138
   23       PX2(K)=P2(K)                                                REDUZ139
      ENDIF                                                             REDUZ140
C construct reduced beam momenta PR1,PR2                                REDUZ141
C note: they are understood to be in QQ rest-frame                      REDUZ142
      VV2   = 1D0 - SS2/SVAR                                            REDUZ143
      IF(ABS(VV2).GT. EPS1) THEN                                        REDUZ144
         PK    =  (PX1(4)+PX2(4))*PHX(4)                                REDUZ145
CCCCC    XLAM= SQRT(SVAR1/SVAR+(PK/SVAR)**2)+PK/SVAR                    REDUZ146
         XLAM= SQRT(SVAR1/SS1)                                          REDUZ147
         AMEL2=  P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                    REDUZ148
         PXMOD = SQRT(PX1(1)**2+PX1(2)**2+PX1(3)**2)                    REDUZ149
         PX1(4)= PX1(4)*XLAM                                            REDUZ150
         PX2(4)= PX2(4)*XLAM                                            REDUZ151
CCC      PRMOD = SQRT(PX1(4)**2-AMEL2)                                  REDUZ152
         PRMOD =      PX1(4)**2-AMEL2                                   REDUZ153
         IF(PRMOD.LE.0D0) WRITE(IOUT,*) ' REDUZ1: PRMOD=', PRMOD        REDUZ154
         IF(PRMOD.LE.0D0) WRITE(   6,*) ' REDUZ1: PRMOD=', PRMOD        REDUZ155
         PRMOD = SQRT(ABS(PRMOD))                                       REDUZ156
         DO 30 K=1,3                                                    REDUZ157
         PX1(K)= PX1(K)/PXMOD*PRMOD                                     REDUZ158
 30      PX2(K)= PX2(K)/PXMOD*PRMOD                                     REDUZ159
         DO 31 K=1,4                                                    REDUZ160
 31      PHX(K)= PHX(K)*XLAM                                            REDUZ161
      ENDIF                                                             REDUZ162
C then, boost away the three-vector part of P1+P2-PH                    REDUZ163
C that is transform to QQ rest frame                                    REDUZ164
      DO 35 K=1,4                                                       REDUZ165
 35   PP(K)= PX1(K)+PX2(K)-PHX(K)                                       REDUZ166
      CALL BOSTDQ( 1,PP,PX1,PR1)                                        REDUZ167
      CALL BOSTDQ( 1,PP,PX2,PR2)                                        REDUZ168
      CALL BOSTDQ( 1,PP,PHX,PHR)                                        REDUZ169
      END                                                               REDUZ170
      SUBROUTINE REDUZ2(QQ,P1,P2,PH1,PH2,PR1,PR2,PH1R,PH2R)             REDUZ2 2
C     *****************************************************             REDUZ2 3
C Reduction for beta2                                                   REDUZ2 4
C           P1,P2,PH1,PH2 ==--> PR1,PR2,PH1R,PH2R                       REDUZ2 5
C such that  PR1+PR2 = PH1R+PH2R+QQ                                     REDUZ2 6
C Input:  QQ,P1,P2,PH1,PH2                                              REDUZ2 7
C Output: PR1,PR2,PH1R,PH2R                                             REDUZ2 8
C     ***********************************                               REDUZ2 9
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               REDUZ210
      PARAMETER( EPS1 =1D-15)                                           REDUZ211
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 REDUZ213
      DIMENSION QQ(*), P1(*),  P2(*),  PH1(*),  PH2(*)                  REDUZ214
      DIMENSION        PR1(*), PR2(*), PH1R(*), PH2R(*)                 REDUZ215
      DIMENSION PP(4),QQK(4),PPK(4)                                     REDUZ216
      DIMENSION PX1(4),PX2(4),PH1X(4),PH2X(4),SPH(4),ppx(4)             REDUZ217
C                                                                       REDUZ218
      DO 20 K=1,4                                                       REDUZ219
      PP(K)   = P1(K)+P2(K)                                             REDUZ220
      PPK(K)  = P1(K)+P2(K)-PH1(K)-PH2(K)                               REDUZ221
 20   QQK(K)  = QQ(K)+PH1(K)+PH2(K)                                     REDUZ222
      SVAR  =  PP(4)**2 -PP(3)**2 -PP(2)**2 -PP(1)**2                   REDUZ223
      SVAR1 =  QQ(4)**2 -QQ(3)**2 -QQ(2)**2 -QQ(1)**2                   REDUZ224
      SS1   = PPK(4)**2-PPK(3)**2-PPK(2)**2-PPK(1)**2                   REDUZ225
      SS2   = QQK(4)**2-QQK(3)**2-QQK(2)**2-QQK(1)**2                   REDUZ226
      IF((PP(1)**2+PP(2)**2+PP(3)**2)/PP(4)**2 .GT. EPS1) THEN          REDUZ227
C transform all momenta to QQ rest-frame                                REDUZ228
         CALL BOSTDQ( 1,QQ,P1 ,PX1)                                     REDUZ229
         CALL BOSTDQ( 1,QQ,P2 ,PX2)                                     REDUZ230
         CALL BOSTDQ( 1,QQ,PH1,PH1X)                                    REDUZ231
         CALL BOSTDQ( 1,QQ,PH2,PH2X)                                    REDUZ232
         CALL BOSTDQ( 1,QQ,PP ,PPX)                                     REDUZ233
C transform all momenta to PP rest-frame                                REDUZ234
         CALL BOSTDQ( 1,PPX,PX1,PX1)                                    REDUZ235
         CALL BOSTDQ( 1,PPX,PX2,PX2)                                    REDUZ236
         CALL BOSTDQ( 1,PPX,PH1X,PH1X)                                  REDUZ237
         CALL BOSTDQ( 1,PPX,PH2X,PH2X)                                  REDUZ238
      ELSE                                                              REDUZ239
C do nothing if we are already in PP rest-frame                         REDUZ240
         DO 23 K=1,4                                                    REDUZ241
            PH1X(K)=PH1(K)                                              REDUZ242
            PH2X(K)=PH2(K)                                              REDUZ243
            PX1(K)=P1(K)                                                REDUZ244
   23       PX2(K)=P2(K)                                                REDUZ245
      ENDIF                                                             REDUZ246
C construct reduced beam momenta PR1,PR2                                REDUZ247
C note: they are understood to be in QQ rest-frame                      REDUZ248
      VV2   = 1D0 - SS2/SVAR                                            REDUZ249
      IF(ABS(VV2).GT.1D-6) THEN                                         REDUZ250
C construct reduced beam momenta PR1,PR2                                REDUZ251
C start with dilatation of beams                                        REDUZ252
         DO 24 K=1,4                                                    REDUZ253
         PP(K)  =  PX1(K)+PX2(K)                                        REDUZ254
  24     SPH(K) =  PH1(K)+PH2(K)                                        REDUZ255
         PK     =  PP(4)*SPH(4)                                         REDUZ256
         SK2    =  SPH(4)**2 -SPH(3)**2 -SPH(2)**2 -SPH(1)**2           REDUZ257
CCCC     XLAM   =  SQRT((SVAR1-SK2)/SVAR+(PK/SVAR)**2)+PK/SVAR          REDUZ258
         XLAM   =  SQRT(SVAR1/SS1)                                      REDUZ259
         AMEL2  =  P1(4)**2-P1(3)**2-P1(2)**2-P1(1)**2                  REDUZ260
         PXMOD  =  SQRT(PX1(1)**2+PX1(2)**2+PX1(3)**2)                  REDUZ261
         PX1(4) =  PX1(4)*XLAM                                          REDUZ262
         PX2(4) =  PX2(4)*XLAM                                          REDUZ263
CCCC     PRMOD  =  SQRT(PX1(4)**2-AMEL2)                                REDUZ264
         PRMOD  =      PX1(4)**2-AMEL2                                  REDUZ265
         IF(PRMOD.LE.0D0) WRITE(IOUT,*) ' REDUZ2: PRMOD=', PRMOD        REDUZ266
         IF(PRMOD.LE.0D0) WRITE(   6,*) ' REDUZ2: PRMOD=', PRMOD        REDUZ267
         PRMOD  = SQRT(ABS(PRMOD))                                      REDUZ268
         DO 30 K=1,3                                                    REDUZ269
         PX1(K) = PX1(K)/PXMOD*PRMOD                                    REDUZ270
 30      PX2(K) = PX2(K)/PXMOD*PRMOD                                    REDUZ271
         DO 31 K=1,4                                                    REDUZ272
         PH1X(K)= PH1X(K)*XLAM                                          REDUZ273
 31      PH2X(K)= PH2X(K)*XLAM                                          REDUZ274
      ENDIF                                                             REDUZ275
C then, boost away the three-vector part of P1+P2-PH1-PH2               REDUZ276
C that is transform to QQ rest frame                                    REDUZ277
      DO 35 K=1,4                                                       REDUZ278
 35   PP(K)= PX1(K)+PX2(K)-PH1X(K)-PH2X(K)                              REDUZ279
      CALL BOSTDQ( 1,PP,PX1,PR1)                                        REDUZ280
      CALL BOSTDQ( 1,PP,PX2,PR2)                                        REDUZ281
      CALL BOSTDQ( 1,PP,PH1X,PH1R)                                      REDUZ282
      CALL BOSTDQ( 1,PP,PH2X,PH2R)                                      REDUZ283
      END                                                               REDUZ284
                                                                        REDUZ285
      FUNCTION BREMKF(KEY,EREL)                                         BREMKF 2
C     *************************                                         BREMKF 3
C NON-MONTECARLO INTEGRATION OF THE V-DISTRIBUTION                      BREMKF 4
C GAUSS METHOD, CHANGE OF VARIABLES WITH HELP OF CHBIN1                 BREMKF 5
C SEE VVDISB                                                            BREMKF 6
C KEY= 1,2,3,...FOR VARIOUS DISTRIBUTIONS                               BREMKF 7
C KEY= 3 FOR MC GENERATION, OTHER FOR TESTS                             BREMKF 8
C FOR KEYFIX=1, EXCEPTIONALLY, IT PROVIDES INTEGRAND AT VV=VVMAX        BREMKF 9
C WITH BORN OMITTED                                                     BREMKF10
C     ************************                                          BREMKF11
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BREMKF12
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
C COMMON KEYDST COMMUNICATES ONLY WITH VVDISB - INTEGRAND FUNCTION      BREMKF14
      COMMON / KEYDST / KEYDIS                                          KEYDST 2
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             VVREC  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREC  3
      SAVE / KEYYFS /,/ KEYDST /,/ WEKING /,/ VVREC  /                  BREMKF18
      EXTERNAL VVDISB                                                   BREMKF19
C                                                                       BREMKF20
      KEYDIS=KEY                                                        BREMKF21
      IF(KEYFIX.EQ.0) THEN                                              BREMKF22
         XBORN  =BORNY(4D0*ENE**2)                                      BREMKF23
         PREC=  XBORN*EREL                                              BREMKF24
         XA= 0D0                                                        BREMKF25
         XB= 1D0                                                        BREMKF26
         CALL GAUSJD(VVDISB,XA,XB,PREC,RESULT)                          BREMKF27
         BREMKF=RESULT                                                  BREMKF28
      ELSE                                                              BREMKF29
         SVAR  = 4D0*ENE**2                                             BREMKF30
         BREMKF= VVRHO(KEYDIS,SVAR,AMEL,VVMAX,VVMIN)                    BREMKF31
     $          /VVRHO(     9,SVAR,AMEL,VVMAX,VVMIN)                    BREMKF32
      ENDIF                                                             BREMKF33
      END                                                               BREMKF34
      FUNCTION VVDISB(R)                                                VVDISB 2
C     ******************                                                VVDISB 3
C INTEGRAND FOR BREMKF                                                  VVDISB 4
C MAPPING XX => VV CHANGE  TO IMPROVE ON EFFICIENCY                     VVDISB 5
C     ************************                                          VVDISB 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               VVDISB 7
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             VVREC  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREC  3
      COMMON / KEYDST / KEYDIS                                          KEYDST 2
      PARAMETER( FLEPS =1D-35)                                          VVDISB11
      SAVE / WEKING /,/ VVREC  /,/ KEYDST /                             VVDISB12
C                                                                       VVDISB13
      KEYD=KEYDIS                                                       VVDISB14
      X = MAX(R,FLEPS**BETI)                                            VVDISB15
      ALF=  BETI                                                        VVDISB16
      BET=  1D0                                                         VVDISB17
C ...SPECIAL CASES                                                      VVDISB18
C ...Monte Carlo crude distr                                            VVDISB19
      IF    (KEYD.EQ.1)  THEN                                           VVDISB20
        BET=  -0.5D0                                                    VVDISB21
C ...YFS exponentiation beta0,1,2 contribs                              VVDISB22
      ELSEIF(KEYD.EQ.310)  THEN                                         VVDISB23
        ALF=  BETI                                                      VVDISB24
      ELSEIF(KEYD.EQ.311)  THEN                                         VVDISB25
        ALF=  BETI +1                                                   VVDISB26
      ELSEIF(KEYD.EQ.320)  THEN                                         VVDISB27
        ALF=  BETI                                                      VVDISB28
      ELSEIF(KEYD.EQ.321)  THEN                                         VVDISB29
        ALF=  BETI +1                                                   VVDISB30
      ELSEIF(KEYD.EQ.322)  THEN                                         VVDISB31
        ALF=  BETI +2                                                   VVDISB32
C ...Reference distr including dilatation factor DAMEL                  VVDISB33
      ELSEIF(KEYD.EQ.12) THEN                                           VVDISB34
        BET=  -0.5                                                      VVDISB35
      ENDIF                                                             VVDISB36
      CALL CHBIN1(X,ALF,BET,VVMAX,VV,RJAC)                              VVDISB37
C BORN XSECTION                                                         VVDISB38
C NOTE 1/(1-VV) FACTOR BECAUSE BORNY IS IN R-UNITS                      VVDISB39
      SVAR   = 4D0*ENE**2                                               VVDISB40
      SVAR1  = SVAR*(1D0-VV)                                            VVDISB41
      XBORN  = BORNY(SVAR1)/(1D0-VV)                                    VVDISB42
      VVDISB = VVRHO(KEYD,SVAR,AMEL,VV,VVMIN) *RJAC*XBORN               VVDISB43
      END                                                               VVDISB44
      FUNCTION VVRHO(KEYDIS,SVAR,AMEL,VV,VVMIN)                         VVRHO  2
C     *****************************************                         VVRHO  3
C-------------------------------------------------------------          VVRHO  4
C Convention for KEYDIS                                                 VVRHO  5
C Pedagogical exercises                                                 VVRHO  6
C     KEYDIS   =  1      crude distribution for initial state MC        VVRHO  7
C     KEYDIS   =  9      reference distr.  of YFS2 CPC paper            VVRHO  8
C     KEYDIS   =  50-52  obsolete test distr. for YFS2 CPC paper        VVRHO  9
C     KEYDIS   =  101    soft part YFS       First  Order               VVRHO 10
C     KEYDIS   =  102    soft part YFS       Second Order               VVRHO 11
C     KEYDIS   =  105    hard non-exp.       First  Order               VVRHO 12
C     KEYDIS   =  106    hard non-exp.       Second Order               VVRHO 13
C Total results                                                         VVRHO 14
C     KEYDIS   =  0 + R*100                  Zero   Order               VVRHO 15
C     KEYDIS   =  1 + R*100                  First  Order               VVRHO 16
C     KEYDIS   =  2 + R*100                  Second Order               VVRHO 17
C     KEYDIS   = 15     reference distr. of YFS paper                   VVRHO 18
C Beta contributions                                                    VVRHO 19
C     KEYDIS   = 10 + R*100      Beta0       Zero   Order               VVRHO 20
C     KEYDIS   = 11 + R*100      Beta0       First  Order               VVRHO 21
C     KEYDIS   = 12 + R*100      Beta1                                  VVRHO 22
C     KEYDIS   = 20 + R*100      Beta0       Second Order               VVRHO 23
C     KEYDIS   = 21 + R*100      Beta1                                  VVRHO 24
C     KEYDIS   = 22 + R*100      Beta2                                  VVRHO 25
C     R = 200 Kuraev-Fadin                                              VVRHO 26
C     R = 300 YFS (pragmatic)                                           VVRHO 27
C     R = 400 YFS single electron LL str. funct.                        VVRHO 28
C-------------------------------------------------------------          VVRHO 29
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               VVRHO 30
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 VVRHO 32
      PARAMETER(PI= 3.1415926535897932D0, ALFINV=137.03604D0)           VVRHO 33
      PARAMETER(ALF1   = 1D0/PI/ALFINV)                                 VVRHO 34
      PARAMETER(CEULER =0.57721566D0)                                   VVRHO 35
C                                                                       VVRHO 36
      KEYD = KEYDIS                                                     VVRHO 37
      BILG   = DLOG(SVAR/AMEL**2)                                       VVRHO 38
      BETI   = 2D0*ALF1*(BILG-1D0)                                      VVRHO 39
C===================================================================    VVRHO 40
C ---------------------- KEYD = 1 ----------------------------------    VVRHO 41
C ---- Crude distribution in YFS2 initial state Monte Carlo --------    VVRHO 42
C ------------------------------------------------------------------    VVRHO 43
c dilat is related to dilatation jacobian in yfsgen                     VVRHO 44
c damel is responsible for modification of photon ang. distribution     VVRHO 45
c see also weight wt=wt1 in   angbre                                    VVRHO 46
      IF(KEYD.GE.1.AND.KEYD.LT.100) THEN                                VVRHO 47
         DILAT=1D0                                                      VVRHO 48
         IF(VV.GT.VVMIN) DILAT=(1D0+1D0/SQRT(1D0-VV))/2D0               VVRHO 49
         BETI2  = 2D0*ALF1*BILG                                         VVRHO 50
         DAMEL=1D0                                                      VVRHO 51
         IF(VV.GT.VVMIN) DAMEL=BETI2/BETI*(VV/VVMIN)**(BETI2-BETI)      VVRHO 52
C---------                                                              VVRHO 53
         IF    (KEYD.EQ.1)  THEN                                        VVRHO 54
            DISTR= BETI*VV**(BETI-1D0)*DILAT*DAMEL                      VVRHO 55
C ...Reference distribution used in YFS2 paper --------------------     VVRHO 56
         ELSEIF(KEYD.EQ. 9)  THEN                                       VVRHO 57
            DISTR= BETI*VV**(BETI-1D0)*(1+(1-VV)**2)/2                  VVRHO 58
C basic reference distribution  xrefer=sigma-ref                        VVRHO 59
         ELSEIF(KEYD.EQ.50) THEN                                        VVRHO 60
            DISTR= BETI*VV**(BETI-1D0)                                  VVRHO 61
C XREFER TIMES DAMEL                                                    VVRHO 62
         ELSEIF(KEYD.EQ.51) THEN                                        VVRHO 63
            DISTR= BETI*VV**(BETI-1D0)*DAMEL                            VVRHO 64
C XREFER TIMES DILATATION FACTOR DILAT                                  VVRHO 65
         ELSEIF(KEYD.EQ.52) THEN                                        VVRHO 66
            DISTR= BETI*VV**(BETI-1D0)*DILAT                            VVRHO 67
         ENDIF                                                          VVRHO 68
C ------------------------------------------------------------          VVRHO 69
C ------------- Soft part only  -- YFS exponentiation                   VVRHO 70
C ------------------------------------------------------------          VVRHO 71
      ELSEIF(KEYD.GE. 101.AND.KEYD.LE.102) THEN                         VVRHO 72
         DELB   = ALF1*(0.5D0*BILG -1D0  +PI**2/3D0)                    VVRHO 73
         GAMFAC =EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                     VVRHO 74
C ....first order                                                       VVRHO 75
         IF(KEYD  .EQ. 101) THEN                                        VVRHO 76
            DELS = ALF1*(BILG-1D0)                                      VVRHO 77
C ....Second Order                                                      VVRHO 78
         ELSEIF(KEYD  .EQ. 102) THEN                                    VVRHO 79
            DELS = ALF1*(BILG-1D0) +0.5D0*(ALF1*BILG)**2                VVRHO 80
         ENDIF                                                          VVRHO 81
         DISTR=  GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*( 1D0+DELS)       VVRHO 82
C ---------------------------------------------------------------       VVRHO 83
C ------------- Hard part only - no exponentiation                      VVRHO 84
C ---------------------------------------------------------------       VVRHO 85
      ELSEIF(KEYD.GE. 105.AND.KEYD.LE.106 ) THEN                        VVRHO 86
         Z=1D0-VV                                                       VVRHO 87
C ....First  Order                                                      VVRHO 88
         IF(KEYD  .EQ. 105) THEN                                        VVRHO 89
            DISTR =  BETI*(1D0 +Z**2)/2D0/VV                            VVRHO 90
C ....Second Order                                                      VVRHO 91
         ELSEIF(KEYD  .EQ. 106) THEN                                    VVRHO 92
            DIST1 =  BETI*(1D0 +Z**2)/2D0/VV                            VVRHO 93
            DELH2 =  (ALF1*BILG)**2*(                                   VVRHO 94
     $             -(1D0+Z*Z)/VV*DLOG(Z)                                VVRHO 95
     $              +(1D0+Z)*(0.5D0*DLOG(Z)-2D0*DLOG(VV))               VVRHO 96
     $              -2.5D0-0.5D0*Z  )                                   VVRHO 97
            DIST2 =  (ALF1*BILG)**2*( 3 +4*DLOG(VV))/VV +DELH2          VVRHO 98
            DISTR =  DIST1+DIST2                                        VVRHO 99
         ENDIF                                                          VVRHO100
C ---------------------------------------------------------------       VVRHO101
C ---------------------------------------------------------------       VVRHO102
C ----- exponentiation following Kuraiev Fadin prescription             VVRHO103
C ---------------------------------------------------------------       VVRHO104
      ELSEIF(KEYD.GE.201.AND.KEYD.LE.202) THEN                          VVRHO105
C First Order  from Gerrit Burgers (POLARIZATION BOOK)                  VVRHO106
         DZ2 = PI**2/6D0                                                VVRHO107
         Z=1D0-VV                                                       VVRHO108
         IF(KEYD  .EQ.201) THEN                                         VVRHO109
            DELVS= ALF1*(1.5D0*BILG +2D0*DZ2-2D0)                       VVRHO110
            DELH=  -ALF1*(1D0+Z)*(BILG-1D0)                             VVRHO111
         ELSEIF(KEYD  .EQ.202) THEN                                     VVRHO112
            DELVS= ALF1*(1.5D0*BILG +2D0*DZ2-2D0)                       VVRHO113
     $            +ALF1**2*(9D0/8D0-2D0*DZ2)*BILG**2                    VVRHO114
            DELH=  -ALF1*(1D0+Z)*(BILG-1D0)                             VVRHO115
     $      +ALF1**2*( -(1D0+Z*Z)/VV     *DLOG(Z)                       VVRHO116
     $              +(1D0+Z)*(0.5D0*DLOG(Z)-2D0*DLOG(VV))               VVRHO117
     $              -2.5D0-0.5D0*Z)*BILG**2                             VVRHO118
         ENDIF                                                          VVRHO119
         DISTR=  BETI*VV**(BETI-1D0)*( 1D0+DELVS) +DELH                 VVRHO120
C ---------------------------------------------------------------       VVRHO121
C ------------- YFS ad-hoc exponentiation -----------------------       VVRHO122
C ---------------------------------------------------------------       VVRHO123
      ELSEIF(KEYD.GE.300.AND.KEYD.LE.302) THEN                          VVRHO124
         DELB   = ALF1*(0.5D0*BILG -1D0  +PI**2/3D0)                    VVRHO125
         GAMFAC =EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                     VVRHO126
C ....Zero   Order                                                      VVRHO127
         IF(KEYD  .EQ.300)  THEN                                        VVRHO128
            DELS = 0D0                                                  VVRHO129
            DELH = -BETI/4 *LOG(1-VV)                                   VVRHO130
C ....First  Order                                                      VVRHO131
         ELSEIF(KEYD  .EQ.301)  THEN                                    VVRHO132
            DELS = BETI/2                                               VVRHO133
            DELH = VV*(-1 +VV/2)                                        VVRHO134
     $      -BETI/2*VV**2 - BETI/4*(1-VV)**2*LOG(1-VV)                  VVRHO135
C ....Second Order                                                      VVRHO136
         ELSEIF(KEYD  .EQ.302)  THEN                                    VVRHO137
            DELS = ALF1*(BILG-1D0) +0.5D0*(ALF1*BILG)**2                VVRHO138
            DELH = VV*(-1D0+VV/2D0)                                     VVRHO139
     $      +ALF1*BILG*(-0.25D0*(4D0-6D0*VV+3D0*VV**2)*DLOG(1D0-VV) -VV)VVRHO140
         ENDIF                                                          VVRHO141
         DISTR= GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*(1 +DELS + DELH )  VVRHO142
C----------------------------------------------------------------       VVRHO143
C-------------- YFS ad-hoc exponentiation -----------------------       VVRHO144
C-------------Contributions  from various beta's ----------------       VVRHO145
C----------------------------------------------------------------       VVRHO146
      ELSEIF(KEYD.GE.310.AND.KEYD.LE.322)  THEN                         VVRHO147
         DELB   = ALF1*(0.5D0*BILG -1D0  +PI**2/3D0)                    VVRHO148
         GAMFAC = EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                    VVRHO149
         SOFT   = 0D0                                                   VVRHO150
         DELH   = 0D0                                                   VVRHO151
C ...Beta0 First  Order                                                 VVRHO152
         IF(KEYD.EQ.310) THEN                                           VVRHO153
            SOFT = 1 + BETI/2                                           VVRHO154
            DELH = -BETI/4 *LOG(1-VV)                                   VVRHO155
C ...Beta1 First  Order                                                 VVRHO156
         ELSEIF(KEYD.EQ. 311)  THEN                                     VVRHO157
            DELH =                                                      VVRHO158
     $      VV*(-1D0+VV/2/(1+BETI))*(1-0.5*BETI*LOG(1-VV))              VVRHO159
C ...Beta0 Second Order                                                 VVRHO160
         ELSEIF(KEYD.EQ.320) THEN                                       VVRHO161
            SOFT = 1 + BETI/2  +BETI**2/8                               VVRHO162
            DELH = -BETI/4 *LOG(1-VV)                                   VVRHO163
C ...Beta1 Second Order                                                 VVRHO164
         ELSEIF(KEYD.EQ. 321)  THEN                                     VVRHO165
            DELH = VV*(-1+VV/2)                                         VVRHO166
     $      -BETI*VV/2 -BETI*VV**2/4 +BETI/8*(-2+6*VV-3*VV**2)*LOG(1-VV)VVRHO167
C ...Beta2 Second Order                                                 VVRHO168
         ELSEIF(KEYD.EQ. 322)  THEN                                     VVRHO169
            DELH =    BETI*  VV**2/4D0                                  VVRHO170
         ENDIF                                                          VVRHO171
         DISTR=  GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*(SOFT+DELH)       VVRHO172
C -------------------------------------------------------------------   VVRHO173
C -------------------YFS formula-------------------------------------   VVRHO174
C -------------Single fermion LL fragmentation ----------------------   VVRHO175
C -------------------------------------------------------------------   VVRHO176
      ELSEIF(KEYD.GE.400.AND.KEYD.LE.402)  THEN                         VVRHO177
C&&&&&&  DELB   = BETI/4                                                VVRHO178
         DELB   = BETI/4  +ALF1*(-0.5D0  +PI**2/3D0)                    VVRHO179
         GAMFAC = EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                    VVRHO180
         SOFT   = 0D0                                                   VVRHO181
         DELH   = 0D0                                                   VVRHO182
C ...Zero   Order                                                       VVRHO183
         IF(KEYD.EQ.400) THEN                                           VVRHO184
            SOFT = 1                                                    VVRHO185
C ...First  Order                                                       VVRHO186
         ELSEIF(KEYD.EQ.401) THEN                                       VVRHO187
            SOFT = 1 + BETI/2                                           VVRHO188
            DELH =                                                      VVRHO189
     $      VV*(-1D0+VV/2/(1+BETI))                                     VVRHO190
C ...Second Order                                                       VVRHO191
         ELSEIF(KEYD.EQ.402) THEN                                       VVRHO192
            SOFT = 1 + BETI/2  +BETI**2/8                               VVRHO193
C           DELH =                                                      VVRHO194
C    $      VV*(1+0.5*BETI)*(-1D0+VV/2/(1+BETI))                        VVRHO195
C    $      -0.50*BETI*LOG(1-VV)*0.5*(1+(1-VV)**2)                      VVRHO196
C    $      + BETI/4D0*VV*(VV +(1-VV/2)*DLOG(1D0-VV))                   VVRHO197
            DELH =                                                      VVRHO198
     $      VV*(-1D0+VV/2)                                              VVRHO199
     $      + BETI*(-VV/2 -(1+3*(1-VV)**2)/8*DLOG(1D0-VV))              VVRHO200
         ENDIF                                                          VVRHO201
         DISTR=  GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*(SOFT+DELH)       VVRHO202
C -------------------------------------------------------------------   VVRHO203
C -------------Single fermion LL fragmentation ----------------------   VVRHO204
C -------------Contributions  from various beta's -------------------   VVRHO205
C -------------------------------------------------------------------   VVRHO206
      ELSEIF(KEYD.GE.400.AND.KEYD.LE.422)  THEN                         VVRHO207
C&&&&&   DELB   = BETI/4                                                VVRHO208
         DELB   = BETI/4  +ALF1*(-0.5D0  +PI**2/3D0)                    VVRHO209
         GAMFAC = EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                    VVRHO210
         SOFT   = 0D0                                                   VVRHO211
         DELH   = 0D0                                                   VVRHO212
C ...Beta0 zero   Order                                                 VVRHO213
         IF(KEYD.EQ.400) THEN                                           VVRHO214
            SOFT = 1                                                    VVRHO215
C ...Beta0 First  Order                                                 VVRHO216
         ELSEIF(KEYD.EQ.410) THEN                                       VVRHO217
            SOFT = 1 + BETI/2                                           VVRHO218
C ...Beta1 First  Order                                                 VVRHO219
         ELSEIF(KEYD.EQ. 411)  THEN                                     VVRHO220
            DELH =                                                      VVRHO221
     $      VV*(-1D0+VV/2/(1+BETI))                                     VVRHO222
C ...Beta0 Second Order                                                 VVRHO223
         ELSEIF(KEYD.EQ.420) THEN                                       VVRHO224
            SOFT = 1 + BETI/2  +BETI**2/8                               VVRHO225
C ...Beta1 Second Order                                                 VVRHO226
         ELSEIF(KEYD.EQ. 421)  THEN                                     VVRHO227
            DELH =                                                      VVRHO228
     $      VV*(1+0.5*BETI)*(-1D0+VV/2/(1+BETI))                        VVRHO229
     $      -0.50*BETI*LOG(1-VV)*0.5*(1+(1-VV)**2)                      VVRHO230
C ...Beta2 Second Order                                                 VVRHO231
         ELSEIF(KEYD.EQ. 422)  THEN                                     VVRHO232
            DELH = BETI/4D0*VV*(VV +(1-VV/2)*DLOG(1D0-VV))              VVRHO233
         ELSE                                                           VVRHO234
            GOTO 900                                                    VVRHO235
         ENDIF                                                          VVRHO236
         DISTR=  GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*(SOFT+DELH)       VVRHO237
C ----------------------------------------------------------------      VVRHO238
C -------------Single fermion LL fragmentation -------------------      VVRHO239
C -------------I N F I N I T E   O R D E R -----------------------      VVRHO240
C ----------------------------------------------------------------      VVRHO241
      ELSEIF(KEYD.EQ.502)  THEN                                         VVRHO242
         DELB   = BETI*0.75D0                                           VVRHO243
         GAMFAC = EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                    VVRHO244
         SOFT   = 1                                                     VVRHO245
         DELH =                                                         VVRHO246
     $   VV*(-1D0+VV/2)                                                 VVRHO247
     $   + BETI*(-VV**2/4 -(1+3*(1-VV)**2)/8*DLOG(1D0-VV))              VVRHO248
         DISTR=  GAMFAC*EXP(DELB)*BETI*VV**(BETI-1D0)*(SOFT+DELH)       VVRHO249
      ELSE                                                              VVRHO250
         GOTO 900                                                       VVRHO251
      ENDIF                                                             VVRHO252
      VVRHO = DISTR                                                     VVRHO253
      RETURN                                                            VVRHO254
 900  WRITE(6,*) ' ===--->  WRONG KEYDIS IN VVRHO',KEYD                 VVRHO255
      STOP                                                              VVRHO256
      END                                                               VVRHO257
      FUNCTION BREFKF(KEY,EREL)                                         BREFKF 2
C     *************************                                         BREFKF 3
C Non-MonteCarlo integration of the u-distribution FINAL st.bremss.     BREFKF 4
C Gauss method, change of variables with help of CHBIN1                 BREFKF 5
C     ************************                                          BREFKF 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BREFKF 7
C COMMON KEYDST COMMUNICATES ONLY UUDISB - INTEGRAND FUNCTION           BREFKF 8
      COMMON / KEYDST / KEYDIS                                          KEYDST 2
      SAVE   / KEYDST /                                                 BREFKF10
      EXTERNAL UUDISB                                                   BREFKF11
C                                                                       BREFKF12
      KEYDIS=KEY                                                        BREFKF13
      PREC= DABS( EREL)                                                 BREFKF14
      XA= 0D0                                                           BREFKF15
      XB= 1D0                                                           BREFKF16
      CALL GAUSJD(UUDISB,XA,XB,PREC,RESULT)                             BREFKF17
      BREFKF=RESULT                                                     BREFKF18
      END                                                               BREFKF19
      FUNCTION UUDISB(R)                                                UUDISB 2
C     ******************                                                UUDISB 3
C INTEGRAND FOR BREFKF                                                  UUDISB 4
C MAPPING XX => UU CHANGE  TO IMPROVE ON EFFICIENCY                     UUDISB 5
C     ************************                                          UUDISB 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               UUDISB 7
      PARAMETER( FLEPS =1D-35)                                          UUDISB 8
      PARAMETER( PI=3.1415926535897932D0,ALFINV= 137.03604D0)           UUDISB 9
      PARAMETER( ALF1=1D0/ALFINV/PI)                                    UUDISB10
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             UUDISB12
      COMMON / KEYDST / KEYDIS                                          UUDISB13
      SAVE / WEKING /,/ VVREC  /,/ KEYDST /                             UUDISB14
C                                                                       UUDISB15
      KEYD=KEYDIS                                                       UUDISB16
      BETF= 2/ALFINV/PI*(DLOG(4*ENE**2/AMFIN**2)-1)                     UUDISB17
      X = MAX(R,FLEPS**BETF)                                            UUDISB18
      ALF=  BETF                                                        UUDISB19
      BET=  1D0                                                         UUDISB20
C ...YFS exponentiation beta0,1,2 contribs                              UUDISB21
      IF(KEYD.EQ.310) THEN                                              UUDISB22
        ALF=  BETF                                                      UUDISB23
      ELSEIF(KEYD.EQ.311)  THEN                                         UUDISB24
        ALF=  BETF +1                                                   UUDISB25
      ELSEIF(KEYD.EQ.320) THEN                                          UUDISB26
        ALF=  BETF                                                      UUDISB27
      ELSEIF(KEYD.EQ.321)  THEN                                         UUDISB28
        ALF=  BETF +1                                                   UUDISB29
      ELSEIF(KEYD.EQ.322)  THEN                                         UUDISB30
        ALF=  BETF +2                                                   UUDISB31
      ENDIF                                                             UUDISB32
      CALL CHBIN1(X,ALF,BET,VVMAX,UU,RJAC)                              UUDISB33
      SVAR   = 4D0*ENE**2                                               UUDISB34
      UUDISB=UURHO(KEYD,SVAR,AMFIN,UU)*RJAC                             UUDISB35
      END                                                               UUDISB36
      FUNCTION UURHO(KEYDIS,SVAR,AMFIN,UU)                              UURHO  2
C     ******************************************                        UURHO  3
C--------------------------------------------------------------         UURHO  4
C The parametrization of the final state bremss. as in YFS3             UURHO  5
C Various types of the rho(u) distribution                              UURHO  6
C--------------------------------------------------------------         UURHO  7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               UURHO  8
      PARAMETER(PI= 3.1415926535897932D0, ALFINV=137.03604D0)           UURHO  9
      PARAMETER(CEULER =0.57721566D0)                                   UURHO 10
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 UURHO 12
C                                                                       UURHO 13
      KEYD   = KEYDIS                                                   UURHO 14
      ALF1   = 1D0/PI/ALFINV                                            UURHO 15
      SPRIM  = SVAR*(1-UU)                                              UURHO 16
      BILG   = DLOG(SPRIM/AMFIN**2)                                     UURHO 17
      BETF   = 2D0*ALF1*(BILG-1D0)                                      UURHO 18
C -------------YFS formula ------------------------------------------   UURHO 19
      IF(KEYD.GE.300.AND.KEYD.LE.302) THEN                              UURHO 20
         DELB   = ALF1*(0.5D0*BILG -1D0  +PI**2/3D0)                    UURHO 21
         DELB   = DELB -BETF/2 *DLOG(1-UU)                              UURHO 22
         GAMFAC =EXP(-CEULER*BETF)/DPGAMM(1D0+BETF)                     UURHO 23
C ....Zero   Order                                                      UURHO 24
         IF(KEYD  .EQ.300)  THEN                                        UURHO 25
            DELS = 0D0                                                  UURHO 26
            DELH = -BETF/4 *LOG(1-UU)                                   UURHO 27
C ....First  Order                                                      UURHO 28
         ELSEIF(KEYD  .EQ.301)  THEN                                    UURHO 29
            DELS = BETF/2                                               UURHO 30
            DELH = UU*(-1 +UU/2)                                        UURHO 31
     $       +BETF*(-UU**2/2 - 0.25D0*(1-UU)**2*LOG(1-UU) )             UURHO 32
C final state specific contr.                                           UURHO 33
     $       +BETF*UU/2*(1-UU/2)*LOG(1-UU)                              UURHO 34
C ....Second Order                                                      UURHO 35
         ELSEIF(KEYD  .EQ.302)  THEN                                    UURHO 36
            DELS  = BETF/2D0 +BETF**2/8D0                               UURHO 37
            DELH  = UU*(-1D0+UU/2D0)                                    UURHO 38
     $        +BETF*( -UU/2  +(2*UU-UU**2)/8*LOG(1-UU) )                UURHO 39
         ENDIF                                                          UURHO 40
         DISTR= GAMFAC*EXP(DELB)*BETF*UU**(BETF-1D0)*(1 +DELS +DELH )   UURHO 41
C -------------------------------------------------------------------   UURHO 42
C -------------Contributions  from various beta's -------------------   UURHO 43
      ELSEIF(KEYD.GE.310.AND.KEYD.LE.322)  THEN                         UURHO 44
         DELB   = ALF1*(0.5D0*BILG -1D0  +PI**2/3D0)                    UURHO 45
         DELB   = DELB -BETF/2 *DLOG(1-UU)                              UURHO 46
         GAMFAC = EXP(-CEULER*BETF)/DPGAMM(1D0+BETF)                    UURHO 47
         SOFT   = 0D0                                                   UURHO 48
         DELH   = 0D0                                                   UURHO 49
C ...Beta0 First  Order                                                 UURHO 50
         IF(KEYD.EQ.310) THEN                                           UURHO 51
            SOFT = 1 + BETF/2                                           UURHO 52
            DELH = -BETF/4 *LOG(1-UU)                                   UURHO 53
C ...Beta1 First  Order                                                 UURHO 54
         ELSEIF(KEYD.EQ. 311)  THEN                                     UURHO 55
            DELH =                                                      UURHO 56
     $      UU*(-1D0+UU/2/(1+BETF))*(1-0.5*BETF*LOG(1-UU))              UURHO 57
     $       -BETF*UU/2*(-1+UU/2)*LOG(1-UU)                             UURHO 58
C ...Beta0 Second Order                                                 UURHO 59
         ELSEIF(KEYD.EQ.320) THEN                                       UURHO 60
            SOFT = 1 + BETF/2  +BETF**2/8                               UURHO 61
            DELH = -BETF/4 *LOG(1-UU)                                   UURHO 62
C ...Beta1 Second Order                                                 UURHO 63
         ELSEIF(KEYD.EQ. 321)  THEN                                     UURHO 64
            DELH =                                                      UURHO 65
     $      UU*(1+0.5*BETF)*(-1D0+UU/2/(1+BETF))*(1-0.5*BETF*LOG(1-UU)) UURHO 66
     $       +0.25*BETF*LOG(1-UU)*0.5*(1+(1-UU)**2)                     UURHO 67
C final state specific contrib.                                         UURHO 68
     $       +BETF*UU/2*(1-UU/2)*LOG(1-UU)                              UURHO 69
C           DELH = UU*(-1D0+UU/2D0)                                     UURHO 70
C    $       +BETF*(-UU/2 -UU**2/4 +(2+2*UU-UU**2)/8D0*LOG(1-UU))       UURHO 71
C ...Beta2 Second Order                                                 UURHO 72
         ELSEIF(KEYD.EQ. 322)  THEN                                     UURHO 73
            DELH =    BETF*UU/2*( UU/2  -(1-UU/2)*LOG(1-UU) )           UURHO 74
         ENDIF                                                          UURHO 75
         DISTR=  GAMFAC*EXP(DELB)*BETF*UU**(BETF-1D0)*(SOFT+DELH)       UURHO 76
      ELSE                                                              UURHO 77
         WRITE(IOUT,*) ' ===--->  WRONG KEYDIS IN UURHO'                UURHO 78
         STOP                                                           UURHO 79
      ENDIF                                                             UURHO 80
      UURHO = DISTR                                                     UURHO 81
      END                                                               UURHO 82
C=============================================================          UURHO 83
      SUBROUTINE EXPAND(MODE,XPAR,NPAR)                                 EXPAND 2
C     ****************************************                          EXPAND 3
C  !!!!! LOGBOOK OF CORRECTIONS starting Nov. 91 !!!                    EXPAND 4
C  R1 and R2 in KINEKR undefined                                        EXPAND 5
C  BREMKF, VVDIST moved to yfs3mod.f                                    EXPAND 6
C  VVDIST replaced with VVRHO from YFSFIG                               EXPAND 7
C  VESK8A replaced by VESK1W                                            EXPAND 8
C  FUNSKO replaced by RHOSKO (change of name)                           EXPAND 9
C  GAUSS replaced by GAUSJD                                             EXPAND10
C  CMSENE shiftet to XPAR !!! 3 first entries in XPAR changed           EXPAND11
C  CHBIN2 replaced by CHBIN1                                            EXPAND12
C  XPAR(10,12) in output are swapped (to bhlumi convention)             EXPAND13
*  Initialization of GLIBK in the generator                             EXPAND14
*  Bug with parameter(pi=...) corrected                                 EXPAND15
C=======================================================================EXPAND16
C=======================================================================EXPAND17
C=============================YFS3======================================EXPAND18
C=====================FERMION PAIR PRODUCTION===========================EXPAND19
C===============INITIAL AND FINAL STATE EXPONENTIATION==================EXPAND20
C=======================================================================EXPAND21
C=======================================================================EXPAND22
C=======================YFS VERSION 3.3.0===============================EXPAND23
C=======================================================================EXPAND24
C=========================FEBRUARY  1993================================EXPAND25
C=======================================================================EXPAND26
C AUTHORS:                                                              EXPAND27
C    S. JADACH, JAGELLONIAN UNIVERSITY, CRACOW, POLAND                  EXPAND28
C    B.F.L. WARD, UNIVERSITY OF TENNESSEE, KNOXVILLE, TENNESSEE         EXPAND29
C=======================================================================EXPAND30
C                                                                       EXPAND31
C SOME CONTROLL HISTOGRAMING STILL IN PROGRAM                           EXPAND32
C                                                                       EXPAND33
C generator of yennie-frautschi-suura type                              EXPAND34
C with exponentiated single bremsstrahlung                              EXPAND35
C********* input                                                        EXPAND36
C mode =-1/0/1/2 defines                                                EXPAND37
C       initialization/generation/give-xsection/final-report            EXPAND38
C cmsene   = centre of mass energy (gev)                                EXPAND39
C npar(1)=keyrad=1000001 initial state only                             EXPAND40
C         keyrad=1000010 final state only                               EXPAND41
C         keyrad=1000011 initial + final state                          EXPAND42
C         keyrad=1000000 born without any bremss.                       EXPAND43
C         keyrad=100n001 fixed initial state multiplicity (tests)       EXPAND44
C         keyrad=10k0010 fixed final   state multiplicity (tests)       EXPAND45
C npar(2)=keyred=0,1,2   three different reduction procedures           EXPAND46
C npar(3)=keywgt=0,1   unweighted/weighted events                       EXPAND47
C xpar(1)=cmsene  =  mass of z0                                         EXPAND48
C xpar(2)=amaz    =  mass of z0                                         EXPAND49
C xpar(3)=sinw2   =  sin(thetaweinberg)**2                              EXPAND50
C xpar(4)=gammz   =  width of z0                                        EXPAND51
C xpar(5)=amfin   =  mass of final fermion                              EXPAND52
C xpar(6)=vvmin   =  minimum v-variable (dimesionless) =epsilon         EXPAND53
C xpar(7)=vvmax   =  maximum v-variable                                 EXPAND54
C********* output                                                       EXPAND55
C fourmomenta and photon multiplicity in /momset/                       EXPAND56
C xpar(10)=xsecnb = cross section in nanobarns                          EXPAND57
C xpar(11)=errel  = relative error (dimensionless)                      EXPAND58
C xpar(12)=xsmc   = cross section in r-units                            EXPAND59
C npar(10)=nevacc = number of generated events                          EXPAND60
C**************************                                             EXPAND61
C For advanced users only:                                              EXPAND62
C (1) One may use KEYRAD < 0  for running at fixed v-variable,          EXPAND63
C in this case all events have  v=VMAX precisely.                       EXPAND64
C (2) For KEYWGT=1 weighted events are generated and the user should    EXPAND65
C use the weight WTMOD from the common block /WGTALL/.                  EXPAND66
C WTMOD is the actual model weight depending on other input params.     EXPAND67
C The other interesting possibility is to use                           EXPAND68
C     WT=WTCRU1*WTCRU2*WTSET(i) where                                   EXPAND69
C     WTSET(71) =   zero-th order initial+final                         EXPAND70
C     WTSET(72) =   first order   initial+final                         EXPAND71
C     WTSET(73) =   second order  initial+final                         EXPAND72
C and the following provide the corresponding components of x-section.  EXPAND73
C     WTSET(80) =   First order, beta0 contribution alone               EXPAND74
C     WTSET(81) =   First order, beta1 contribution alone               EXPAND75
C     WTSET(90) =   Second order, beta0 contribution alone              EXPAND76
C     WTSET(91) =   Second order, beta1 contribution alone              EXPAND77
C     WTSET(92) =   Second order, beta2 contribution alone              EXPAND78
C furthermore, for the initial state alone we provide                   EXPAND79
C     WTSET( 1) =   zero-th order initial                               EXPAND80
C     WTSET( 2) =   first order   initial                               EXPAND81
C     WTSET( 3) =   second order  initial                               EXPAND82
C and the corresponding components                                      EXPAND83
C     WTSET(20) =   First order, beta0 contribution alone               EXPAND84
C     WTSET(21) =   First order, beta1 contribution alone               EXPAND85
C     WTSET(30) =   Second order, beta0 contribution alone              EXPAND86
C     WTSET(31) =   Second order, beta1 contribution alone              EXPAND87
C     WTSET(32) =   Second order, beta2 contribution alone              EXPAND88
C N.B. WTMOD=WTCRU1*WTCRU2*WTSET(71)                                    EXPAND89
C     ************************                                          EXPAND90
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               EXPAND91
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      PARAMETER(PI=3.1415926535897932D0,ALFINV=137.03604D0)             EXPAN100
      DIMENSION  XPAR( *),NPAR( *)                                      EXPAN101
      COMMON / CGLIB / BLIBK(20000)                                     EXPAN102
      SAVE   / CGLIB /                                                  EXPAN103
      COMMON / WGTALL / WTMOD,WTCRU1,WTCRU2,WTSET(100)                  EXPAN104
      DIMENSION XXF(4)                                                  EXPAN105
      SAVE   / CMONIT /,/ MOMSET /,/ MOMINI /,/ MOMFIN /,/ WEKING /     EXPAN106
      SAVE   / WGTALL /,/ KEYYFS /,/ INOUT  /,/ BXFMTS /                EXPAN107
      SAVE   NEVGEN,KEYBIN,KEYBFI,CMSENE                                EXPAN108
      SAVE   IDYFS, WTMAX                                               EXPAN109
      IF(MODE.EQ.-1) THEN                                               EXPAN110
C     ==================================================================EXPAN111
C     =====================INITIALIZATION===============================EXPAN112
C     ==================================================================EXPAN113
                                                                        EXPAN114
 6900 FORMAT('1',10(/,10X,A))                                           EXPAN115
      WRITE(IOUT,6900)                                                  EXPAN116
     $'  *************************************************************',EXPAN117
     $'  *  ****   ****  **********    *******          ***********  *',EXPAN118
     $'  *  ****   ****  **********  **********         **********   *',EXPAN119
     $'  *   **** ****   ****        *****                 ******    *',EXPAN120
     $'  *    ******     ********      ******    *****    ******     *',EXPAN121
     $'  *     ****      ********         *****  *****      ******   *',EXPAN122
     $'  *     ****      ****        **********         ***********  *',EXPAN123
     $'  *     ****      ****         *******           **********   *',EXPAN124
     $'  *************************************************************',EXPAN125
     $' '                                                               EXPAN126
                                                                        EXPAN127
* ==========================================================            EXPAN128
* Initialization of internal histogramming package GLIBK                EXPAN129
* Let us keep for YFS3 the GLIBK ID-ent range from 2 to 1000            EXPAN130
* ==========================================================            EXPAN131
      CALL GLIMIT(20000)                                                EXPAN132
      CALL GOUTPU(IOUT)                                                 EXPAN133
                                                                        EXPAN134
      CALL FILEXP(XPAR,NPAR)                                            EXPAN135
      IDYFS = 0                                                         EXPAN136
      CALL GBOOK1(IDYFS +5,'WT EXPAND  NPHOT.NE.0  $', 60 ,-1D0, 5D0)   EXPAN137
      CALL GBOOK1(IDYFS +6,'WT EXPAND  NPHOT.NE.0  $', 60 ,-1D0, 0D0)   EXPAN138
      CALL GBOOK1(IDYFS+11,'PHOTON MULTIPLICITY    $', 50,  0D0,50D0)   EXPAN139
C GMONIT MONITORS WEIGHTS                                               EXPAN140
      CALL GMONIT(-1,IDYFS+71,0D0,1D0,1D0)                              EXPAN141
      CALL GMONIT(-1,IDYFS+72,0D0,1D0,1D0)                              EXPAN142
      CALL GMONIT(-1,IDYFS+73,0D0,1D0,1D0)                              EXPAN143
      CALL GMONIT(-1,IDYFS+74,0D0,1D0,1D0)                              EXPAN144
      CALL GMONIT(-1,IDYFS+75,0D0,1D0,1D0)                              EXPAN145
      CALL GMONIT(-1,IDYFS+78,0D0,1D0,1D0)                              EXPAN146
      CALL GMONIT(-1,IDYFS+79,0D0,1D0,1D0)                              EXPAN147
      CALL GMONIT(-1,IDYFS+70,0D0,1D0,1D0)                              EXPAN148
      CALL GMONIT(-1,IDYFS+80,0D0,1D0,1D0)                              EXPAN149
      CALL GMONIT(-1,IDYFS+81,0D0,1D0,1D0)                              EXPAN150
      CALL GMONIT(-1,IDYFS+90,0D0,1D0,1D0)                              EXPAN151
      CALL GMONIT(-1,IDYFS+91,0D0,1D0,1D0)                              EXPAN152
      CALL GMONIT(-1,IDYFS+92,0D0,1D0,1D0)                              EXPAN153
      CMSENE = 2D0*ENE                                                  EXPAN154
      KEYBIN = MOD(KEYBRM,10)                                           EXPAN155
      KEYBFI = MOD(KEYBRM,100)/10                                       EXPAN156
      IF(KEYBIN.EQ.1) CALL KARLUD(-1,DUM1,DUM2)                         EXPAN157
      IF(KEYBFI.EQ.1) CALL KARFIN(-1, XXF,DUMM1,DUMM2)                  EXPAN158
      CALL  MODEL(-1,DUM1,DUM2)                                         EXPAN159
      NEVGEN=0                                                          EXPAN160
      ELSEIF(MODE.EQ.0) THEN                                            EXPAN161
C     ==================================================================EXPAN162
C     =====================GENERATION===================================EXPAN163
C     ==================================================================EXPAN164
      NEVGEN=NEVGEN+1                                                   EXPAN165
  100 CONTINUE                                                          EXPAN166
C ===================                                                   EXPAN167
C ...Initial state YFS2 type generator                                  EXPAN168
         IF(KEYBIN.EQ.1) THEN                                           EXPAN169
            CALL KARLUD( 0,WTKARL,DUM2)                                 EXPAN170
         ELSE                                                           EXPAN171
            CALL GIBEA(CMSENE,AMFIN,XF1,XF2)                            EXPAN172
            WTKARL = 1D0                                                EXPAN173
            NPHOX  = 0                                                  EXPAN174
         ENDIF                                                          EXPAN175
C ...Four-momentum of virtual Z                                         EXPAN176
         DO 27 K=1,4                                                    EXPAN177
  27     XXF(K) = XF1(K)+XF2(K)                                         EXPAN178
C ===================                                                   EXPAN179
C ...Final state momenta in the Z frame                                 EXPAN180
         IF(KEYBFI.EQ.1) THEN                                           EXPAN181
            CALL KARFIN(0, XXF,AMFIN,WTCFIN)                            EXPAN182
         ELSE                                                           EXPAN183
C ...No final state bremss, fermion momenta defined in Z frame          EXPAN184
            CALL KINF2( XXF,AMFIN,YF1,YF2)                              EXPAN185
            WTCFIN = 1D0                                                EXPAN186
            NPHOY  = 0                                                  EXPAN187
         ENDIF                                                          EXPAN188
C ...Merging momenta and transform to CMS frame                         EXPAN189
         CALL MERGIF                                                    EXPAN190
C =================== All kinematics is fixed at this point =======     EXPAN191
         WTCRU1 = WTKARL                                                EXPAN192
         WTCRU2 = WTCFIN                                                EXPAN193
         WTCRUD = WTKARL*WTCFIN                                         EXPAN194
C =================== All weights are fixed at this point =========     EXPAN195
CCCC     IF(NEVGEN.LE.5) CALL DUMPI(IOUT)                               EXPAN196
CCCC     IF(NEVGEN.LE.5) CALL DUMPF(IOUT)                               EXPAN197
C ...Model weight                                                       EXPAN198
         CALL MODEL(0,WTMAX,WTMDL)                                      EXPAN199
C ...principal model weight for WT=1 events (after rejection)           EXPAN200
         WT     = WTCRUD*WTMDL                                          EXPAN201
C ...Weigt monitoring                                                   EXPAN202
         CALL GMONIT(0,IDYFS+73,WTCRUD*WTSET(73),WTMAX,0D0)             EXPAN203
         CALL GMONIT(0,IDYFS+72,WTCRUD*WTSET(72),WTMAX,0D0)             EXPAN204
         CALL GMONIT(0,IDYFS+71,WTCRUD*WTSET(71),WTMAX,0D0)             EXPAN205
         CALL GMONIT(0,IDYFS+75,WTCRUD*(WTSET(73)-WTSET(72)),WTMAX,0D0) EXPAN206
         CALL GMONIT(0,IDYFS+74,WTCRUD*(WTSET(72)-WTSET(71)),WTMAX,0D0) EXPAN207
         CALL GMONIT(0,IDYFS+80,WTCRUD*WTSET(80),WTMAX,0D0)             EXPAN208
         CALL GMONIT(0,IDYFS+81,WTCRUD*WTSET(81),WTMAX,0D0)             EXPAN209
         CALL GMONIT(0,IDYFS+90,WTCRUD*WTSET(90),WTMAX,0D0)             EXPAN210
         CALL GMONIT(0,IDYFS+91,WTCRUD*WTSET(91),WTMAX,0D0)             EXPAN211
         CALL GMONIT(0,IDYFS+92,WTCRUD*WTSET(92),WTMAX,0D0)             EXPAN212
C ...test histograms                                                    EXPAN213
         XMULT=FLOAT(NPHOT)+.1D0                                        EXPAN214
         CALL GF1(IDYFS+11,XMULT,1D0)                                   EXPAN215
         IF(NPHOT.GE.0) CALL GF1(IDYFS+5,WT,1D0)                        EXPAN216
         IF(WT.LT.0.)   CALL GF1(IDYFS+6,WT,1D0)                        EXPAN217
C ...Rejection according to principal weight                            EXPAN218
         IF(KEYWGT.EQ.0) THEN                                           EXPAN219
C ...unweihgted events with WT=1                                        EXPAN220
            CALL VARRAN(RN,1)                                           EXPAN221
            CALL GMONIT(0,IDYFS+79,WT ,WTMAX,RN)                        EXPAN222
            IF(WT.LT.0D0) THEN                                          EXPAN223
              RWT=-WT                                                   EXPAN224
            ELSEIF(WT.LT.WTMAX) THEN                                    EXPAN225
              RWT=0.0                                                   EXPAN226
            ELSE                                                        EXPAN227
              RWT=WT-WTMAX                                              EXPAN228
            ENDIF                                                       EXPAN229
            CALL GMONIT(0,IDYFS+70,RWT ,WTMAX,RN)                       EXPAN230
            IF(RN.GT.WT/WTMAX) GOTO 100                                 EXPAN231
            WTMOD=1.D0                                                  EXPAN232
C ...WTCRU1,2  weights are RESET to one                                 EXPAN233
            WTCRU1=1D0                                                  EXPAN234
            WTCRU2=1D0                                                  EXPAN235
         ELSE                                                           EXPAN236
C ...weighted events                                                    EXPAN237
            WTMOD  = WTCRUD*WTMDL                                       EXPAN238
            CALL GMONIT(0,IDYFS+79,WT     ,WTMAX,0D0)                   EXPAN239
            CALL GMONIT(0,IDYFS+78,WTCRUD ,WTMAX,0D0)                   EXPAN240
         ENDIF                                                          EXPAN241
      ELSEIF(MODE.EQ.1.OR.MODE.EQ.2) THEN                               EXPAN242
C     ==================================================================EXPAN243
C     =====================FINAL WEIGHT ANALYSIS========================EXPAN244
C     ==================================================================EXPAN245
      GNANOB=389.385D-30*1.D33                                          EXPAN246
      SIG0NB =  4D0*PI/(ALFINV**2*3D0*CMSENE**2)*GNANOB                 EXPAN247
      XBORNB =  BORNY(CMSENE**2)*SIG0NB                                 EXPAN248
      IF(KEYBIN.EQ.1) THEN                                              EXPAN249
         CALL KARLUD(MODE,XKARL,ERKARL)                                 EXPAN250
      ELSE                                                              EXPAN251
         XKARL  = BORNY(CMSENE**2)                                      EXPAN252
         ERKARL = 0D0                                                   EXPAN253
      ENDIF                                                             EXPAN254
      IF(KEYBFI.EQ.1) CALL KARFIN(MODE,XXF,DUMM1,DUMM2)                 EXPAN255
C                                                                       EXPAN256
      CALL GMONIT(1,IDYFS+79,DUMM1,DUMM2,DUMM3)                         EXPAN257
      NPAR(10)= NEVGEN                                                  EXPAN258
      XSMC   =  XKARL*AVERWT                                            EXPAN259
      EREL   =  SQRT(ERKARL**2+ERRELA**2)                               EXPAN260
      ERABS  =  XSMC*EREL                                               EXPAN261
      XSMCNB =  XSMC*SIG0NB                                             EXPAN262
      ERABS2 =  XSMCNB*EREL                                             EXPAN263
      XPAR(10)= XSMCNB                                                  EXPAN264
      XPAR(11)= EREL                                                    EXPAN265
      XPAR(12)= XSMC                                                    EXPAN266
      IF(KEYWGT.EQ.0) THEN                                              EXPAN267
C ...Weighted events, normal option                                     EXPAN268
         XPAR(20)=XSMCNB                                                EXPAN269
         XPAR(21)=EREL                                                  EXPAN270
         XPAR(22)=XSMC                                                  EXPAN271
      ELSE                                                              EXPAN272
C ...Weighted events, additional information on x-sections              EXPAN273
         CALL GMONIT(1,IDYFS+78,DUMM1,DUMM2,DUMM3)                      EXPAN274
         XPAR(20)= XKARL*SIG0NB                                         EXPAN275
         XPAR(21)= ERRELA                                               EXPAN276
         XPAR(22)= XKARL                                                EXPAN277
      ENDIF                                                             EXPAN278
C NO PRINTOUT FOR MODE =1                                               EXPAN279
      IF(MODE.EQ.1) RETURN                                              EXPAN280
cc    CALL GPRINT(IDYFS+11)                                             EXPAN281
      CALL GPRINT(IDYFS+ 5)                                             EXPAN282
      CALL GPRINT(IDYFS+ 6)                                             EXPAN283
      WRITE(IOUT,BXOPE)                                                 EXPAN284
      WRITE(IOUT,BXTXT) 'EXPAND output - window A'                      EXPAN285
      WRITE(IOUT,BXL1F) CMSENE,     'CMS energy total   ','CMSENE','A0' EXPAN286
      WRITE(IOUT,BXL2F) XSMC,ERABS, 'xs_tot MC R-units  ','XSMC  ','A1' EXPAN287
      WRITE(IOUT,BXL1F) XSMCNB,     'xs_tot    nanob.   ','XSMCNB','A3' EXPAN288
      WRITE(IOUT,BXL1F) ERABS2,     'absolute error     ','ERABS2','A4' EXPAN289
      WRITE(IOUT,BXL1F) EREL,       'relative error     ','EREL  ','A5' EXPAN290
      WRITE(IOUT,BXL1I) NEVTOT,     'total no of events ','NEVTOT','A6' EXPAN291
      WRITE(IOUT,BXL1I) NEVACC,     'accepted    events ','NEVACC','A7' EXPAN292
      WRITE(IOUT,BXL1I) NEVNEG,     'WT<0        events ','NEVNEG','A8' EXPAN293
      WRITE(IOUT,BXL1I) NEVOVE,     'WT>WTMAX    events ','NEVOVE','A9' EXPAN294
      WRITE(IOUT,BXL1F) WTMAX ,     'WTMAX              ','WTMAX ','A10'EXPAN295
      WRITE(IOUT,BXL1F) XBORNB,     'xs_Born   nanob.   ','XBORNB','A11'EXPAN296
      WRITE(IOUT,BXCLO)                                                 EXPAN297
      IF ( (NEVNEG+NEVOVE) .GT. NEVACC/4000) THEN                       EXPAN298
        WRITE(IOUT,BXOPE)                                               EXPAN299
        WRITE(IOUT,BXTXT) ' possible loss of precision !!!!!! '         EXPAN300
        WRITE(IOUT,BXTXT) ' WTMAX too small ?                 '         EXPAN301
        WRITE(IOUT,BXTXT) ' Increase it in SUBROURTINE MODEL! '         EXPAN302
        WRITE(IOUT,BXTXT) ' MANY events of negative weights?  '         EXPAN303
        WRITE(IOUT,BXTXT) ' Contact JADACH at CERNVM,         '         EXPAN304
        WRITE(IOUT,BXTXT) ' But check folowing weights first  '         EXPAN305
        WRITE(IOUT,BXCLO)                                               EXPAN306
        WRITE(IOUT,BXOPE)                                               EXPAN307
        WRITE(IOUT,BXTXT) ' Rejection weight of YFS3               '    EXPAN308
        WRITE(IOUT,BXCLO)                                               EXPAN309
         CALL GMONIT(2,IDYFS+79,DUMM1,DUMM2,DUMM3)                      EXPAN310
        WRITE(IOUT,BXOPE)                                               EXPAN311
        WRITE(IOUT,BXTXT) ' contribution of over and underflows    '    EXPAN312
        WRITE(IOUT,BXCLO)                                               EXPAN313
         CALL GMONIT(2,IDYFS+70,DUMM1,DUMM2,DUMM3)                      EXPAN314
        WRITE(IOUT,BXOPE)                                               EXPAN315
        WRITE(IOUT,BXTXT) ' ratio averwt(id=70)/averwt(id=79)      '    EXPAN316
        WRITE(IOUT,BXTXT) ' measures severity of error             '    EXPAN317
        WRITE(IOUT,BXCLO)                                               EXPAN318
      ENDIF                                                             EXPAN319
C     ==================================================================EXPAN320
C     =============SUPPL. FINAL WEIGHT ANALYSIS=========================EXPAN321
C     ==================================================================EXPAN322
      WRITE(IOUT,BXOPE)                                                 EXPAN323
      WRITE(IOUT,BXTXT) '        EXPAND output - window B '             EXPAN324
      WRITE(IOUT,BXTXT) '           X-sections in R-units '             EXPAN325
      CALL GMONIT(1,IDYFS+73,DUMM1,DUMM2,DUMM3)                         EXPAN326
      XS03   =  XKARL*AVERWT                                            EXPAN327
      DXS03  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  EXPAN328
      CALL GMONIT(1,IDYFS+72,DUMM1,DUMM2,DUMM3)                         EXPAN329
      XS02   =  XKARL*AVERWT                                            EXPAN330
      DXS02  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  EXPAN331
      CALL GMONIT(1,IDYFS+71,DUMM1,DUMM2,DUMM3)                         EXPAN332
      XS01   =  XKARL*AVERWT                                            EXPAN333
      DXS01  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  EXPAN334
      CALL GMONIT(1,IDYFS+75,DUMM1,DUMM2,DUMM3)                         EXPAN335
      XS05   =  XKARL*AVERWT                                            EXPAN336
      DXS05  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  EXPAN337
      CALL GMONIT(1,IDYFS+74,DUMM1,DUMM2,DUMM3)                         EXPAN338
      XS04   =  XKARL*AVERWT                                            EXPAN339
      DXS04  =  XKARL*AVERWT*SQRT(ERKARL**2+ERRELA**2)                  EXPAN340
      WRITE(IOUT,BXL2F) XS03,DXS03,'X-section','O(alf2)',  'B1'         EXPAN341
      WRITE(IOUT,BXL2F) XS02,DXS02,'X-section','O(alf1)',  'B2'         EXPAN342
      WRITE(IOUT,BXL2F) XS01,DXS01,'X-section','O(alf0)',  'B3'         EXPAN343
      IF(XS02.NE.0D0) WRITE(IOUT,BXL2F)                                 EXPAN344
     $ XS05/XS02,DXS05/XS02,'(O(alf2)-O(alf1))','/O(alf1)','B4'         EXPAN345
      IF(XS01.NE.0D0) WRITE(IOUT,BXL2F)                                 EXPAN346
     $ XS04/XS01,DXS04/XS01,'(O(alf1)-O(alf0))','/O(alf0)','B5'         EXPAN347
      WRITE(IOUT,BXCLO)                                                 EXPAN348
C -------------                                                         EXPAN349
      WTCRU1 = XKARL                                                    EXPAN350
      WTCRU2 = ERKARL                                                   EXPAN351
      CALL  MODEL(MODE,DUMM1,DUMM2)                                     EXPAN352
C -------------                                                         EXPAN353
      ELSE                                                              EXPAN354
C     ====                                                              EXPAN355
      WRITE(IOUT,*) '===>EXPAND: WRONG MODE'                            EXPAN356
      STOP                                                              EXPAN357
      ENDIF                                                             EXPAN358
C     =====                                                             EXPAN359
      END                                                               EXPAN360
      SUBROUTINE MERGIF                                                 MERGIF 2
C     *****************                                                 MERGIF 3
C Merging two commons all photons together                              MERGIF 4
C Transformation to common (CMS) trame is supposed to be already done   MERGIF 5
C     ************************************                              MERGIF 6
      IMPLICIT DOUBLE PRECISION  (A-H,O-Z)                              MERGIF 7
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
C ...Photons                                                            MERGIF11
      NPHOT  = 0                                                        MERGIF12
      DO 130 I=1,NPHOX                                                  MERGIF13
        NPHOT  =NPHOT+1                                                 MERGIF14
        DO 130 K=1,4                                                    MERGIF15
  130   SPHOT(NPHOT,K)=XPHOT(I,K)                                       MERGIF16
      DO 140 I=1,NPHOY                                                  MERGIF17
        NPHOT  =NPHOT+1                                                 MERGIF18
        DO 140 K=1,4                                                    MERGIF19
  140   SPHOT(NPHOT,K)=YPHOT(I,K)                                       MERGIF20
C ...Final state fermions                                               MERGIF21
      DO 145 K=1,4                                                      MERGIF22
        QF1(K)= YF1(K)                                                  MERGIF23
  145   QF2(K)= YF2(K)                                                  MERGIF24
C ...Axiliary                                                           MERGIF25
      DO 150 K=1,4                                                      MERGIF26
  150    SPHUM(K)= XPHUM(K)+YPHUM(K)                                    MERGIF27
      END                                                               MERGIF28
      SUBROUTINE FILEXP(XPAR,NPAR)                                      FILEXP 2
C     ***********************************                               FILEXP 3
C TRANSFERS AND DEFINES INPUT PARAMS, PRINTS INPUT PARAMETERS           FILEXP 4
      IMPLICIT DOUBLE PRECISION  (A-H,O-Z)                              FILEXP 5
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / UUREC  / UU,EPS,DELTA                                    UUREC  2
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             VVREC  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREC  3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      COMMON / SPISET / POLAR1,POLAR2,POLFI1,POLFI2                     FILEXP12
      COMMON / RANPAR / KEYRND                                          FILEXP13
      DIMENSION  XPAR( *),NPAR( *)                                      FILEXP14
      SAVE / WEKING /,/ KEYYFS /,/ SPISET /,/ UUREC  /,/ VVREC  /       FILEXP15
      SAVE / INOUT  /,/ BXFMTS /,/ RANPAR /                             FILEXP16
                                                                        FILEXP17
C ...BX-formats for nice and flexible outputs                           FILEXP18
      BXOPE =  '(//1X,15(5H*****)    )'                                 FILEXP19
      BXTXT =  '(1X,1H*,                  A48,25X,    1H*)'             FILEXP20
      BXL1I =  '(1X,1H*,I17,                 16X, A20,A12,A7, 1X,1H*)'  FILEXP21
      BXL1F =  '(1X,1H*,F17.8,               16X, A20,A12,A7, 1X,1H*)'  FILEXP22
      BXL2F =  '(1X,1H*,F17.8, 4H  +-, F11.8, 1X, A20,A12,A7, 1X,1H*)'  FILEXP23
      BXL1G =  '(1X,1H*,G17.8,               16X, A20,A12,A7, 1X,1H*)'  FILEXP24
      BXL2G =  '(1X,1H*,G17.8, 4H  +-, F11.8, 1X, A20,A12,A7, 1X,1H*)'  FILEXP25
      BXCLO =  '(1X,15(5H*****)/   )'                                   FILEXP26
                                                                        FILEXP27
C  type of the RANDOM NUMBER GENERATOR RANMAR                           FILEXP28
      KEYRND = 1                                                        FILEXP29
C----------                                                             FILEXP30
      KEYBRM= ABS(NPAR(1))                                              FILEXP31
      KEYFIX= 0                                                         FILEXP32
      IF(NPAR(1).LT.0) KEYFIX=1                                         FILEXP33
      KEYRED= NPAR(2)                                                   FILEXP34
      KEYWGT= NPAR(3)                                                   FILEXP35
      KEYZET= NPAR(4)                                                   FILEXP36
      CMSENE = XPAR(1)                                                  FILEXP37
      AMAZ   = XPAR(2)                                                  FILEXP38
      SINW2  = XPAR(3)                                                  FILEXP39
      GAMMZ  = XPAR(4)                                                  FILEXP40
      AMFIN  = XPAR(5)                                                  FILEXP41
      VVMIN  = XPAR(6)                                                  FILEXP42
      VVMAX  = XPAR(7)                                                  FILEXP43
      ENE    = CMSENE/2D0                                               FILEXP44
      VVMAX  = MIN(VVMAX,1D0-(AMFIN/ENE)**2)                            FILEXP45
      EPS    = VVMIN                                                    FILEXP46
      DELTA  = EPS*1D-3                                                 FILEXP47
      POLAR1 = 0D0                                                      FILEXP48
      POLAR2 = 0D0                                                      FILEXP49
      POLFI1 = 0D0                                                      FILEXP50
      POLFI2 = 0D0                                                      FILEXP51
      AMEL   = 0.5111D-3                                                FILEXP52
      IDE=2                                                             FILEXP53
      IDF=2                                                             FILEXP54
      XK0=3.D-3                                                         FILEXP55
C                                                                       FILEXP56
      WRITE(IOUT,BXOPE)                                                 FILEXP57
      WRITE(IOUT,BXTXT) '    YFS VERSION 3.30   FEBR.  93        '      FILEXP58
      WRITE(IOUT,BXL1F) CMSENE,     'CMS energy total   ','CMSENE','A0' FILEXP59
      WRITE(IOUT,BXL1I) KEYBRM,     'general QED switch ','KEYBRM','A1' FILEXP60
      WRITE(IOUT,BXL1F) AMFIN,      'final fermionmass  ','AMFIN ','A2' FILEXP61
      WRITE(IOUT,BXL1F) AMAZ,       'Z mass   [GeV]     ','AMAZ  ','A3' FILEXP62
      WRITE(IOUT,BXL1F) GAMMZ,      'Z width  [GeV]     ','GAMMZ ','A4' FILEXP63
      WRITE(IOUT,BXL1F) SINW2,      'sin(theta_W)**2    ','SINW2 ','A5' FILEXP64
      WRITE(IOUT,BXL1F) VVMIN,      'dummy infrared cut ','VVMIN ','A6' FILEXP65
      WRITE(IOUT,BXL1F) VVMAX,      'v_max ( =1 )       ','VVMAX ','A7' FILEXP66
      WRITE(IOUT,BXL1I) KEYRED,     'reduction  switch  ','KEYRED','A8' FILEXP67
      WRITE(IOUT,BXL1I) KEYWGT,     'weighting  switch  ','KEYWGT','A9' FILEXP68
      WRITE(IOUT,BXL1I) KEYZET,     'elect_weak switch  ','KEYZET','A10'FILEXP69
      WRITE(IOUT,BXCLO)                                                 FILEXP70
      END                                                               FILEXP71
      SUBROUTINE KARLUD(MODE,PAR1,PAR2)                                 KARLUD 2
C     *********************************                                 KARLUD 3
C LOW LEVEL  MONTE-CARLO GENERATOR                                      KARLUD 4
C ADMINISTRATES DIRECTLY GENERATION OF V-VARIABLE                       KARLUD 5
C AND INDIRECTLY OF ALL OTHER VARIABLES.                                KARLUD 6
C     ************************                                          KARLUD 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               KARLUD 8
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
C COMMUNICATES WITH VESKO/RHOSKO                                        KARLUD11
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             VVREC  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREC  3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
C COMMUNICATES WITH GMONIT                                              KARLUD14
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      SAVE / WEKING /,/ KEYYFS /,/ VVREC  /,/ INOUT  /                  KARLUD17
      SAVE / CMONIT /,/ BXFMTS /                                        KARLUD18
      SAVE SVAR,BETI2,GAMFAP,GAMFAC,GAMFA2,PREC,XCGAUS,XDEL,XCVESK      KARLUD19
      SAVE IDYFS                                                        KARLUD20
      PARAMETER (PI=3.1415926535897932D0,ALFINV= 137.03604D0)           KARLUD21
      PARAMETER (CEULER =0.57721566D0)                                  KARLUD22
      PARAMETER (NMAX= 40)                                              KARLUD23
      EXTERNAL RHOSKO                                                   KARLUD24
C MAXIMUM PHOTON MULTIPLICITY                                           KARLUD25
C                                                                       KARLUD26
      IF(MODE.EQ.-1) THEN                                               KARLUD27
C     ==================================================================KARLUD28
C     ===================INITIALIZATION=================================KARLUD29
C     ==================================================================KARLUD30
      WRITE(IOUT,BXOPE)                                                 KARLUD31
      WRITE(IOUT,BXTXT) 'Initialize KARLUD  start'                      KARLUD32
      SVAR = 4D0*ENE**2                                                 KARLUD33
      BETI = 2D0/ALFINV/PI*(DLOG(4D0*ENE**2/AMEL**2)-1D0)               KARLUD34
      BETI2= 2D0/ALFINV/PI* DLOG(4D0*ENE**2/AMEL**2)                    KARLUD35
      GAMFAP =1D0-PI**2*BETI**2/12D0                                    KARLUD36
      GAMFAC =EXP(-CEULER*BETI)/DPGAMM(1D0+BETI)                        KARLUD37
      GAMFA2 =EXP(-CEULER*BETI2)/DPGAMM(1D0+BETI2)                      KARLUD38
      IDYFS = 0                                                         KARLUD39
      CALL GBOOK1(IDYFS+ 7,'WT IN KARLUD         $', 50 , 0D0,5D0)      KARLUD40
      CALL GMONIT(-1,IDYFS+51,0D0,1D0,1D0)                              KARLUD41
      CALL GMONIT(-1,IDYFS+52,0D0,1D0,1D0)                              KARLUD42
      CALL GMONIT(-1,IDYFS+53,0D0,1D0,1D0)                              KARLUD43
      CALL GMONIT(-1,IDYFS+54,0D0,1D0,1D0)                              KARLUD44
      CALL GMONIT(-1,IDYFS+55,0D0,1D0,1D0)                              KARLUD45
      CALL GMONIT(-1,IDYFS+56,0D0,1D0,1D0)                              KARLUD46
      CALL GMONIT(-1,IDYFS+59,0D0,1D0,1D0)                              KARLUD47
      CALL VESK1W(-1,RHOSKO,XCVESK,DUM1,DUM2)                           KARLUD48
      PREC = 1D-6                                                       KARLUD49
      XCGAUS =BREMKF(1,PREC)                                            KARLUD50
      XDEL = XCVESK/XCGAUS-1                                            KARLUD51
      WRITE(IOUT,BXL1F) XCVESK,     'xs_crude  VESKO    ','XCVESK','  ' KARLUD52
      WRITE(IOUT,BXL1F) XCGAUS,     'xs_crude  GAUSS    ','XCGAUS','  ' KARLUD53
      WRITE(IOUT,BXL1F) XDEL       ,'XCVESK/XCGAUS-1    ','      ','  ' KARLUD54
      WRITE(IOUT,BXTXT) 'Initialize KARLUD  end  '                      KARLUD55
      WRITE(IOUT,BXCLO)                                                 KARLUD56
      ELSEIF(MODE.EQ.0) THEN                                            KARLUD57
C     ==================================================================KARLUD58
C     ====================GENERATION====================================KARLUD59
C     ==================================================================KARLUD60
   30 CONTINUE                                                          KARLUD61
C GENERATE VV                                                           KARLUD62
      IF(KEYFIX.EQ.0) THEN                                              KARLUD63
        CALL VESK1W( 0,RHOSKO,DUM1,DUM2,WTVES)                          KARLUD64
      ELSE                                                              KARLUD65
        WTVES=1D0                                                       KARLUD66
        VV=VVMAX                                                        KARLUD67
      ENDIF                                                             KARLUD68
C LOW-LEVEL MULTIPHOTON GENERATOR                                       KARLUD69
      CALL YFSGEN(VV,VVMIN,NMAX,WT1,WT2,WT3)                            KARLUD70
C--------------TESTS ON INTERNAL WEIGHTS                                KARLUD71
C--------------DOES NOT INTERFERE WITH THE EVENT GENERATION !!!         KARLUD72
      REF  = VVRHO(50,SVAR,AMEL,VV,VVMIN)                               KARLUD73
      WTR  = REF/VVRHO(1,SVAR,AMEL,VV,VVMIN)                            KARLUD74
      CALL VARRAN(RN,1)                                                 KARLUD75
      CALL GMONIT(0,IDYFS+56,WTR,1D0,RN)                                KARLUD76
C PSEUDOREJECTION IN ORDER TO INTRODUCE REFERENCE XSECTION              KARLUD77
      IF(KEYFIX.EQ.0 .AND. RN.GT.WTR) GOTO 110                          KARLUD78
      WF1  = WT1*VVRHO(51,SVAR,AMEL,VV,VVMIN)/REF                       KARLUD79
      WF2  = WT2*VVRHO(52,SVAR,AMEL,VV,VVMIN)/REF                       KARLUD80
      WF3  = WT3                                                        KARLUD81
      WF13 = WF1*WF3                                                    KARLUD82
      WF123= WF1*WF2*WF3                                                KARLUD83
      CALL GMONIT(0,IDYFS+51,WF1,  1D0,1D0)                             KARLUD84
      CALL GMONIT(0,IDYFS+52,WF2,  1D0,1D0)                             KARLUD85
      CALL GMONIT(0,IDYFS+53,WF3,  1D0,1D0)                             KARLUD86
      CALL GMONIT(0,IDYFS+54,WF13, 1D0,1D0)                             KARLUD87
      CALL GMONIT(0,IDYFS+55,WF123,1D0,1D0)                             KARLUD88
  110 CONTINUE                                                          KARLUD89
C--------------                                                         KARLUD90
      WT=WTVES*WT1*WT2*WT3                                              KARLUD91
      WTKARL=WT                                                         KARLUD92
      CALL GMONIT(0,IDYFS+59,WT,  1D0,1D0)                              KARLUD93
      CALL GF1(IDYFS+ 7,WT,1D0)                                         KARLUD94
      PAR1=WT                                                           KARLUD95
      ELSE                                                              KARLUD96
C     ==================================================================KARLUD97
C     ====================FINAL WEIGHT ANALYSIS=========================KARLUD98
C     ==================================================================KARLUD99
      CALL GPRINT(IDYFS+ 7)                                             KARLU100
      CALL GMONIT(1,IDYFS+59,DUMM1,DUMM2,DUMM3)                         KARLU101
      WTKARL = AVERWT                                                   KARLU102
      ERKRL  = ERRELA                                                   KARLU103
      PREC   = 1D-6                                                     KARLU104
      XSGS   = BREMKF(1,PREC)                                           KARLU105
      ERGS   = XSGS*PREC                                                KARLU106
      CALL VESK1W( 1,RHOSKO,XSVE,ERELVE,XCVESK)                         KARLU107
      ERVE   = XSVE*ERELVE                                              KARLU108
      IF(KEYFIX.EQ.1)  XCVESK=XCGAUS                                    KARLU109
C Note that since VESK1W produces weighted events we are sending        KARLU110
C up the crude x-section (from VESK1W) to the calling program           KARLU111
      PAR1   = XCVESK                                                   KARLU112
      PAR2   = 0D0                                                      KARLU113
C NO PRINTOUT FOR MODE = 2                                              KARLU114
      IF(MODE.EQ.1) RETURN                                              KARLU115
      DDV    = XSVE/XSGS-1D0                                            KARLU116
      DDR    = ERELVE + 1D-6                                            KARLU117
      XSKR   = XCVESK*WTKARL                                            KARLU118
      ERKR   = XSKR*ERKRL                                               KARLU119
      WRITE(IOUT,BXOPE)                                                 KARLU120
      WRITE(IOUT,BXTXT) '     KARLUD  FINAL  REPORT     '               KARLU121
      WRITE(IOUT,BXTXT) '         window A              '               KARLU122
      WRITE(IOUT,BXL1I) NEVTOT,     'total no of events ','NEVTOT','A0' KARLU123
      WRITE(IOUT,BXL1I) NEVNEG,     'WT<0        events ','NEVNEG','A1' KARLU124
      WRITE(IOUT,BXL1F) XCVESK,     'xs_cru VESKO  [R]  ','XCVESK','A2' KARLU125
      WRITE(IOUT,BXL2F) XSVE,ERVE,  'xs_est VESKO  [R]  ','XSVE  ','A3' KARLU126
      WRITE(IOUT,BXL2F) XSGS,ERGS,  'xs_est Gauss  [R]  ','XSGS  ','A4' KARLU127
      WRITE(IOUT,BXL2F) DDV,DDR,    'XCVE/XCGS-1        ','      ','A5' KARLU128
      WRITE(IOUT,BXL2F) WTKARL,ERKRL,'   <WT>           ','WTKARL','A6' KARLU129
      WRITE(IOUT,BXL2F) XSKR,ERKR,  'sigma_prim    [R]  ','XSKARL','A7' KARLU130
      WRITE(IOUT,BXCLO)                                                 KARLU131
C     ==================================================================KARLU132
C     =============SUPPL. FINAL WEIGHT ANALYSIS=========================KARLU133
C     ==================================================================KARLU134
      CALL GMONIT(1,IDYFS+51,DUMM1,DUMM2,DUMM3)                         KARLU135
      DEL1   = AVERWT-1D0                                               KARLU136
      DWT1   = ERRELA                                                   KARLU137
      CALL GMONIT(1,IDYFS+52,DUMM1,DUMM2,DUMM3)                         KARLU138
      AWF2   = AVERWT                                                   KARLU139
      DWT2   = ERRELA                                                   KARLU140
      CALL GMONIT(1,IDYFS+53,DUMM1,DUMM2,DUMM3)                         KARLU141
      AWF3   = AVERWT                                                   KARLU142
      DEL3   = AVERWT-GAMFA2                                            KARLU143
      DWT3   = ERRELA                                                   KARLU144
      CALL GMONIT(1,IDYFS+54,DUMM1,DUMM2,DUMM3)                         KARLU145
      AWF4   = AVERWT                                                   KARLU146
      DEL4   = AVERWT-GAMFAC                                            KARLU147
      DWT4   = ERRELA                                                   KARLU148
      WRITE(IOUT,BXOPE)                                                 KARLU149
      WRITE(IOUT,BXTXT) '     KARLUD  FINAL  REPORT     '               KARLU150
      WRITE(IOUT,BXTXT) '         window B              '               KARLU151
      WRITE(IOUT,BXL2F) DEL1,DWT1,  '<WF1>-1  mass wt   ','DEL1  ','B1' KARLU152
      WRITE(IOUT,BXL2F) AWF2,DWT2,  '<WF2> dilat. weight','AWF2  ','B2' KARLU153
      WRITE(IOUT,BXL2F) AWF3,DWT3,  '<WF3> dilat. weight','AWF3  ','B3' KARLU154
      WRITE(IOUT,BXL2F) DEL3,DWT3,  '<WF3>-YGF(BETI2)   ','DEL3  ','B4' KARLU155
      WRITE(IOUT,BXL2F) AWF4,DWT4,  '<WF1*WF3>          ','AWF4  ','B5' KARLU156
      WRITE(IOUT,BXL2F) DEL4,DWT4,  '<WF1*WF3>-YGF(BETI)','DEL4  ','B6' KARLU157
      WRITE(IOUT,BXCLO)                                                 KARLU158
C     ==================================================================KARLU159
      CALL GMONIT(1,IDYFS+55,DUMM1,DUMM2,DUMM3)                         KARLU160
      AWF5   = AVERWT                                                   KARLU161
      DEL5   = AVERWT-GAMFAC                                            KARLU162
      DWT5   = ERRELA                                                   KARLU163
      CALL GMONIT(1,IDYFS+56,DUMM1,DUMM2,DUMM3)                         KARLU164
      AWF6   = AVERWT                                                   KARLU165
      PREC = 1D-6                                                       KARLU166
      XREFER = BREMKF(50,PREC)                                          KARLU167
      DELKAR = XREFER*AWF5/XSKR  -1D0                                   KARLU168
      DELREF = XCVESK*AWF6/XREFER-1D0                                   KARLU169
      WRITE(IOUT,BXOPE)                                                 KARLU170
      WRITE(IOUT,BXTXT) '     KARLUD  FINAL  REPORT CONT.   '           KARLU171
      WRITE(IOUT,BXTXT) '         WINDOW C                  '           KARLU172
      WRITE(IOUT,BXTXT) 'BETI= 2*ALFA/PI*(LOG(S/MEL**2)-1)       '      KARLU173
      WRITE(IOUT,BXTXT) 'GAMFAP= 1-PI**2*BETI**2/12              '      KARLU174
      WRITE(IOUT,BXTXT) 'GAMFAC=EXP(-CEULER*BETI)/GAMMA(1+BETI)  '      KARLU175
      WRITE(IOUT,BXTXT) 'GAMFA2=EXP(-CEULER*BETI2)/GAMMA(1+BETI2)'      KARLU176
      WRITE(IOUT,BXL1F)  BETI,        '                =','BETI  ','C1' KARLU177
      WRITE(IOUT,BXL1F)  GAMFAP,      '                =','GAMFAP','C2' KARLU178
      WRITE(IOUT,BXL1F)  GAMFAC,      '                =','GAMFAC','C3' KARLU179
      WRITE(IOUT,BXL1F)  GAMFA2,      '                =','GAMFA2','C4' KARLU180
      WRITE(IOUT,BXL2F) AWF5,DWT5, ' <WF1*WF3*WF4>      ','AWF5  ','C5' KARLU181
      WRITE(IOUT,BXL2F) DEL5,DWT5, ' <WF1*WF3>-YGF(BETI)','DEL5  ','C6' KARLU182
      WRITE(IOUT,BXTXT) 'DELKAR=XREFER*AVER(WF1*WF1*WF3)/XSKARL-1'      KARLU183
      WRITE(IOUT,BXTXT) 'DELREF=XCRUDE*AVER(WTR)/XREFER-1        '      KARLU184
      WRITE(IOUT,BXL1F) XREFER,    'reference x_sect.   ','XREFER','C7' KARLU185
      WRITE(IOUT,BXL1F) DELKAR,    'XREFER*AWF5/XSKR  -1','DELKAR','C8' KARLU186
      WRITE(IOUT,BXL1F) DELREF,    'XCVESK*AWF6/XREFER-1','DELREF','C9' KARLU187
      WRITE(IOUT,BXCLO)                                                 KARLU188
      ENDIF                                                             KARLU189
C     =====                                                             KARLU190
      END                                                               KARLU191
      FUNCTION RHOSKO(R)                                                RHOSKO 2
C     ********************                                              RHOSKO 3
C CALLED IN VESK1W                                                      RHOSKO 4
C PROVIDES V OR K DISTRIBUTION TO BE GENERATED                          RHOSKO 5
C     ********************                                              RHOSKO 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               RHOSKO 7
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / VVREC  / VVMIN,VVMAX,VV,BETI                             VVREC  2
      REAL*8            VVMIN,VVMAX,VV,BETI                             VVREC  3
      PARAMETER (FLEPS = 1D-35)                                         RHOSKO11
C MAPPING  R => VV CHANGE  TO IMPROVE ON EFFICIENCY                     RHOSKO12
C Note that the replacement below makes program more precise            RHOSKO13
C and bulet-proof with respect numerical instabilities close to VV=0    RHOSKO14
      X = MAX(R,FLEPS**BETI)                                            RHOSKO15
      BBT = -0.5D0                                                      RHOSKO16
      CALL CHBIN1(X,BETI,BBT,VVMAX,VV,RJAC)                             RHOSKO17
C BORN XSECTION                                                         RHOSKO18
C NOTE 1/(1-VV) FACTOR BECAUSE BORNY IS IN R-UNITS                      RHOSKO19
      SVAR   = 4D0*ENE**2                                               RHOSKO20
      SVAR1  = SVAR*(1D0-VV)                                            RHOSKO21
      XBORN  = BORNY(SVAR1)/(1D0-VV)                                    RHOSKO22
C constant x-section for tests                                          RHOSKO23
      IF(KEYZET.EQ.-2) XBORN = XBORN * (1D0-VV)                         RHOSKO24
      RHOSKO = RJAC*XBORN* VVRHO(1,SVAR,AMEL,VV,VVMIN)                  RHOSKO25
      END                                                               RHOSKO26
                                                                        RHOSKO27
      SUBROUTINE YFSGEN(VV,VMIN,NMAX,WT1,WT2,WT3)                       YFSGEN 2
C     *******************************************                       YFSGEN 3
C====================================================================== YFSGEN 4
C================== Y F S G E N ======================================= YFSGEN 5
C====================================================================== YFSGEN 6
C*********INPUT                                                         YFSGEN 7
C VV    = V VARIABLE                                                    YFSGEN 8
C VMIN  = MINIMUM V VARIABLE (INFRARED CUTOFF)                          YFSGEN 9
C NMAX  = MAXIMUM PHOTON MULTIPLICITY                                   YFSGEN10
C*********OUTPUT                                                        YFSGEN11
C WT1  = WEIGHT DUE TO NEGLECTED MASS TERMS                             YFSGEN12
C WT2  = WEIGHT DUE TO DILATATION OF PHOTON MOMENTA                     YFSGEN13
C WT3  = ANOTHER DILATATION WEIGHT                                      YFSGEN14
C OTHER OUTPUT RESULTS IN /MOMINI/                                      YFSGEN15
C*****************************                                          YFSGEN16
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               YFSGEN17
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      SAVE / WEKING /,/ MOMINI /,/ KEYYFS /                             YFSGEN21
      PARAMETER( PI=3.1415926535897932D0,ALFINV= 137.03604D0)           YFSGEN22
      DIMENSION XPH(100),RR(100)                                        YFSGEN23
C                                                                       YFSGEN24
C HERE BETI2 MUST BE USED INSTEAD OF BETI (MASS TERM NEGLECTED)         YFSGEN25
      BETI2 = 2D0/ALFINV/PI*DLOG(4D0*ENE**2/AMEL**2)                    YFSGEN26
      AM2=(AMEL/ENE)**2                                                 YFSGEN27
      DO 10 I=1,NMAX                                                    YFSGEN28
      XPH(I)=0D0                                                        YFSGEN29
      DO 10 J=1,4                                                       YFSGEN30
   10 XPHOT(I,J)=0D0                                                    YFSGEN31
      IF(VV.LE.VMIN) THEN                                               YFSGEN32
C NO PHOTON ABOVE DETECTABILITY THRESHOLD                               YFSGEN33
         WT1=1D0                                                        YFSGEN34
         WT2=1D0                                                        YFSGEN35
         WT3=1D0                                                        YFSGEN36
         NPHOX=0                                                        YFSGEN37
      ELSE                                                              YFSGEN38
C ONE OR MORE PHOTONS, GENERATE PHOTON MULTIPLICITY                     YFSGEN39
C NPHOX = POISSON(WITH AVERAGE = AVERG) + 1                             YFSGEN40
         AVERG=BETI2*DLOG(VV/VMIN)                                      YFSGEN41
  100    CALL POISSG(AVERG,NMAX,MULTP,RR)                               YFSGEN42
         NPHOX = MULTP+1                                                YFSGEN43
C This is for tests of program at fixed multiplicity (for adv. users)   YFSGEN44
         NPHFIX =  MOD(KEYBRM,10000)/1000                               YFSGEN45
         IF(NPHFIX.NE.0.AND.NPHOX.NE.NPHFIX) GOTO 100                   YFSGEN46
         IF(NPHOX.EQ.1) THEN                                            YFSGEN47
            XPH(1)=VV                                                   YFSGEN48
            CALL BREMUL(XPH,AM2,WT1)                                    YFSGEN49
            DJAC0=(1D0+1D0/SQRT(1D0-VV))/2D0                            YFSGEN50
            WT2  = 1D0/DJAC0                                            YFSGEN51
            WT3  = 1D0                                                  YFSGEN52
         ELSE                                                           YFSGEN53
            XPH(1)=VV                                                   YFSGEN54
            DO 200 I=2,NPHOX                                            YFSGEN55
  200       XPH(I)=VV*(VMIN/VV)**RR(I-1)                                YFSGEN56
            CALL BREMUL(XPH,AM2,WT1)                                    YFSGEN57
            CALL RESOLH(VV,EXPY,DJAC)                                   YFSGEN58
            DJAC0=(1D0+1D0/SQRT(1D0-VV))/2D0                            YFSGEN59
            WT2  = DJAC/DJAC0                                           YFSGEN60
            WT3  = 1D0                                                  YFSGEN61
C SCALE DOWN PHOTON ENERGIES AND MOMENTA                                YFSGEN62
            DO 300 I=1,NPHOX                                            YFSGEN63
            DO 300 K=1,4                                                YFSGEN64
  300       XPHOT(I,K)=XPHOT(I,K)/EXPY                                  YFSGEN65
C CHECK ON LOWER ENERGY CUT-OFF                                         YFSGEN66
            IF(XPHOT(NPHOX,4).LT.VMIN) WT3 =0D0                         YFSGEN67
         ENDIF                                                          YFSGEN68
      ENDIF                                                             YFSGEN69
C PHOTON MOMENTA IN GEV UNITS                                           YFSGEN70
      DO 420 J=1,4                                                      YFSGEN71
  420 XPHUM(J)=0D0                                                      YFSGEN72
      DO 480 I=1,NPHOX                                                  YFSGEN73
      DO 480 J=1,4                                                      YFSGEN74
      XPHOT(I,J)=XPHOT(I,J)*ENE                                         YFSGEN75
  480 XPHUM(J)=XPHUM(J)+XPHOT(I,J)                                      YFSGEN76
C DEFINE FERMION MOMENTA                                                YFSGEN77
      CALL KINEKR                                                       YFSGEN78
      END                                                               YFSGEN79
      SUBROUTINE RESOLH(VV,EXPY,DJAC)                                   RESOLH 2
C     *******************************                                   RESOLH 3
C THIS SOLVES CONSTRAINT EQUATION ON PHOTON MOMENTA                     RESOLH 4
C ALSO CALCULATES CORRESPONDING JACOBIAN FACTOR                         RESOLH 5
C INPUT:  VV    = COSTRAINT PARAMETER V                                 RESOLH 6
C OUTPUT  EXPY  = RESCALING FACTOR - A SOLUTION OF THE EQUATION         RESOLH 7
C         DJAC  = JACOBIAN FACTOR                                       RESOLH 8
C     ************************                                          RESOLH 9
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               RESOLH10
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      SAVE   / MOMINI /                                                 RESOLH12
      DIMENSION PP(4),PK(4)                                             RESOLH13
C                                                                       RESOLH14
      DO 210 K=1,4                                                      RESOLH15
      PK(K)=0D0                                                         RESOLH16
  210 PP(K)=0D0                                                         RESOLH17
      PP(4)=2D0                                                         RESOLH18
      DO 215 I=1,NPHOX                                                  RESOLH19
      DO 215 K=1,4                                                      RESOLH20
  215 PK(K)=PK(K)+XPHOT(I,K)                                            RESOLH21
      PPDPP=PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                         RESOLH22
      PKDPK=PK(4)**2-PK(3)**2-PK(2)**2-PK(1)**2                         RESOLH23
      PPDPK=PP(4)*PK(4)-PP(3)*PK(3)-PP(2)*PK(2)-PP(1)*PK(1)             RESOLH24
      AA=PPDPP*PKDPK/(PPDPK)**2                                         RESOLH25
      EXPY=2D0*PPDPK/PPDPP/VV                                           RESOLH26
C SOLUTION FOR CONSTRAINT ON PHOTON FOUR MOMENTA                        RESOLH27
      EXPY=EXPY*.5D0*(1D0+SQRT(1D0-VV*AA))                              RESOLH28
C JACOBIAN FACTOR                                                       RESOLH29
      DJAC=(1D0+1D0/SQRT(1D0-VV*AA))/2D0                                RESOLH30
      END                                                               RESOLH31
      SUBROUTINE BREMUL(XPH,AM2,WT)                                     BREMUL 2
C     *****************************                                     BREMUL 3
C PROVIDES PHOTON FOURMOMENTA                                           BREMUL 4
C INPUT  : XPH    = LIST OF PHOTON ENERGIES                             BREMUL 5
C OUTPUT : XPHOT  = LIST OF PHPTON FOUR-MOMENTA                         BREMUL 6
C          WT     = WEIGHT DUE TO MASS TERMS                            BREMUL 7
C     ************************                                          BREMUL 8
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BREMUL 9
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      SAVE   / MOMINI /                                                 BREMUL11
      PARAMETER( PI =3.1415926535897932D0)                              BREMUL12
      DIMENSION XPH(*)                                                  BREMUL13
                                                                        BREMUL14
      WT=1D0                                                            BREMUL15
      DO 100 I=1,NPHOX                                                  BREMUL16
      XK=XPH(I)                                                         BREMUL17
      CALL VARRAN(RN,1)                                                 BREMUL18
      CALL ANGBRE(RN,AM2,CG,SG,DIST0,DIST1)                             BREMUL19
      WTM   =DIST1/DIST0                                                BREMUL20
      WT    =WT*WTM                                                     BREMUL21
      CALL VARRAN(RNUMB,1)                                              BREMUL22
      PHI=2D0*PI*RNUMB                                                  BREMUL23
      XPHOT(I,1)=XK*SG*COS(PHI)                                         BREMUL24
      XPHOT(I,2)=XK*SG*SIN(PHI)                                         BREMUL25
      XPHOT(I,3)=XK*CG                                                  BREMUL26
      XPHOT(I,4)=XK                                                     BREMUL27
  100 CONTINUE                                                          BREMUL28
      END                                                               BREMUL29
      SUBROUTINE KINEKR                                                 KINEKR 2
C     *****************                                                 KINEKR 3
C CALLED IN YFSGEN                                                      KINEKR 4
C DEFINES FINAL STATE FERMION FOUR MOMENTA                              KINEKR 5
C     ************************                                          KINEKR 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               KINEKR 7
      COMMON / WEKING / ENE,AMAZ,GAMMZ,AMEL,AMFIN,XK0,SINW2,IDE,IDF     WEKING 2
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      PARAMETER( PI =3.1415926535897932D0)                              KINEKR10
      SAVE   / WEKING /,/ MOMINI /                                      KINEKR11
      DIMENSION QSU(4),DRVEC(10)                                        KINEKR12
C                                                                       KINEKR13
C QSU IS FOURMOMENTUM OF FINAL STATE FERMION PAIR                       KINEKR14
      DO 10 K=1,4                                                       KINEKR15
   10 QSU(K)=-XPHUM(K)                                                  KINEKR16
      QSU(4)=QSU(4)+2D0*ENE                                             KINEKR17
      QSM =SQRT(QSU(4)**2-QSU(3)**2-QSU(2)**2-QSU(1)**2)                KINEKR18
C GENERATE MOMENTA OF FERMIONS IN THEIR REST FRAME WITH FLAT DISTR.     KINEKR19
      XF1(4)=QSM/2D0                                                    KINEKR20
      XF2(4)=QSM/2D0                                                    KINEKR21
      QMD=SQRT(XF1(4)**2-AMFIN**2)                                      KINEKR22
      CALL VARRAN(DRVEC,2)                                              KINEKR23
      R1 = DRVEC(1)                                                     KINEKR24
      R2 = DRVEC(2)                                                     KINEKR25
      COSTH=-1D0+2D0*R1                                                 KINEKR26
      SINTH=SQRT(1D0-COSTH**2)                                          KINEKR27
      XF1(1)=QMD*SINTH*COS(2D0*PI*R2)                                   KINEKR28
      XF1(2)=QMD*SINTH*SIN(2D0*PI*R2)                                   KINEKR29
      XF1(3)=QMD*COSTH                                                  KINEKR30
      DO 30 K=1,3                                                       KINEKR31
   30 XF2(K)=-XF1(K)                                                    KINEKR32
C TRANSFORM BACK TO CMS                                                 KINEKR33
      IF(NPHOX.GE.1) THEN                                               KINEKR34
        CALL BOSTDQ(-1,QSU,XF1,XF1)                                     KINEKR35
        CALL BOSTDQ(-1,QSU,XF2,XF2)                                     KINEKR36
      ENDIF                                                             KINEKR37
C====================================================================== KINEKR38
C==================END OF YFSGEN======================================= KINEKR39
C====================================================================== KINEKR40
      END                                                               KINEKR41
      SUBROUTINE KARFIN(MODE, XXF,AMFIN,WT)                             KARFIN 2
C     ***************************************                           KARFIN 3
C ======================================================================KARFIN 4
C ... Low level Monte Carlo for final state multibremsstrahlung         KARFIN 5
C ======================================================================KARFIN 6
C Input:                                                                KARFIN 7
C         XXF    = CMS four momentum of the entire final state          KARFIN 8
C  system i.e. fermions + photons                                       KARFIN 9
C         AMFIN  = mass of final state fermion                          KARFIN10
C Hidden input:  EPS, DELTA in /VVREC/, formats in /BXFMTS/             KARFIN11
C Output:                                                               KARFIN12
C            WT  = crude MC weight                                      KARFIN13
C         Momenta in /MOMFIN/                                           KARFIN14
C     ***********************************                               KARFIN15
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               KARFIN16
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      COMMON / UUREC  / UU,EPS,DELTA                                    UUREC  2
C COMMUNICATES WITH GMONIT                                              KARFIN19
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / BXFMTS / BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 2
      CHARACTER*80      BXOPE,BXCLO,BXTXT,BXL1I,BXL1F,BXL2F,BXL1G,BXL2G BXFMTS 3
      SAVE / MOMFIN /,/ UUREC  /,/ CMONIT/,/ INOUT  /,/ BXFMTS /        KARFIN23
      SAVE NEVGEN,MARTOT,IDYFS                                          KARFIN24
      DIMENSION XXF(4)                                                  KARFIN25
      DIMENSION  MK(100), WTMAS(100)                                    KARFIN26
C                                                                       KARFIN27
      IF(MODE.EQ.-1) THEN                                               KARFIN28
C     ===================                                               KARFIN29
      WRITE(IOUT,BXOPE)                                                 KARFIN30
      WRITE(IOUT,BXTXT) 'Initialize KARFIN  start'                      KARFIN31
      IDYFS = 0                                                         KARFIN32
      CALL GBOOK1(IDYFS+20,'KARFIN: log10(k/eps) marked $',50, 0D0, 5D0)KARFIN33
C ...Additional check on WTCTRL, plot of its u-dependence               KARFIN34
      CALL GBOOK1(IDYFS+31,'KARFIN:     U  WTCTRL       $',27,.1D0, 1D0)KARFIN35
      CALL GBOOK1(IDYFS+32,'KARFIN:     U  WT=1         $',27,.1D0, 1D0)KARFIN36
      CALL GMONIT(-1,IDYFS+60,0D0,1D0,1D0)                              KARFIN37
      CALL GMONIT(-1,IDYFS+61,0D0,1D0,1D0)                              KARFIN38
      CALL GMONIT(-1,IDYFS+62,0D0,1D0,1D0)                              KARFIN39
      CALL GMONIT(-1,IDYFS+63,0D0,1D0,1D0)                              KARFIN40
      CALL GMONIT(-1,IDYFS+64,0D0,1D0,1D0)                              KARFIN41
      CALL GMONIT(-1,IDYFS+65,0D0,1D0,1D0)                              KARFIN42
      CALL GMONIT(-1,IDYFS+66,0D0,1D0,1D0)                              KARFIN43
      CALL GMONIT(-1,IDYFS+69,0D0,1D0,1D0)                              KARFIN44
      NEVGEN=0                                                          KARFIN45
      MARTOT=0                                                          KARFIN46
      WRITE(IOUT,BXTXT) 'Initialize KARFIN  end  '                      KARFIN47
      WRITE(IOUT,BXCLO)                                                 KARFIN48
      ELSEIF(MODE.EQ.0) THEN                                            KARFIN49
C     ======================                                            KARFIN50
      NEVGEN=NEVGEN+1                                                   KARFIN51
      SVAR = XXF(4)**2-XXF(3)**2-XXF(2)**2-XXF(1)**2                    KARFIN52
      CMSENE = SQRT(SVAR)                                               KARFIN53
      EMIN = EPS*CMSENE/2                                               KARFIN54
      CALL MBREF(SVAR,AMFIN,DELTA,                                      KARFIN55
     $           UU,NPHOY,YPHOT,YPHUM,MK,YF1,YF2,WT1,WT2,WTMAS)         KARFIN56
      CALL KINF1(XXF,YF1,YF2,NPHOY,YPHOT,YPHUM)                         KARFIN57
      WT3=1D0                                                           KARFIN58
      WCTRL=1D0                                                         KARFIN59
      WTREM=1D0                                                         KARFIN60
      IF(WT1.NE.0.D0) THEN                                              KARFIN61
C ...optionally remove photons below epsilon from the record            KARFIN62
C ...and reorganize mass weights                                        KARFIN63
         CALL PIATEK(AMFIN,EMIN,DELTA,WTMAS,WTREM,WT3,WCTRL)            KARFIN64
      ENDIF                                                             KARFIN65
      XMUL= NPHOY                                                       KARFIN66
      CALL GMONIT(0,IDYFS+64,XMUL,20D0,0D0)                             KARFIN67
      CALL GMONIT(0,IDYFS+65,WCTRL,1D0,0D0)                             KARFIN68
      CALL GF1(IDYFS+31, UU  ,WCTRL)                                    KARFIN69
      CALL GF1(IDYFS+32, UU  ,  1D0)                                    KARFIN70
      CALL GMONIT(0,IDYFS+66,WTREM,1D0,0D0)                             KARFIN71
C ...Monitoring weights                                                 KARFIN72
      XML = NPHOY                                                       KARFIN73
      CALL GMONIT(0,IDYFS+60,XML,20D0,0D0)                              KARFIN74
      CALL GMONIT(0,IDYFS+61,WT1,1D0,0D0)                               KARFIN75
      CALL GMONIT(0,IDYFS+62,WT2,1D0,0D0)                               KARFIN76
      CALL GMONIT(0,IDYFS+63,WT3,1D0,0D0)                               KARFIN77
C ...marked photons                                                     KARFIN78
      IF(NPHOY.GE.1) THEN                                               KARFIN79
         DO 60 I=1,NPHOY                                                KARFIN80
         XK= YPHOT(I,4)/EMIN                                            KARFIN81
         UL= LOG10(XK)                                                  KARFIN82
         IF(MK(I).EQ.1)   CALL GF1(IDYFS+20,   UL,1.D0)                 KARFIN83
         IF(MK(I).EQ.1)   MARTOT=MARTOT+1                               KARFIN84
   60    CONTINUE                                                       KARFIN85
      ENDIF                                                             KARFIN86
C ...Main weight                                                        KARFIN87
      WT = WT1*WT2*WT3                                                  KARFIN88
      CALL GMONIT(0,IDYFS+69,WT ,1D0,0D0)                               KARFIN89
      ELSE                                                              KARFIN90
C     ====                                                              KARFIN91
C ...no printout for MODE=1                                             KARFIN92
      IF(MODE.EQ.1) RETURN                                              KARFIN93
C-----------------------------------------------------------------------KARFIN94
C.........................Output window A...............................KARFIN95
      CALL GMONIT(1,IDYFS+60,AVMULT,DUMM2,DUMM3)                        KARFIN96
      CALL GMONIT(1,IDYFS+61,AWT61,DWT61,DUMM3)                         KARFIN97
      CALL GMONIT(1,IDYFS+62,AWT62,DWT62,DUMM3)                         KARFIN98
      CALL GMONIT(1,IDYFS+63,AWT63,DWT63,DUMM3)                         KARFIN99
      CALL GMONIT(1,IDYFS+69,AWT69,DWT69,DUMM3)                         KARFI100
C ...General information on weights                                     KARFI101
      WRITE(IOUT,BXOPE)                                                 KARFI102
      WRITE(IOUT,BXTXT) 'KARFIN output - window A'                      KARFI103
      WRITE(IOUT,BXTXT) '    Weight Statistics   '                      KARFI104
      WRITE(IOUT,BXL2F) AWT69,DWT69,' general weight    ','WT    ','A1' KARFI105
      WRITE(IOUT,BXL1I) NEVGEN,     ' generated events  ','NEVGEN','A2' KARFI106
      WRITE(IOUT,BXL1F) AVMULT,     ' aver. ph. multi.  ','AVMULT','A3' KARFI107
      WRITE(IOUT,BXL1I) MARTOT,     ' Marked photons    ','MARTOT','A4' KARFI108
      WRITE(IOUT,BXL2F) AWT61,DWT61,' Kinematics, smin  ','WT1   ','A5' KARFI109
      WRITE(IOUT,BXL2F) AWT62,DWT62,' Jacobian          ','WT2   ','A6' KARFI110
      WRITE(IOUT,BXL2F) AWT63,DWT63,' Photon ang. dist. ','WT3   ','A7' KARFI111
      WRITE(IOUT,BXCLO)                                                 KARFI112
C ...Specific details on mass weight rearrangenment, and rejection      KARFI113
      CALL GMONIT(1,IDYFS+64,AVMLT,DWT65,DUMM3)                         KARFI114
      CALL GMONIT(1,IDYFS+65,AWT65,DWT65,DUMM3)                         KARFI115
      CALL GMONIT(1,IDYFS+66,AWT66,DWT66,DUMM3)                         KARFI116
      NZER66 = NEVZER                                                   KARFI117
      NTOT66 = NEVTOT                                                   KARFI118
      WRITE(IOUT,BXOPE)                                                 KARFI119
      WRITE(IOUT,BXTXT) 'KARFIN output - window B'                      KARFI120
      WRITE(IOUT,BXTXT) '    on mass weights     '                      KARFI121
      WRITE(IOUT,BXL2F) AWT66,DWT66,' removal wgt WTREM ','WT6 ','B1'   KARFI122
      WRITE(IOUT,BXL1I) NTOT66,     ' no. of raw events ','    ','B2'   KARFI123
      WRITE(IOUT,BXL1I) NZER66,     ' WT6=0      events ','    ','B3'   KARFI124
      WRITE(IOUT,BXL1F) AVMLT,      ' raw ph. multipl.  ','    ','B4'   KARFI125
      WRITE(IOUT,BXL2F) AWT65,DWT65,' control wgt WCTRL ','WT5 ','B5'   KARFI126
      WRITE(IOUT,BXL1G) EPS,        ' epsilon           ','    ','B6'   KARFI127
      WRITE(IOUT,BXL1G) DELTA,      ' delta             ','    ','B7'   KARFI128
      WRITE(IOUT,BXCLO)                                                 KARFI129
C ...Histograms                                                         KARFI130
cc      CALL GPRINT(IDYFS+20)                                           KARFI131
cc      CALL GOPERA(IDYFS+31,'/',IDYFS+32,IDYFS+33,1D0,1D0)             KARFI132
cc      CALL GPRINT(IDYFS+33)                                           KARFI133
      ENDIF                                                             KARFI134
C     =====                                                             KARFI135
      END                                                               KARFI136
      SUBROUTINE PIATEK(AMFIN,EMIN,DELTA,WTMAS,WTREM,WTM3A,WCTRL)       PIATEK 2
C     ***********************************************************       PIATEK 3
C Written CERN piatek 22 sept. 89  (S.J.)                               PIATEK 4
C Note the action of this routine is not Loretnz invariant !!!!         PIATEK 5
C         KEYPIA   =0,1 REMOVAL OF PHOTONS BELOW EMIN OFF/ON            PIATEK 6
C INPUT:  momenta in / MOMFIN /                                         PIATEK 7
C         AMFIN    = fermion mass (GEV)                                 PIATEK 8
C         EMIN     = Emin minimum energy of photons to be left (GEV)    PIATEK 9
C         DELTA    = infrared cut-off in generation (dimrnsionless)     PIATEK10
C         WTMAS    = list of mass weights for all photons               PIATEK11
C OUTPUT: WTREJ    = 1 for KEYPIA=0                                     PIATEK12
C  = mass weight of removed photons for KEYPIA=1                        PIATEK13
C         WTM3T    = mass weight for all photons, see comments below    PIATEK14
C         WCTRL    = control weight for remowed photons                 PIATEK15
C     ***********************************                               PIATEK16
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               PIATEK17
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      PARAMETER(PI=3.1415926535897932D0,ALFINV=137.03604D0)             PIATEK21
      DIMENSION  WTMAS(100)                                             PIATEK22
      SAVE / MOMFIN /,/ KEYYFS /,/ INOUT  /                             PIATEK23
      DIMENSION QQ(4),PP(4)                                             PIATEK24
                                                                        PIATEK25
      KEYPIA = KEYRED                                                   PIATEK26
      DO 10 K=1,4                                                       PIATEK27
      PP(K) = YF1(K)+YF2(K) +YPHUM(K)                                   PIATEK28
  10  QQ(K) = YF1(K)+YF2(K)                                             PIATEK29
      SVAR = PP(4)**2-PP(3)**2 -PP(2)**2 -PP(1)**2                      PIATEK30
      SPRIM= QQ(4)**2-QQ(3)**2 -QQ(2)**2 -QQ(1)**2                      PIATEK31
      WTM1=1D0                                                          PIATEK32
      WTM2=1D0                                                          PIATEK33
C ...mass weight below and above epsilon calculated separately          PIATEK34
      DO 40 I=1,NPHOY                                                   PIATEK35
      IF(YPHOT(I,4).LT.EMIN) THEN                                       PIATEK36
         WTM1=WTM1*WTMAS(I)                                             PIATEK37
         IF(WTM1.LE.1D-30) WTM1=0D0                                     PIATEK38
      ELSE                                                              PIATEK39
         WTM2=WTM2*WTMAS(I)                                             PIATEK40
         IF(WTM2.LE.1D-30) WTM2=0D0                                     PIATEK41
      ENDIF                                                             PIATEK42
   40 CONTINUE                                                          PIATEK43
C ...All sort of weights                                                PIATEK44
      ALF1  =  1/PI/ALFINV                                              PIATEK45
      QQK  = QQ(4)*YPHUM(4)-QQ(3)*YPHUM(3)-QQ(2)*YPHUM(2)-QQ(1)*YPHUM(1)PIATEK46
C ...delt1 and eps1 are cutoffs which sit in YFS formfactor             PIATEK47
      DELT1 =  DELTA*(1+ 2*QQK/SPRIM)                                   PIATEK48
      EPS1  =  SQRT(EMIN**2/YF1(4)/YF2(4))                              PIATEK49
C ...YFS formfactor cut-off dependend part: delt1 = 2Emin/sqrt(s')      PIATEK50
C ...where Emin is infrared cut-off in QMS                              PIATEK51
      FYFS  = -2*ALF1*(DLOG(SPRIM/AMFIN**2)-1)*DLOG(1/DELT1)            PIATEK52
C ...The total phase space integral for crude x-section,                PIATEK53
C ...Note that delta is a lower limit on y-variables used in generation PIATEK54
      FPHS  =  2*ALF1* DLOG(SVAR/AMFIN**2) *DLOG(1/DELTA)               PIATEK55
      DELB  =  FYFS + FPHS                                              PIATEK56
C ...The average mass weight for removed photon = EXP(DELB2)            PIATEK57
C ...Can be calculated analyticaly as a  ratio of YFS formfactors       PIATEK58
C ...On the other hand it is checked by MC, see control weight WTCTRL   PIATEK59
      DELB2 = -2*ALF1*(DLOG(SVAR/SPRIM)+1) *DLOG(EPS1/DELT1)            PIATEK60
C ...Control weight - its average should be precisely one               PIATEK61
      WCTRL =WTM1*EXP(-DELB2)                                           PIATEK62
      IF(KEYPIA.EQ.0) THEN                                              PIATEK63
         IF(ABS(DELB).GT.100D0 ) WRITE(IOUT,*) ' DELB= ',DELB           PIATEK64
         IF(ABS(DELB).GT.100D0 ) WRITE(   6,*) ' DELB= ',DELB           PIATEK65
         WTREM = 1D0                                                    PIATEK66
         WTM3A = WTM1*WTM2*EXP(DELB)                                    PIATEK67
      ELSE                                                              PIATEK68
C ...Optional removal of photons below epsilon from the record          PIATEK69
C ...in such a case WTM3A includes exp(BELB2)= <WT3> for removed ph.    PIATEK70
         NPH=NPHOY                                                      PIATEK71
         DO 100 J=NPHOY,1,-1                                            PIATEK72
         IF(YPHOT(J,4).LT.EMIN) THEN                                    PIATEK73
            DO 60 I=J+1,NPH                                             PIATEK74
            DO 60 K=1,4                                                 PIATEK75
   60       YPHOT(I-1,K)=YPHOT(I,K)                                     PIATEK76
            NPH=NPH-1                                                   PIATEK77
         ENDIF                                                          PIATEK78
  100    CONTINUE                                                       PIATEK79
         NPHOY=NPH                                                      PIATEK80
C ...WTMAS includes here average weight of removed photons exp(DELB2)   PIATEK81
         WTREM = WTM1                                                   PIATEK82
         WTM3A = WTM2*EXP(DELB+DELB2)                                   PIATEK83
      ENDIF                                                             PIATEK84
      END                                                               PIATEK85
      SUBROUTINE WFORM(CMSENE,Q1,Q2,AMF,DELTA,EPS,DYFS)                 WFORM  2
C     *************************************************                 WFORM  3
C Not used, kept for some future tests                                  WFORM  4
C Yennie-Fraytschi-Suura Formfactors for the final state ferm. pair     WFORM  5
C     ***********************************                               WFORM  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               WFORM  7
      PARAMETER(PI=3.1415926535897932D0,ALFINV=137.03604D0)             WFORM  8
      PARAMETER(ALF1=1/ALFINV/PI)                                       WFORM  9
      DIMENSION Q1(4),Q2(4)                                             WFORM 10
                                                                        WFORM 11
      SVAR  = CMSENE**2                                                 WFORM 12
      ENE= CMSENE/2                                                     WFORM 13
C ...Momenta q1,q2 should be in CMS                                     WFORM 14
      E1 = Q1(4)                                                        WFORM 15
      E2 = Q2(4)                                                        WFORM 16
      BETF2 = 2*ALF1* DLOG(SVAR /AMF**2)                                WFORM 17
      DELB  = BETF2*DLOG(ENE/SQRT(E1*E2)*EPS/DELTA)                     WFORM 18
      EP    = E1+E2                                                     WFORM 19
      EM    = E1-E2                                                     WFORM 20
      Q1Q2  = Q1(4)*Q2(4)-Q1(3)*Q2(3)-Q1(2)*Q2(2)-Q1(1)*Q2(1)           WFORM 21
      DL    = SQRT( 2*Q1Q2 +EM**2 )                                     WFORM 22
      REMN  = PI**2/2                                                   WFORM 23
     $        -0.50*DLOG(E1/E2)**2                                      WFORM 24
     $        -0.25*DLOG((DL+EM)**2/(4*E1*E2))**2                       WFORM 25
     $        -0.25*DLOG((DL-EM)**2/(4*E1*E2))**2                       WFORM 26
     $        - DILOGY((DL+EP)/(DL+EM)) -DILOGY((DL-EP)/(DL-EM))        WFORM 27
     $        - DILOGY((DL-EP)/(DL+EM)) -DILOGY((DL+EP)/(DL-EM))        WFORM 28
      DYFS  = EXP( DELB +ALF1*REMN )                                    WFORM 29
      END                                                               WFORM 30
      SUBROUTINE MBREF(SVAR,AMFIN,DELTA,                                MBREF  2
     $                 UU,NPHOY,PHOT,PHSU,MK,Q1,Q2,WT1,WT2,WTM)         MBREF  3
C     ***************************************************************** MBREF  4
C SIMULATES FINAL STATE BREMSSTRAHLUNG (11 MARCH 1989)                  MBREF  5
C INPUT  : SVAR   = S VARIABLE  (GEV)                                   MBREF  6
C          AMFIN  = MASS OF FINAL FERMION                               MBREF  7
C          DELTA  = LOWER ENERGY BOUND (DIMENSIONLESS)                  MBREF  8
C OUTPUT : UU     = 1-s'/s                                              MBREF  9
C          NPHOY  = PHOTON MULTIPLICITY                                 MBREF 10
C          PHOT   = PHOTON FOUR MOMENTA (GEV) IN CMS                    MBREF 11
C          PHSU   = SUM OF PHOTON MOMENTA                               MBREF 12
C          MK     = MARKS ON PHOTONS CLOSE TO LOWER ENERGY BOUND        MBREF 13
C          Q1     = FINAL FERMION FOUR MOMENTUM (GEV)                   MBREF 14
C          Q2     = FINAL FERMION FOUR MOMENTUM                         MBREF 15
C          WT1    = THE WEIGHT - PHASE SPACE LIMITS FOR VERY HARD PHOT. MBREF 16
C          WT2    = THE WEIGHT - TRANSLATION JACOBIAN.                  MBREF 17
C          WTM    = The list of mass weights.                           MBREF 18
C     **************************************                            MBREF 19
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               MBREF 20
      COMMON / KEYYFS / KEYZET,KEYBRM,KEYFIX,KEYRED,KEYWGT              KEYYFS 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      PARAMETER(PI=3.1415926535897932D0,ALFINV=137.03604D0)             MBREF 23
      DIMENSION PHOT(100,4),PHSU(4),MK(100),WTM(100),Q1(4),Q2(4)        MBREF 24
      DIMENSION RR(100),XK(100),CGX(100),SGX(100)                       MBREF 25
      SAVE / INOUT  /,/ KEYYFS /                                        MBREF 26
                                                                        MBREF 27
C KEYCMS =0 INHIBITS TRANSFORMATION TO CMS                              MBREF 28
C INITIALIZATIONS                                                       MBREF 29
      UU= -1D0                                                          MBREF 30
      WT1=1.D0                                                          MBREF 31
      WT2=1.D0                                                          MBREF 32
      AM2= 4.D0*AMFIN**2/SVAR                                           MBREF 33
      DO 10 I=1,100                                                     MBREF 34
      RR(I)=0.D0                                                        MBREF 35
   10 MK(I)=0                                                           MBREF 36
      DO 20 K=1,4                                                       MBREF 37
      PHSU(K)=0.D0                                                      MBREF 38
      Q1(K)=0.D0                                                        MBREF 39
   20 Q2(K)=0.D0                                                        MBREF 40
      DO 21 I=1,100                                                     MBREF 41
      DO 21 K=1,4                                                       MBREF 42
   21 PHOT(I,K)=0.D0                                                    MBREF 43
C GENERATE PHOTON MULTIPLICITY, AVERG = AVERAGE MULTIPLICITY (CRUDE)    MBREF 44
      BETF2 = 2/PI/ALFINV*DLOG(SVAR/AMFIN**2)                           MBREF 45
      AVERG = BETF2*DLOG(1/DELTA)                                       MBREF 46
      NMAX=50                                                           MBREF 47
    5 CONTINUE                                                          MBREF 48
      CALL POISSG(AVERG,NMAX,NPHOY,RR)                                  MBREF 49
C This is for tests of program at fixed multiplicity (for adv. users)   MBREF 50
      NPHFIX =  MOD(KEYBRM,100000)/10000                                MBREF 51
      IF(NPHFIX.NE.0.AND.NPHOY.NE.NPHFIX) GOTO 5                        MBREF 52
      IF(NPHOY.EQ.0) THEN                                               MBREF 53
          SPRIM=SVAR                                                    MBREF 54
      ELSE                                                              MBREF 55
C BEGIN WITH PHOTON ENERGY                                              MBREF 56
          XSUM=0.D0                                                     MBREF 57
          DO  50 I=1,NPHOY                                              MBREF 58
          XK(I)=DELTA**RR(I)                                            MBREF 59
          IF(XK(I).LT.SQRT(10.D0)*DELTA) MK(I)=1                        MBREF 60
   50     XSUM=XSUM+XK(I)                                               MBREF 61
          IF(XSUM.GE.1.D0) GOTO 900                                     MBREF 62
          DO 60 I=1,NPHOY                                               MBREF 63
   60     XK(I)=XK(I)/(1.D0-XSUM)                                       MBREF 64
          DO 100 I=1,NPHOY                                              MBREF 65
C ...Photons close to low energy boundry marked for further control     MBREF 66
          CALL VARRAN(RN1,1)                                            MBREF 67
          CALL VARRAN(RN2,1)                                            MBREF 68
C ...Simplified photon angular distribution,                            MBREF 69
C ...s'->s and m**2/(kp)**2 dropped                                     MBREF 70
C ...CG=cos(theta) and SG=sin(theta) memorized to avoid rounding err.   MBREF 71
          CALL ANGBRE(RN1,AM2,CG,SG,WTM(I),DIS1)                        MBREF 72
          PHI=2.D0*PI*RN2                                               MBREF 73
C ...Define photon mementa (in units of sqrt(s')/2 )                    MBREF 74
          PHOT(I,1)=XK(I)*SG*COS(PHI)                                   MBREF 75
          PHOT(I,2)=XK(I)*SG*SIN(PHI)                                   MBREF 76
          PHOT(I,3)=XK(I)*CG                                            MBREF 77
          PHOT(I,4)=XK(I)                                               MBREF 78
          DO 70 K=1,4                                                   MBREF 79
   70     PHSU(K)=PHSU(K)+PHOT(I,K)                                     MBREF 80
          CGX(I)=CG                                                     MBREF 81
          SGX(I)=SG                                                     MBREF 82
  100     CONTINUE                                                      MBREF 83
C ...Determine rescaling factor and s', WT2 is dilatation Jacobian      MBREF 84
          XMK2 = PHSU(4)**2-PHSU(3)**2-PHSU(2)**2-PHSU(1)**2            MBREF 85
          YY   = 1.D0/(1.D0 +PHSU(4) +XMK2/4.D0 )                       MBREF 86
          WT2  = YY*(1.D0+PHSU(4))                                      MBREF 87
          SPRIM= SVAR*YY                                                MBREF 88
C ...reject events with too hard photons                                MBREF 89
          SMINI= 4*AMFIN**2                                             MBREF 90
          IF(SPRIM.LT.SMINI) GOTO 900                                   MBREF 91
C ...recsale properly all photon momenta                                MBREF 92
          ENER = SQRT(SPRIM)/2.D0                                       MBREF 93
          DO 120 K=1,4                                                  MBREF 94
          PHSU(K)= PHSU(K)*ENER                                         MBREF 95
          DO 120 I=1,NPHOY                                              MBREF 96
  120     PHOT(I,K)=PHOT(I,K)*ENER                                      MBREF 97
C-----------Mass weight---------------------                            MBREF 98
C ...This weight compensates for s->s' and droping terms -m**2/(k.q)**2 MBREF 99
C ...care is taken of machine rounding errors                           MBREF100
          AMF= 4.D0*AMFIN**2/SPRIM                                      MBREF101
          BTF =SQRT(1.D0-AMF)                                           MBREF102
          DO 200 I=1,NPHOY                                              MBREF103
          IF( CGX(I).GT.0.D0 ) THEN                                     MBREF104
              DEL2=1.D0+BTF*CGX(I)                                      MBREF105
              DEL1= (SGX(I)**2 + AMF*CGX(I)**2)/DEL2                    MBREF106
          ELSE                                                          MBREF107
              DEL1=1.D0-BTF*CGX(I)                                      MBREF108
              DEL2= (SGX(I)**2 + AMF*CGX(I)**2)/DEL1                    MBREF109
          ENDIF                                                         MBREF110
          DIST1=1/DEL1/DEL2                                             MBREF111
     $            -AMF/(1.D0+BTF )/2.D0*(1.D0/DEL1**2+1.D0/DEL2**2)     MBREF112
          IF(DIST1.LT.0.D0) THEN                                        MBREF113
              DIST1=0D0                                                 MBREF114
              WRITE(IOUT,*) ' +++++++ MBREF: NEGATIVE WTMAS =',DIST1    MBREF115
              WRITE(   6,*) ' +++++++ MBREF: NEGATIVE WTMAS =',DIST1    MBREF116
          ENDIF                                                         MBREF117
          WTM(I)= DIST1/WTM(I)                                          MBREF118
          IF(WTM(I).LT. 1.D-20) WTM(I)= 0.D0                            MBREF119
  200     CONTINUE                                                      MBREF120
      ENDIF                                                             MBREF121
      UU   = 1 - SPRIM/SVAR                                             MBREF122
      ENER= SQRT(SPRIM)/2.D0                                            MBREF123
C FINAL FERMION MOMENTA                                                 MBREF124
      Q1(4)=ENER                                                        MBREF125
      Q1(3)=SQRT(ENER**2-AMFIN**2)                                      MBREF126
      Q2(4)=ENER                                                        MBREF127
      Q2(3)=-Q1(3)                                                      MBREF128
      RETURN                                                            MBREF129
C EVENT OUTSIDE PHASE SPACE                                             MBREF130
  900 WT1=0.D0                                                          MBREF131
      WT2=1.D0                                                          MBREF132
      NPHOY=-1                                                          MBREF133
      END                                                               MBREF134
      SUBROUTINE KINF1(XXF,Q1,Q2,NPHOT,PHOT,PHSU)                       KINF1  2
C     *******************************************                       KINF1  3
C Transforms to CMS: PHOT, PHSU, Q1,Q2                                  KINF1  4
C with random Euler rotation in XXF frame (Z frame)                     KINF1  5
C     ***********************************                               KINF1  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               KINF1  7
      PARAMETER( PI = 3.1415926535897932D0)                             KINF1  8
      DIMENSION XXF(4),PHOT(100,4),PHSU(4),Q1(4),Q2(4)                  KINF1  9
      DIMENSION PH(4),PP(4),DRVEC(10)                                   KINF1 10
                                                                        KINF1 11
      IF(NPHOT.EQ.-1) RETURN                                            KINF1 12
      CALL VARRAN(DRVEC,2)                                              KINF1 13
      RN1 = DRVEC(1)                                                    KINF1 14
      RN2 = DRVEC(2)                                                    KINF1 15
      CTH= 1.D0 -2.D0*RN1                                               KINF1 16
      THE= ACOS(CTH)                                                    KINF1 17
      PHI= 2.D0*PI*RN2                                                  KINF1 18
      DO 210 K=1,4                                                      KINF1 19
  210 PP(K)=Q1(K)+Q2(K)+PHSU(K)                                         KINF1 20
      DO 230 I=1,NPHOT                                                  KINF1 21
          DO 220 K=1,4                                                  KINF1 22
  220     PH(K)=PHOT(I,K)                                               KINF1 23
          CALL BOSTDQ(  1, PP,PH,PH)                                    KINF1 24
          CALL ROTEUL(THE,PHI,PH,PH)                                    KINF1 25
          CALL BOSTDQ( -1,XXF,PH,PH)                                    KINF1 26
          DO 225 K=1,4                                                  KINF1 27
  225     PHOT(I,K)= PH(K)                                              KINF1 28
  230 CONTINUE                                                          KINF1 29
      CALL BOSTDQ(  1, PP,Q1,Q1)                                        KINF1 30
      CALL ROTEUL(THE,PHI,Q1,Q1)                                        KINF1 31
      CALL BOSTDQ( -1,XXF,Q1,Q1)                                        KINF1 32
      CALL BOSTDQ(  1, PP,Q2,Q2)                                        KINF1 33
      CALL ROTEUL(THE,PHI,Q2,Q2)                                        KINF1 34
      CALL BOSTDQ( -1,XXF,Q2,Q2)                                        KINF1 35
      CALL BOSTDQ(  1, PP,PHSU,PHSU)                                    KINF1 36
      CALL ROTEUL(THE,PHI,PHSU,PHSU)                                    KINF1 37
      CALL BOSTDQ( -1,XXF,PHSU,PHSU)                                    KINF1 38
      END                                                               KINF1 39
      SUBROUTINE ROTEUL(THE,PHI,PVEC,QVEC)                              ROTEUL 2
C     ************************************                              ROTEUL 3
C EULER ROTATION                                                        ROTEUL 4
      IMPLICIT REAL*8(A-H,O-Z)                                          ROTEUL 5
      REAL*8 PVEC(4),QVEC(4)                                            ROTEUL 6
      CALL ROTOD1(THE,PVEC,QVEC)                                        ROTEUL 7
      CALL ROTOD3(PHI,QVEC,QVEC)                                        ROTEUL 8
      END                                                               ROTEUL 9
      SUBROUTINE GIBEA(CMSENE,AMEL,P1,P2)                               GIBEA  2
C     ***********************************                               GIBEA  3
C GIVEN CMS ENERGY (CMSENE) DEFINES BEAM MOMENTA IN CMS                 GIBEA  4
C     ***********************************                               GIBEA  5
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GIBEA  6
      DIMENSION P1(*),P2(*)                                             GIBEA  7
      BETEL=SQRT(1D0-4D0*AMEL**2/CMSENE**2)                             GIBEA  8
      P1(1)=  0D0                                                       GIBEA  9
      P1(2)=  0D0                                                       GIBEA 10
      P1(3)=  CMSENE/2D0*BETEL                                          GIBEA 11
      P1(4)=  CMSENE/2D0                                                GIBEA 12
      P2(1)=  0D0                                                       GIBEA 13
      P2(2)=  0D0                                                       GIBEA 14
      P2(3)= -CMSENE/2D0*BETEL                                          GIBEA 15
      P2(4)=  CMSENE/2D0                                                GIBEA 16
      END                                                               GIBEA 17
      SUBROUTINE KINF2(XXF,AMFIN,Q1,Q2)                                 KINF2  2
C     ************************************                              KINF2  3
C ...Generates two body phase space with uniform spherical density      KINF2  4
C ...For pure Born case (no bremss.)                                    KINF2  5
C     ***********************************                               KINF2  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               KINF2  7
      PARAMETER( PI = 3.1415926535897932D0)                             KINF2  8
      DIMENSION XXF(*),Q1(*),Q2(*),DRVEC(10)                            KINF2  9
                                                                        KINF2 10
      CMSENE= SQRT(XXF(4)**2-XXF(3)**2-XXF(2)**2-XXF(1)**2)             KINF2 11
      CALL VARRAN(DRVEC,2)                                              KINF2 12
      RN1 = DRVEC(1)                                                    KINF2 13
      RN2 = DRVEC(2)                                                    KINF2 14
      CTH= 1.D0 -2.D0*RN1                                               KINF2 15
      THE= ACOS(CTH)                                                    KINF2 16
      PHI= 2.D0*PI*RN2                                                  KINF2 17
      CALL GIBEA(CMSENE,AMFIN,Q1,Q2)                                    KINF2 18
      CALL ROTEUL(THE,PHI,Q1,Q1)                                        KINF2 19
      CALL BOSTDQ( -1,XXF,Q1,Q1)                                        KINF2 20
      CALL ROTEUL(THE,PHI,Q2,Q2)                                        KINF2 21
      CALL BOSTDQ( -1,XXF,Q2,Q2)                                        KINF2 22
C====================================================================== KINF2 23
C=====================End of KARFIN part=============================== KINF2 24
C====================================================================== KINF2 25
      END                                                               KINF2 26
      SUBROUTINE POISSG(AVERG,NMAX,MULT,RR)                             POISSG 2
C     **************************************                            POISSG 3
C Last corr. Nov. 91                                                    POISSG 4
C This generates photon multipl. NPHOT according to Poisson distr.      POISSG 5
C INPUT:  AVERG = AVERAGE MULTIPLICITY                                  POISSG 6
C         NMAX  = MAXIMUM MULTIPLICITY                                  POISSG 7
C OUTPUT: MULT = GENERATED MULTIPLICITY                                 POISSG 8
C         RR(1:100) LIST OF ORDERED UNIFORM RANDOM NUMBERS,             POISSG 9
C         A BYPRODUCT RESULT, TO BE EVENTUALLY USED FOR SOME FURTHER    POISSG10
C         PURPOSE (I.E.  GENERATION OF PHOTON ENERGIES).                POISSG11
C     ************************                                          POISSG12
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               POISSG13
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      DIMENSION RR(*)                                                   POISSG15
      SAVE   / INOUT  /                                                 POISSG16
      SAVE NFAIL                                                        POISSG17
      DATA NFAIL/0/                                                     POISSG18
   50 NN=0                                                              POISSG19
      SUM=0D0                                                           POISSG20
      DO 100 IT=1,NMAX                                                  POISSG21
      CALL VARRAN(RN,1)                                                 POISSG22
      Y= LOG(RN)                                                        POISSG23
      SUM=SUM+Y                                                         POISSG24
      NN=NN+1                                                           POISSG25
      RR(NN)=SUM/(-AVERG)                                               POISSG26
      IF(SUM.LT.-AVERG) GOTO 130                                        POISSG27
  100 CONTINUE                                                          POISSG28
      NFAIL=NFAIL+1                                                     POISSG29
      IF(NFAIL.GT.100) GOTO 900                                         POISSG30
      GOTO 50                                                           POISSG31
  130 MULT=NN-1                                                         POISSG32
      RETURN                                                            POISSG33
  900 WRITE(IOUT,*) ' POISSG: TO SMALL NMAX'                            POISSG34
      STOP                                                              POISSG35
      END                                                               POISSG36
                                                                        POISSG37
      SUBROUTINE ANGBRE(RN1,AM2,COSTHG,SINTHG,DIST0,DIST1)              ANGBRE 2
C     ****************************************************              ANGBRE 3
C THIS ROUTINE GENERATES PHOTON ANGULAR DISTRIBUTION                    ANGBRE 4
C IN THE REST FRAME OF THE FERMION PAIR.                                ANGBRE 5
C THE DISTRIBUTION IS TAKEN IN THE INFRARED LIMIT.                      ANGBRE 6
C GENERATES WEIGHTED EVENTS                                             ANGBRE 7
C INPUT:  AM2 = 4*MASSF**2/S WHERE MASSF IS FERMION MASS                ANGBRE 8
C         AND S IS FERMION PAIR EFFECTIVE MASS.                         ANGBRE 9
C OUTPUT: COSTHG, SINTHG, COS AND SIN OF THE PHOTON                     ANGBRE10
C         ANGLE WITH RESPECT TO FERMIONS DIRECTION                      ANGBRE11
C         DIST0 = distribution  generated without m**2/(kp)**2 terms    ANGBRE12
C         DIST1 = distribution  with m**2/(kp)**2 terms                 ANGBRE13
C     ***************************************                           ANGBRE14
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ANGBRE15
      BETA=SQRT(1.D0-AM2)                                               ANGBRE16
      EPS=AM2/(1.D0+SQRT(1.D0-AM2))                                     ANGBRE17
      DEL1=(2.D0-EPS)*(EPS/(2.D0-EPS))**RN1                             ANGBRE18
      DEL2=2.D0-DEL1                                                    ANGBRE19
C SYMMETRIZATION                                                        ANGBRE20
      CALL VARRAN(RN2,1)                                                ANGBRE21
      IF(RN2.LE.0.5D0) THEN                                             ANGBRE22
        A=DEL1                                                          ANGBRE23
        DEL1=DEL2                                                       ANGBRE24
        DEL2=A                                                          ANGBRE25
      ENDIF                                                             ANGBRE26
      DIST0=1D0/DEL1/DEL2                                               ANGBRE27
      DIST1=DIST0-EPS/2.D0*(1D0/DEL1**2+1D0/DEL2**2)                    ANGBRE28
C CALCULATION OF SIN AND COS THETA FROM INTERNAL VARIABLES              ANGBRE29
      COSTHG=(1.D0-DEL1)/BETA                                           ANGBRE30
      SINTHG=SQRT(DEL1*DEL2-AM2)/BETA                                   ANGBRE31
      END                                                               ANGBRE32
                                                                        ANGBRE33
      SUBROUTINE DUMPS(IOUT)                                            DUMPS  2
C     **********************                                            DUMPS  3
C THIS PRINTS OUT FOUR MOMENTA OF PHOTONS                               DUMPS  4
C ON UNIT NO. IOUT                                                      DUMPS  5
C     **********************                                            DUMPS  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DUMPS  7
      COMMON / MOMSET / QF1(4),QF2(4),SPHUM(4),SPHOT(100,4),NPHOT       MOMSET 2
      SAVE   / MOMSET /                                                 DUMPS  9
      DIMENSION SUM(4)                                                  DUMPS 10
      WRITE(IOUT,*) '=====================DUMPS===================='    DUMPS 11
      WRITE(IOUT,3100) 'QF1',(  QF1(  K),K=1,4)                         DUMPS 12
      WRITE(IOUT,3100) 'QF2',(  QF2(  K),K=1,4)                         DUMPS 13
      DO 100 I=1,NPHOT                                                  DUMPS 14
  100 WRITE(IOUT,3100) 'PHO',(SPHOT(I,K),K=1,4)                         DUMPS 15
      DO 200 K=1,4                                                      DUMPS 16
  200 SUM(K)=QF1(K)+QF2(K)                                              DUMPS 17
      DO 210 I=1,NPHOT                                                  DUMPS 18
      DO 210 K=1,4                                                      DUMPS 19
  210 SUM(K)=SUM(K)+SPHOT(I,K)                                          DUMPS 20
      WRITE(IOUT,3100) 'SUM',(  SUM(  K),K=1,4)                         DUMPS 21
 3100 FORMAT(1X,A3,1X,5F18.14)                                          DUMPS 22
      END                                                               DUMPS 23
                                                                        DUMPS 24
      SUBROUTINE DUMPF(IOUT)                                            DUMPF  2
C     **********************                                            DUMPF  3
C THIS PRINTS OUT FOUR MOMENTA OF PHOTONS                               DUMPF  4
C ON UNIT NO. IOUT                                                      DUMPF  5
C     **********************                                            DUMPF  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DUMPF  7
      COMMON / MOMFIN / YF1(4),YF2(4),YPHUM(4),YPHOT(100,4),NPHOY       MOMFIN 2
      SAVE   / MOMFIN /                                                 DUMPF  9
      DIMENSION SUM(4)                                                  DUMPF 10
      WRITE(IOUT,*) '=====================DUMPF===================='    DUMPF 11
      WRITE(IOUT,3100) 'QF1',(  YF1(  K),K=1,4)                         DUMPF 12
      WRITE(IOUT,3100) 'QF2',(  YF2(  K),K=1,4)                         DUMPF 13
      DO 100 I=1,NPHOY                                                  DUMPF 14
  100 WRITE(IOUT,3100) 'PHO',(YPHOT(I,K),K=1,4)                         DUMPF 15
      DO 200 K=1,4                                                      DUMPF 16
  200 SUM(K)=YF1(K)+YF2(K)                                              DUMPF 17
      DO 210 I=1,NPHOY                                                  DUMPF 18
      DO 210 K=1,4                                                      DUMPF 19
  210 SUM(K)=SUM(K)+YPHOT(I,K)                                          DUMPF 20
      WRITE(IOUT,3100) 'SUM',(  SUM(  K),K=1,4)                         DUMPF 21
 3100 FORMAT(1X,A3,1X,5F18.14)                                          DUMPF 22
      END                                                               DUMPF 23
                                                                        DUMPF 24
      SUBROUTINE DUMPI(IOUT)                                            DUMPI  2
C     **********************                                            DUMPI  3
C THIS PRINTS OUT FOUR MOMENTA OF PHOTONS                               DUMPI  4
C ON UNIT NO. IOUT                                                      DUMPI  5
C     **********************                                            DUMPI  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DUMPI  7
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      SAVE   / MOMINI /                                                 DUMPI  9
      DIMENSION SUM(4)                                                  DUMPI 10
      WRITE(IOUT,*) '=====================DUMPI===================='    DUMPI 11
      WRITE(IOUT,3100) 'QF1',(  XF1(  K),K=1,4)                         DUMPI 12
      WRITE(IOUT,3100) 'QF2',(  XF2(  K),K=1,4)                         DUMPI 13
      DO 100 I=1,NPHOX                                                  DUMPI 14
  100 WRITE(IOUT,3100) 'PHO',(XPHOT(I,K),K=1,4)                         DUMPI 15
      DO 200 K=1,4                                                      DUMPI 16
  200 SUM(K)=XF1(K)+XF2(K)                                              DUMPI 17
      DO 210 I=1,NPHOX                                                  DUMPI 18
      DO 210 K=1,4                                                      DUMPI 19
  210 SUM(K)=SUM(K)+XPHOT(I,K)                                          DUMPI 20
      WRITE(IOUT,3100) 'SUM',(  SUM(  K),K=1,4)                         DUMPI 21
 3100 FORMAT(1X,A3,1X,5F18.14)                                          DUMPI 22
      END                                                               DUMPI 23
                                                                        DUMPI 24
      SUBROUTINE DUMPN(IOUT,IEV)                                        DUMPN  2
C     **************************                                        DUMPN  3
C THIS PRINTS OUT FOUR MOMENTA OF final state                           DUMPN  4
C and the serial number of event IEV on unit IOUT                       DUMPN  5
C     **********************                                            DUMPN  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DUMPN  7
      COMMON / MOMINI / XF1(4),XF2(4),XPHUM(4),XPHOT(100,4),NPHOX       MOMINI 2
      SAVE   / MOMINI /                                                 DUMPN  9
      DIMENSION SUM(4)                                                  DUMPN 10
      WRITE(IOUT,*) '=============DUMPNEW====================>',IEV     DUMPN 11
      WRITE(IOUT,3100) 'QF1',(  XF1(  K),K=1,4)                         DUMPN 12
      WRITE(IOUT,3100) 'QF2',(  XF2(  K),K=1,4)                         DUMPN 13
      DO 100 I=1,NPHOX                                                  DUMPN 14
  100 WRITE(IOUT,3100) 'PHO',(XPHOT(I,K),K=1,4)                         DUMPN 15
      DO 200 K=1,4                                                      DUMPN 16
  200 SUM(K)=XF1(K)+XF2(K)                                              DUMPN 17
      DO 210 I=1,NPHOX                                                  DUMPN 18
      DO 210 K=1,4                                                      DUMPN 19
  210 SUM(K)=SUM(K)+XPHOT(I,K)                                          DUMPN 20
      WRITE(IOUT,3100) 'SUM',(  SUM(  K),K=1,4)                         DUMPN 21
 3100 FORMAT(1X,A3,1X,5F18.14)                                          DUMPN 22
      END                                                               DUMPN 23
                                                                        DUMPN 24
C=============================================================          DUMPN 25
C  !!!! LOGBOOK of corrections since 24 Nov 91 !!!!                     DUMPN 26
C                                                                       DUMPN 27
C * line in MARRAN to long ( in printout of ijkl)                       DUMPN 28
C * CHBIN2 replaced by CHBIN1                                           DUMPN 29
C  !!!!!!!!!!!!!!                                                       DUMPN 30
                                                                        DUMPN 31
C Library of utilities for YFS and BHLUMI programs                      DUMPN 32
C version 1.0 November 91                                               DUMPN 33
      SUBROUTINE CHBIN3(R,ALF,BET,X,XPRIM,DJAC)                         CHBIN3 2
C     *****************************************                         CHBIN3 3
C Written: Dec. 1991                                                    CHBIN3 4
C This routine mapps variable R into X, XPRIM=1-X.                      CHBIN3 5
C To be employed in the integration (either ordinary or Monte Carlo)    CHBIN3 6
C of any distributions resambling the binomial distribution             CHBIN3 7
C             x**(alf-1)*(1-x)**(bet-1).                                CHBIN3 8
C with 1> alf,bet > 0. Variables R and X are  in (0,1) range.           CHBIN3 9
C Djac is the Jacobian factor d(x)/d(r).                                CHBIN310
C Mapping is such that 1/djac is very close to                          CHBIN311
C binomial distribution x**(alf-1)*(1-x)**(bet-1).                      CHBIN312
C WARNING:                                                              CHBIN313
C Mapping may fail very close to R=0 and R=1. User is recommended       CHBIN314
C to assure that: fleps**alf < R < 1-fleps**bet,                        CHBIN315
C where fleps = 1.d-30.                                                 CHBIN316
C     ************************                                          CHBIN317
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               CHBIN318
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      SAVE   / INOUT  /                                                 CHBIN320
C                                                                       CHBIN321
      IF( ALF.LE.1D-10 .OR. ALF .GT. 3D0 ) GOTO 900                     CHBIN322
      IF( BET.LE.1D-10 .OR. BET .GT. 3D0 ) GOTO 900                     CHBIN323
      X0=(1D0-ALF)/(2D0-ALF-BET)                                        CHBIN324
      X0= MIN( MAX(X0, 0.001D0), 0.999D0)                               CHBIN325
      Q1=       X0**ALF            *BET*(1D0-X0)**(BET-1D0)             CHBIN326
      Q2=       ALF*X0**(ALF-1D0)  *((1D0-X0)**BET)                     CHBIN327
      P1= Q1/(Q1+Q2)                                                    CHBIN328
      IF( R.LE.P1 ) THEN                                                CHBIN329
         X    =  X0*(R/P1)**(1D0/ALF)                                   CHBIN330
         XPRIM=  1D0-X                                                  CHBIN331
         DIST =  ALF* X**(ALF-1D0)  *BET*(1D0-X0)**(BET-1D0)            CHBIN332
ccc      write(6,*) '3A:x,x1=',x,xprim                                  CHBIN333
      ELSE                                                              CHBIN334
         XPRIM=  (1-X0)*((1D0-R)/(1D0-P1))**(1D0/BET)                   CHBIN335
         X    =  1D0- XPRIM                                             CHBIN336
         DIST =  ALF*X0**(ALF-1D0)  *BET*XPRIM**(BET-1D0)               CHBIN337
ccc      write(6,*) '3B:x,x1=',x,xprim                                  CHBIN338
      ENDIF                                                             CHBIN339
      DJAC    =  (Q1+Q2)/DIST                                           CHBIN340
      RETURN                                                            CHBIN341
  900 WRITE(IOUT,*) ' ++++ STOP IN CHBIN3: wrong parameters'            CHBIN342
      WRITE(   6,*) ' ++++ STOP IN CHBIN3: wrong parameters'            CHBIN343
      STOP                                                              CHBIN344
      END                                                               CHBIN345
                                                                        CHBIN346
      SUBROUTINE CHBIN1(R,ALF,BET,XMAX,X,DJAC)                          CHBIN1 2
C     ****************************************                          CHBIN1 3
C     last correction Dec. 91                                           CHBIN1 4
c this mapps variable r into x.                                         CHBIN1 5
c to be employed in the integration (either ordinary or monte carlo)    CHBIN1 6
c of distributions resambling                                           CHBIN1 7
c the binomial distribution x**(alf-1)*(1-x)**(bet-1)                   CHBIN1 8
c with alf > 0 and  bet arbitrary.                                      CHBIN1 9
c variable r is in (0,1) range and x is within (0,xmax) range.          CHBIN110
c djac is jacobian factor d(x)/d(r).                                    CHBIN111
c mapping is such that 1/djac is very close to                          CHBIN112
c binomial distribution x**(alf-1)*(1-x)**(bet-1).                      CHBIN113
c WARNING: mapping may fail very close to R=0. Practically, one is      CHBIN114
c recommended to obey: fleps**alf < r, where fleps = 1.d-30.            CHBIN115
c Problems may also arise for very small xmax ( below 1.d-12 ).         CHBIN116
C     ************************                                          CHBIN117
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               CHBIN118
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      save   / INOUT  /                                                 CHBIN120
C                                                                       CHBIN121
      IF( ALF.LE.0D0 ) GOTO 900                                         CHBIN122
      X0=(ALF-1D0)/(ALF+BET-2D0)                                        CHBIN123
      IF(X0.GT.XMAX) X0=XMAX                                            CHBIN124
      X0= MAX(X0, 0D0)                                                  CHBIN125
      Q1= 1D0/ALF*X0**ALF  *(1D0-X0)**(BET-1D0)                         CHBIN126
      Q2= X0**(ALF-1D0) /BET*((1D0-X0)**BET-(1D0-XMAX)**BET)            CHBIN127
      P1= Q1/(Q1+Q2)                                                    CHBIN128
      IF( R.LE.P1 ) THEN                                                CHBIN129
         X=X0*(R/P1)**(1D0/ALF)                                         CHBIN130
         DIST= X**(ALF-1D0)*(1D0-X0)**(BET-1D0)                         CHBIN131
      ELSE                                                              CHBIN132
         R1= (1D0-R)/(1D0-P1)                                           CHBIN133
         X = (1D0-XMAX)**BET + ((1D0-X0)**BET-(1D0-XMAX)**BET)*R1       CHBIN134
         X = 1D0 - X**(1D0/BET)                                         CHBIN135
         DIST= X0**(ALF-1D0)*(1D0-X)**(BET-1D0)                         CHBIN136
      ENDIF                                                             CHBIN137
      DJAC=(Q1+Q2)/DIST                                                 CHBIN138
      RETURN                                                            CHBIN139
  900 WRITE(IOUT,*) ' ========= STOP IN CHBIN1: WRONG PARAMS'           CHBIN140
      STOP                                                              CHBIN141
      END                                                               CHBIN142
                                                                        CHBIN143
                                                                        CHBIN144
      SUBROUTINE VESK1W(MMODE,FUNSKO,PAR1,PAR2,PAR3)                    VESK1W 2
C     **********************************************                    VESK1W 3
C====================================================================== VESK1W 4
C====================================================================== VESK1W 5
C===================== V E S K 1 W ==================================== VESK1W 6
C==================S. JADACH  SEPTEMBER 1985=========================== VESK1W 7
C==================S. JADACH  November  1991=========================== VESK1W 8
C====================================================================== VESK1W 9
C ONE DIMENSIONAL MONTE CARLO  SAMPLER.                                 VESK1W10
C Vesrion with weighted events!                                         VESK1W11
C DOUBLE PRECISION  FUNCTION FUNSKO IS THE DISTRIBUTION TO BE GENERATED.VESK1W12
C JLIM1 IS THE NUMBER OF ENTRIES IN THE EQUIDISTANT LATICE WHICH        VESK1W13
C IS FORMED IN THE FIRST STAGE AND JLIM2 IS THE TOTAL MAXIMUM           VESK1W14
C NUMBER OF ENTRIES IN THE LATICE, NOTE THAT DIMENSIONS OF              VESK1W15
C MATRICES IN /CESK8A/ SHOULD BE AT LEAST JLIM2+1 .                     VESK1W16
C FOR MILD FUNSKO JLIM2=128 IS ENOUGH.                                  VESK1W17
C TO CREATE AN INDEPENDENT VERSION REPLACE /ESK8A/=>/ESK8B/.            VESK1W18
C     **********************************                                VESK1W19
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               VESK1W20
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      save                                                              VESK1W22
      COMMON / CESK1W / XX(1025),YY(1025),ZINT(1025),ZSUM,JMAX          VESK1W23
      DATA JLIM1,JLIM2/16,257/                                          VESK1W24
      EXTERNAL FUNSKO                                                   VESK1W25
      DATA IWARM/0/                                                     VESK1W26
C                                                                       VESK1W27
      MODE=MMODE                                                        VESK1W28
      IF(MODE.EQ.-1) THEN                                               VESK1W29
C     ===================                                               VESK1W30
C INITIALISATION PART, SEE VINSKO FOR MORE COMMENTS                     VESK1W31
      INIRAN=1                                                          VESK1W32
      IWARM=1                                                           VESK1W33
      WT=0.                                                             VESK1W34
      SWT=0.                                                            VESK1W35
      SSWT=0.                                                           VESK1W36
      NEVS=0                                                            VESK1W37
C INITIALISATION PART, SAMPLING DISTRIBUTION FUNSKO                     VESK1W38
C AND FILLING MATRICES XX,YY,ZINT ETC.                                  VESK1W39
      JMAX=1                                                            VESK1W40
      XX(1)=0.                                                          VESK1W41
      XX(2)=1.                                                          VESK1W42
      YY(1)=FUNSKO(XX(1))                                               VESK1W43
      YY(2)=FUNSKO(XX(2))                                               VESK1W44
      IF(YY(1).LT.0.0.OR.YY(2).LT.0.0) GO TO 999                        VESK1W45
      ZINT(1)=.5D0*(YY(2)+YY(1))*(XX(2)-XX(1))                          VESK1W46
C                                                                       VESK1W47
      JDIV=1                                                            VESK1W48
      DO 200 K=1,JLIM2-1                                                VESK1W49
      IF(JMAX.LT.JLIM1) THEN                                            VESK1W50
C...    NOTE THAT DESK1W INCREMENTS JMAX=JMAX+1 IN EVERY CALL           VESK1W51
        CALL DESK1W(FUNSKO,JDIV)                                        VESK1W52
        JDIV=JDIV+2                                                     VESK1W53
        IF(JDIV.GT.JMAX) JDIV=1                                         VESK1W54
      ELSE                                                              VESK1W55
        JDIV=1                                                          VESK1W56
        ZMX=ZINT(1)                                                     VESK1W57
        DO 180 J=1,JMAX                                                 VESK1W58
        IF(ZMX.LT.ZINT(J)) THEN                                         VESK1W59
          ZMX=ZINT(J)                                                   VESK1W60
          JDIV=J                                                        VESK1W61
        ENDIF                                                           VESK1W62
  180   CONTINUE                                                        VESK1W63
        CALL DESK1W(FUNSKO,JDIV)                                        VESK1W64
      ENDIF                                                             VESK1W65
  200 CONTINUE                                                          VESK1W66
C                                                                       VESK1W67
C...  FINAL ADMINISTRATION, NORMALIZING ZINT ETC.                       VESK1W68
      ZSUM1=0.                                                          VESK1W69
      ZSUM =0.                                                          VESK1W70
      DO 220 J=1,JMAX                                                   VESK1W71
      ZSUM1=ZSUM1+ZINT(J)                                               VESK1W72
      YMAX= MAX( YY(J+1),YY(J))                                         VESK1W73
      ZINT(J)=YMAX*(XX(J+1)-XX(J))                                      VESK1W74
  220 ZSUM=ZSUM+ZINT(J)                                                 VESK1W75
      SUM=0.                                                            VESK1W76
      DO 240 J=1,JMAX                                                   VESK1W77
      SUM=SUM+ZINT(J)                                                   VESK1W78
  240 ZINT(J)=SUM/ZSUM                                                  VESK1W79
C====>>>                                                                VESK1W80
C Crude x-section estimate                                              VESK1W81
ccc      CINTEG=ZSUM                                                    VESK1W82
ccc      ERRINT=0D0                                                     VESK1W83
      PAR1=  ZSUM                                                       VESK1W84
      PAR2=  ZSUM                                                       VESK1W85
      PAR3=  ZSUM                                                       VESK1W86
C===<<<                                                                 VESK1W87
      ELSE IF(MODE.EQ.0) THEN                                           VESK1W88
C     =======================                                           VESK1W89
C GENERATION PART                                                       VESK1W90
      IF(IWARM.EQ.0) GOTO 901                                           VESK1W91
ccc  222 CONTINUE                                                       VESK1W92
ccc      IF( (WT-1D0).GT.1D-10) THEN                                    VESK1W93
ccc        WT=WT-1.D0                                                   VESK1W94
ccc      ELSE                                                           VESK1W95
        CALL VARRAN(RNUMB,1)                                            VESK1W96
        DO 215 J=1,JMAX                                                 VESK1W97
        JSTOP=J                                                         VESK1W98
  215   IF(ZINT(J).GT.RNUMB) GOTO 216                                   VESK1W99
  216   CONTINUE                                                        VESK1100
        IF(JSTOP.EQ.1) THEN                                             VESK1101
          D=RNUMB/ZINT(1)                                               VESK1102
        ELSE                                                            VESK1103
          D =(RNUMB-ZINT(JSTOP-1))/(ZINT(JSTOP)-ZINT(JSTOP-1))          VESK1104
        ENDIF                                                           VESK1105
        X=XX(JSTOP)*(1.D0 -D )+XX(JSTOP+1)*D                            VESK1106
        FN=FUNSKO(X)                                                    VESK1107
        IF(FN.LT.0.D0) GOTO 999                                         VESK1108
        YYMAX=MAX(YY(JSTOP+1),YY(JSTOP))                                VESK1109
        WT=FN/YYMAX                                                     VESK1110
        NEVS=NEVS+1                                                     VESK1111
        SWT=SWT+WT                                                      VESK1112
        SSWT=SSWT+WT*WT                                                 VESK1113
ccc      ENDIF                                                          VESK1114
ccc      CALL VARRAN(RNUMB,1)                                           VESK1115
ccc      IF(RNUMB.GT.WT) GOTO 222                                       VESK1116
      PAR1=  X                                                          VESK1117
      PAR2=  FN                                                         VESK1118
      PAR3=  WT                                                         VESK1119
C                                                                       VESK1120
      ELSE IF(MODE.EQ.1) THEN                                           VESK1121
C     =======================                                           VESK1122
C FINAL STATISTICS                                                      VESK1123
C STJ 24.OCT.89                                                         VESK1124
      CINTEG=0D0                                                        VESK1125
      ERRINT=0D0                                                        VESK1126
      IF(NEVS.GT.0) CINTEG=ZSUM*SWT/FLOAT(NEVS)                         VESK1127
      IF(NEVS.GT.0) ERRINT=SQRT(SSWT/SWT**2-1.D0/FLOAT(NEVS))           VESK1128
      PAR1=  CINTEG                                                     VESK1129
      PAR2=  ERRINT                                                     VESK1130
      PAR3=  ZSUM                                                       VESK1131
C--                                                                     VESK1132
      ELSE                                                              VESK1133
C     ====                                                              VESK1134
      GOTO  902                                                         VESK1135
      ENDIF                                                             VESK1136
C     =====                                                             VESK1137
C                                                                       VESK1138
      RETURN                                                            VESK1139
 901  WRITE(IOUT,9010)                                                  VESK1140
 9010 FORMAT(' **** STOP IN VESK8A, LACK OF INITIALISATION')            VESK1141
      STOP                                                              VESK1142
 902  WRITE(IOUT,9020)                                                  VESK1143
 9020 FORMAT(' **** STOP IN VESK8A, WRONG MODE ')                       VESK1144
      STOP                                                              VESK1145
 999  WRITE(IOUT,9990)                                                  VESK1146
 9990 FORMAT(' **** STOP IN VESK8A, NEGATIVE VALUE OF FUNSKO ')         VESK1147
      STOP                                                              VESK1148
      END                                                               VESK1149
      SUBROUTINE DESK1W(FUNSKO,JDIV)                                    DESK1W 2
C     ******************************                                    DESK1W 3
C THIS ROUTINE BELONGS TO VESK8A PACKAGE                                DESK1W 4
C IT SUDIVIDES INTO TWO EQUAL PARTS THE INTERVAL                        DESK1W 5
C (XX(JDIV),XX(JDIV+1))  IN THE LATICE                                  DESK1W 6
C     ***********************                                           DESK1W 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DESK1W 8
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      save                                                              DESK1W10
      COMMON / CESK1W / XX(1025),YY(1025),ZINT(1025),ZSUM,JMAX          DESK1W11
      EXTERNAL FUNSKO                                                   DESK1W12
C                                                                       DESK1W13
      XNEW=.5D0*(XX(JDIV) +XX(JDIV+1))                                  DESK1W14
      DO 100 J=JMAX,JDIV,-1                                             DESK1W15
      XX(J+2)  =XX(J+1)                                                 DESK1W16
      YY(J+2)  =YY(J+1)                                                 DESK1W17
  100 ZINT(J+1)=ZINT(J)                                                 DESK1W18
      XX(JDIV+1)= XNEW                                                  DESK1W19
      YY(JDIV+1)= FUNSKO(XNEW)                                          DESK1W20
      IF(YY(JDIV+1).LT.0.) GOTO 999                                     DESK1W21
      ZINT(JDIV)  =.5D0*(YY(JDIV+1)+YY(JDIV)  )*(XX(JDIV+1)-XX(JDIV)  ) DESK1W22
      ZINT(JDIV+1)=.5D0*(YY(JDIV+2)+YY(JDIV+1))*(XX(JDIV+2)-XX(JDIV+1)) DESK1W23
      JMAX=JMAX+1                                                       DESK1W24
      RETURN                                                            DESK1W25
  999 WRITE(IOUT,9000)                                                  DESK1W26
 9000 FORMAT(' **** STOP IN DESK1W, NEGATIVE VALUE OF FUNSKO ')         DESK1W27
      STOP                                                              DESK1W28
      END                                                               DESK1W29
                                                                        DESK1W30
                                                                        DESK1W31
      SUBROUTINE VESK2W(MODE,FUNSKO,X,Y,WT)                             VESK2W 2
C     *************************************                             VESK2W 3
C=======================================================================VESK2W 4
C=======================================================================VESK2W 5
C=======================================================================VESK2W 6
C===============TWO DIMENSIONAL SAMPLER VESK2W==========================VESK2W 7
C=======================================================================VESK2W 8
C=======================================================================VESK2W 9
C=======================================================================VESK2W10
C                         VESK2W                                       CVESK2W11
C  GENERAL PURPOSE ROUTINE TO GENERATE AN ARBITRARY TWO DIMENSIONAL    CVESK2W12
C  DISTRIBUTION SUPPLIED BY USER IN A FORM OF FUNCTION FUNSKO(X,Y)     CVESK2W13
C                 WRITTEN NOVEMBER 1985                                CVESK2W14
C                    BY S. JADACH                                      CVESK2W15
C                 LAST UPDATE:  07.NOV.1990                            CVESK2W16
C                 version with weighted event....                      CVESK2W17
C======================================================================CVESK2W18
C VESKO2 GENERATES TWO DIMENSIONAL DISTRIBUTION DEFINED BY ARBITRARY    VESK2W19
C FUNCTION FUNSKO(X,Y) WHERE X,Y BELONG  TO (0,1) RANGE.                VESK2W20
C THE METHOD CONSISTS IN DIVIDING UNIT PLAQUET INTO CELLS USING         VESK2W21
C SORT OF 'LIFE-GAME' METHOD IN WHICH THE DIVISION OF A CELLS IS MADE   VESK2W22
C (DURING INITIALISATION) ALWAYS FOR THIS CELL WHICH CONTAINS           VESK2W23
C A MAXIMUM VALUE OF THE INTEGRAL OVER FUNSKO IN THE CELL.              VESK2W24
C RESULTING CELLS CONTAIN (USUALLY UP TO FACTOR TWO) EQUAL INTERGRAL    VESK2W25
C VALUE. THE GENERATION CONSISTS IN CHOOSING RANDOMLY  A CELL           VESK2W26
C ACCORDING TO ITS CONTENT AND THEN IN GENERATING X,Y WITHIN THE CELL.  VESK2W27
C REJECTION METHOD IS APPLIED AT THE END OF THE PROCEDURE IN ORDER TO   VESK2W28
C ASSURE THAT X,Y ARE DISTRIBUTED PRECISELY ACCORDING TO FUNSKO(X,Y)    VESK2W29
C                    PARAMETERS                                         VESK2W30
C -/ MODE = -1 INITIALISATION, NO (X,Y) GENERATED, CALL VESKO2(-1,D1,D2)VESK2W31
C    HAS TO BE MADE PRIOR  TO GENERATING FIRST (X,Y) PAIR               VESK2W32
C -/ MODE =  0 GENERATION OF (X,Y) PAIR BY CALL VESKO2(0,X,Y)           VESK2W33
C -/ MODE =  1 CALL VESKO2(1,VALINT,ERRINT) MAY BE DONE AFTER LAST      VESK2W34
C    (X,Y) WAS GENERATED IN ORDER TO OBTAIN THE VALUE OF THE INTEGRAL   VESK2W35
C    VALINT AND ITS ERROR ERRINT, INTEGRAL IS CALCULATED USING AVERAGE  VESK2W36
C    WEIGHTS ENCOUTERED DURING GENERATION PHASE                         VESK2W37
C -/ X,Y  IF MODE=-1 THE THEY ARE DUMMY                                 VESK2W38
C         IF MODE= 0 THE RESULT OF RANDOM GENERATION ACCORDING TO       VESK2W39
C                    FUNCTION FUNSKO, X AND Y BELONG TO (0,1)           VESK2W40
C         IF MODE= 1 X= VALUE OF INTEGRAL AND Y=ERROR (RELATIVE)        VESK2W41
C                    WT = crude x-section                               VESK2W42
C ------------------------------------------------------------          VESK2W43
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                VESK2W44
      save                                                              VESK2W45
      PARAMETER( JLIM1 = 64, JLIM2 = 1000 , IOUT = 6 )                  VESK2W46
      COMMON / VESW2  / XX(JLIM2,2),DX(JLIM2,2),YY(JLIM2,2,2)           VESK2W47
     $  ,YYMX(JLIM2),ZINT(JLIM2),ZSUM,LEV(JLIM2),JMAX                   VESK2W48
      DOUBLE PRECISION DRVEC(100)                                       VESK2W49
      EXTERNAL FUNSKO                                                   VESK2W50
      DATA IWARM/77/                                                    VESK2W51
                                                                        VESK2W52
      IF(MODE) 100,200,300                                              VESK2W53
C...  INITIALISATION PART, SEE VINSKO FOR MORE COMMENTS                 VESK2W54
  100 CALL VINSKW(FUNSKO)                                               VESK2W55
      IWARM=0                                                           VESK2W56
      WT=0D0                                                            VESK2W57
      WTMAX = 1D0                                                       VESK2W58
      WTMXX = WTMAX                                                     VESK2W59
      NEVOV=0                                                           VESK2W60
      SWT=0D0                                                           VESK2W61
      SSWT=0D0                                                          VESK2W62
      NEVS=0                                                            VESK2W63
C(((((((((((((                                                          VESK2W64
C     CALL HBOOK1(1, 16H WT-VESKO2     $,75,0.0D0,1.5D0)                VESK2W65
C     CALL HMINIM(1,0)                                                  VESK2W66
C     CALL HBOOK2(2,16H X-Y VESKO2    $, 64,0,1, 32,0,1,0)              VESK2W67
C     CALL HSCALE(2)                                                    VESK2W68
C))))))))))))                                                           VESK2W69
      RETURN                                                            VESK2W70
C...                                                                    VESK2W71
  200 CONTINUE                                                          VESK2W72
C...  GENERATION PART                                                   VESK2W73
      IF(IWARM.EQ.77) GO TO 980                                         VESK2W74
cc    IF(WT.GT.WTMAX) THEN                                              VESK2W75
cc      write(6,*) ' vesko2: ev. overweighted, dont worry, wt=',wt      VESK2W76
cc      WT=WT-WTMAX                                                     VESK2W77
cc      NEVOV=NEVOV+1                                                   VESK2W78
cc    ELSE                                                              VESK2W79
        CALL VARRAN(DRVEC,3)                                            VESK2W80
        R = DRVEC(1)                                                    VESK2W81
        DO 215 J=1,JMAX                                                 VESK2W82
        JSTOP=J                                                         VESK2W83
  215   IF(ZINT(J).GT.R) GOTO 216                                       VESK2W84
  216   CONTINUE                                                        VESK2W85
        XR=XX(JSTOP,1)+DX(JSTOP,1)*DRVEC(2)                             VESK2W86
        YR=XX(JSTOP,2)+DX(JSTOP,2)*DRVEC(3)                             VESK2W87
        FN=FUNSKO(XR,YR)                                                VESK2W88
        IF(FN.LT.0.) GOTO 999                                           VESK2W89
        YYMAX=YYMX(JSTOP)                                               VESK2W90
        WT=FN/YYMAX                                                     VESK2W91
        WTMXX = MAX(WTMXX,WT)                                           VESK2W92
cc      IF(NEVS.LE.(4*JLIM2).AND.WT.GT.WTMAX) THEN                      VESK2W93
cc         WTMAX=WT*1.1D0                                               VESK2W94
cc         WRITE(6,*) ' VESKO2: NEVS, new WTMAX= ',NEVS,WTMAX           VESK2W95
cc      ENDIF                                                           VESK2W96
        NEVS=NEVS+1                                                     VESK2W97
        SWT=SWT+WT                                                      VESK2W98
        SSWT=SSWT+WT*WT                                                 VESK2W99
C((((((((((                                                             VESK2100
C       CALL HFILL(1,WT,0D0,1D0)                                        VESK2101
C))))))))))                                                             VESK2102
ccc   ENDIF                                                             VESK2103
CCC    CALL VARRAN(DRVEC,1)                                             VESK2104
ccc    RN=DRVEC(1)                                                      VESK2105
ccc   IF(WTMAX*RN.GT.WT) GOTO 200                                       VESK2106
      X=XR                                                              VESK2107
      Y=YR                                                              VESK2108
C((((((((((                                                             VESK2109
C     CALL HFILL(2,XR,YR)                                               VESK2110
C))))))))))                                                             VESK2111
      RETURN                                                            VESK2112
C...                                                                    VESK2113
  300 CONTINUE                                                          VESK2114
C THIS IS THE VALUE OF THE INTEGRAL                                     VESK2115
      CINTEG=ZSUM*SWT/NEVS                                              VESK2116
C AND ITS ERROR                                                         VESK2117
      ERRINT=SQRT(SSWT/SWT**2-1D0/NEVS)                                 VESK2118
      X=CINTEG                                                          VESK2119
      Y=ERRINT                                                          VESK2120
      WT=ZSUM                                                           VESK2121
C((((((((((                                                             VESK2122
C     CALL HPRINT(1)                                                    VESK2123
C     CALL HDELET(1)                                                    VESK2124
C     CALL HPRINT(2)                                                    VESK2125
C     CALL HDELET(2)                                                    VESK2126
      PRINT 7000,NEVS,NEVOV,WTMAX,WTMXX                                 VESK2127
 7000 FORMAT(' VESK2W: NEVS,NEVOV,WTMAX,WTMXX= ',2I7,2F7.3)             VESK2128
C))))))))))                                                             VESK2129
      RETURN                                                            VESK2130
  980 WRITE(IOUT,9002)                                                  VESK2131
 9002 FORMAT(' **** STOP IN VESK2W, LACK OF INITIALISATION   ')         VESK2132
      STOP                                                              VESK2133
  999 WRITE(IOUT,9004)                                                  VESK2134
 9004 FORMAT(' **** STOP IN VESK2W, NEGATIVE VALUE OF FUNSKO ')         VESK2135
      STOP                                                              VESK2136
      END                                                               VESK2137
                                                                        VESK2138
      SUBROUTINE VINSKW(FUNSKO)                                         VINSKW 2
C     *************************                                         VINSKW 3
C THIS ROUTINE BELONGS TO VESKO2 PACKAGE                                VINSKW 4
C JLIM1 IS THE NUMBER OF CELLS, DIVISION OF THE UNIT PLAQUE INTO CELLS  VINSKW 5
C IS MADE IN THE FIRST STAGE.    JLIM2 IS THE TOTAL MAXIMUM             VINSKW 6
C NUMBER OF CELLS, NOTE THAT DIMENSIONS OF                              VINSKW 7
C MATRICES IN /VESKOA/ SHOULD BE AT LEAST JLIM2                         VINSKW 8
C     **********************************                                VINSKW 9
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                VINSKW10
      save                                                              VINSKW11
C ------------------------------------------------------------          VINSKW12
      PARAMETER( JLIM1 = 64, JLIM2 = 1000 , IOUT = 6 )                  VINSKW13
      COMMON / VESW2  / XX(JLIM2,2),DX(JLIM2,2),YY(JLIM2,2,2)           VINSKW14
     $  ,YYMX(JLIM2),ZINT(JLIM2),ZSUM,LEV(JLIM2),JMAX                   VINSKW15
      EXTERNAL FUNSKO                                                   VINSKW16
                                                                        VINSKW17
C...  INITIALISATION PART, SAMPLING DISTRIBUTION FUNSKO                 VINSKW18
C...  AND FILLING MATRICES XX,YY,ZINT ETC.                              VINSKW19
      JMAX=1                                                            VINSKW20
      XX(1,1)=0D0                                                       VINSKW21
      XX(1,2)=0D0                                                       VINSKW22
      DX(1,1)=1D0                                                       VINSKW23
      DX(1,2)=1D0                                                       VINSKW24
      LEV(1)=1                                                          VINSKW25
      SUM=0D0                                                           VINSKW26
      DO 150 I=1,2                                                      VINSKW27
      DO 150 K=1,2                                                      VINSKW28
C... THIS IS NOT ELEGANT BUT SIMPLE                                     VINSKW29
      YY(1,I,K)=FUNSKO(XX(1,1)+(I-1.)*DX(1,1),XX(1,2)+(K-1.)*DX(1,2))   VINSKW30
      IF(YY(1,I,K).LT.0.0) GO TO 999                                    VINSKW31
  150 SUM=SUM+YY(1,I,K)                                                 VINSKW32
      ZINT(1)=SUM*DX(1,1)*DX(1,2)/4D0                                   VINSKW33
                                                                        VINSKW34
      JDIV=1                                                            VINSKW35
      DO 200 KK=1,JLIM2-1                                               VINSKW36
      IF(JMAX.LT.JLIM1) THEN                                            VINSKW37
C...    NOTE THAT DIVSKW INCREMENTS JMAX=JMAX+1 IN EVERY CALL           VINSKW38
        CALL DIVSKW(JDIV,FUNSKO)                                        VINSKW39
C(((((((((((                                                            VINSKW40
c      IF(JMAX.EQ.JLIM1) THEN                                           VINSKW41
c      PRINT 9900,JMAX,(LEV(I),I=1,JMAX)                                VINSKW42
c 9900 FORMAT(///,' JMAX...  LEV LEV LEV LEV LEV',I10,/(24I5))          VINSKW43
c      PRINT 9901,((XX(JD,I),I=1,2),JD=1,JMAX)                          VINSKW44
c 9901 FORMAT('  XX XX XX XX XX XX XX  ',/(10E12.5))                    VINSKW45
c      PRINT 9902,((DX(JD,I),I=1,2),JD=1,JMAX)                          VINSKW46
c 9902 FORMAT('  DX  DX DX DX DX DX ',/(10E12.5))                       VINSKW47
c      PRINT 9903,(((YY(JD,I,K),I=1,2),K=1,2),JD=1,JMAX)                VINSKW48
c 9903 FORMAT('  YY  YY YY YY YY YY ',/(8E15.5))                        VINSKW49
c      PRINT 9904,(ZINT(I),I=1,JMAX)                                    VINSKW50
c 9904 FORMAT('   ZINT ZINT ZINT ZINT ',/(10E12.5))                     VINSKW51
c      ENDIF                                                            VINSKW52
C))))))))))))                                                           VINSKW53
        JDIV=JDIV+2                                                     VINSKW54
        IF(JDIV.GT.JMAX) JDIV=1                                         VINSKW55
      ELSE                                                              VINSKW56
        JDIV=1                                                          VINSKW57
        ZMX=ZINT(1)                                                     VINSKW58
        DO 180 J=1,JMAX                                                 VINSKW59
        IF(ZMX.LT.ZINT(J)) THEN                                         VINSKW60
          ZMX=ZINT(J)                                                   VINSKW61
          JDIV=J                                                        VINSKW62
        ENDIF                                                           VINSKW63
  180   CONTINUE                                                        VINSKW64
        CALL DIVSKW(JDIV,FUNSKO)                                        VINSKW65
      ENDIF                                                             VINSKW66
  200 CONTINUE                                                          VINSKW67
                                                                        VINSKW68
C(((((((((((                                                            VINSKW69
c      JPRN=64                                                          VINSKW70
c      PRINT 9910,JMAX,(LEV(I),I=1,JMAX)                                VINSKW71
c 9910 FORMAT(/,' JMAX...  LEV LEV LEV LEV LEV',I10,/(24I5))            VINSKW72
c      IF(JMAX.LE.JPRN) PRINT 9911,((XX(JD,I),I=1,2),JD=1,JMAX)         VINSKW73
c 9911 FORMAT('  XX XX XX XX XX XX XX  ',/(10E12.5))                    VINSKW74
c      IF(JMAX.LE.JPRN) PRINT 9912,((DX(JD,I),I=1,2),JD=1,JMAX)         VINSKW75
c 9912 FORMAT('  DX  DX DX DX DX DX ',/(10E12.5))                       VINSKW76
c      IF(JMAX.LE.JPRN) PRINT 9913,(((YY(JD,I,K),I=1,2),K=1,2),JD=1,JMAXVINSKW77
c 9913 FORMAT('  YY  YY YY YY YY YY ',/(8E15.5))                        VINSKW78
c      IF(JMAX.LE.JPRN) PRINT 9914,(ZINT(I),I=1,JMAX)                   VINSKW79
c 9914 FORMAT('   ZINT ZINT ZINT ZINT ',/(10E12.5))                     VINSKW80
C     DO 902 J=1,JMAX                                                   VINSKW81
C     Z=1D0*J-.5D0                                                      VINSKW82
C 902 CALL HFILL(202,Z,ZINT(J))                                         VINSKW83
C))))))))))))                                                           VINSKW84
C...  FINAL ADMINISTRATION, NORMALIZING ZINT ETC.                       VINSKW85
      ZSUM1=0D0                                                         VINSKW86
      ZSUM =0D0                                                         VINSKW87
      DO 260 J=1,JMAX                                                   VINSKW88
      ZSUM1=ZSUM1+ZINT(J)                                               VINSKW89
      YMAX= 0D0                                                         VINSKW90
      DO 250 I=1,2                                                      VINSKW91
      DO 250 K=1,2                                                      VINSKW92
  250 YMAX= MAX(YMAX,YY(J,I,K))                                         VINSKW93
      YYMX(J)=YMAX                                                      VINSKW94
      ZINT(J)=YMAX*DX(J,1)*DX(J,2)                                      VINSKW95
  260 ZSUM=ZSUM+ZINT(J)                                                 VINSKW96
C((((((((                                                               VINSKW97
      ZR=ZSUM1/ZSUM                                                     VINSKW98
      PRINT 7000,ZR                                                     VINSKW99
 7000 FORMAT(' /////// ZSUM1/ZSUM= ',F20.8)                             VINSK100
C)))))))))                                                              VINSK101
      SUM=0D0                                                           VINSK102
      DO 240 J=1,JMAX                                                   VINSK103
      SUM=SUM+ZINT(J)                                                   VINSK104
  240 ZINT(J)=SUM/ZSUM                                                  VINSK105
C(((((((((((                                                            VINSK106
c     JPRN=64                                                           VINSK107
c     PRINT 9932,JMAX                                                   VINSK108
c9932 FORMAT(/'=====JMAX ZINT ZINT ZINT  ',I10)                         VINSK109
c     IF(JMAX.LE.JPRN) PRINT 9935,(ZINT(I),I=1,JMAX)                    VINSK110
c9935            FORMAT(10E12.5)                                        VINSK111
C     DO 901 J=2,JMAX                                                   VINSK112
C 901 CALL HFILL(201,(ZINT(J)-ZINT(J-1))*JMAX)                          VINSK113
C     CALL HFILL(201,ZINT(1)*JMAX)                                      VINSK114
C))))))))))))                                                           VINSK115
      RETURN                                                            VINSK116
  999 WRITE(IOUT,9000)                                                  VINSK117
 9000 FORMAT(' **** STOP IN VINSKW, NEGATIVE VALUE OF FUNSKO ')         VINSK118
      STOP                                                              VINSK119
      END                                                               VINSK120
                                                                        VINSK121
      SUBROUTINE DIVSKW(JD,FUNSKO)                                      DIVSKW 2
C     ****************************                                      DIVSKW 3
C THIS ROUTINE BELONGS TO VESKO2 PACKAGE                                DIVSKW 4
C IT SUBDIVIDES ONE CELL (NO. JD) INTO TWO EQUAL SIZE CELLS             DIVSKW 5
C     **********************************                                DIVSKW 6
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                DIVSKW 7
      save                                                              DIVSKW 8
C ------------------------------------------------------------          DIVSKW 9
      PARAMETER( JLIM1 = 64, JLIM2 = 1000 , IOUT = 6 )                  DIVSKW10
      COMMON / VESW2  / XX(JLIM2,2),DX(JLIM2,2),YY(JLIM2,2,2)           DIVSKW11
     $  ,YYMX(JLIM2),ZINT(JLIM2),ZSUM,LEV(JLIM2),JMAX                   DIVSKW12
      EXTERNAL FUNSKO                                                   DIVSKW13
                                                                        DIVSKW14
C...  MOOVE TO MAKE A HOLE FOR A NEW ENTRY (ONE ADDITIONAL CELL)        DIVSKW15
      DO 100 J=JMAX,JD,-1                                               DIVSKW16
      ZINT(J+1)=ZINT(J)                                                 DIVSKW17
      LEV(J+1)=LEV(J)                                                   DIVSKW18
      DO 100 I=1,2                                                      DIVSKW19
      XX(J+1,I)  =XX(J,I)                                               DIVSKW20
      DX(J+1,I)  =DX(J,I)                                               DIVSKW21
      DO 100 K=1,2                                                      DIVSKW22
  100 YY(J+1,I,K)  =YY(J,I,K)                                           DIVSKW23
C...  CREATE TWO NEW CELLS AND STORE THEM                               DIVSKW24
      LL= MOD(LEV(JD),2)+1                                              DIVSKW25
      DX(JD,LL)=DX(JD,LL)/2D0                                           DIVSKW26
      DX(JD+1,LL)=DX(JD+1,LL)/2D0                                       DIVSKW27
      XX(JD+1,LL)=XX(JD,LL)+DX(JD,LL)                                   DIVSKW28
      IF(LL.EQ.1) THEN                                                  DIVSKW29
        DO 150 I=1,2                                                    DIVSKW30
C... THIS IS NOT ELEGANT, PROBABLY COULD BE DONE BETTER                 DIVSKW31
        YY(JD,2,I)=FUNSKO(XX(JD,1)+DX(JD,1),XX(JD,2)+(I-1.)*DX(JD,2))   DIVSKW32
  150   YY(JD+1,1,I)=YY(JD,2,I)                                         DIVSKW33
      ELSE                                                              DIVSKW34
        DO 152 I=1,2                                                    DIVSKW35
        YY(JD,I,2)=FUNSKO(XX(JD,1)+(I-1.)*DX(JD,1),XX(JD,2)+DX(JD,2))   DIVSKW36
  152   YY(JD+1,I,1)=YY(JD,I,2)                                         DIVSKW37
      ENDIF                                                             DIVSKW38
C...  ESTIMATE THE INTEGRALS OVER NEW CELLS RESULTING FROM DIVISION     DIVSKW39
      DO 220 JDV=JD,JD+1                                                DIVSKW40
      LEV(JDV)=LEV(JDV)+1                                               DIVSKW41
      SUM=0D0                                                           DIVSKW42
      DO 210 I=1,2                                                      DIVSKW43
      DO 210 K=1,2                                                      DIVSKW44
      IF(YY(JDV,I,K).LT.0.D0) GO TO 999                                 DIVSKW45
  210 SUM=SUM+YY(JDV,I,K)                                               DIVSKW46
  220 ZINT(JDV) =SUM*DX(JDV,1)*DX(JDV,2)/4D0                            DIVSKW47
      JMAX=JMAX+1                                                       DIVSKW48
      RETURN                                                            DIVSKW49
  999 WRITE(IOUT,9000)                                                  DIVSKW50
 9000 FORMAT(' **** STOP IN DIVSKW, NEGATIVE VALUE OF FUNSKO ')         DIVSKW51
      STOP                                                              DIVSKW52
      END                                                               DIVSKW53
                                                                        DIVSKW54
                                                                        DIVSKW55
      SUBROUTINE GAUSJD(FUN,AA,BB,EEPS,RESULT)                          GAUSJD 2
C     ****************************************                          GAUSJD 3
C Gauss integration by S. Jadach, Oct. 90.                              GAUSJD 4
C This is NON-ADAPTIVE (!!!!) UNOPTIMIZED (!!!) integration subprogram. GAUSJD 5
C     *************************                                         GAUSJD 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GAUSJD 7
      DIMENSION WG(12),XX(12)                                           GAUSJD 8
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      EXTERNAL FUN                                                      GAUSJD10
      save /inout/,wg,xx,ITERMX                                         GAUSJD11
      DATA WG                                                           GAUSJD12
     $/0.101228536290376D0, 0.222381034453374D0, 0.313706645877887D0,   GAUSJD13
     $ 0.362683783378362D0, 0.027152459411754D0, 0.062253523938648D0,   GAUSJD14
     $ 0.095158511682493D0, 0.124628971255534D0, 0.149595988816577D0,   GAUSJD15
     $ 0.169156519395003D0, 0.182603415044924D0, 0.189450610455069D0/   GAUSJD16
      DATA XX                                                           GAUSJD17
     $/0.960289856497536D0, 0.796666477413627D0, 0.525532409916329D0,   GAUSJD18
     $ 0.183434642495650D0, 0.989400934991650D0, 0.944575023073233D0,   GAUSJD19
     $ 0.865631202387832D0, 0.755404408355003D0, 0.617876244402644D0,   GAUSJD20
     $ 0.458016777657227D0, 0.281603550779259D0, 0.095012509837637D0/   GAUSJD21
      DATA ITERMX / 15/                                                 GAUSJD22
      EPS=ABS(EEPS)                                                     GAUSJD23
      A=AA                                                              GAUSJD24
      B=BB                                                              GAUSJD25
      NDIVI=1                                                           GAUSJD26
C iteration over subdivisions terminated by precision requirement       GAUSJD27
      DO 400 ITER=1,ITERMX                                              GAUSJD28
      CALK8  =0D0                                                       GAUSJD29
      CALK16 =0D0                                                       GAUSJD30
C sum over DELTA subintegrals                                           GAUSJD31
      DO 200 K = 1,NDIVI                                                GAUSJD32
      DELTA = (B-A)/NDIVI                                               GAUSJD33
      X1    =  A + (K-1)*DELTA                                          GAUSJD34
      X2    =  X1+ DELTA                                                GAUSJD35
      XMIDLE= 0.5D0*(X2+X1)                                             GAUSJD36
      RANGE = 0.5D0*(X2-X1)                                             GAUSJD37
      SUM8 =0D0                                                         GAUSJD38
      SUM16=0D0                                                         GAUSJD39
C 8- and 12-point   Gauss integration over single DELTA subinterval     GAUSJD40
      DO 100 I=1,12                                                     GAUSJD41
      XPLUS= XMIDLE+RANGE*XX(I)                                         GAUSJD42
      XMINU= XMIDLE-RANGE*XX(I)                                         GAUSJD43
      FPLUS=FUN(XPLUS)                                                  GAUSJD44
      FMINU=FUN(XMINU)                                                  GAUSJD45
      IF(I.LE.4) THEN                                                   GAUSJD46
          SUM8 =SUM8  +(FPLUS+FMINU)*WG(I)/2D0                          GAUSJD47
      ELSE                                                              GAUSJD48
          SUM16=SUM16 +(FPLUS+FMINU)*WG(I)/2D0                          GAUSJD49
      ENDIF                                                             GAUSJD50
  100 CONTINUE                                                          GAUSJD51
      CALK8 = CALK8 + SUM8 *(X2-X1)                                     GAUSJD52
      CALK16= CALK16+ SUM16*(X2-X1)                                     GAUSJD53
  200 CONTINUE                                                          GAUSJD54
      ERABS = ABS(CALK16-CALK8)                                         GAUSJD55
      ERELA = 0D0                                                       GAUSJD56
      IF(CALK16.NE.0D0) ERELA= ERABS/ABS(CALK16)                        GAUSJD57
c     write(6,*) 'gausjd: CALK8,CALK16=',ITER,CALK8,CALK16,ERELA        GAUSJD58
C precision check to terminate integration                              GAUSJD59
      IF(EEPS.GT.0D0) THEN                                              GAUSJD60
        IF(ERABS.LT. EPS) GOTO 800                                      GAUSJD61
      ELSE                                                              GAUSJD62
        IF(ERELA.LT. EPS) GOTO 800                                      GAUSJD63
      ENDIF                                                             GAUSJD64
  400 NDIVI=NDIVI*2                                                     GAUSJD65
      WRITE(IOUT,*) ' +++++ GAUSJD:  REQUIRED PRECISION TO HIGH!'       GAUSJD66
      WRITE(IOUT,*) ' +++++ GAUSJD:  ITER,ERELA=',ITER,ERELA            GAUSJD67
  800 RESULT= CALK16                                                    GAUSJD68
      END                                                               GAUSJD69
      SUBROUTINE WMONIT(MODE,ID,WT,WTMAX,RN)                            WMONIT 2
C     **************************************                            WMONIT 3
C last correction 19 sept. 89                                           WMONIT 4
C Utility program for monitoring M.C. rejection weights.                WMONIT 5
C ID is weight idendifier, maximum IDMX (defined below).                WMONIT 6
C WT IS WEIGHT, WTMAX IS MAXIMUM WEIGHT AND RN IS RANDOM NUMBER.        WMONIT 7
C IF(MODE.EQ.-1) THEN                                                   WMONIT 8
C          INITALIZATION IF ENTRY ID, OTHER ARGUMENTS ARE IGNORED       WMONIT 9
C ELSEIF(MODE.EQ.0) THEN                                                WMONIT10
C          SUMMING UP WEIGHTS ETC. FOR A GIVEN EVENT FOR ENTRY ID       WMONIT11
C        - WT IS CURRENT WEIGHT.                                        WMONIT12
C        - WTMAX IS MAXIMUM WEIGHT USED FOR COUTING OVERWEIGHTED        WMONIT13
C          EVENTS WITH WT>WTMAX.                                        WMONIT14
C        - RN IS RANDOM NUMBER USED IN REJECTION, IT IS USED TO         WMONIT15
C          COUNT NO. OF ACCEPTED (RN<WT/WTMAX) AND REJECTED             WMONIT16
C          (WT>WT/WTMAX) EVENTS,                                        WMONIT17
C          IF RO REJECTION THEN PUT RN=0D0.                             WMONIT18
C ELSEIF(MODE.EQ.1) THEN                                                WMONIT19
C          IN THIS MODE WMONIT REPPORTS ON ACCUMULATED STATISTICS       WMONIT20
C          AND THE INFORMATION IS STORED IN COMMON /CMONIT/             WMONIT21
C        - AVERWT= AVERAGE WEIGHT WT COUNTING ALL EVENT                 WMONIT22
C        - ERRELA= RELATIVE ERROR OF AVERWT                             WMONIT23
C        - NEVTOT= TOTAL NIMBER OF ACCOUNTED EVENTS                     WMONIT24
C        - NEVACC= NO. OF ACCEPTED EVENTS (RN<WT\WTMAX)                 WMONIT25
C        - NEVNEG= NO. OF EVENTS WITH NEGATIVE WEIGHT (WT<0)            WMONIT26
C        - NEVZER= NO. OF EVENTS WITH ZERO WEIGHT (WT.EQ.0D0)           WMONIT27
C        - NEVOVE= NO. OF OVERWEGHTED EVENTS (WT>WTMAX)                 WMONIT28
C          AND IF YOU DO NOT WANT TO USE CMONIT THEN THE VALUE          WMONIT29
C          The value of AVERWT is assigned to WT,                       WMONIT30
C          the value of ERRELA is assigned to WTMAX and                 WMONIT31
C          the value of WTMAX  is assigned to RN in this mode.          WMONIT32
C ELSEIF(MODEE.EQ.2) THEN                                               WMONIT33
C          ALL INFORMATION DEFINED FOR ENTRY ID DEFINED ABOVE           WMONIT34
C          FOR MODE=2 IS JUST PRINTED OF UNIT IOUT                      WMONIT35
C ENDIF                                                                 WMONIT36
C NOTE THAT OUTPUT REPPORT (MODE=1,2) IS DONE DYNAMICALLY JUST FOR A    WMONIT37
C GIVEN ENTRY ID ONLY AND IT MAY BE REPEATED MANY TIMES FOR ONE ID AND  WMONIT38
C FOR VARIOUS ID'S AS WELL.                                             WMONIT39
C     ************************                                          WMONIT40
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               WMONIT41
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      save                                                              WMONIT44
      PARAMETER(IDMX=100)                                               WMONIT45
      INTEGER NTOT(IDMX),NACC(IDMX),NNEG(IDMX),NOVE(IDMX),NZER(IDMX)    WMONIT46
      DIMENSION SWT(IDMX),SSWT(IDMX),WWMX(IDMX)                         WMONIT47
      DATA NTOT /IDMX* -1/  SWT /IDMX*   0D0/                           WMONIT48
      DATA SSWT /IDMX*0D0/ WWMX /IDMX*-1D-20/                           WMONIT49
C                                                                       WMONIT50
      IF(ID.LE.0.OR.ID.GT.IDMX) THEN                                    WMONIT51
           WRITE(IOUT,*) ' =====WMONIT: WRONG ID',ID                    WMONIT52
           STOP                                                         WMONIT53
      ENDIF                                                             WMONIT54
      IF(MODE.EQ.-1) THEN                                               WMONIT55
           NTOT(ID)=0                                                   WMONIT56
           NACC(ID)=0                                                   WMONIT57
           NNEG(ID)=0                                                   WMONIT58
           NZER(ID)=0                                                   WMONIT59
           NOVE(ID)=0                                                   WMONIT60
           SWT(ID)   =0D0                                               WMONIT61
           SSWT(ID)  =0D0                                               WMONIT62
           WWMX(ID)  = -1D-20                                           WMONIT63
      ELSEIF(MODE.EQ.0) THEN                                            WMONIT64
           IF(NTOT(ID).LT.0) THEN                                       WMONIT65
              WRITE(IOUT,*) ' ==== WARNING FROM WMONIT: '               WMONIT66
              WRITE(IOUT,*) ' LACK OF INITIALIZATION, ID=',ID           WMONIT67
           ENDIF                                                        WMONIT68
           NTOT(ID)=NTOT(ID)+1                                          WMONIT69
           SWT(ID)=SWT(ID)+WT                                           WMONIT70
           SSWT(ID)=SSWT(ID)+WT**2                                      WMONIT71
           WWMX(ID)= MAX(WWMX(ID),WT)                                   WMONIT72
           IF(WT.EQ.0D0)   NZER(ID)=NZER(ID)+1                          WMONIT73
           IF(WT.LT.0D0)   NNEG(ID)=NNEG(ID)+1                          WMONIT74
           IF(WT.GT.WTMAX)      NOVE(ID)=NOVE(ID)+1                     WMONIT75
           IF(RN*WTMAX.LE.WT)   NACC(ID)=NACC(ID)+1                     WMONIT76
      ELSEIF(MODE.EQ.1) THEN                                            WMONIT77
           IF(NTOT(ID).LT.0) THEN                                       WMONIT78
              WRITE(IOUT,*) ' ==== WARNING FROM WMONIT: '               WMONIT79
              WRITE(IOUT,*) ' LACK OF INITIALIZATION, ID=',ID           WMONIT80
           ENDIF                                                        WMONIT81
           IF(NTOT(ID).LE.0.OR.SWT(ID).EQ.0D0)  THEN                    WMONIT82
              AVERWT=0D0                                                WMONIT83
              ERRELA=0D0                                                WMONIT84
           ELSE                                                         WMONIT85
              AVERWT=SWT(ID)/FLOAT(NTOT(ID))                            WMONIT86
              ERRELA=SQRT(ABS(SSWT(ID)/SWT(ID)**2-1D0/FLOAT(NTOT(ID)))) WMONIT87
           ENDIF                                                        WMONIT88
           NEVTOT=NTOT(ID)                                              WMONIT89
           NEVACC=NACC(ID)                                              WMONIT90
           NEVNEG=NNEG(ID)                                              WMONIT91
           NEVZER=NZER(ID)                                              WMONIT92
           NEVOVE=NOVE(ID)                                              WMONIT93
           WT=AVERWT                                                    WMONIT94
           WTMAX=ERRELA                                                 WMONIT95
           RN    =WWMX(ID)                                              WMONIT96
      ELSEIF(MODE.EQ.2) THEN                                            WMONIT97
           IF(NTOT(ID).LE.0.OR.SWT(ID).EQ.0D0)  THEN                    WMONIT98
              AVERWT=0D0                                                WMONIT99
              ERRELA=0D0                                                WMONI100
           ELSE                                                         WMONI101
              AVERWT=SWT(ID)/FLOAT(NTOT(ID))                            WMONI102
              ERRELA=SQRT(ABS(SSWT(ID)/SWT(ID)**2-1D0/FLOAT(NTOT(ID)))) WMONI103
              WWMAX=WWMX(ID)                                            WMONI104
           ENDIF                                                        WMONI105
           WRITE(IOUT,1003) ID, AVERWT, ERRELA, WWMAX                   WMONI106
           WRITE(IOUT,1004) NTOT(ID),NACC(ID),NNEG(ID),NOVE(ID),NZER(ID)WMONI107
           WT=AVERWT                                                    WMONI108
           WTMAX=ERRELA                                                 WMONI109
           RN    =WWMX(ID)                                              WMONI110
      ELSE                                                              WMONI111
           WRITE(IOUT,*) ' =====WMONIT: WRONG MODE',MODE                WMONI112
           STOP                                                         WMONI113
      ENDIF                                                             WMONI114
 1003 FORMAT(                                                           WMONI115
     $  ' =======================WMONIT========================'        WMONI116
     $/,'   ID           AVERWT         ERRELA            WWMAX'        WMONI117
     $/,    I5,           E17.7,         F15.9,           E17.7)        WMONI118
 1004 FORMAT(                                                           WMONI119
     $  ' -----------------------------------------------------------'  WMONI120
     $/,'      NEVTOT      NEVACC      NEVNEG      NEVOVE      NEVZER'  WMONI121
     $/,   5I12)                                                        WMONI122
      END                                                               WMONI123
                                                                        WMONI124
      SUBROUTINE WMONI2(MODE,ID,WT,WTMAX,RN)                            WMONI2 2
C     **************************************                            WMONI2 3
C -------------- SECOND COPY OF WMONIT ----------------                 WMONI2 4
C last correction 19 sept. 89                                           WMONI2 5
C Utility program for monitoring M.C. rejection weights.                WMONI2 6
C ID is weight idendifier, maximum IDMX (defined below).                WMONI2 7
C WT IS WEIGHT, WTMAX IS MAXIMUM WEIGHT AND RN IS RANDOM NUMBER.        WMONI2 8
C IF(MODE.EQ.-1) THEN                                                   WMONI2 9
C          INITALIZATION IF ENTRY ID, OTHER ARGUMENTS ARE IGNORED       WMONI210
C ELSEIF(MODE.EQ.0) THEN                                                WMONI211
C          SUMMING UP WEIGHTS ETC. FOR A GIVEN EVENT FOR ENTRY ID       WMONI212
C        - WT IS CURRENT WEIGHT.                                        WMONI213
C        - WTMAX IS MAXIMUM WEIGHT USED FOR COUTING OVERWEIGHTED        WMONI214
C          EVENTS WITH WT>WTMAX.                                        WMONI215
C        - RN IS RANDOM NUMBER USED IN REJECTION, IT IS USED TO         WMONI216
C          COUNT NO. OF ACCEPTED (RN<WT/WTMAX) AND REJECTED             WMONI217
C          (WT>WT/WTMAX) EVENTS,                                        WMONI218
C          IF RO REJECTION THEN PUT RN=0D0.                             WMONI219
C ELSEIF(MODE.EQ.1) THEN                                                WMONI220
C          IN THIS MODE WMONIT REPPORTS ON ACCUMULATED STATISTICS       WMONI221
C          AND THE INFORMATION IS STORED IN COMMON /CMONIT/             WMONI222
C        - AVERWT= AVERAGE WEIGHT WT COUNTING ALL EVENT                 WMONI223
C        - ERRELA= RELATIVE ERROR OF AVERWT                             WMONI224
C        - NEVTOT= TOTAL NIMBER OF ACCOUNTED EVENTS                     WMONI225
C        - NEVACC= NO. OF ACCEPTED EVENTS (RN<WT\WTMAX)                 WMONI226
C        - NEVNEG= NO. OF EVENTS WITH NEGATIVE WEIGHT (WT<0)            WMONI227
C        - NEVZER= NO. OF EVENTS WITH ZERO WEIGHT (WT.EQ.0D0)           WMONI228
C        - NEVOVE= NO. OF OVERWEGHTED EVENTS (WT>WTMAX)                 WMONI229
C          AND IF YOU DO NOT WANT TO USE CMONIT THEN THE VALUE          WMONI230
C          The value of AVERWT is assigned to WT,                       WMONI231
C          the value of ERRELA is assigned to WTMAX and                 WMONI232
C          the value of WTMAX  is assigned to RN in this mode.          WMONI233
C ELSEIF(MODEE.EQ.2) THEN                                               WMONI234
C          ALL INFORMATION DEFINED FOR ENTRY ID DEFINED ABOVE           WMONI235
C          FOR MODE=2 IS JUST PRINTED OF UNIT IOUT                      WMONI236
C ENDIF                                                                 WMONI237
C NOTE THAT OUTPUT REPPORT (MODE=1,2) IS DONE DYNAMICALLY JUST FOR A    WMONI238
C GIVEN ENTRY ID ONLY AND IT MAY BE REPEATED MANY TIMES FOR ONE ID AND  WMONI239
C FOR VARIOUS ID'S AS WELL.                                             WMONI240
C     ************************                                          WMONI241
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               WMONI242
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      save                                                              WMONI244
      PARAMETER(IDMX=100)                                               WMONI245
      COMMON / CMONI2/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER WMONI246
      INTEGER NTOT(IDMX),NACC(IDMX),NNEG(IDMX),NOVE(IDMX),NZER(IDMX)    WMONI247
      DIMENSION SWT(IDMX),SSWT(IDMX),WWMX(IDMX)                         WMONI248
      DATA NTOT /IDMX* -1/  SWT /IDMX*   0D0/                           WMONI249
      DATA SSWT /IDMX*0D0/ WWMX /IDMX*-1D-20/                           WMONI250
C                                                                       WMONI251
      IF(ID.LE.0.OR.ID.GT.IDMX) THEN                                    WMONI252
           WRITE(IOUT,*) ' =====WMONI2: WRONG ID',ID                    WMONI253
           STOP                                                         WMONI254
      ENDIF                                                             WMONI255
      IF(MODE.EQ.-1) THEN                                               WMONI256
           NTOT(ID)=0                                                   WMONI257
           NACC(ID)=0                                                   WMONI258
           NNEG(ID)=0                                                   WMONI259
           NZER(ID)=0                                                   WMONI260
           NOVE(ID)=0                                                   WMONI261
           SWT(ID)   =0D0                                               WMONI262
           SSWT(ID)  =0D0                                               WMONI263
           WWMX(ID)  = -1D-20                                           WMONI264
      ELSEIF(MODE.EQ.0) THEN                                            WMONI265
           IF(NTOT(ID).LT.0) THEN                                       WMONI266
              WRITE(IOUT,*) ' ==== WARNING FROM WMONIT: '               WMONI267
              WRITE(IOUT,*) ' LACK OF INITIALIZATION, ID=',ID           WMONI268
           ENDIF                                                        WMONI269
           NTOT(ID)=NTOT(ID)+1                                          WMONI270
           SWT(ID)=SWT(ID)+WT                                           WMONI271
           SSWT(ID)=SSWT(ID)+WT**2                                      WMONI272
           WWMX(ID)= MAX(WWMX(ID),WT)                                   WMONI273
           IF(WT.EQ.0D0)   NZER(ID)=NZER(ID)+1                          WMONI274
           IF(WT.LT.0D0)   NNEG(ID)=NNEG(ID)+1                          WMONI275
           IF(WT.GT.WTMAX)      NOVE(ID)=NOVE(ID)+1                     WMONI276
           IF(RN*WTMAX.LE.WT)   NACC(ID)=NACC(ID)+1                     WMONI277
      ELSEIF(MODE.EQ.1) THEN                                            WMONI278
           IF(NTOT(ID).LT.0) THEN                                       WMONI279
              WRITE(IOUT,*) ' ==== WARNING FROM WMONI2: '               WMONI280
              WRITE(IOUT,*) ' LACK OF INITIALIZATION, ID=',ID           WMONI281
           ENDIF                                                        WMONI282
           IF(NTOT(ID).LE.0.OR.SWT(ID).EQ.0D0)  THEN                    WMONI283
              AVERWT=0D0                                                WMONI284
              ERRELA=0D0                                                WMONI285
           ELSE                                                         WMONI286
              AVERWT=SWT(ID)/FLOAT(NTOT(ID))                            WMONI287
              ERRELA=SQRT(ABS(SSWT(ID)/SWT(ID)**2-1D0/FLOAT(NTOT(ID)))) WMONI288
           ENDIF                                                        WMONI289
           NEVTOT=NTOT(ID)                                              WMONI290
           NEVACC=NACC(ID)                                              WMONI291
           NEVNEG=NNEG(ID)                                              WMONI292
           NEVZER=NZER(ID)                                              WMONI293
           NEVOVE=NOVE(ID)                                              WMONI294
           WT=AVERWT                                                    WMONI295
           WTMAX=ERRELA                                                 WMONI296
           RN    =WWMX(ID)                                              WMONI297
      ELSEIF(MODE.EQ.2) THEN                                            WMONI298
           IF(NTOT(ID).LE.0.OR.SWT(ID).EQ.0D0)  THEN                    WMONI299
              AVERWT=0D0                                                WMONI100
              ERRELA=0D0                                                WMONI101
           ELSE                                                         WMONI102
              AVERWT=SWT(ID)/FLOAT(NTOT(ID))                            WMONI103
              ERRELA=SQRT(ABS(SSWT(ID)/SWT(ID)**2-1D0/FLOAT(NTOT(ID)))) WMONI104
              WWMAX=WWMX(ID)                                            WMONI105
           ENDIF                                                        WMONI106
           WRITE(IOUT,1003) ID, AVERWT, ERRELA, WWMAX                   WMONI107
           WRITE(IOUT,1004) NTOT(ID),NACC(ID),NNEG(ID),NOVE(ID),NZER(ID)WMONI108
           WT=AVERWT                                                    WMONI109
           WTMAX=ERRELA                                                 WMONI110
           RN    =WWMX(ID)                                              WMONI111
      ELSE                                                              WMONI112
           WRITE(IOUT,*) ' =====WMONI2: WRONG MODE',MODE                WMONI113
           STOP                                                         WMONI114
      ENDIF                                                             WMONI115
 1003 FORMAT(                                                           WMONI116
     $  ' =======================WMONI2========================'        WMONI117
     $/,'   ID           AVERWT         ERRELA            WWMAX'        WMONI118
     $/,    I5,           E17.7,         F15.9,           E17.7)        WMONI119
 1004 FORMAT(                                                           WMONI120
     $  ' -----------------------------------------------------------'  WMONI121
     $/,'      NEVTOT      NEVACC      NEVNEG      NEVOVE      NEVZER'  WMONI122
     $/,   5I12)                                                        WMONI123
      END                                                               WMONI124
                                                                        WMONI125
      FUNCTION GAUS(F,A,B,EEPS)                                         GAUS   2
C     *************************                                         GAUS   3
C THIS IS ITERATIVE INTEGRATION PROCEDURE                               GAUS   4
C ORIGINATES  PROBABLY FROM CERN LIBRARY                                GAUS   5
C IT SUBDIVIDES INEGRATION RANGE UNTIL REQUIRED PRECISION IS REACHED    GAUS   6
C PRECISION IS A DIFFERENCE FROM 8 AND 16 POINT GAUSS ITEGR. RESULT     GAUS   7
C EEPS POSITIVE TREATED AS ABSOLUTE PRECISION                           GAUS   8
C EEPS NEGATIVE TREATED AS RELATIVE PRECISION                           GAUS   9
C     *************************                                         GAUS  10
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               GAUS  11
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      DIMENSION W(12),X(12)                                             GAUS  13
      EXTERNAL F                                                        GAUS  14
      DATA CONST /1.0D-19/                                              GAUS  15
      save     / INOUT/, CONST, W, X                                    GAUS  16
      DATA W                                                            GAUS  17
     1/0.10122 85362 90376, 0.22238 10344 53374, 0.31370 66458 77887,   GAUS  18
     2 0.36268 37833 78362, 0.02715 24594 11754, 0.06225 35239 38648,   GAUS  19
     3 0.09515 85116 82493, 0.12462 89712 55534, 0.14959 59888 16577,   GAUS  20
     4 0.16915 65193 95003, 0.18260 34150 44924, 0.18945 06104 55069/   GAUS  21
      DATA X                                                            GAUS  22
     1/0.96028 98564 97536, 0.79666 64774 13627, 0.52553 24099 16329,   GAUS  23
     2 0.18343 46424 95650, 0.98940 09349 91650, 0.94457 50230 73233,   GAUS  24
     3 0.86563 12023 87832, 0.75540 44083 55003, 0.61787 62444 02644,   GAUS  25
     4 0.45801 67776 57227, 0.28160 35507 79259, 0.09501 25098 37637/   GAUS  26
      EPS=ABS(EEPS)                                                     GAUS  27
      DELTA=CONST*ABS(A-B)                                              GAUS  28
      GAUS=0D0                                                          GAUS  29
      AA=A                                                              GAUS  30
    5 Y=B-AA                                                            GAUS  31
      IF(ABS(Y) .LE. DELTA) RETURN                                      GAUS  32
    2 BB=AA+Y                                                           GAUS  33
      C1=0.5D0*(AA+BB)                                                  GAUS  34
      C2=C1-AA                                                          GAUS  35
      S8=0D0                                                            GAUS  36
      S16=0D0                                                           GAUS  37
      DO 1 I=1,4                                                        GAUS  38
      U=X(I)*C2                                                         GAUS  39
    1 S8=S8+W(I)*(F(C1+U)+F(C1-U))                                      GAUS  40
      DO 3 I=5,12                                                       GAUS  41
      U=X(I)*C2                                                         GAUS  42
    3 S16=S16+W(I)*(F(C1+U)+F(C1-U))                                    GAUS  43
      S8=S8*C2                                                          GAUS  44
      S16=S16*C2                                                        GAUS  45
      IF(EEPS.LT.0D0) THEN                                              GAUS  46
        IF(ABS(S16-S8) .GT. EPS*ABS(S16)) GO TO 4                       GAUS  47
      ELSE                                                              GAUS  48
        IF(ABS(S16-S8) .GT. EPS) GO TO 4                                GAUS  49
      ENDIF                                                             GAUS  50
      GAUS=GAUS+S16                                                     GAUS  51
      AA=BB                                                             GAUS  52
      GO TO 5                                                           GAUS  53
    4 Y=0.5D0*Y                                                         GAUS  54
      IF(ABS(Y) .GT. DELTA) GOTO 2                                      GAUS  55
      WRITE(IOUT,7)                                                     GAUS  56
      GAUS=0D0                                                          GAUS  57
      RETURN                                                            GAUS  58
    7 FORMAT(1X,36HGAUS  ... TOO HIGH ACCURACY REQUIRED)                GAUS  59
      END                                                               GAUS  60
                                                                        GAUS  61
                                                                        GAUS  62
      DOUBLE PRECISION FUNCTION DILOGY(X)                               DILOGY 2
C-------------------------------------------- REMARKS ---------------   DILOGY 3
C DILOGARITHM FUNCTION: DILOG(X)=INT( -LN(1-Z)/Z ) , 0 < Z < X .        DILOGY 4
C THIS IS THE CERNLIB VERSION.                                          DILOGY 5
C--------------------------------------------------------------------   DILOGY 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               DILOGY 7
      Z=-1.644934066848226D0                                            DILOGY 8
      IF(X .LT.-1.D0) GO TO 1                                           DILOGY 9
      IF(X .LE. 0.5D0) GO TO 2                                          DILOGY10
      IF(X .EQ. 1.D0) GO TO 3                                           DILOGY11
      IF(X .LE. 2.D0) GO TO 4                                           DILOGY12
      Z=3.289868133696453D0                                             DILOGY13
    1 T=1.D0/X                                                          DILOGY14
      S=-0.5D0                                                          DILOGY15
      Z=Z-0.5D0*DLOG(DABS(X))**2                                        DILOGY16
      GO TO 5                                                           DILOGY17
    2 T=X                                                               DILOGY18
      S=0.5D0                                                           DILOGY19
      Z=0.D0                                                            DILOGY20
      GO TO 5                                                           DILOGY21
    3 DILOGY=1.644934066848226D0                                        DILOGY22
      RETURN                                                            DILOGY23
    4 T=1.D0-X                                                          DILOGY24
      S=-0.5D0                                                          DILOGY25
      Z=1.644934066848226D0-DLOG(X)*DLOG(DABS(T))                       DILOGY26
    5 Y=2.666666666666667D0*T+0.666666666666667D0                       DILOGY27
      B=      0.000000000000001D0                                       DILOGY28
      A=Y*B  +0.000000000000004D0                                       DILOGY29
      B=Y*A-B+0.000000000000011D0                                       DILOGY30
      A=Y*B-A+0.000000000000037D0                                       DILOGY31
      B=Y*A-B+0.000000000000121D0                                       DILOGY32
      A=Y*B-A+0.000000000000398D0                                       DILOGY33
      B=Y*A-B+0.000000000001312D0                                       DILOGY34
      A=Y*B-A+0.000000000004342D0                                       DILOGY35
      B=Y*A-B+0.000000000014437D0                                       DILOGY36
      A=Y*B-A+0.000000000048274D0                                       DILOGY37
      B=Y*A-B+0.000000000162421D0                                       DILOGY38
      A=Y*B-A+0.000000000550291D0                                       DILOGY39
      B=Y*A-B+0.000000001879117D0                                       DILOGY40
      A=Y*B-A+0.000000006474338D0                                       DILOGY41
      B=Y*A-B+0.000000022536705D0                                       DILOGY42
      A=Y*B-A+0.000000079387055D0                                       DILOGY43
      B=Y*A-B+0.000000283575385D0                                       DILOGY44
      A=Y*B-A+0.000001029904264D0                                       DILOGY45
      B=Y*A-B+0.000003816329463D0                                       DILOGY46
      A=Y*B-A+0.000014496300557D0                                       DILOGY47
      B=Y*A-B+0.000056817822718D0                                       DILOGY48
      A=Y*B-A+0.000232002196094D0                                       DILOGY49
      B=Y*A-B+0.001001627496164D0                                       DILOGY50
      A=Y*B-A+0.004686361959447D0                                       DILOGY51
      B=Y*A-B+0.024879322924228D0                                       DILOGY52
      A=Y*B-A+0.166073032927855D0                                       DILOGY53
      A=Y*A-B+1.935064300869969D0                                       DILOGY54
      DILOGY=S*T*(A-B)+Z                                                DILOGY55
      END                                                               DILOGY56
                                                                        DILOGY57
                                                                        DILOGY58
      DOUBLE PRECISION FUNCTION DPGAMM(Z)                               DPGAMM 2
C     **********************************                                DPGAMM 3
C Double precision Gamma function                                       DPGAMM 4
      DOUBLE PRECISION Z,Z1,X,X1,X2,D1,D2,S1,S2,S3,PI,C(20),CONST       DPGAMM 5
      save C,PI,CONST                                                   DPGAMM 6
      DATA C( 1) / 8.3333333333333333333333333332D-02/                  DPGAMM 7
      DATA C( 2) /-2.7777777777777777777777777777D-03/                  DPGAMM 8
      DATA C( 3) / 7.9365079365079365079365079364D-04/                  DPGAMM 9
      DATA C( 4) /-5.9523809523809523809523809523D-04/                  DPGAMM10
      DATA C( 5) / 8.4175084175084175084175084175D-04/                  DPGAMM11
      DATA C( 6) /-1.9175269175269175269175269175D-03/                  DPGAMM12
      DATA C( 7) / 6.4102564102564102564102564102D-03/                  DPGAMM13
      DATA C( 8) /-2.9550653594771241830065359477D-02/                  DPGAMM14
      DATA C( 9) / 1.7964437236883057316493849001D-01/                  DPGAMM15
      DATA C(10) /-1.3924322169059011164274322169D+00/                  DPGAMM16
      DATA C(11) / 1.3402864044168391994478951001D+01/                  DPGAMM17
      DATA C(12) /-1.5684828462600201730636513245D+02/                  DPGAMM18
      DATA C(13) / 2.1931033333333333333333333333D+03/                  DPGAMM19
      DATA C(14) /-3.6108771253724989357173265219D+04/                  DPGAMM20
      DATA C(15) / 6.9147226885131306710839525077D+05/                  DPGAMM21
      DATA C(16) /-1.5238221539407416192283364959D+07/                  DPGAMM22
      DATA C(17) / 3.8290075139141414141414141414D+08/                  DPGAMM23
      DATA C(18) /-1.0882266035784391089015149165D+10/                  DPGAMM24
      DATA C(19) / 3.4732028376500225225225225224D+11/                  DPGAMM25
      DATA C(20) /-1.2369602142269274454251710349D+13/                  DPGAMM26
      DATA PI    / 3.1415926535897932384626433832D+00/                  DPGAMM27
      DATA CONST / 9.1893853320467274178032973641D-01/                  DPGAMM28
      IF(Z.GT.5.75D 1)                                     GOTO  6666   DPGAMM29
      NN = Z                                                            DPGAMM30
      IF (Z  -  DBLE(FLOAT(NN)))                 3,1,3                  DPGAMM31
    1 IF (Z    .LE.    0.D 0)                    GOTO 6667              DPGAMM32
      DPGAMM = 1.D 0                                                    DPGAMM33
      IF (Z    .LE.    2.D 0)                    RETURN                 DPGAMM34
      Z1 = Z                                                            DPGAMM35
    2 Z1 = Z1  -  1.D 0                                                 DPGAMM36
      DPGAMM = DPGAMM * Z1                                              DPGAMM37
      IF (Z1  -  2.D 0)                          61,61,2                DPGAMM38
    3 IF (DABS(Z)    .LT.    1.D-29)             GOTO 60                DPGAMM39
      IF (Z    .LT.    0.D 0)                    GOTO 4                 DPGAMM40
      X  = Z                                                            DPGAMM41
      KK = 1                                                            DPGAMM42
      GOTO 10                                                           DPGAMM43
    4 X  = 1.D 0  -  Z                                                  DPGAMM44
      KK = 2                                                            DPGAMM45
   10 X1 = X                                                            DPGAMM46
      IF (X    .GT.    19.D 0)                   GOTO 13                DPGAMM47
      D1 = X                                                            DPGAMM48
   11 X1 = X1  +  1.D 0                                                 DPGAMM49
      IF (X1    .GE.    19.D 0)                  GOTO 12                DPGAMM50
      D1 = D1 * X1                                                      DPGAMM51
      GOTO 11                                                           DPGAMM52
   12 S3 = -DLOG(D1)                                                    DPGAMM53
      GOTO 14                                                           DPGAMM54
   13 S3 = 0.D 0                                                        DPGAMM55
   14 D1 = X1 * X1                                                      DPGAMM56
      S1 = (X1  -  5.D-1) * DLOG(X1)  -  X1  +  CONST                   DPGAMM57
      DO 20                  K=1,20                                     DPGAMM58
      S2 = S1  +  C(K)/X1                                               DPGAMM59
      IF (DABS(S2  -  S1)    .LT.    1.D-28)     GOTO 21                DPGAMM60
      X1 = X1 * D1                                                      DPGAMM61
   20 S1 = S2                                                           DPGAMM62
   21 S3 = S3  +  S2                                                    DPGAMM63
      GOTO (50,22),    KK                                               DPGAMM64
   22 D2 = DABS(Z  -  NN)                                               DPGAMM65
      D1 = D2 * PI                                                      DPGAMM66
      IF (D1    .LT.    1.D-15)                  GOTO 31                DPGAMM67
   30 X2 =  DLOG(PI/DSIN(D1))  -  S3                                    DPGAMM68
      GOTO 40                                                           DPGAMM69
   31 X2 = -DLOG(D2)                                                    DPGAMM70
   40 MM = DABS(Z)                                                      DPGAMM71
      IF(X2      .GT.      1.74D2)                         GO TO 6666   DPGAMM72
      DPGAMM = DEXP(X2)                                                 DPGAMM73
      IF (MM    .NE.    (MM/2) * 2)              RETURN                 DPGAMM74
      DPGAMM = -DPGAMM                                                  DPGAMM75
      RETURN                                                            DPGAMM76
   50 IF(S3      .GT.      1.74D2)                         GO TO 6666   DPGAMM77
      DPGAMM = DEXP(S3)                                                 DPGAMM78
      RETURN                                                            DPGAMM79
 6666 PRINT *, 2000                                                     DPGAMM80
      RETURN                                                            DPGAMM81
 6667 PRINT *, 2001                                                     DPGAMM82
      RETURN                                                            DPGAMM83
   60 DPGAMM = 0.D 0                                                    DPGAMM84
      IF(DABS(Z)   .LT.   1.D-35)   RETURN                              DPGAMM85
      DPGAMM = 1.D 0/Z                                                  DPGAMM86
   61 RETURN                                                            DPGAMM87
 2000 FORMAT (/////, 2X, 32HDPGAMM ..... ARGUMENT TOO LARGE., /////)    DPGAMM88
 2001 FORMAT (/////, 2X, 32HDPGAMM ..... ARGUMENT IS A POLE., /////)    DPGAMM89
      END                                                               DPGAMM90
C=======================================================================DPGAMM91
C=======================================================================DPGAMM92
C=======================================================================DPGAMM93
C==                                                                     DPGAMM94
C==      PROGRAM PSEUDORAN      Wed, 23 Jan 91   F. James               DPGAMM95
C==C  CPC # ABTK                                           CPC # ABTK   DPGAMM96
C==C         Pseudorandom generator demonstration (test case)           DPGAMM97
C==      DIMENSION RVEC(1000)                                           DPGAMM98
C==      DIMENSION VERI(5), ISD25(25)                                   DPGAMM99
C==C                                                                    DPGAM100
C==C                                                                    DPGAM101
C==C   ................................................                 DPGAM102
C==      WRITE(6,'(20X,A)') 'DEMONSTRATION OF PSEUDORANDOM GENERATORS'  DPGAM103
C==      WRITE(6,'(20X,A)') 'MACHINE/SYSTEM: date:'                     DPGAM104
C==      WRITE(6,'(/20X,A/)') 'INITIALIZATION AND TEST OF PORTABILITY'  DPGAM105
C==C   ................................................                 DPGAM106
C==C                                                                    DPGAM107
C==C                   initialization and verification  RANMAR          DPGAM108
C==        DO 40 I9= 1, 20                                              DPGAM109
C==   40   CALL RANMAR(RVEC,1000)                                       DPGAM110
C==      CALL RANMAR(RVEC,5)                                            DPGAM111
C==      DO 41 I= 1 ,5                                                  DPGAM112
C==   41 VERI(I) = (4096.*RVEC(I))*(4096.)                              DPGAM113
C==      WRITE(6,'(A,5F12.1/)') '  RANMAR 20001  ',VERI                 DPGAM114
C==C                                                                    DPGAM115
C==C                   initialization and verification  RANECU          DPGAM116
C==      CALL RANECU(RVEC,1000)                                         DPGAM117
C==      CALL RANECU(VERI,5)                                            DPGAM118
C==      DO 52 I= 1 ,5                                                  DPGAM119
C==   52 VERI(I) = 4096.*(4096.*VERI(I))                                DPGAM120
C==      WRITE(6,'(A,5F12.1/)') '  RANECU 1001   ',VERI                 DPGAM121
C==C                                                                    DPGAM122
C==C                   initialization and verification  RCARRY          DPGAM123
C==      CALL RCARRY(RVEC,1000)                                         DPGAM124
C==      CALL RCARRY(VERI,5)                                            DPGAM125
C==      DO 62 I= 1 ,5                                                  DPGAM126
C==   62 VERI(I) = 4096.*(4096.*VERI(I))                                DPGAM127
C==      WRITE(6,'(A,5F12.1/)') '  RCARRY 1001   ',VERI                 DPGAM128
C==C                                                                    DPGAM129
C==      WRITE(6,'(//20X,A/)') 'TEST OF REPEATABILITY'                  DPGAM130
C==C  .................................................                 DPGAM131
C==C                  verify restarting      RANMAR                     DPGAM132
C==      WRITE(6,'(/A)') '   THE NEXT LINE SHOULD BE REPEATED:'         DPGAM133
C==      CALL RMARUT(IMAR1,IMAR2,IMAR3)                                 DPGAM134
C==      CALL RANMAR(RVEC,777)                                          DPGAM135
C==      CALL RANMAR(VERI,5)                                            DPGAM136
C==      WRITE(6,'(A,5F12.9)') '       RANMAR 1 ',VERI                  DPGAM137
C==      CALL RMARIN(IMAR1,IMAR2,IMAR3)                                 DPGAM138
C==      CALL RANMAR(RVEC,777)                                          DPGAM139
C==      CALL RANMAR(VERI,5)                                            DPGAM140
C==      WRITE(6,'(A,5F12.9)') '       RANMAR 2 ',VERI                  DPGAM141
C==C                                                                    DPGAM142
C==C                  verify restarting      RANECU                     DPGAM143
C==      WRITE(6,'(/A)') '   THE NEXT LINE SHOULD BE REPEATED:'         DPGAM144
C==      CALL RECUUT(IS1,IS2)                                           DPGAM145
C==      CALL RANECU(RVEC,777)                                          DPGAM146
C==      CALL RANECU(VERI,5)                                            DPGAM147
C==      WRITE(6,'(A,5F12.9)') '       RANECU 1 ',VERI                  DPGAM148
C==      CALL RECUIN(IS1,IS2)                                           DPGAM149
C==      CALL RANECU(RVEC,777)                                          DPGAM150
C==      CALL RANECU(VERI,5)                                            DPGAM151
C==      WRITE(6,'(A,5F12.9)') '       RANECU 2 ',VERI                  DPGAM152
C==C                                                                    DPGAM153
C==C                  verify restarting      RCARRY                     DPGAM154
C==      WRITE(6,'(/A)') '   THE NEXT LINE SHOULD BE REPEATED:'         DPGAM155
C==      CALL RCARUT(ISD25)                                             DPGAM156
C==      CALL RCARRY(RVEC,777)                                          DPGAM157
C==      CALL RCARRY(VERI,5)                                            DPGAM158
C==      WRITE(6,'(A,5F12.9)') '       RCARRY 1 ',VERI                  DPGAM159
C==      CALL RCARIN(ISD25)                                             DPGAM160
C==      CALL RCARRY(RVEC,777)                                          DPGAM161
C==      CALL RCARRY(VERI,5)                                            DPGAM162
C==      WRITE(6,'(A,5F12.9)') '       RCARRY 2 ',VERI                  DPGAM163
C==C                                                                    DPGAM164
C==      STOP                                                           DPGAM165
C==      END                                                            DPGAM166
C=======================================================================DPGAM167
C=======================================================================DPGAM168
C=======================================================================DPGAM169
      SUBROUTINE MARRAN(RVEC,LENV)                                      MARRAN 2
C =======================S. JADACH===================================   MARRAN 3
C == This commes from F. James, The name of RANMAR is changed to   ==   MARRAN 4
C == MARRAN in order to avoid interference with the version        ==   MARRAN 5
C == already in use and the public library version (if present).   ==   MARRAN 6
C ==      THIS IS THE ONLY MODIFICATION !!!!                       ==   MARRAN 7
C ========================S. JADACH==================================   MARRAN 8
C Universal random number generator proposed by Marsaglia and Zaman     MARRAN 9
C in report FSU-SCRI-87-50                                              MARRAN10
C        modified by F. James, 1988 and 1989, to generate a vector      MARRAN11
C        of pseudorandom numbers RVEC of length LENV, and to put in     MARRAN12
C        the COMMON block everything needed to specify currrent state,  MARRAN13
C        and to add input and output entry points MARINI, MAROUT.       MARRAN14
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ MARRAN15
C!!!  Calling sequences for RANMAR:                                  ++ MARRAN16
C!!!      CALL RANMAR (RVEC, LEN)   returns a vector RVEC of LEN     ++ MARRAN17
C!!!                   32-bit random floating point numbers between  ++ MARRAN18
C!!!                   zero and one.                                 ++ MARRAN19
C!!!      CALL MARINI(I1,N1,N2)   initializes the generator from one ++ MARRAN20
C!!!                   32-bit integer I1, and number counts N1,N2    ++ MARRAN21
C!!!                  (for initializing, set N1=N2=0, but to restart ++ MARRAN22
C!!!                    a previously generated sequence, use values  ++ MARRAN23
C!!!                    output by MAROUT)                            ++ MARRAN24
C!!!      CALL MAROUT(I1,N1,N2)   outputs the value of the original  ++ MARRAN25
C!!!                  seed and the two number counts, to be used     ++ MARRAN26
C!!!                  for restarting by initializing to I1 and       ++ MARRAN27
C!!!                  skipping N2*100000000+N1 numbers.              ++ MARRAN28
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ MARRAN29
      DIMENSION RVEC(*)                                                 MARRAN30
      COMMON/RASET1/U(97),C,I97,J97                                     MARRAN31
      PARAMETER (MODCNS=1000000000)                                     MARRAN32
      SAVE CD, CM, TWOM24, NTOT, NTOT2, IJKL                            MARRAN33
      DATA NTOT,NTOT2,IJKL/-1,0,0/                                      MARRAN34
C                                                                       MARRAN35
      IF (NTOT .GE. 0)  GO TO 50                                        MARRAN36
C                                                                       MARRAN37
C        Default initialization. User has called RANMAR without MARINI. MARRAN38
      IJKL = 54217137                                                   MARRAN39
      NTOT = 0                                                          MARRAN40
      NTOT2 = 0                                                         MARRAN41
      KALLED = 0                                                        MARRAN42
      GO TO 1                                                           MARRAN43
C                                                                       MARRAN44
      ENTRY      MARINI(IJKLIN, NTOTIN,NTOT2N)                          MARRAN45
C         Initializing routine for RANMAR, may be called before         MARRAN46
C         generating pseudorandom numbers with RANMAR. The input        MARRAN47
C         values should be in the ranges:  0<=IJKLIN<=900 OOO OOO       MARRAN48
C                                          0<=NTOTIN<=999 999 999       MARRAN49
C                                          0<=NTOT2N<<999 999 999!      MARRAN50
C To get the standard values in Marsaglia's paper, IJKLIN=54217137      MARRAN51
C                                            NTOTIN,NTOT2N=0            MARRAN52
      IJKL = IJKLIN                                                     MARRAN53
      NTOT = MAX(NTOTIN,0)                                              MARRAN54
      NTOT2= MAX(NTOT2N,0)                                              MARRAN55
      KALLED = 1                                                        MARRAN56
C          always come here to initialize                               MARRAN57
    1 CONTINUE                                                          MARRAN58
      IJ = IJKL/30082                                                   MARRAN59
      KL = IJKL - 30082*IJ                                              MARRAN60
      I = MOD(IJ/177, 177) + 2                                          MARRAN61
      J = MOD(IJ, 177)     + 2                                          MARRAN62
      K = MOD(KL/169, 178) + 1                                          MARRAN63
      L = MOD(KL, 169)                                                  MARRAN64
      WRITE(6,'(A,5I10)')                                               MARRAN65
     $' MARran INITIALIZED: IJ,KL,IJKL,NTOT,NTOT2=',IJ,KL,IJKL,NTOT,NTOTMARRAN66
      DO 2 II= 1, 97                                                    MARRAN67
      S = 0.                                                            MARRAN68
      T = .5                                                            MARRAN69
      DO 3 JJ= 1, 24                                                    MARRAN70
         M = MOD(MOD(I*J,179)*K, 179)                                   MARRAN71
         I = J                                                          MARRAN72
         J = K                                                          MARRAN73
         K = M                                                          MARRAN74
         L = MOD(53*L+1, 169)                                           MARRAN75
         IF (MOD(L*M,64) .GE. 32)  S = S+T                              MARRAN76
    3    T = 0.5*T                                                      MARRAN77
    2 U(II) = S                                                         MARRAN78
      TWOM24 = 1.0                                                      MARRAN79
      DO 4 I24= 1, 24                                                   MARRAN80
    4 TWOM24 = 0.5*TWOM24                                               MARRAN81
      C  =   362436.*TWOM24                                             MARRAN82
      CD =  7654321.*TWOM24                                             MARRAN83
      CM = 16777213.*TWOM24                                             MARRAN84
      I97 = 97                                                          MARRAN85
      J97 = 33                                                          MARRAN86
C       Complete initialization by skipping                             MARRAN87
C            (NTOT2*MODCNS + NTOT) random numbers                       MARRAN88
      DO 45 LOOP2= 1, NTOT2+1                                           MARRAN89
      NOW = MODCNS                                                      MARRAN90
      IF (LOOP2 .EQ. NTOT2+1)  NOW=NTOT                                 MARRAN91
      IF (NOW .GT. 0)  THEN                                             MARRAN92
        WRITE(6,'(A,I15)') ' MARINI SKIPPING OVER ',NOW                 MARRAN93
       DO 40 IDUM = 1, NTOT                                             MARRAN94
       UNI = U(I97)-U(J97)                                              MARRAN95
       IF (UNI .LT. 0.)  UNI=UNI+1.                                     MARRAN96
       U(I97) = UNI                                                     MARRAN97
       I97 = I97-1                                                      MARRAN98
       IF (I97 .EQ. 0)  I97=97                                          MARRAN99
       J97 = J97-1                                                      MARRA100
       IF (J97 .EQ. 0)  J97=97                                          MARRA101
       C = C - CD                                                       MARRA102
       IF (C .LT. 0.)  C=C+CM                                           MARRA103
   40  CONTINUE                                                         MARRA104
      ENDIF                                                             MARRA105
   45 CONTINUE                                                          MARRA106
      IF (KALLED .EQ. 1)  RETURN                                        MARRA107
C                                                                       MARRA108
C          Normal entry to generate LENV random numbers                 MARRA109
   50 CONTINUE                                                          MARRA110
      DO 100 IVEC= 1, LENV                                              MARRA111
      UNI = U(I97)-U(J97)                                               MARRA112
      IF (UNI .LT. 0.)  UNI=UNI+1.                                      MARRA113
      U(I97) = UNI                                                      MARRA114
      I97 = I97-1                                                       MARRA115
      IF (I97 .EQ. 0)  I97=97                                           MARRA116
      J97 = J97-1                                                       MARRA117
      IF (J97 .EQ. 0)  J97=97                                           MARRA118
      C = C - CD                                                        MARRA119
      IF (C .LT. 0.)  C=C+CM                                            MARRA120
      UNI = UNI-C                                                       MARRA121
      IF (UNI .LT. 0.) UNI=UNI+1.                                       MARRA122
      RVEC(IVEC) = UNI                                                  MARRA123
C             Replace exact zeros by uniform distr. *2**-24             MARRA124
         IF (UNI .EQ. 0.)  THEN                                         MARRA125
         ZUNI = TWOM24*U(2)                                             MARRA126
C             An exact zero here is very unlikely, but let's be safe.   MARRA127
         IF (ZUNI .EQ. 0.) ZUNI= TWOM24*TWOM24                          MARRA128
         RVEC(IVEC) = ZUNI                                              MARRA129
         ENDIF                                                          MARRA130
  100 CONTINUE                                                          MARRA131
      NTOT = NTOT + LENV                                                MARRA132
         IF (NTOT .GE. MODCNS)  THEN                                    MARRA133
         NTOT2 = NTOT2 + 1                                              MARRA134
         NTOT = NTOT - MODCNS                                           MARRA135
         ENDIF                                                          MARRA136
      RETURN                                                            MARRA137
C           Entry to output current status                              MARRA138
      ENTRY MAROUT(IJKLUT,NTOTUT,NTOT2T)                                MARRA139
      IJKLUT = IJKL                                                     MARRA140
      NTOTUT = NTOT                                                     MARRA141
      NTOT2T = NTOT2                                                    MARRA142
      RETURN                                                            MARRA143
      END                                                               MARRA144
      SUBROUTINE CARRAN(RVEC,LENV)                                      CARRAN 2
C         Add-and-carry random number generator proposed by             CARRAN 3
C         Marsaglia and Zaman in SIAM J. Scientific and Statistical     CARRAN 4
C             Computing, to appear probably 1990.                       CARRAN 5
C         modified with enhanced initialization by F. James, 1990       CARRAN 6
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CARRAN 7
C!!!  Calling sequences for CARRAN:                                  ++ CARRAN 8
C!!!      CALL CARRAN (RVEC, LEN)   returns a vector RVEC of LEN     ++ CARRAN 9
C!!!                   32-bit random floating point numbers between  ++ CARRAN10
C!!!                   zero and one.                                 ++ CARRAN11
C!!!      CALL CARINI(INT)     initializes the generator from one    ++ CARRAN12
C!!!                   32-bit integer INT                            ++ CARRAN13
C!!!      CALL CARRES(IVEC)    restarts the generator from vector    ++ CARRAN14
C!!!                   IVEC of 25 32-bit integers (see CAROUT)       ++ CARRAN15
C!!!      CALL CAROUT(IVEC)    outputs the current values of the 25  ++ CARRAN16
C!!!                 32-bit integer seeds, to be used for restarting ++ CARRAN17
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CARRAN18
      DIMENSION RVEC(LENV)                                              CARRAN19
      DIMENSION SEEDS(24), ISEEDS(24), ISDEXT(25)                       CARRAN20
      PARAMETER (TWOP12=4096.)                                          CARRAN21
      PARAMETER (ITWO24=2**24, ICONS=2147483563)                        CARRAN22
      SAVE NOTYET, I24, J24, CARRY, SEEDS, TWOM24                       CARRAN23
      LOGICAL NOTYET                                                    CARRAN24
      DATA NOTYET/.TRUE./                                               CARRAN25
      DATA I24,J24,CARRY/24,10,0./                                      CARRAN26
C                                                                       CARRAN27
C              Default Initialization by Multiplicative Congruential    CARRAN28
      IF (NOTYET) THEN                                                  CARRAN29
         NOTYET = .FALSE.                                               CARRAN30
         JSEED = 314159265                                              CARRAN31
         WRITE(6,'(A,I12)') ' CARRAN DEFAULT INITIALIZATION: ',JSEED    CARRAN32
            TWOM24 = 1.                                                 CARRAN33
         DO 25 I= 1, 24                                                 CARRAN34
            TWOM24 = TWOM24 * 0.5                                       CARRAN35
         K = JSEED/53668                                                CARRAN36
         JSEED = 40014*(JSEED-K*53668) -K*12211                         CARRAN37
         IF (JSEED .LT. 0)  JSEED = JSEED+ICONS                         CARRAN38
         ISEEDS(I) = MOD(JSEED,ITWO24)                                  CARRAN39
   25    CONTINUE                                                       CARRAN40
         DO 50 I= 1,24                                                  CARRAN41
         SEEDS(I) = REAL(ISEEDS(I))*TWOM24                              CARRAN42
   50    CONTINUE                                                       CARRAN43
         I24 = 24                                                       CARRAN44
         J24 = 10                                                       CARRAN45
         CARRY = 0.                                                     CARRAN46
         IF (SEEDS(24) .LT. SEEDS(14)) CARRY = TWOM24                   CARRAN47
      ENDIF                                                             CARRAN48
C                                                                       CARRAN49
C          The Generator proper: "Subtract-with-borrow",                CARRAN50
C          as proposed by Marsaglia and Zaman,                          CARRAN51
C          Florida State University, March, 1989                        CARRAN52
C                                                                       CARRAN53
      DO 100 IVEC= 1, LENV                                              CARRAN54
      UNI = SEEDS(I24) - SEEDS(J24) - CARRY                             CARRAN55
      IF (UNI .LT. 0.)  THEN                                            CARRAN56
         UNI = UNI + 1.0                                                CARRAN57
         CARRY = TWOM24                                                 CARRAN58
      ELSE                                                              CARRAN59
         CARRY = 0.                                                     CARRAN60
      ENDIF                                                             CARRAN61
      SEEDS(I24) = UNI                                                  CARRAN62
      I24 = I24 - 1                                                     CARRAN63
      IF (I24 .EQ. 0)  I24 = 24                                         CARRAN64
      J24 = J24 - 1                                                     CARRAN65
      IF (J24 .EQ. 0)  J24 = 24                                         CARRAN66
      RVEC(IVEC) = UNI                                                  CARRAN67
  100 CONTINUE                                                          CARRAN68
      RETURN                                                            CARRAN69
C           Entry to input and float integer seeds from previous run    CARRAN70
      ENTRY CARRES(ISDEXT)                                              CARRAN71
         TWOM24 = 1.                                                    CARRAN72
         DO 195 I= 1, 24                                                CARRAN73
  195    TWOM24 = TWOM24 * 0.5                                          CARRAN74
      WRITE(6,'(A)') ' FULL INITIALIZATION OF CARRAN WITH 25 INTEGERS:' CARRAN75
      WRITE(6,'(5X,5I12)') ISDEXT                                       CARRAN76
      DO 200 I= 1, 24                                                   CARRAN77
      SEEDS(I) = REAL(ISDEXT(I))*TWOM24                                 CARRAN78
  200 CONTINUE                                                          CARRAN79
      CARRY = REAL(MOD(ISDEXT(25),10))*TWOM24                           CARRAN80
      ISD = ISDEXT(25)/10                                               CARRAN81
      I24 = MOD(ISD,100)                                                CARRAN82
      ISD = ISD/100                                                     CARRAN83
      J24 = ISD                                                         CARRAN84
      RETURN                                                            CARRAN85
C                    Entry to ouput seeds as integers                   CARRAN86
      ENTRY CAROUT(ISDEXT)                                              CARRAN87
      DO 300 I= 1, 24                                                   CARRAN88
         ISDEXT(I) = INT(SEEDS(I)*TWOP12*TWOP12)                        CARRAN89
  300 CONTINUE                                                          CARRAN90
      ICARRY = 0                                                        CARRAN91
      IF (CARRY .GT. 0.)  ICARRY = 1                                    CARRAN92
      ISDEXT(25) = 1000*J24 + 10*I24 + ICARRY                           CARRAN93
      RETURN                                                            CARRAN94
C                    Entry to initialize from one integer               CARRAN95
      ENTRY CARINI(INSEED)                                              CARRAN96
      JSEED = INSEED                                                    CARRAN97
      WRITE(6,'(A,I12)') ' CARRAN INITIALIZED FROM SEED ',INSEED        CARRAN98
C      TWOM24 = 1.                                                      CARRAN99
         DO 325 I= 1, 24                                                CARRA100
           TWOM24 = TWOM24 * 0.5                                        CARRA101
         K = JSEED/53668                                                CARRA102
         JSEED = 40014*(JSEED-K*53668) -K*12211                         CARRA103
         IF (JSEED .LT. 0)  JSEED = JSEED+ICONS                         CARRA104
         ISEEDS(I) = MOD(JSEED,ITWO24)                                  CARRA105
  325    CONTINUE                                                       CARRA106
         DO 350 I= 1,24                                                 CARRA107
         SEEDS(I) = REAL(ISEEDS(I))*TWOM24                              CARRA108
  350    CONTINUE                                                       CARRA109
         I24 = 24                                                       CARRA110
         J24 = 10                                                       CARRA111
         CARRY = 0.                                                     CARRA112
         IF (SEEDS(24) .LT. SEEDS(14)) CARRY = TWOM24                   CARRA113
      RETURN                                                            CARRA114
      END                                                               CARRA115
                                                                        CARRA116
      SUBROUTINE ECURAN(RVEC,LEN)                                       ECURAN 2
C         Random number generator given by L'Ecuyer in                  ECURAN 3
C            Comm. ACM Vol 31, p.742, 1988                              ECURAN 4
C            modified by F. James to return a vector of numbers         ECURAN 5
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ECURAN 6
C!!!  Calling sequences for ECURAN:                                  ++ ECURAN 7
C!!!      CALL ECURAN (RVEC, LEN)   returns a vector RVEC of LEN     ++ ECURAN 8
C!!!                   32-bit random floating point numbers between  ++ ECURAN 9
C!!!                   zero and one.                                 ++ ECURAN10
C!!!      CALL ECUINI(I1,I2)    initializes the generator from two   ++ ECURAN11
C!!!                   32-bit integers I1 and I2                     ++ ECURAN12
C!!!      CALL ECUOUT(I1,I2)    outputs the current values of the    ++ ECURAN13
C!!!                   two integer seeds, to be used for restarting  ++ ECURAN14
C!!! ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ECURAN15
      DIMENSION RVEC(*)                                                 ECURAN16
      SAVE ISEED1,ISEED2                                                ECURAN17
      DATA ISEED1,ISEED2 /12345,67890/                                  ECURAN18
C                                                                       ECURAN19
      DO 100 I= 1, LEN                                                  ECURAN20
      K = ISEED1/53668                                                  ECURAN21
      ISEED1 = 40014*(ISEED1 - K*53668) - K*12211                       ECURAN22
      IF (ISEED1 .LT. 0) ISEED1=ISEED1+2147483563                       ECURAN23
C                                                                       ECURAN24
      K = ISEED2/52774                                                  ECURAN25
      ISEED2 = 40692*(ISEED2 - K*52774) - K* 3791                       ECURAN26
      IF (ISEED2 .LT. 0) ISEED2=ISEED2+2147483399                       ECURAN27
C                                                                       ECURAN28
      IZ = ISEED1 - ISEED2                                              ECURAN29
      IF (IZ .LT. 1)  IZ = IZ + 2147483562                              ECURAN30
C                                                                       ECURAN31
      RVEC(I) = REAL(IZ) * 4.656613E-10                                 ECURAN32
  100 CONTINUE                                                          ECURAN33
      RETURN                                                            ECURAN34
C                                                                       ECURAN35
      ENTRY ECUINI(IS1,IS2)                                             ECURAN36
      ISEED1 = IS1                                                      ECURAN37
      ISEED2 = IS2                                                      ECURAN38
      RETURN                                                            ECURAN39
C                                                                       ECURAN40
      ENTRY ECUOUT(IS1,IS2)                                             ECURAN41
      IS1 = ISEED1                                                      ECURAN42
      IS2 = ISEED2                                                      ECURAN43
      RETURN                                                            ECURAN44
      END                                                               ECURAN45
                                                                        ECURAN46
      SUBROUTINE VARRAN(DRVEC,LEN)                                      VARRAN 2
C     ***************************                                       VARRAN 3
C Switchable random number generator                                    VARRAN 4
C Translation to double precision                                       VARRAN 5
C     ***************************                                       VARRAN 6
      COMMON / RANPAR / KEYRND                                          VARRAN 7
      save   / RANPAR /                                                 VARRAN 8
      DOUBLE PRECISION DRVEC(*)                                         VARRAN 9
      DIMENSION RVEC(1000)                                              VARRAN10
      IF(LEN.LT.1.OR.LEN.GT.1000) GOTO 901                              VARRAN11
   10 CONTINUE                                                          VARRAN12
      IF(KEYRND.EQ.1) THEN                                              VARRAN13
         CALL RANMAR(RVEC,LEN)                                          BBL95086
      ELSEIF(KEYRND.EQ.2) THEN                                          VARRAN15
         CALL ECURAN(RVEC,LEN)                                          VARRAN16
      ELSEIF(KEYRND.EQ.3) THEN                                          VARRAN17
         CALL CARRAN(RVEC,LEN)                                          VARRAN18
      ELSE                                                              VARRAN19
         GOTO 902                                                       VARRAN20
      ENDIF                                                             VARRAN21
C random numbers 0 and 1 not accepted                                   VARRAN22
      DO 30 I=1,LEN                                                     VARRAN23
      IF(RVEC(I).LE.0E0.OR.RVEC(I).GE.1E0) THEN                         VARRAN24
        WRITE(6,*) ' +++++ VARRAN: RVEC=',RVEC(I)                       VARRAN25
        GOTO 10                                                         VARRAN26
      ENDIF                                                             VARRAN27
      DRVEC(I)=RVEC(I)                                                  VARRAN28
   30 CONTINUE                                                          VARRAN29
      RETURN                                                            VARRAN30
  901 WRITE(6,*) ' +++++ STOP IN VARRAN: LEN=',LEN                      VARRAN31
      STOP                                                              VARRAN32
  902 WRITE(6,*) ' +++++ STOP IN VARRAN: WRONG KEYRND',KEYRND           VARRAN33
      STOP                                                              VARRAN34
      END                                                               VARRAN35
                                                                        VARRAN36
      SUBROUTINE BOSTDQ(MODE,QQ,PP,R)                                   BOSTDQ 2
C     *******************************                                   BOSTDQ 3
C BOOST ALONG ARBITRARY AXIS (BY RONALD KLEISS).                        BOSTDQ 4
C P BOOSTED INTO R  FROM ACTUAL FRAME TO REST FRAME OF Q                BOSTDQ 5
C FORTH (MODE = 1) OR BACK (MODE = -1).                                 BOSTDQ 6
C Q MUST BE A TIMELIKE, P MAY BE ARBITRARY.                             BOSTDQ 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BOSTDQ 8
      PARAMETER ( IOUT =6 )                                             BOSTDQ 9
      DIMENSION QQ(*),PP(*),R(*)                                        BOSTDQ10
      DIMENSION Q(4),P(4)                                               BOSTDQ11
                                                                        BOSTDQ12
      DO 10 K=1,4                                                       BOSTDQ13
      P(K)=PP(K)                                                        BOSTDQ14
   10 Q(K)=QQ(K)                                                        BOSTDQ15
      AMQ =DSQRT(Q(4)**2-Q(1)**2-Q(2)**2-Q(3)**2)                       BOSTDQ16
      IF    (MODE.EQ.-1) THEN                                           BOSTDQ17
         R(4) = (P(1)*Q(1)+P(2)*Q(2)+P(3)*Q(3)+P(4)*Q(4))/AMQ           BOSTDQ18
         FAC  = (R(4)+P(4))/(Q(4)+AMQ)                                  BOSTDQ19
      ELSEIF(MODE.EQ. 1) THEN                                           BOSTDQ20
         R(4) =(-P(1)*Q(1)-P(2)*Q(2)-P(3)*Q(3)+P(4)*Q(4))/AMQ           BOSTDQ21
         FAC  =-(R(4)+P(4))/(Q(4)+AMQ)                                  BOSTDQ22
      ELSE                                                              BOSTDQ23
         WRITE(IOUT,*) ' ++++++++ WRONG MODE IN BOOST3 '                BOSTDQ24
         STOP                                                           BOSTDQ25
      ENDIF                                                             BOSTDQ26
      R(1)=P(1)+FAC*Q(1)                                                BOSTDQ27
      R(2)=P(2)+FAC*Q(2)                                                BOSTDQ28
      R(3)=P(3)+FAC*Q(3)                                                BOSTDQ29
      END                                                               BOSTDQ30
                                                                        BOSTDQ31
                                                                        BOSTDQ32
C BOOST ALONG X AXIS, EXE=EXP(ETA), ETA= HIPERBOLIC VELOCITY.           BOSTDQ33
      SUBROUTINE BOSTD1(EXE,PVEC,QVEC)                                  BOSTD1 2
C     ********************************                                  BOSTD1 3
      IMPLICIT REAL*8(A-H,O-Z)                                          BOSTD1 4
      REAL*8 PVEC(4),QVEC(4),RVEC(4)                                    BOSTD1 5
      DO 10 I=1,4                                                       BOSTD1 6
  10  RVEC(I)=PVEC(I)                                                   BOSTD1 7
      RPL=RVEC(4)+RVEC(1)                                               BOSTD1 8
      RMI=RVEC(4)-RVEC(1)                                               BOSTD1 9
      QPL=RPL*EXE                                                       BOSTD110
      QMI=RMI/EXE                                                       BOSTD111
      QVEC(2)=RVEC(2)                                                   BOSTD112
      QVEC(3)=RVEC(3)                                                   BOSTD113
      QVEC(1)=(QPL-QMI)/2                                               BOSTD114
      QVEC(4)=(QPL+QMI)/2                                               BOSTD115
      END                                                               BOSTD116
                                                                        BOSTD117
      SUBROUTINE DUMPT(NUNIT,WORD,PP)                                   DUMPT  2
C     *******************************                                   DUMPT  3
      IMPLICIT REAL*8(A-H,O-Z)                                          DUMPT  4
      CHARACTER*8 WORD                                                  DUMPT  5
      REAL*8 PP(4)                                                      DUMPT  6
      AMS=PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                           DUMPT  7
      IF(AMS.GT.0.0) AMS=SQRT(AMS)                                      DUMPT  8
      WRITE(NUNIT,'(1X,A8,5(1X,F13.8))') WORD,(PP(I),I=1,4),AMS         DUMPT  9
C====================================================================== DUMPT 10
C================END OF YFSLIB========================================= DUMPT 11
C====================================================================== DUMPT 12
      END                                                               DUMPT 13
      SUBROUTINE CHOICE(MNUM,RR,ICHAN,PROB1,PROB2,PROB3,                CHOICE 2
     $            AMRX,GAMRX,AMRA,GAMRA,AMRB,GAMRB)                     CHOICE 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
C                                                                       CHOICE 5
      AMROP=1.1                                                         CHOICE 6
      GAMROP=0.36                                                       CHOICE 7
      AMOM=.782                                                         CHOICE 8
      GAMOM=0.0084                                                      CHOICE 9
C     XXXXA CORRESPOND TO S2 CHANNEL !                                  CHOICE10
      IF(MNUM.EQ.0) THEN                                                CHOICE11
       PROB1=0.5                                                        CHOICE12
       PROB2=0.5                                                        CHOICE13
       AMRX =AMA1                                                       CHOICE14
       GAMRX=GAMA1                                                      CHOICE15
       AMRA =AMRO                                                       CHOICE16
       GAMRA=GAMRO                                                      CHOICE17
       AMRB =AMRO                                                       CHOICE18
       GAMRB=GAMRO                                                      CHOICE19
      ELSEIF(MNUM.EQ.1) THEN                                            CHOICE20
       PROB1=0.5                                                        CHOICE21
       PROB2=0.5                                                        CHOICE22
       AMRX =1.57                                                       CHOICE23
       GAMRX=0.9                                                        CHOICE24
       AMRB =AMKST                                                      CHOICE25
       GAMRB=GAMKST                                                     CHOICE26
       AMRA =AMRO                                                       CHOICE27
       GAMRA=GAMRO                                                      CHOICE28
      ELSEIF(MNUM.EQ.2) THEN                                            CHOICE29
       PROB1=0.5                                                        CHOICE30
       PROB2=0.5                                                        CHOICE31
       AMRX =1.57                                                       CHOICE32
       GAMRX=0.9                                                        CHOICE33
       AMRB =AMKST                                                      CHOICE34
       GAMRB=GAMKST                                                     CHOICE35
       AMRA =AMRO                                                       CHOICE36
       GAMRA=GAMRO                                                      CHOICE37
      ELSEIF(MNUM.EQ.3) THEN                                            CHOICE38
       PROB1=0.5                                                        CHOICE39
       PROB2=0.5                                                        CHOICE40
       AMRX =1.27                                                       CHOICE41
       GAMRX=0.3                                                        CHOICE42
       AMRA =AMKST                                                      CHOICE43
       GAMRA=GAMKST                                                     CHOICE44
       AMRB =AMKST                                                      CHOICE45
       GAMRB=GAMKST                                                     CHOICE46
      ELSEIF(MNUM.EQ.4) THEN                                            CHOICE47
       PROB1=0.5                                                        CHOICE48
       PROB2=0.5                                                        CHOICE49
       AMRX =1.27                                                       CHOICE50
       GAMRX=0.3                                                        CHOICE51
       AMRA =AMKST                                                      CHOICE52
       GAMRA=GAMKST                                                     CHOICE53
       AMRB =AMKST                                                      CHOICE54
       GAMRB=GAMKST                                                     CHOICE55
      ELSEIF(MNUM.EQ.5) THEN                                            CHOICE56
       PROB1=0.5                                                        CHOICE57
       PROB2=0.5                                                        CHOICE58
       AMRX =1.27                                                       CHOICE59
       GAMRX=0.3                                                        CHOICE60
       AMRA =AMKST                                                      CHOICE61
       GAMRA=GAMKST                                                     CHOICE62
       AMRB =AMRO                                                       CHOICE63
       GAMRB=GAMRO                                                      CHOICE64
      ELSEIF(MNUM.EQ.6) THEN                                            CHOICE65
       PROB1=0.4                                                        CHOICE66
       PROB2=0.4                                                        CHOICE67
       AMRX =1.27                                                       CHOICE68
       GAMRX=0.3                                                        CHOICE69
       AMRA =AMRO                                                       CHOICE70
       GAMRA=GAMRO                                                      CHOICE71
       AMRB =AMKST                                                      CHOICE72
       GAMRB=GAMKST                                                     CHOICE73
      ELSEIF(MNUM.EQ.7) THEN                                            CHOICE74
       PROB1=0.0                                                        CHOICE75
       PROB2=1.0                                                        CHOICE76
       AMRX =1.27                                                       CHOICE77
       GAMRX=0.9                                                        CHOICE78
       AMRA =AMRO                                                       CHOICE79
       GAMRA=GAMRO                                                      CHOICE80
       AMRB =AMRO                                                       CHOICE81
       GAMRB=GAMRO                                                      CHOICE82
      ELSEIF(MNUM.EQ.8) THEN                                            CHOICE83
       PROB1=0.0                                                        CHOICE84
       PROB2=1.0                                                        CHOICE85
       AMRX =AMROP                                                      CHOICE86
       GAMRX=GAMROP                                                     CHOICE87
       AMRB =AMOM                                                       CHOICE88
       GAMRB=GAMOM                                                      CHOICE89
       AMRA =AMRO                                                       CHOICE90
       GAMRA=GAMRO                                                      CHOICE91
      ELSEIF(MNUM.EQ.101) THEN                                          CHOICE92
       PROB1=.35                                                        CHOICE93
       PROB2=.35                                                        CHOICE94
       AMRX =1.2                                                        CHOICE95
       GAMRX=.46                                                        CHOICE96
       AMRB =AMOM                                                       CHOICE97
       GAMRB=GAMOM                                                      CHOICE98
       AMRA =AMOM                                                       CHOICE99
       GAMRA=GAMOM                                                      CHOIC100
      ELSEIF(MNUM.EQ.102) THEN                                          CHOIC101
       PROB1=0.0                                                        CHOIC102
       PROB2=0.0                                                        CHOIC103
       AMRX =1.4                                                        CHOIC104
       GAMRX=.6                                                         CHOIC105
       AMRB =AMOM                                                       CHOIC106
       GAMRB=GAMOM                                                      CHOIC107
       AMRA =AMOM                                                       CHOIC108
       GAMRA=GAMOM                                                      CHOIC109
      ELSE                                                              CHOIC110
       PROB1=0.0                                                        CHOIC111
       PROB2=0.0                                                        CHOIC112
       AMRX =AMA1                                                       CHOIC113
       GAMRX=GAMA1                                                      CHOIC114
       AMRA =AMRO                                                       CHOIC115
       GAMRA=GAMRO                                                      CHOIC116
       AMRB =AMRO                                                       CHOIC117
       GAMRB=GAMRO                                                      CHOIC118
      ENDIF                                                             CHOIC119
C                                                                       CHOIC120
      IF    (RR.LE.PROB1) THEN                                          CHOIC121
       ICHAN=1                                                          CHOIC122
      ELSEIF(RR.LE.(PROB1+PROB2)) THEN                                  CHOIC123
       ICHAN=2                                                          CHOIC124
        AX   =AMRA                                                      CHOIC125
        GX   =GAMRA                                                     CHOIC126
        AMRA =AMRB                                                      CHOIC127
        GAMRA=GAMRB                                                     CHOIC128
        AMRB =AX                                                        CHOIC129
        GAMRB=GX                                                        CHOIC130
        PX   =PROB1                                                     CHOIC131
        PROB1=PROB2                                                     CHOIC132
        PROB2=PX                                                        CHOIC133
      ELSE                                                              CHOIC134
       ICHAN=3                                                          CHOIC135
      ENDIF                                                             CHOIC136
C                                                                       CHOIC137
      PROB3=1.0-PROB1-PROB2                                             CHOIC138
      END                                                               CHOIC139
      FUNCTION FORMOM(XMAA,XMOM)                                        FORMOM 2
C     ==================================================================FORMOM 3
C     formfactorfor pi-pi0 gamma final state                            FORMOM 4
C      R. Decker, Z. Phys C36 (1987) 487.                               FORMOM 5
C     ==================================================================FORMOM 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON /TESTA1/ KEYA1                                             FORMOM 9
      COMPLEX BWIGN,FORMOM                                              FORMOM10
      DATA ICONT /1/                                                    FORMOM11
* THIS INLINE FUNCT. CALCULATES THE SCALAR PART OF THE PROPAGATOR       FORMOM12
      BWIGN(XM,AM,GAMMA)=1./CMPLX(XM**2-AM**2,GAMMA*AM)                 FORMOM13
* HADRON CURRENT                                                        FORMOM14
      FRO  =0.266*AMRO**2                                               FORMOM15
      ELPHA=- 0.1                                                       FORMOM16
      AMROP = 1.7                                                       FORMOM17
      GAMROP= 0.26                                                      FORMOM18
      AMOM  =0.782                                                      FORMOM19
      GAMOM =0.0085                                                     FORMOM20
      AROMEG= 1.0                                                       FORMOM21
      GCOUP=12.924                                                      FORMOM22
      GCOUP=GCOUP*AROMEG                                                FORMOM23
      FQED  =SQRT(4.0*3.1415926535/137.03604)                           FORMOM24
      FORMOM=FQED*FRO**2/SQRT(2.0)*GCOUP**2*BWIGN(XMOM,AMOM,GAMOM)      FORMOM25
     $     *(BWIGN(XMAA,AMRO,GAMRO)+ELPHA*BWIGN(XMAA,AMROP,GAMROP))     FORMOM26
     $     *(BWIGN( 0.0,AMRO,GAMRO)+ELPHA*BWIGN( 0.0,AMROP,GAMROP))     FORMOM27
      END                                                               FORMOM28
      FUNCTION FORM1(MNUM,QQ,S1,SDWA)                                   FORM1  2
C     ==================================================================FORM1  3
C     formfactorfor F1 for 3 scalar final state                         FORM1  4
C     R. Fisher, J. Wess and F. Wagner Z. Phys C3 (1980) 313            FORM1  5
C     H. Georgi, Weak interactions and modern particle theory,          FORM1  6
C     The Benjamin/Cummings Pub. Co., Inc. 1984.                        FORM1  7
C     R. Decker, E. Mirkes, R. Sauer, Z. Was Karlsruhe preprint TTP92-25FORM1  8
C     and erratum !!!!!!                                                FORM1  9
C     ==================================================================FORM1 10
C                                                                       FORM1 11
      COMPLEX FORM1,WIGNER,WIGFOR,FPIKM,BWIGM                           FORM1 12
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      WIGNER(A,B,C)= CMPLX(1.0,0.0)/CMPLX(A-B**2,B*C)                   FORM1 14
      IF     (MNUM.EQ.0) THEN                                           FORM1 15
C ------------  3 pi hadronic state (a1)                                FORM1 16
       GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                               FORM1 17
       FORM1=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FPIKM(SQRT(S1),AMPI,AMPI)    FORM1 18
      ELSEIF (MNUM.EQ.1) THEN                                           FORM1 19
C ------------ K- pi- K+                                                FORM1 20
       FORM1=BWIGM(S1,AMKST,GAMKST,AMPI,AMKZ)                           FORM1 21
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM1 22
       FORM1=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FORM1                        FORM1 23
      ELSEIF (MNUM.EQ.2) THEN                                           FORM1 24
C ------------ K0 pi- K0B                                               FORM1 25
       FORM1=BWIGM(S1,AMKST,GAMKST,AMPI,AMKZ)                           FORM1 26
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM1 27
       FORM1=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FORM1                        FORM1 28
      ELSEIF (MNUM.EQ.3) THEN                                           FORM1 29
C ------------ K- K0 pi0                                                FORM1 30
       FORM1=0.0                                                        FORM1 31
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM1 32
       FORM1=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FORM1                        FORM1 33
      ELSEIF (MNUM.EQ.4) THEN                                           FORM1 34
C ------------ pi0 pi0 K-                                               FORM1 35
       XM2=1.402                                                        FORM1 36
       GAM2=0.174                                                       FORM1 37
       FORM1=BWIGM(S1,AMKST,GAMKST,AMK,AMPIZ)                           FORM1 38
       FORM1=WIGFOR(QQ,XM2,GAM2)*FORM1                                  FORM1 39
      ELSEIF (MNUM.EQ.5) THEN                                           FORM1 40
C ------------ K- pi- pi+                                               FORM1 41
       XM2=1.402                                                        FORM1 42
       GAM2=0.174                                                       FORM1 43
       FORM1=WIGFOR(QQ,XM2,GAM2)*FPIKM(SQRT(S1),AMPI,AMPI)              FORM1 44
      ELSEIF (MNUM.EQ.6) THEN                                           FORM1 45
       FORM1=0.0                                                        FORM1 46
      ELSEIF (MNUM.EQ.7) THEN                                           FORM1 47
C -------------- eta pi- pi0 final state                                FORM1 48
       FORM1=0.0                                                        FORM1 49
      ENDIF                                                             FORM1 50
C                                                                       FORM1 51
      END                                                               FORM1 52
      FUNCTION FORM2(MNUM,QQ,S1,SDWA)                                   FORM2  2
C     ==================================================================FORM2  3
C     formfactorfor F2 for 3 scalar final state                         FORM2  4
C     R. Fisher, J. Wess and F. Wagner Z. Phys C3 (1980) 313            FORM2  5
C     H. Georgi, Weak interactions and modern particle theory,          FORM2  6
C     The Benjamin/Cummings Pub. Co., Inc. 1984.                        FORM2  7
C     R. Decker, E. Mirkes, R. Sauer, Z. Was Karlsruhe preprint TTP92-25FORM2  8
C     and erratum !!!!!!                                                FORM2  9
C     ==================================================================FORM2 10
C                                                                       FORM2 11
      COMPLEX FORM2,WIGNER,WIGFOR,FPIKM,BWIGM                           FORM2 12
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      WIGNER(A,B,C)= CMPLX(1.0,0.0)/CMPLX(A-B**2,B*C)                   FORM2 14
      IF     (MNUM.EQ.0) THEN                                           FORM2 15
C ------------  3 pi hadronic state (a1)                                FORM2 16
       GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                               FORM2 17
       FORM2=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FPIKM(SQRT(S1),AMPI,AMPI)    FORM2 18
      ELSEIF (MNUM.EQ.1) THEN                                           FORM2 19
C ------------ K- pi- K+                                                FORM2 20
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM2 21
       FORM2=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FPIKM(SQRT(S1),AMPI,AMPI)    FORM2 22
      ELSEIF (MNUM.EQ.2) THEN                                           FORM2 23
C ------------ K0 pi- K0B                                               FORM2 24
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM2 25
       FORM2=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FPIKM(SQRT(S1),AMPI,AMPI)    FORM2 26
      ELSEIF (MNUM.EQ.3) THEN                                           FORM2 27
C ------------ K- K0 pi0                                                FORM2 28
         GAMAX=GAMA1*GFUN(QQ)/GFUN(AMA1**2)                             FORM2 29
       FORM2=AMA1**2*WIGNER(QQ,AMA1,GAMAX)*FPIKM(SQRT(S1),AMPI,AMPI)    FORM2 30
      ELSEIF (MNUM.EQ.4) THEN                                           FORM2 31
C ------------ pi0 pi0 K-                                               FORM2 32
       XM2=1.402                                                        FORM2 33
       GAM2=0.174                                                       FORM2 34
       FORM2=BWIGM(S1,AMKST,GAMKST,AMK,AMPIZ)                           FORM2 35
       FORM2=WIGFOR(QQ,XM2,GAM2)*FORM2                                  FORM2 36
      ELSEIF (MNUM.EQ.5) THEN                                           FORM2 37
C ------------ K- pi- pi+                                               FORM2 38
       XM2=1.402                                                        FORM2 39
       GAM2=0.174                                                       FORM2 40
       FORM2=BWIGM(S1,AMKST,GAMKST,AMK,AMPIZ)                           FORM2 41
       FORM2=WIGFOR(QQ,XM2,GAM2)*FORM2                                  FORM2 42
C                                                                       FORM2 43
      ELSEIF (MNUM.EQ.6) THEN                                           FORM2 44
       XM2=1.402                                                        FORM2 45
       GAM2=0.174                                                       FORM2 46
       FORM2=WIGFOR(QQ,XM2,GAM2)*FPIKM(SQRT(S1),AMPI,AMPI)              FORM2 47
C                                                                       FORM2 48
      ELSEIF (MNUM.EQ.7) THEN                                           FORM2 49
C -------------- eta pi- pi0 final state                                FORM2 50
       FORM2=0.0                                                        FORM2 51
      ENDIF                                                             FORM2 52
C                                                                       FORM2 53
      END                                                               FORM2 54
      FUNCTION FORM3(MNUM,QQ,S1,SDWA)                                   FORM3  2
C     ==================================================================FORM3  3
C     formfactorfor F3 for 3 scalar final state                         FORM3  4
C     R. Fisher, J. Wess and F. Wagner Z. Phys C3 (1980) 313            FORM3  5
C     H. Georgi, Weak interactions and modern particle theory,          FORM3  6
C     The Benjamin/Cummings Pub. Co., Inc. 1984.                        FORM3  7
C     R. Decker, E. Mirkes, R. Sauer, Z. Was Karlsruhe preprint TTP92-25FORM3  8
C     and erratum !!!!!!                                                FORM3  9
C     ==================================================================FORM3 10
C                                                                       FORM3 11
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMPLEX FORM3                                                     FORM3 13
      IF (MNUM.EQ.6) THEN                                               FORM3 14
       FORM3=CMPLX(0.0)                                                 FORM3 15
      ELSE                                                              FORM3 16
       FORM3=CMPLX(0.0)                                                 FORM3 17
      ENDIF                                                             FORM3 18
        FORM3=0                                                         FORM3 19
      END                                                               FORM3 20
      FUNCTION FORM4(MNUM,QQ,S1,S2,S3)                                  FORM4  2
C     ==================================================================FORM4  3
C     formfactorfor F4 for 3 scalar final state                         FORM4  4
C     R. Decker, in preparation                                         FORM4  5
C     R. Decker, E. Mirkes, R. Sauer, Z. Was Karlsruhe preprint TTP92-25FORM4  6
C     and erratum !!!!!!                                                FORM4  7
C     ==================================================================FORM4  8
C                                                                       FORM4  9
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMPLEX FORM4,WIGNER,FPIKM                                        FORM4 11
      REAL*4 M                                                          FORM4 12
      WIGNER(A,B,C)=CMPLX(1.0,0.0) /CMPLX(A-B**2,B*C)                   FORM4 13
      IF (MNUM.EQ.0) THEN                                               FORM4 14
C ------------  3 pi hadronic state (a1)                                FORM4 15
        G1=5.8                                                          FORM4 16
        G2=6.08                                                         FORM4 17
        FPIP=0.02                                                       FORM4 18
        AMPIP=1.3                                                       FORM4 19
        GAMPIP=0.3                                                      FORM4 20
        S=QQ                                                            FORM4 21
        G=GAMPIP                                                        FORM4 22
        XM1=AMPIZ                                                       FORM4 23
        XM2=AMRO                                                        FORM4 24
        M  =AMPIP                                                       FORM4 25
         IF (S.GT.(XM1+XM2)**2) THEN                                    FORM4 26
           QS=SQRT(ABS((S   -(XM1+XM2)**2)*(S   -(XM1-XM2)**2)))/SQRT(S)FORM4 27
           QM=SQRT(ABS((M**2-(XM1+XM2)**2)*(M**2-(XM1-XM2)**2)))/M      FORM4 28
           W=SQRT(S)                                                    FORM4 29
           GS=G*(M/W)**2*(QS/QM)**5                                     FORM4 30
         ELSE                                                           FORM4 31
           GS=0.0                                                       FORM4 32
         ENDIF                                                          FORM4 33
        GAMX=GS*W/M                                                     FORM4 34
        FORM4=G1*G2*FPIP/AMRO**4/AMPIP**2                               FORM4 35
     $       *AMPIP**2*WIGNER(QQ,AMPIP,GAMX)                            FORM4 36
     $       *( S1*(S2-S3)*FPIKM(SQRT(S1),AMPIZ,AMPIZ)                  FORM4 37
     $         +S2*(S1-S3)*FPIKM(SQRT(S2),AMPIZ,AMPIZ) )                FORM4 38
      ELSEIF (MNUM.EQ.1) THEN                                           FORM4 39
C ------------ K- pi- K+                                                FORM4 40
        G1=5.8                                                          FORM4 41
        G2=6.08                                                         FORM4 42
        FPIP=0.02                                                       FORM4 43
        AMPIP=1.3                                                       FORM4 44
        GAMPIP=0.3                                                      FORM4 45
        S=QQ                                                            FORM4 46
        G=GAMPIP                                                        FORM4 47
        XM1=AMPIZ                                                       FORM4 48
        XM2=AMRO                                                        FORM4 49
        M  =AMPIP                                                       FORM4 50
         IF (S.GT.(XM1+XM2)**2) THEN                                    FORM4 51
           QS=SQRT(ABS((S   -(XM1+XM2)**2)*(S   -(XM1-XM2)**2)))/SQRT(S)FORM4 52
           QM=SQRT(ABS((M**2-(XM1+XM2)**2)*(M**2-(XM1-XM2)**2)))/M      FORM4 53
           W=SQRT(S)                                                    FORM4 54
           GS=G*(M/W)**2*(QS/QM)**5                                     FORM4 55
         ELSE                                                           FORM4 56
           GS=0.0                                                       FORM4 57
         ENDIF                                                          FORM4 58
        GAMX=GS*W/M                                                     FORM4 59
        FORM4=G1*G2*FPIP/AMRO**4/AMPIP**2                               FORM4 60
     $       *AMPIP**2*WIGNER(QQ,AMPIP,GAMX)                            FORM4 61
     $       *( S1*(S2-S3)*FPIKM(SQRT(S1),AMPIZ,AMPIZ)                  FORM4 62
     $         +S2*(S1-S3)*FPIKM(SQRT(S2),AMPIZ,AMPIZ) )                FORM4 63
      ELSE                                                              FORM4 64
        FORM4=CMPLX(0.0,0.0)                                            FORM4 65
      ENDIF                                                             FORM4 66
C ---- this formfactor is switched off .. .                             FORM4 67
cam    FORM4=CMPLX(0.0,0.0)                                             FORM4 68
      END                                                               FORM4 69
      FUNCTION FORM5(MNUM,QQ,S1,S2)                                     FORM5  2
C     ==================================================================FORM5  3
C     formfactorfor F5 for 3 scalar final state                         FORM5  4
C     G. Kramer, W. Palmer, S. Pinsky, Phys. Rev. D30 (1984) 89.        FORM5  5
C     G. Kramer, W. Palmer             Z. Phys. C25 (1984) 195.         FORM5  6
C     R. Decker, E. Mirkes, R. Sauer, Z. Was Karlsruhe preprint TTP92-25FORM5  7
C     and erratum !!!!!!                                                FORM5  8
C     ==================================================================FORM5  9
C                                                                       FORM5 10
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMPLEX FORM5,WIGNER,FPIKM,FPIKMD,BWIGM                           FORM5 12
      WIGNER(A,B,C)=CMPLX(1.0,0.0)/CMPLX(A-B**2,B*C)                    FORM5 13
      IF     (MNUM.EQ.0) THEN                                           FORM5 14
C ------------  3 pi hadronic state (a1)                                FORM5 15
        FORM5=0.0                                                       FORM5 16
      ELSEIF (MNUM.EQ.1) THEN                                           FORM5 17
C ------------ K- pi- K+                                                FORM5 18
         ELPHA=-0.2                                                     FORM5 19
         FORM5=FPIKMD(SQRT(QQ),AMPI,AMPI)/(1+ELPHA)                     FORM5 20
     $        *(       FPIKM(SQRT(S2),AMPI,AMPI)                        FORM5 21
     $          +ELPHA*BWIGM(S1,AMKST,GAMKST,AMPI,AMK))                 FORM5 22
      ELSEIF (MNUM.EQ.2) THEN                                           FORM5 23
C ------------ K0 pi- K0B                                               FORM5 24
         ELPHA=-0.2                                                     FORM5 25
         FORM5=FPIKMD(SQRT(QQ),AMPI,AMPI)/(1+ELPHA)                     FORM5 26
     $        *(       FPIKM(SQRT(S2),AMPI,AMPI)                        FORM5 27
     $          +ELPHA*BWIGM(S1,AMKST,GAMKST,AMPI,AMK))                 FORM5 28
      ELSEIF (MNUM.EQ.3) THEN                                           FORM5 29
C ------------ K- K0 pi0                                                FORM5 30
        FORM5=0.0                                                       FORM5 31
      ELSEIF (MNUM.EQ.4) THEN                                           FORM5 32
C ------------ pi0 pi0 K-                                               FORM5 33
        FORM5=0.0                                                       FORM5 34
      ELSEIF (MNUM.EQ.5) THEN                                           FORM5 35
C ------------ K- pi- pi+                                               FORM5 36
        ELPHA=-0.2                                                      FORM5 37
        FORM5=BWIGM(QQ,AMKST,GAMKST,AMPI,AMK)/(1+ELPHA)                 FORM5 38
     $       *(       FPIKM(SQRT(S1),AMPI,AMPI)                         FORM5 39
     $         +ELPHA*BWIGM(S2,AMKST,GAMKST,AMPI,AMK))                  FORM5 40
      ELSEIF (MNUM.EQ.6) THEN                                           FORM5 41
C ------------ pi- K0B pi0                                              FORM5 42
        ELPHA=-0.2                                                      FORM5 43
        FORM5=BWIGM(QQ,AMKST,GAMKST,AMPI,AMKZ)/(1+ELPHA)                FORM5 44
     $       *(       FPIKM(SQRT(S2),AMPI,AMPI)                         FORM5 45
     $         +ELPHA*BWIGM(S1,AMKST,GAMKST,AMPI,AMK))                  FORM5 46
      ELSEIF (MNUM.EQ.7) THEN                                           FORM5 47
C -------------- eta pi- pi0 final state                                FORM5 48
       FORM5=FPIKMD(SQRT(QQ),AMPI,AMPI)*FPIKM(SQRT(S1),AMPI,AMPI)       FORM5 49
      ENDIF                                                             FORM5 50
C                                                                       FORM5 51
      END                                                               FORM5 52
      COMPLEX FUNCTION BWIGM(S,M,G,XM1,XM2)                             BWIGM  2
C **********************************************************            BWIGM  3
C     P-WAVE BREIT-WIGNER  FOR RHO                                      BWIGM  4
C **********************************************************            BWIGM  5
      REAL S,M,G,XM1,XM2                                                BWIGM  6
      REAL PI,QS,QM,W,GS                                                BWIGM  7
      DATA INIT /0/                                                     BWIGM  8
C ------------ PARAMETERS --------------------                          BWIGM  9
      IF (INIT.EQ.0) THEN                                               BWIGM 10
      INIT=1                                                            BWIGM 11
      PI=3.141592654                                                    BWIGM 12
C -------  BREIT-WIGNER -----------------------                         BWIGM 13
         ENDIF                                                          BWIGM 14
       IF (S.GT.(XM1+XM2)**2) THEN                                      BWIGM 15
         QS=SQRT(ABS((S   -(XM1+XM2)**2)*(S   -(XM1-XM2)**2)))/SQRT(S)  BWIGM 16
         QM=SQRT(ABS((M**2-(XM1+XM2)**2)*(M**2-(XM1-XM2)**2)))/M        BWIGM 17
         W=SQRT(S)                                                      BWIGM 18
         GS=G*(M/W)**2*(QS/QM)**3                                       BWIGM 19
       ELSE                                                             BWIGM 20
         GS=0.0                                                         BWIGM 21
       ENDIF                                                            BWIGM 22
         BWIGM=M**2/CMPLX(M**2-S,-SQRT(S)*GS)                           BWIGM 23
      RETURN                                                            BWIGM 24
      END                                                               BWIGM 25
      COMPLEX FUNCTION FPIKM(W,XM1,XM2)                                 FPIKM  2
C **********************************************************            FPIKM  3
C     PION FORM FACTOR                                                  FPIKM  4
C **********************************************************            FPIKM  5
      COMPLEX BWIGM                                                     FPIKM  6
      REAL ROM,ROG,ROM1,ROG1,BETA1,PI,PIM,S,W                           FPIKM  7
      EXTERNAL BWIG                                                     FPIKM  8
      DATA  INIT /0/                                                    FPIKM  9
C                                                                       FPIKM 10
C ------------ PARAMETERS --------------------                          FPIKM 11
      IF (INIT.EQ.0 ) THEN                                              FPIKM 12
      INIT=1                                                            FPIKM 13
      PI=3.141592654                                                    FPIKM 14
      PIM=.140                                                          FPIKM 15
      ROM=0.773                                                         FPIKM 16
      ROG=0.145                                                         FPIKM 17
      ROM1=1.370                                                        FPIKM 18
      ROG1=0.510                                                        FPIKM 19
      BETA1=-0.145                                                      FPIKM 20
      ENDIF                                                             FPIKM 21
C -----------------------------------------------                       FPIKM 22
      S=W**2                                                            FPIKM 23
      FPIKM=(BWIGM(S,ROM,ROG,XM1,XM2)+BETA1*BWIGM(S,ROM1,ROG1,XM1,XM2)) FPIKM 24
     & /(1+BETA1)                                                       FPIKM 25
      RETURN                                                            FPIKM 26
      END                                                               FPIKM 27
      COMPLEX FUNCTION FPIKMD(W,XM1,XM2)                                FPIKMD 2
C **********************************************************            FPIKMD 3
C     PION FORM FACTOR                                                  FPIKMD 4
C **********************************************************            FPIKMD 5
      COMPLEX BWIGM                                                     FPIKMD 6
      REAL ROM,ROG,ROM1,ROG1,PI,PIM,S,W                                 FPIKMD 7
      EXTERNAL BWIG                                                     FPIKMD 8
      DATA  INIT /0/                                                    FPIKMD 9
C                                                                       FPIKMD10
C ------------ PARAMETERS --------------------                          FPIKMD11
      IF (INIT.EQ.0 ) THEN                                              FPIKMD12
      INIT=1                                                            FPIKMD13
      PI=3.141592654                                                    FPIKMD14
      PIM=.140                                                          FPIKMD15
      ROM=0.773                                                         FPIKMD16
      ROG=0.145                                                         FPIKMD17
      ROM1=1.500                                                        FPIKMD18
      ROG1=0.220                                                        FPIKMD19
      ROM2=1.750                                                        FPIKMD20
      ROG2=0.120                                                        FPIKMD21
      BETA=6.5                                                          FPIKMD22
      DELTA=-26.0                                                       FPIKMD23
      ENDIF                                                             FPIKMD24
C -----------------------------------------------                       FPIKMD25
      S=W**2                                                            FPIKMD26
      FPIKMD=(DELTA*BWIGM(S,ROM,ROG,XM1,XM2)                            FPIKMD27
     $      +BETA*BWIGM(S,ROM1,ROG1,XM1,XM2)                            FPIKMD28
     $      +     BWIGM(S,ROM2,ROG2,XM1,XM2))                           FPIKMD29
     & /(1+BETA+DELTA)                                                  FPIKMD30
      RETURN                                                            FPIKMD31
      END                                                               FPIKMD32
                                                                        FPIKMD33
      SUBROUTINE CURR(MNUM,PIM1,PIM2,PIM3,PIM4,HADCUR)                  CURR   2
C     ==================================================================CURR   3
C     hadronic current for 4 pi final state                             CURR   4
C     R. Fisher, J. Wess and F. Wagner Z. Phys C3 (1980) 313            CURR   5
C     R. Decker Z. Phys C36 (1987) 487.                                 CURR   6
C     M. Gell-Mann, D. Sharp, W. Wagner Phys. Rev. Lett 8 (1962) 261.   CURR   7
C     ==================================================================CURR   8
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  PIM1(4),PIM2(4),PIM3(4),PIM4(4),PAA(4)                      CURR  11
cam   COMPLEX HADCUR(4),FORM1,FORM2,FORM3,FPIKM                         CURR  12
      COMPLEX HADCUR(4),FORM1,FORM2,FORM3,WIGFOR                        CURR  13
      COMPLEX BWIGN                                                     CURR  14
      REAL PA(4),PB(4)                                                  CURR  15
      REAL AA(4,4),PP(4,4)                                              CURR  16
      DATA PI /3.141592653589793238462643/                              CURR  17
      DATA  FPI /93.3E-3/                                               CURR  18
      BWIGN(A,XM,XG)=1.0/CMPLX(A-XM**2,XM*XG)                           CURR  19
C                                                                       CURR  20
C --- masses and constants                                              CURR  21
cam   rho' taken as in Dolinsky et al (PhysLett B174 (1986) 453)        CURR  22
cam   (best fit to Argus data)                                          CURR  23
      G1=12.924                                                         CURR  24
      G2=1475.98                                                        CURR  25
      G =G1*G2                                                          CURR  26
cam   ELPHA=-.1                                                         CURR  27
cam   AMROP=1.7                                                         CURR  28
cam   GAMROP=0.26                                                       CURR  29
      ELPHA= .02                                                        CURR  30
      AMROP=1.250                                                       CURR  31
      GAMROP=0.125                                                      CURR  32
      AMOM=.782                                                         CURR  33
      GAMOM=0.0085                                                      CURR  34
cam   ARFLAT=1.0                                                        CURR  35
cam   AROMEG=1.0                                                        CURR  36
      ARFLAT=1.3                                                        CURR  37
      AROMEG=2.0                                                        CURR  38
C                                                                       CURR  39
      FRO=0.266*AMRO**2                                                 CURR  40
      COEF1=2.0*SQRT(3.0)/FPI**2*ARFLAT                                 CURR  41
      COEF2=FRO*G*AROMEG                                                CURR  42
C --- initialization of four vectors                                    CURR  43
      DO 7 K=1,4                                                        CURR  44
      DO 8 L=1,4                                                        CURR  45
 8    AA(K,L)=0.0                                                       CURR  46
      HADCUR(K)=CMPLX(0.0)                                              CURR  47
      PAA(K)=PIM1(K)+PIM2(K)+PIM3(K)+PIM4(K)                            CURR  48
      PP(1,K)=PIM1(K)                                                   CURR  49
      PP(2,K)=PIM2(K)                                                   CURR  50
      PP(3,K)=PIM3(K)                                                   CURR  51
 7    PP(4,K)=PIM4(K)                                                   CURR  52
C                                                                       CURR  53
      IF (MNUM.EQ.1) THEN                                               CURR  54
C ===================================================================   CURR  55
C pi- pi- p0 pi+ case                                            ====   CURR  56
C ===================================================================   CURR  57
       QQ=PAA(4)**2-PAA(3)**2-PAA(2)**2-PAA(1)**2                       CURR  58
C --- loop over thre contribution of the non-omega current              CURR  59
       DO 201 K=1,3                                                     CURR  60
        SK=(PP(K,4)+PIM4(4))**2-(PP(K,3)+PIM4(3))**2                    CURR  61
     $    -(PP(K,2)+PIM4(2))**2-(PP(K,1)+PIM4(1))**2                    CURR  62
C -- definition of AA matrix                                            CURR  63
C -- cronecker delta                                                    CURR  64
        DO 202 I=1,4                                                    CURR  65
         DO 203 J=1,4                                                   CURR  66
 203     AA(I,J)=0.0                                                    CURR  67
 202    AA(I,I)=1.0                                                     CURR  68
C ... and the rest ...                                                  CURR  69
        DO 204 L=1,3                                                    CURR  70
         IF (L.NE.K) THEN                                               CURR  71
          DENOM=(PAA(4)-PP(L,4))**2-(PAA(3)-PP(L,3))**2                 CURR  72
     $         -(PAA(2)-PP(L,2))**2-(PAA(1)-PP(L,1))**2                 CURR  73
          DO 205 I=1,4                                                  CURR  74
          DO 205 J=1,4                                                  CURR  75
                      SIG= 1.0                                          CURR  76
           IF(J.NE.4) SIG=-SIG                                          CURR  77
           AA(I,J)=AA(I,J)                                              CURR  78
     $            -SIG*(PAA(I)-2.0*PP(L,I))*(PAA(J)-PP(L,J))/DENOM      CURR  79
 205      CONTINUE                                                      CURR  80
         ENDIF                                                          CURR  81
 204    CONTINUE                                                        CURR  82
C --- let's add something to HADCURR                                    CURR  83
cam     FORM1= FPIKM(SQRT(SK),AMPI,AMPI) *FPIKM(SQRT(QQ),AMPI,AMPI)     CURR  84
C       FORM1= FPIKM(SQRT(SK),AMPI,AMPI) *FPIKMD(SQRT(QQ),AMPI,AMPI)    CURR  85
        FORM1=WIGFOR(SK,AMRO,GAMRO)                                     CURR  86
C                                                                       CURR  87
       FIX=1.0                                                          CURR  88
       IF (K.EQ.3) FIX=-2.0                                             CURR  89
       DO 206 I=1,4                                                     CURR  90
       DO 206 J=1,4                                                     CURR  91
        HADCUR(I)=                                                      CURR  92
     $  HADCUR(I)+CMPLX(FIX*COEF1)*FORM1*AA(I,J)*(PP(K,J)-PP(4,J))      CURR  93
 206   CONTINUE                                                         CURR  94
C --- end of the non omega current (3 possibilities)                    CURR  95
 201   CONTINUE                                                         CURR  96
C                                                                       CURR  97
C                                                                       CURR  98
C --- there are two possibilities for omega current                     CURR  99
C --- PA PB are corresponding first and second pi-'s                    CURR 100
       DO 301 KK=1,2                                                    CURR 101
        DO 302 I=1,4                                                    CURR 102
         PA(I)=PP(KK,I)                                                 CURR 103
         PB(I)=PP(3-KK,I)                                               CURR 104
 302    CONTINUE                                                        CURR 105
C --- lorentz invariants                                                CURR 106
         QQA=0.0                                                        CURR 107
         SS23=0.0                                                       CURR 108
         SS24=0.0                                                       CURR 109
         SS34=0.0                                                       CURR 110
         QP1P2=0.0                                                      CURR 111
         QP1P3=0.0                                                      CURR 112
         QP1P4=0.0                                                      CURR 113
         P1P2 =0.0                                                      CURR 114
         P1P3 =0.0                                                      CURR 115
         P1P4 =0.0                                                      CURR 116
        DO 303 K=1,4                                                    CURR 117
                     SIGN=-1.0                                          CURR 118
         IF (K.EQ.4) SIGN= 1.0                                          CURR 119
         QQA=QQA+SIGN*(PAA(K)-PA(K))**2                                 CURR 120
         SS23=SS23+SIGN*(PB(K)  +PIM3(K))**2                            CURR 121
         SS24=SS24+SIGN*(PB(K)  +PIM4(K))**2                            CURR 122
         SS34=SS34+SIGN*(PIM3(K)+PIM4(K))**2                            CURR 123
         QP1P2=QP1P2+SIGN*(PAA(K)-PA(K))*PB(K)                          CURR 124
         QP1P3=QP1P3+SIGN*(PAA(K)-PA(K))*PIM3(K)                        CURR 125
         QP1P4=QP1P4+SIGN*(PAA(K)-PA(K))*PIM4(K)                        CURR 126
         P1P2=P1P2+SIGN*PA(K)*PB(K)                                     CURR 127
         P1P3=P1P3+SIGN*PA(K)*PIM3(K)                                   CURR 128
         P1P4=P1P4+SIGN*PA(K)*PIM4(K)                                   CURR 129
 303    CONTINUE                                                        CURR 130
C                                                                       CURR 131
        FORM2=COEF2*(BWIGN(QQ,AMRO,GAMRO)+ELPHA*BWIGN(QQ,AMROP,GAMROP)) CURR 132
C        FORM3=BWIGN(QQA,AMOM,GAMOM)*(BWIGN(SS23,AMRO,GAMRO)+           CURR 133
C     $        BWIGN(SS24,AMRO,GAMRO)+BWIGN(SS34,AMRO,GAMRO))           CURR 134
        FORM3=BWIGN(QQA,AMOM,GAMOM)                                     CURR 135
C                                                                       CURR 136
        DO 304 K=1,4                                                    CURR 137
         HADCUR(K)=HADCUR(K)+FORM2*FORM3*(                              CURR 138
     $             PB  (K)*(QP1P3*P1P4-QP1P4*P1P3)                      CURR 139
     $            +PIM3(K)*(QP1P4*P1P2-QP1P2*P1P4)                      CURR 140
     $            +PIM4(K)*(QP1P2*P1P3-QP1P3*P1P2) )                    CURR 141
 304    CONTINUE                                                        CURR 142
 301   CONTINUE                                                         CURR 143
C                                                                       CURR 144
      ELSE                                                              CURR 145
C ===================================================================   CURR 146
C pi0 pi0 p0 pi- case                                            ====   CURR 147
C ===================================================================   CURR 148
       QQ=PAA(4)**2-PAA(3)**2-PAA(2)**2-PAA(1)**2                       CURR 149
       DO 101 K=1,3                                                     CURR 150
C --- loop over thre contribution of the non-omega current              CURR 151
        SK=(PP(K,4)+PIM4(4))**2-(PP(K,3)+PIM4(3))**2                    CURR 152
     $    -(PP(K,2)+PIM4(2))**2-(PP(K,1)+PIM4(1))**2                    CURR 153
C -- definition of AA matrix                                            CURR 154
C -- cronecker delta                                                    CURR 155
        DO 102 I=1,4                                                    CURR 156
         DO 103 J=1,4                                                   CURR 157
 103     AA(I,J)=0.0                                                    CURR 158
 102    AA(I,I)=1.0                                                     CURR 159
C                                                                       CURR 160
C ... and the rest ...                                                  CURR 161
        DO 104 L=1,3                                                    CURR 162
         IF (L.NE.K) THEN                                               CURR 163
          DENOM=(PAA(4)-PP(L,4))**2-(PAA(3)-PP(L,3))**2                 CURR 164
     $         -(PAA(2)-PP(L,2))**2-(PAA(1)-PP(L,1))**2                 CURR 165
          DO 105 I=1,4                                                  CURR 166
          DO 105 J=1,4                                                  CURR 167
                      SIG=1.0                                           CURR 168
           IF(J.NE.4) SIG=-SIG                                          CURR 169
           AA(I,J)=AA(I,J)                                              CURR 170
     $            -SIG*(PAA(I)-2.0*PP(L,I))*(PAA(J)-PP(L,J))/DENOM      CURR 171
 105      CONTINUE                                                      CURR 172
         ENDIF                                                          CURR 173
 104    CONTINUE                                                        CURR 174
C --- let's add something to HADCURR                                    CURR 175
cam     FORM1= FPIKM(SQRT(SK),AMPI,AMPI) *FPIKM(SQRT(QQ),AMPI,AMPI)     CURR 176
C       FORM1= FPIKM(SQRT(SK),AMPI,AMPI) *FPIKMD(SQRT(QQ),AMPI,AMPI)    CURR 177
        FORM1=WIGFOR(SK,AMRO,GAMRO)                                     CURR 178
        DO 106 I=1,4                                                    CURR 179
        DO 106 J=1,4                                                    CURR 180
         HADCUR(I)=                                                     CURR 181
     $   HADCUR(I)+CMPLX(COEF1)*FORM1*AA(I,J)*(PP(K,J)-PP(4,J))         CURR 182
 106    CONTINUE                                                        CURR 183
C --- end of the non omega current (3 possibilities)                    CURR 184
 101   CONTINUE                                                         CURR 185
      ENDIF                                                             CURR 186
      END                                                               CURR 187
      FUNCTION WIGFOR(S,XM,XGAM)                                        WIGFOR 2
      COMPLEX WIGFOR,WIGNOR                                             WIGFOR 3
      WIGNOR=CMPLX(-XM**2,XM*XGAM)                                      WIGFOR 4
      WIGFOR=WIGNOR/CMPLX(S-XM**2,XM*XGAM)                              WIGFOR 5
      END                                                               WIGFOR 6
C=============================================================          WIGFOR 7
      SUBROUTINE JAKER(JAK)                                             JAKER  2
C     *********************                                             JAKER  3
C                                                                       JAKER  4
C **********************************************************************JAKER  5
C                                                                      *JAKER  6
C           *********TAUOLA LIBRARY: VERSION 2.5 ********              *JAKER  7
C           **************DECEMBER 1993******************              *JAKER  8
C           **      AUTHORS: S.JADACH, Z.WAS        *****              *JAKER  9
C           **  R. DECKER, M. JEZABEK, J.H.KUEHN,   *****              *JAKER 10
C           ********AVAILABLE FROM: WASM AT CERNVM ******              *JAKER 11
C           *******PUBLISHED IN COMP. PHYS. COMM.********              *JAKER 12
C           *** PREPRINT CERN-TH-5856 SEPTEMBER 1990 ****              *JAKER 13
C           *** PREPRINT CERN-TH-6195 OCTOBER   1991 ****              *JAKER 14
C           *** PREPRINT CERN-TH-6793 NOVEMBER  1992 ****              *JAKER 15
C **********************************************************************JAKER 16
C                                                                       JAKER 17
C ----------------------------------------------------------------------JAKER 18
c SUBROUTINE JAKER,                                                     JAKER 19
C CHOOSES DECAY MODE ACCORDING TO LIST OF BRANCHING RATIOS              JAKER 20
C JAK=1 ELECTRON MODE                                                   JAKER 21
C JAK=2 MUON MODE                                                       JAKER 22
C JAK=3 PION MODE                                                       JAKER 23
C JAK=4 RHO  MODE                                                       JAKER 24
C JAK=5 A1   MODE                                                       JAKER 25
C JAK=6 K    MODE                                                       JAKER 26
C JAK=7 K*   MODE                                                       JAKER 27
C JAK=8-13 npi modes                                                    JAKER 28
C JAK=14-19 KKpi & Kpipi modes                                          JAKER 29
C JAK=20-21 eta pi pi; gamma pi pi modes                                JAKER 30
C                                                                       JAKER 31
C     called by : DEXAY                                                 JAKER 32
C ----------------------------------------------------------------------JAKER 33
      COMMON / TAUBRA / GAMPRT(30),JLIST(30),NCHAN                      TAUBRA 2
      REAL   CUMUL(30)                                                  JAKER 35
C                                                                       JAKER 36
      IF(NCHAN.LE.0.OR.NCHAN.GT.30) GOTO 902                            JAKER 37
      CALL RANMAR(RRR,1)                                                JAKER 38
      SUM=0                                                             JAKER 39
      DO 20 I=1,NCHAN                                                   JAKER 40
      SUM=SUM+GAMPRT(I)                                                 JAKER 41
  20  CUMUL(I)=SUM                                                      JAKER 42
      DO 25 I=NCHAN,1,-1                                                JAKER 43
      IF(RRR.LT.CUMUL(I)/CUMUL(NCHAN)) JI=I                             JAKER 44
  25  CONTINUE                                                          JAKER 45
      JAK=JLIST(JI)                                                     JAKER 46
      RETURN                                                            JAKER 47
 902  PRINT 9020                                                        JAKER 48
 9020 FORMAT(' ----- JAKER: WRONG NCHAN')                               JAKER 49
      STOP                                                              JAKER 50
      END                                                               JAKER 51
      SUBROUTINE DEKAY(KTO,HX)                                          DEKAY  2
C     ***********************                                           DEKAY  3
C THIS DEKAY IS IN SPIRIT OF THE 'DECAY' WHICH                          DEKAY  4
C WAS INCLUDED IN KORAL-B PROGRAM, COMP. PHYS. COMMUN.                  DEKAY  5
C VOL. 36 (1985) 191, SEE COMMENTS  ON GENERAL PHILOSOPHY THERE.        DEKAY  6
C KTO=0 INITIALISATION (OBLIGATORY)                                     DEKAY  7
C KTO=1,11 DENOTES TAU+ AND KTO=2,12 TAU-                               DEKAY  8
C DEKAY(1,H) AND DEKAY(2,H) IS CALLED INTERNALLY BY MC GENERATOR.       DEKAY  9
C H DENOTES THE POLARIMETRIC VECTOR, USED BY THE HOST PROGRAM FOR       DEKAY 10
C CALCULATION OF THE SPIN WEIGHT.                                       DEKAY 11
C USER MAY OPTIONALLY CALL DEKAY(11,H) DEKAY(12,H) IN ORDER             DEKAY 12
C TO TRANSFORM DECAY PRODUCTS TO CMS AND WRITE LUND RECORD IN /LUJETS/. DEKAY 13
C KTO=100, PRINT FINAL REPORT  (OPTIONAL).                              DEKAY 14
C DECAY MODES:                                                          DEKAY 15
C JAK=1 ELECTRON DECAY                                                  DEKAY 16
C JAK=2 MU  DECAY                                                       DEKAY 17
C JAK=3 PI  DECAY                                                       DEKAY 18
C JAK=4 RHO DECAY                                                       DEKAY 19
C JAK=5 A1  DECAY                                                       DEKAY 20
C JAK=6 K   DECAY                                                       DEKAY 21
C JAK=7 K*  DECAY                                                       DEKAY 22
C JAK= 8-13 npi modes                                                   DEKAY 23
C JAK=14-19 KKpi & Kpipi modes                                          DEKAY 24
C JAK=20-21 eta pi pi; gamma pi pi modes                                DEKAY 25
C JAK=0 INCLUSIVE:  JAK=1-21                                            DEKAY 26
      REAL  H(4)                                                        DEKAY 27
      REAL*8 HX(4)                                                      DEKAY 28
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / IDFC  / IDFF                                             IDFC   2
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4),PDUM5(4),HDUM(4)        DEKAY 34
      REAL  PDUMX(4,9)                                                  DEKAY 35
      DATA IWARM/0/                                                     DEKAY 36
      KTOM=KTO                                                          DEKAY 37
      IDF =IDFF                                                         DEKAY 38
      IF(KTO.EQ.-1) THEN                                                DEKAY 39
C     ==================                                                DEKAY 40
C       INITIALISATION OR REINITIALISATION                              DEKAY 41
        KTOM=1                                                          DEKAY 42
        IF (IWARM.EQ.1) X=5/(IWARM-1)                                   DEKAY 43
        IWARM=1                                                         DEKAY 44
        WRITE(IOUT,7001) JAK1,JAK2                                      DEKAY 45
        NEVTOT=0                                                        DEKAY 46
        NEV1=0                                                          DEKAY 47
        NEV2=0                                                          DEKAY 48
        IF(JAK1.NE.-1.OR.JAK2.NE.-1) THEN                               DEKAY 49
          CALL DADMEL(-1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)       DEKAY 50
          CALL DADMMU(-1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)       DEKAY 51
          CALL DADMPI(-1,IDUM,PDUM,PDUM1,PDUM2)                         DEKAY 52
          CALL DADMRO(-1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4)             DEKAY 53
          CALL DADMAA(-1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5,JDUM)  DEKAY 54
          CALL DADMKK(-1,IDUM,PDUM,PDUM1,PDUM2)                         DEKAY 55
          CALL DADMKS(-1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,JDUM)        DEKAY 56
          CALL DADNEW(-1,IDUM,HDUM,PDUM1,PDUM2,PDUMX,JDUM)              DEKAY 57
        ENDIF                                                           DEKAY 58
        DO 21 I=1,30                                                    DEKAY 59
        NEVDEC(I)=0                                                     DEKAY 60
        GAMPMC(I)=0                                                     DEKAY 61
 21     GAMPER(I)=0                                                     DEKAY 62
      ELSEIF(KTO.EQ.1) THEN                                             DEKAY 63
C     =====================                                             DEKAY 64
C DECAY OF TAU+ IN THE TAU REST FRAME                                   DEKAY 65
        NEVTOT=NEVTOT+1                                                 DEKAY 66
        IF(IWARM.EQ.0) GOTO 902                                         DEKAY 67
        ISGN= IDF/IABS(IDF)                                             DEKAY 68
        CALL DEKAY1(0,H,ISGN)                                           DEKAY 69
      ELSEIF(KTO.EQ.2) THEN                                             DEKAY 70
C     =================================                                 DEKAY 71
C DECAY OF TAU- IN THE TAU REST FRAME                                   DEKAY 72
        NEVTOT=NEVTOT+1                                                 DEKAY 73
        IF(IWARM.EQ.0) GOTO 902                                         DEKAY 74
        ISGN=-IDF/IABS(IDF)                                             DEKAY 75
        CALL DEKAY2(0,H,ISGN)                                           DEKAY 76
      ELSEIF(KTO.EQ.11) THEN                                            DEKAY 77
C     ======================                                            DEKAY 78
C REST OF DECAY PROCEDURE FOR ACCEPTED TAU+ DECAY                       DEKAY 79
        NEV1=NEV1+1                                                     DEKAY 80
        ISGN= IDF/IABS(IDF)                                             DEKAY 81
        CALL DEKAY1(1,H,ISGN)                                           DEKAY 82
      ELSEIF(KTO.EQ.12) THEN                                            DEKAY 83
C     ======================                                            DEKAY 84
C REST OF DECAY PROCEDURE FOR ACCEPTED TAU- DECAY                       DEKAY 85
        NEV2=NEV2+1                                                     DEKAY 86
        ISGN=-IDF/IABS(IDF)                                             DEKAY 87
        CALL DEKAY2(1,H,ISGN)                                           DEKAY 88
      ELSEIF(KTO.EQ.100) THEN                                           DEKAY 89
C     =======================                                           DEKAY 90
        IF(JAK1.NE.-1.OR.JAK2.NE.-1) THEN                               DEKAY 91
          CALL DADMEL( 1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)       DEKAY 92
          CALL DADMMU( 1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)       DEKAY 93
          CALL DADMPI( 1,IDUM,PDUM,PDUM1,PDUM2)                         DEKAY 94
          CALL DADMRO( 1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4)             DEKAY 95
          CALL DADMAA( 1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5,JDUM)  DEKAY 96
          CALL DADMKK( 1,IDUM,PDUM,PDUM1,PDUM2)                         DEKAY 97
          CALL DADMKS( 1,IDUM,HDUM,PDUM1,PDUM2,PDUM3,PDUM4,JDUM)        DEKAY 98
          CALL DADNEW( 1,IDUM,HDUM,PDUM1,PDUM2,PDUMX,JDUM)              DEKAY 99
          WRITE(IOUT,7010) NEV1,NEV2,NEVTOT                             DEKAY100
          WRITE(IOUT,7011) (NEVDEC(I),GAMPMC(I),GAMPER(I),I= 1,7)       DEKAY101
          WRITE(IOUT,7012)                                              DEKAY102
     $         (NEVDEC(I),GAMPMC(I),GAMPER(I),NAMES(I-7),I=8,7+NMODE)   DEKAY103
          WRITE(IOUT,7013)                                              DEKAY104
        ENDIF                                                           DEKAY105
      ELSE                                                              DEKAY106
C     ====                                                              DEKAY107
        GOTO 910                                                        DEKAY108
      ENDIF                                                             DEKAY109
C     =====                                                             DEKAY110
        DO 78 K=1,4                                                     DEKAY111
 78     HX(K)=H(K)                                                      DEKAY112
      RETURN                                                            DEKAY113
                                                                        DEKAY114
 7001 FORMAT(///1X,15(5H*****)                                          DEKAY115
     $ /,' *',     25X,'*****TAUOLA LIBRARY: VERSION 2.5 ******',9X,1H*,DEKAY116
     $ /,' *',     25X,'***********DECEMBER 1993***************',9X,1H*,DEKAY117
     $ /,' *',     25X,'**AUTHORS: S.JADACH, Z.WAS*************',9X,1H*,DEKAY118
     $ /,' *',     25X,'**R. DECKER, M. JEZABEK, J.H.KUEHN*****',9X,1H*,DEKAY119
     $ /,' *',     25X,'**AVAILABLE FROM: WASM AT CERNVM ******',9X,1H*,DEKAY120
     $ /,' *',     25X,'***** PUBLISHED IN COMP. PHYS. COMM.***',9X,1H*,DEKAY121
     $ /,' *',     25X,'*******CERN-TH-5856 SEPTEMBER 1990*****',9X,1H*,DEKAY122
     $ /,' *',     25X,'*******CERN-TH-6195 SEPTEMBER 1991*****',9X,1H*,DEKAY123
     $ /,' *',     25X,'*******CERN TH-6793 NOVEMBER  1992*****',9X,1H*,DEKAY124
     $ /,' *',     25X,'**5 or more pi dec.: precision limited ',9X,1H*,DEKAY125
     $ /,' *',     25X,'****DEKAY ROUTINE: INITIALIZATION******',9X,1H*,DEKAY126
     $ /,' *',I20  ,5X,'JAK1   = DECAY MODE TAU+               ',9X,1H*,DEKAY127
     $ /,' *',I20  ,5X,'JAK2   = DECAY MODE TAU-               ',9X,1H*,DEKAY128
     $  /,1X,15(5H*****)/)                                              DEKAY129
 7010 FORMAT(///1X,15(5H*****)                                          DEKAY130
     $ /,' *',     25X,'*****TAUOLA LIBRARY: VERSION 2.5 ******',9X,1H*,DEKAY131
     $ /,' *',     25X,'***********DECEMBER 1993***************',9X,1H*,DEKAY132
     $ /,' *',     25X,'**AUTHORS: S.JADACH, Z.WAS*************',9X,1H*,DEKAY133
     $ /,' *',     25X,'**R. DECKER, M. JEZABEK, J.H.KUEHN*****',9X,1H*,DEKAY134
     $ /,' *',     25X,'**AVAILABLE FROM: WASM AT CERNVM ******',9X,1H*,DEKAY135
     $ /,' *',     25X,'***** PUBLISHED IN COMP. PHYS. COMM.***',9X,1H*,DEKAY136
     $ /,' *',     25X,'*******CERN-TH-5856 SEPTEMBER 1990*****',9X,1H*,DEKAY137
     $ /,' *',     25X,'*******CERN-TH-6195 SEPTEMBER 1991*****',9X,1H*,DEKAY138
     $ /,' *',     25X,'*******CERN TH-6793 NOVEMBER  1992*****',9X,1H*,DEKAY139
     $ /,' *',     25X,'*****DEKAY ROUTINE: FINAL REPORT*******',9X,1H*,DEKAY140
     $ /,' *',I20  ,5X,'NEV1   = NO. OF TAU+ DECS. ACCEPTED    ',9X,1H*,DEKAY141
     $ /,' *',I20  ,5X,'NEV2   = NO. OF TAU- DECS. ACCEPTED    ',9X,1H*,DEKAY142
     $ /,' *',I20  ,5X,'NEVTOT = SUM                           ',9X,1H*,DEKAY143
     $ /,' *','    NOEVTS ',                                            DEKAY144
     $   ' PART.WIDTH     ERROR       ROUTINE    DECAY MODE    ',9X,1H*)DEKAY145
 7011 FORMAT(1X,'*'                                                     DEKAY146
     $       ,I10,2F12.7       ,'     DADMEL     ELECTRON      ',9X,1H* DEKAY147
     $ /,' *',I10,2F12.7       ,'     DADMMU     MUON          ',9X,1H* DEKAY148
     $ /,' *',I10,2F12.7       ,'     DADMPI     PION          ',9X,1H* DEKAY149
     $ /,' *',I10,2F12.7,       '     DADMRO     RHO (->2PI)   ',9X,1H* DEKAY150
     $ /,' *',I10,2F12.7,       '     DADMAA     A1  (->3PI)   ',9X,1H* DEKAY151
     $ /,' *',I10,2F12.7,       '     DADMKK     KAON          ',9X,1H* DEKAY152
     $ /,' *',I10,2F12.7,       '     DADMKS     K*            ',9X,1H*)DEKAY153
 7012 FORMAT(1X,'*'                                                     DEKAY154
     $       ,I10,2F12.7,A31                                    ,8X,1H*)DEKAY155
 7013 FORMAT(1X,'*'                                                     DEKAY156
     $       ,20X,'THE ERROR IS RELATIVE AND  PART.WIDTH      ',10X,1H* DEKAY157
     $ /,' *',20X,'IN UNITS GFERMI**2*MASS**5/192/PI**3       ',10X,1H* DEKAY158
     $  /,1X,15(5H*****)/)                                              DEKAY159
 902  PRINT 9020                                                        DEKAY160
 9020 FORMAT(' ----- DEKAY: LACK OF INITIALISATION')                    DEKAY161
      STOP                                                              DEKAY162
 910  PRINT 9100                                                        DEKAY163
 9100 FORMAT(' ----- DEKAY: WRONG VALUE OF KTO ')                       DEKAY164
      STOP                                                              DEKAY165
      END                                                               DEKAY166
      SUBROUTINE DEKAY1(IMOD,HH,ISGN)                                   DEKAY1 2
C     *******************************                                   DEKAY1 3
C THIS ROUTINE  SIMULATES TAU+  DECAY                                   DEKAY1 4
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / DECP4 / PP1(4),PP2(4),KFF1,KFF2                          DECP4  2
      REAL*4           PP1   ,PP2                                       DECP4  3
      INTEGER                        KFF1,KFF2                          DECP4  4
      REAL  HH(4)                                                       DEKAY1 8
      REAL  HV(4),PNU(4),PPI(4)                                         DEKAY1 9
      REAL  PWB(4),PMU(4),PNM(4)                                        DEKAY110
      REAL  PRHO(4),PIC(4),PIZ(4)                                       DEKAY111
      REAL  PAA(4),PIM1(4),PIM2(4),PIPL(4)                              DEKAY112
      REAL  PKK(4),PKS(4)                                               DEKAY113
      REAL  PNPI(4,9)                                                   DEKAY114
      REAL  PHOT(4)                                                     DEKAY115
      REAL  PDUM(4)                                                     DEKAY116
      DATA NEV,NPRIN/0,10/                                              DEKAY117
      KTO=1                                                             DEKAY118
      IF(JAK1.EQ.-1) RETURN                                             DEKAY119
      IMD=IMOD                                                          DEKAY120
      IF(IMD.EQ.0) THEN                                                 DEKAY121
C     =================                                                 DEKAY122
      JAK=JAK1                                                          DEKAY123
      IF(JAK1.EQ.0) CALL JAKER(JAK)                                     DEKAY124
      IF(JAK.EQ.1) THEN                                                 DEKAY125
        CALL DADMEL(0, ISGN,HV,PNU,PWB,PMU,PNM,PHOT)                    DEKAY126
      ELSEIF(JAK.EQ.2) THEN                                             DEKAY127
        CALL DADMMU(0, ISGN,HV,PNU,PWB,PMU,PNM,PHOT)                    DEKAY128
      ELSEIF(JAK.EQ.3) THEN                                             DEKAY129
        CALL DADMPI(0, ISGN,HV,PPI,PNU)                                 DEKAY130
      ELSEIF(JAK.EQ.4) THEN                                             DEKAY131
        CALL DADMRO(0, ISGN,HV,PNU,PRHO,PIC,PIZ)                        DEKAY132
      ELSEIF(JAK.EQ.5) THEN                                             DEKAY133
        CALL DADMAA(0, ISGN,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)              DEKAY134
      ELSEIF(JAK.EQ.6) THEN                                             DEKAY135
        CALL DADMKK(0, ISGN,HV,PKK,PNU)                                 DEKAY136
      ELSEIF(JAK.EQ.7) THEN                                             DEKAY137
        CALL DADMKS(0, ISGN,HV,PNU,PKS ,PKK,PPI,JKST)                   DEKAY138
      ELSE                                                              DEKAY139
        CALL DADNEW(0, ISGN,HV,PNU,PWB,PNPI,JAK-7)                      DEKAY140
      ENDIF                                                             DEKAY141
      DO 33 I=1,3                                                       DEKAY142
 33   HH(I)=HV(I)                                                       DEKAY143
      HH(4)=1.0                                                         DEKAY144
                                                                        DEKAY145
      ELSEIF(IMD.EQ.1) THEN                                             DEKAY146
C     =====================                                             DEKAY147
      NEV=NEV+1                                                         DEKAY148
        IF (JAK.LT.31) THEN                                             DEKAY149
           NEVDEC(JAK)=NEVDEC(JAK)+1                                    DEKAY150
         ENDIF                                                          DEKAY151
      DO 34 I=1,4                                                       DEKAY152
 34   PDUM(I)=.0                                                        DEKAY153
      IF(JAK.EQ.1) THEN                                                 DEKAY154
        CALL DWLUEL(1,ISGN,PNU,PWB,PMU,PNM)                             DEKAY155
        CALL DWRPH(KTOM,PHOT)                                           DEKAY156
        DO 10 I=1,4                                                     DEKAY157
 10     PP1(I)=PMU(I)                                                   DEKAY158
                                                                        DEKAY159
      ELSEIF(JAK.EQ.2) THEN                                             DEKAY160
        CALL DWLUMU(1,ISGN,PNU,PWB,PMU,PNM)                             DEKAY161
        CALL DWRPH(KTOM,PHOT)                                           DEKAY162
        DO 20 I=1,4                                                     DEKAY163
 20     PP1(I)=PMU(I)                                                   DEKAY164
                                                                        DEKAY165
      ELSEIF(JAK.EQ.3) THEN                                             DEKAY166
        CALL DWLUPI(1,ISGN,PPI,PNU)                                     DEKAY167
        DO 30 I=1,4                                                     DEKAY168
 30     PP1(I)=PPI(I)                                                   DEKAY169
                                                                        DEKAY170
      ELSEIF(JAK.EQ.4) THEN                                             DEKAY171
        CALL DWLURO(1,ISGN,PNU,PRHO,PIC,PIZ)                            DEKAY172
        DO 40 I=1,4                                                     DEKAY173
 40     PP1(I)=PRHO(I)                                                  DEKAY174
                                                                        DEKAY175
      ELSEIF(JAK.EQ.5) THEN                                             DEKAY176
        CALL DWLUAA(1,ISGN,PNU,PAA,PIM1,PIM2,PIPL,JAA)                  DEKAY177
        DO 50 I=1,4                                                     DEKAY178
 50     PP1(I)=PAA(I)                                                   DEKAY179
      ELSEIF(JAK.EQ.6) THEN                                             DEKAY180
        CALL DWLUKK(1,ISGN,PKK,PNU)                                     DEKAY181
        DO 60 I=1,4                                                     DEKAY182
 60     PP1(I)=PKK(I)                                                   DEKAY183
      ELSEIF(JAK.EQ.7) THEN                                             DEKAY184
        CALL DWLUKS(1,ISGN,PNU,PKS,PKK,PPI,JKST)                        DEKAY185
        DO 70 I=1,4                                                     DEKAY186
 70     PP1(I)=PKS(I)                                                   DEKAY187
      ELSE                                                              DEKAY188
CAM     MULTIPION DECAY                                                 DEKAY189
        CALL DWLNEW(1,ISGN,PNU,PWB,PNPI,JAK)                            DEKAY190
        DO 80 I=1,4                                                     DEKAY191
 80     PP1(I)=PWB(I)                                                   DEKAY192
      ENDIF                                                             DEKAY193
                                                                        DEKAY194
      ENDIF                                                             DEKAY195
C     =====                                                             DEKAY196
      END                                                               DEKAY197
      SUBROUTINE DEKAY2(IMOD,HH,ISGN)                                   DEKAY2 2
C     *******************************                                   DEKAY2 3
C THIS ROUTINE  SIMULATES TAU-  DECAY                                   DEKAY2 4
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / DECP4 / PP1(4),PP2(4),KFF1,KFF2                          DECP4  2
      REAL*4           PP1   ,PP2                                       DECP4  3
      INTEGER                        KFF1,KFF2                          DECP4  4
      REAL  HH(4)                                                       DEKAY2 8
      REAL  HV(4),PNU(4),PPI(4)                                         DEKAY2 9
      REAL  PWB(4),PMU(4),PNM(4)                                        DEKAY210
      REAL  PRHO(4),PIC(4),PIZ(4)                                       DEKAY211
      REAL  PAA(4),PIM1(4),PIM2(4),PIPL(4)                              DEKAY212
      REAL  PKK(4),PKS(4)                                               DEKAY213
      REAL  PNPI(4,9)                                                   DEKAY214
      REAL  PHOT(4)                                                     DEKAY215
      REAL  PDUM(4)                                                     DEKAY216
      DATA NEV,NPRIN/0,10/                                              DEKAY217
      KTO=2                                                             DEKAY218
      IF(JAK2.EQ.-1) RETURN                                             DEKAY219
      IMD=IMOD                                                          DEKAY220
      IF(IMD.EQ.0) THEN                                                 DEKAY221
C     =================                                                 DEKAY222
      JAK=JAK2                                                          DEKAY223
      IF(JAK2.EQ.0) CALL JAKER(JAK)                                     DEKAY224
      IF(JAK.EQ.1) THEN                                                 DEKAY225
        CALL DADMEL(0, ISGN,HV,PNU,PWB,PMU,PNM,PHOT)                    DEKAY226
      ELSEIF(JAK.EQ.2) THEN                                             DEKAY227
        CALL DADMMU(0, ISGN,HV,PNU,PWB,PMU,PNM,PHOT)                    DEKAY228
      ELSEIF(JAK.EQ.3) THEN                                             DEKAY229
        CALL DADMPI(0, ISGN,HV,PPI,PNU)                                 DEKAY230
      ELSEIF(JAK.EQ.4) THEN                                             DEKAY231
        CALL DADMRO(0, ISGN,HV,PNU,PRHO,PIC,PIZ)                        DEKAY232
      ELSEIF(JAK.EQ.5) THEN                                             DEKAY233
        CALL DADMAA(0, ISGN,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)              DEKAY234
      ELSEIF(JAK.EQ.6) THEN                                             DEKAY235
        CALL DADMKK(0, ISGN,HV,PKK,PNU)                                 DEKAY236
      ELSEIF(JAK.EQ.7) THEN                                             DEKAY237
        CALL DADMKS(0, ISGN,HV,PNU,PKS ,PKK,PPI,JKST)                   DEKAY238
      ELSE                                                              DEKAY239
        CALL DADNEW(0, ISGN,HV,PNU,PWB,PNPI,JAK-7)                      DEKAY240
      ENDIF                                                             DEKAY241
      DO 33 I=1,3                                                       DEKAY242
 33   HH(I)=HV(I)                                                       DEKAY243
      HH(4)=1.0                                                         DEKAY244
      ELSEIF(IMD.EQ.1) THEN                                             DEKAY245
C     =====================                                             DEKAY246
      NEV=NEV+1                                                         DEKAY247
        IF (JAK.LT.31) THEN                                             DEKAY248
           NEVDEC(JAK)=NEVDEC(JAK)+1                                    DEKAY249
         ENDIF                                                          DEKAY250
      DO 34 I=1,4                                                       DEKAY251
 34   PDUM(I)=.0                                                        DEKAY252
      IF(JAK.EQ.1) THEN                                                 DEKAY253
        CALL DWLUEL(2,ISGN,PNU,PWB,PMU,PNM)                             DEKAY254
        CALL DWRPH(KTOM,PHOT)                                           DEKAY255
        DO 10 I=1,4                                                     DEKAY256
 10     PP2(I)=PMU(I)                                                   DEKAY257
                                                                        DEKAY258
      ELSEIF(JAK.EQ.2) THEN                                             DEKAY259
        CALL DWLUMU(2,ISGN,PNU,PWB,PMU,PNM)                             DEKAY260
        CALL DWRPH(KTOM,PHOT)                                           DEKAY261
        DO 20 I=1,4                                                     DEKAY262
 20     PP2(I)=PMU(I)                                                   DEKAY263
                                                                        DEKAY264
      ELSEIF(JAK.EQ.3) THEN                                             DEKAY265
        CALL DWLUPI(2,ISGN,PPI,PNU)                                     DEKAY266
        DO 30 I=1,4                                                     DEKAY267
 30     PP2(I)=PPI(I)                                                   DEKAY268
                                                                        DEKAY269
      ELSEIF(JAK.EQ.4) THEN                                             DEKAY270
        CALL DWLURO(2,ISGN,PNU,PRHO,PIC,PIZ)                            DEKAY271
        DO 40 I=1,4                                                     DEKAY272
 40     PP2(I)=PRHO(I)                                                  DEKAY273
                                                                        DEKAY274
      ELSEIF(JAK.EQ.5) THEN                                             DEKAY275
        CALL DWLUAA(2,ISGN,PNU,PAA,PIM1,PIM2,PIPL,JAA)                  DEKAY276
        DO 50 I=1,4                                                     DEKAY277
 50     PP2(I)=PAA(I)                                                   DEKAY278
      ELSEIF(JAK.EQ.6) THEN                                             DEKAY279
        CALL DWLUKK(2,ISGN,PKK,PNU)                                     DEKAY280
        DO 60 I=1,4                                                     DEKAY281
 60     PP1(I)=PKK(I)                                                   DEKAY282
      ELSEIF(JAK.EQ.7) THEN                                             DEKAY283
        CALL DWLUKS(2,ISGN,PNU,PKS,PKK,PPI,JKST)                        DEKAY284
        DO 70 I=1,4                                                     DEKAY285
 70     PP1(I)=PKS(I)                                                   DEKAY286
      ELSE                                                              DEKAY287
CAM     MULTIPION DECAY                                                 DEKAY288
        CALL DWLNEW(2,ISGN,PNU,PWB,PNPI,JAK)                            DEKAY289
        DO 80 I=1,4                                                     DEKAY290
 80     PP1(I)=PWB(I)                                                   DEKAY291
      ENDIF                                                             DEKAY292
C                                                                       DEKAY293
      ENDIF                                                             DEKAY294
C     =====                                                             DEKAY295
      END                                                               DEKAY296
      SUBROUTINE DEXAY(KTO,POL)                                         DEXAY  2
C ----------------------------------------------------------------------DEXAY  3
C THIS 'DEXAY' IS A ROUTINE WHICH GENERATES DECAY OF THE SINGLE         DEXAY  4
C POLARIZED TAU,  POL IS A POLARIZATION VECTOR (NOT A POLARIMETER       DEXAY  5
C VECTOR AS IN DEKAY) OF THE TAU AND IT IS AN INPUT PARAMETER.          DEXAY  6
C KTO=0 INITIALISATION (OBLIGATORY)                                     DEXAY  7
C KTO=1 DENOTES TAU+ AND KTO=2 TAU-                                     DEXAY  8
C DEXAY(1,POL) AND DEXAY(2,POL) ARE CALLED INTERNALLY BY MC GENERATOR.  DEXAY  9
C DECAY PRODUCTS ARE TRANSFORMED READILY                                DEXAY 10
C TO CMS AND WRITEN IN THE  LUND RECORD IN /LUJETS/                     DEXAY 11
C KTO=100, PRINT FINAL REPORT (OPTIONAL).                               DEXAY 12
C                                                                       DEXAY 13
C     called by : KORALZ                                                DEXAY 14
C ----------------------------------------------------------------------DEXAY 15
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / IDFC  / IDFF                                             IDFC   2
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4)                                                      DEXAY 21
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4),PDUM5(4)                DEXAY 22
      REAL  PDUM(4)                                                     DEXAY 23
      REAL  PDUMI(4,9)                                                  DEXAY 24
      DATA IWARM/0/                                                     DEXAY 25
      KTOM=KTO                                                          DEXAY 26
C                                                                       DEXAY 27
      IF(KTO.EQ.-1) THEN                                                DEXAY 28
C     ==================                                                DEXAY 29
C       INITIALISATION OR REINITIALISATION                              DEXAY 30
        IWARM=1                                                         DEXAY 31
        WRITE(IOUT, 7001) JAK1,JAK2                                     DEXAY 32
        NEVTOT=0                                                        DEXAY 33
        NEV1=0                                                          DEXAY 34
        NEV2=0                                                          DEXAY 35
        IF(JAK1.NE.-1.OR.JAK2.NE.-1) THEN                               DEXAY 36
          CALL DEXEL(-1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)        DEXAY 37
          CALL DEXMU(-1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)        DEXAY 38
          CALL DEXPI(-1,IDUM,PDUM,PDUM1,PDUM2)                          DEXAY 39
          CALL DEXRO(-1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4)              DEXAY 40
          CALL DEXAA(-1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5,IDUM)   DEXAY 41
          CALL DEXKK(-1,IDUM,PDUM,PDUM1,PDUM2)                          DEXAY 42
          CALL DEXKS(-1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,IDUM)         DEXAY 43
          CALL DEXNEW(-1,IDUM,PDUM,PDUM1,PDUM2,PDUMI,IDUM)              DEXAY 44
        ENDIF                                                           DEXAY 45
        DO 21 I=1,30                                                    DEXAY 46
        NEVDEC(I)=0                                                     DEXAY 47
        GAMPMC(I)=0                                                     DEXAY 48
 21     GAMPER(I)=0                                                     DEXAY 49
      ELSEIF(KTO.EQ.1) THEN                                             DEXAY 50
C     =====================                                             DEXAY 51
C DECAY OF TAU+ IN THE TAU REST FRAME                                   DEXAY 52
        NEVTOT=NEVTOT+1                                                 DEXAY 53
        NEV1=NEV1+1                                                     DEXAY 54
        IF(IWARM.EQ.0) GOTO 902                                         DEXAY 55
        ISGN=IDFF/IABS(IDFF)                                            DEXAY 56
CAM     CALL DEXAY1(POL,ISGN)                                           DEXAY 57
        CALL DEXAY1(KTO,JAK1,JAKP,POL,ISGN)                             DEXAY 58
      ELSEIF(KTO.EQ.2) THEN                                             DEXAY 59
C     =================================                                 DEXAY 60
C DECAY OF TAU- IN THE TAU REST FRAME                                   DEXAY 61
        NEVTOT=NEVTOT+1                                                 DEXAY 62
        NEV2=NEV2+1                                                     DEXAY 63
        IF(IWARM.EQ.0) GOTO 902                                         DEXAY 64
        ISGN=-IDFF/IABS(IDFF)                                           DEXAY 65
CAM     CALL DEXAY2(POL,ISGN)                                           DEXAY 66
        CALL DEXAY1(KTO,JAK2,JAKM,POL,ISGN)                             DEXAY 67
      ELSEIF(KTO.EQ.100) THEN                                           DEXAY 68
C     =======================                                           DEXAY 69
        IF(JAK1.NE.-1.OR.JAK2.NE.-1) THEN                               DEXAY 70
          CALL DEXEL( 1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)        DEXAY 71
          CALL DEXMU( 1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)        DEXAY 72
          CALL DEXPI( 1,IDUM,PDUM,PDUM1,PDUM2)                          DEXAY 73
          CALL DEXRO( 1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4)              DEXAY 74
          CALL DEXAA( 1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5,IDUM)   DEXAY 75
          CALL DEXKK( 1,IDUM,PDUM,PDUM1,PDUM2)                          DEXAY 76
          CALL DEXKS( 1,IDUM,PDUM,PDUM1,PDUM2,PDUM3,PDUM4,IDUM)         DEXAY 77
          CALL DEXNEW( 1,IDUM,PDUM,PDUM1,PDUM2,PDUMI,IDUM)              DEXAY 78
          WRITE(IOUT,7010) NEV1,NEV2,NEVTOT                             DEXAY 79
          WRITE(IOUT,7011) (NEVDEC(I),GAMPMC(I),GAMPER(I),I= 1,7)       DEXAY 80
          WRITE(IOUT,7012)                                              DEXAY 81
     $         (NEVDEC(I),GAMPMC(I),GAMPER(I),NAMES(I-7),I=8,7+NMODE)   DEXAY 82
          WRITE(IOUT,7013)                                              DEXAY 83
        ENDIF                                                           DEXAY 84
      ELSE                                                              DEXAY 85
        GOTO 910                                                        DEXAY 86
      ENDIF                                                             DEXAY 87
      RETURN                                                            DEXAY 88
 7001 FORMAT(///1X,15(5H*****)                                          DEXAY 89
     $ /,' *',     25X,'*****TAUOLA LIBRARY: VERSION 2.5 ******',9X,1H*,DEXAY 90
     $ /,' *',     25X,'***********DECEMBER 1993***************',9X,1H*,DEXAY 91
     $ /,' *',     25X,'**AUTHORS: S.JADACH, Z.WAS*************',9X,1H*,DEXAY 92
     $ /,' *',     25X,'**R. DECKER, M. JEZABEK, J.H.KUEHN*****',9X,1H*,DEXAY 93
     $ /,' *',     25X,'**AVAILABLE FROM: WASM AT CERNVM ******',9X,1H*,DEXAY 94
     $ /,' *',     25X,'***** PUBLISHED IN COMP. PHYS. COMM.***',9X,1H*,DEXAY 95
     $ /,' *',     25X,'*******CERN-TH-5856 SEPTEMBER 1990*****',9X,1H*,DEXAY 96
     $ /,' *',     25X,'*******CERN-TH-6195 SEPTEMBER 1991*****',9X,1H*,DEXAY 97
     $ /,' *',     25X,'*******CERN-TH-6793 NOVEMBER  1992*****',9X,1H*,DEXAY 98
     $ /,' *',     25X,'**5 or more pi dec.: precision limited ',9X,1H*,DEXAY 99
     $ /,' *',     25X,'******DEXAY ROUTINE: INITIALIZATION****',9X,1H* DEXAY100
     $ /,' *',I20  ,5X,'JAK1   = DECAY MODE FERMION1 (TAU+)    ',9X,1H* DEXAY101
     $ /,' *',I20  ,5X,'JAK2   = DECAY MODE FERMION2 (TAU-)    ',9X,1H* DEXAY102
     $  /,1X,15(5H*****)/)                                              DEXAY103
CHBU  format 7010 had more than 19 continuation lines                   DEXAY104
CHBU  split into two                                                    DEXAY105
 7010 FORMAT(///1X,15(5H*****)                                          DEXAY106
     $ /,' *',     25X,'*****TAUOLA LIBRARY: VERSION 2.5 ******',9X,1H*,DEXAY107
     $ /,' *',     25X,'***********DECEMBER 1993***************',9X,1H*,DEXAY108
     $ /,' *',     25X,'**AUTHORS: S.JADACH, Z.WAS*************',9X,1H*,DEXAY109
     $ /,' *',     25X,'**R. DECKER, M. JEZABEK, J.H.KUEHN*****',9X,1H*,DEXAY110
     $ /,' *',     25X,'**AVAILABLE FROM: WASM AT CERNVM ******',9X,1H*,DEXAY111
     $ /,' *',     25X,'***** PUBLISHED IN COMP. PHYS. COMM.***',9X,1H*,DEXAY112
     $ /,' *',     25X,'*******CERN-TH-5856 SEPTEMBER 1990*****',9X,1H*,DEXAY113
     $ /,' *',     25X,'*******CERN-TH-6195 SEPTEMBER 1991*****',9X,1H*,DEXAY114
     $ /,' *',     25X,'*******CERN-TH-6793 NOVEMBER  1992*****',9X,1H*,DEXAY115
     $ /,' *',     25X,'******DEXAY ROUTINE: FINAL REPORT******',9X,1H* DEXAY116
     $ /,' *',I20  ,5X,'NEV1   = NO. OF TAU+ DECS. ACCEPTED    ',9X,1H* DEXAY117
     $ /,' *',I20  ,5X,'NEV2   = NO. OF TAU- DECS. ACCEPTED    ',9X,1H* DEXAY118
     $ /,' *',I20  ,5X,'NEVTOT = SUM                           ',9X,1H* DEXAY119
     $ /,' *','    NOEVTS ',                                            DEXAY120
     $   ' PART.WIDTH     ERROR       ROUTINE    DECAY MODE    ',9X,1H*)DEXAY121
 7011 FORMAT(1X,'*'                                                     DEXAY122
     $       ,I10,2F12.7       ,'     DADMEL     ELECTRON      ',9X,1H* DEXAY123
     $ /,' *',I10,2F12.7       ,'     DADMMU     MUON          ',9X,1H* DEXAY124
     $ /,' *',I10,2F12.7       ,'     DADMPI     PION          ',9X,1H* DEXAY125
     $ /,' *',I10,2F12.7,       '     DADMRO     RHO (->2PI)   ',9X,1H* DEXAY126
     $ /,' *',I10,2F12.7,       '     DADMAA     A1  (->3PI)   ',9X,1H* DEXAY127
     $ /,' *',I10,2F12.7,       '     DADMKK     KAON          ',9X,1H* DEXAY128
     $ /,' *',I10,2F12.7,       '     DADMKS     K*            ',9X,1H*)DEXAY129
 7012 FORMAT(1X,'*'                                                     DEXAY130
     $       ,I10,2F12.7,A31                                    ,8X,1H*)DEXAY131
 7013 FORMAT(1X,'*'                                                     DEXAY132
     $       ,20X,'THE ERROR IS RELATIVE AND  PART.WIDTH      ',10X,1H* DEXAY133
     $ /,' *',20X,'IN UNITS GFERMI**2*MASS**5/192/PI**3       ',10X,1H* DEXAY134
     $  /,1X,15(5H*****)/)                                              DEXAY135
 902  WRITE(IOUT, 9020)                                                 DEXAY136
 9020 FORMAT(' ----- DEXAY: LACK OF INITIALISATION')                    DEXAY137
      STOP                                                              DEXAY138
 910  WRITE(IOUT, 9100)                                                 DEXAY139
 9100 FORMAT(' ----- DEXAY: WRONG VALUE OF KTO ')                       DEXAY140
      STOP                                                              DEXAY141
      END                                                               DEXAY142
      SUBROUTINE DEXAY1(KTO,JAKIN,JAK,POL,ISGN)                         DEXAY1 2
C --------------------------------------------------------------------- DEXAY1 3
C THIS ROUTINE  SIMULATES TAU+-  DECAY                                  DEXAY1 4
C                                                                       DEXAY1 5
C     called by : DEXAY                                                 DEXAY1 6
C --------------------------------------------------------------------- DEXAY1 7
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),POLAR(4)                                             DEXAY110
      REAL  PNU(4),PPI(4)                                               DEXAY111
      REAL  PRHO(4),PIC(4),PIZ(4)                                       DEXAY112
      REAL  PWB(4),PMU(4),PNM(4)                                        DEXAY113
      REAL  PAA(4),PIM1(4),PIM2(4),PIPL(4)                              DEXAY114
      REAL  PKK(4),PKS(4)                                               DEXAY115
      REAL  PNPI(4,9)                                                   DEXAY116
      REAL PHOT(4)                                                      DEXAY117
      REAL PDUM(4)                                                      DEXAY118
C                                                                       DEXAY119
      IF(JAKIN.EQ.-1) RETURN                                            DEXAY120
      DO 33 I=1,3                                                       DEXAY121
 33   POLAR(I)=POL(I)                                                   DEXAY122
      POLAR(4)=0.                                                       DEXAY123
      DO 34 I=1,4                                                       DEXAY124
 34   PDUM(I)=.0                                                        DEXAY125
      JAK=JAKIN                                                         DEXAY126
      IF(JAK.EQ.0) CALL JAKER(JAK)                                      DEXAY127
CAM                                                                     DEXAY128
      IF(JAK.EQ.1) THEN                                                 DEXAY129
        CALL DEXEL(0, ISGN,POLAR,PNU,PWB,PMU,PNM,PHOT)                  DEXAY130
        CALL DWLUEL(KTO,ISGN,PNU,PWB,PMU,PNM)                           DEXAY131
        CALL DWRPH(KTO,PHOT )                                           DEXAY132
      ELSEIF(JAK.EQ.2) THEN                                             DEXAY133
        CALL DEXMU(0, ISGN,POLAR,PNU,PWB,PMU,PNM,PHOT)                  DEXAY134
        CALL DWLUMU(KTO,ISGN,PNU,PWB,PMU,PNM)                           DEXAY135
        CALL DWRPH(KTO,PHOT )                                           DEXAY136
      ELSEIF(JAK.EQ.3) THEN                                             DEXAY137
        CALL DEXPI(0, ISGN,POLAR,PPI,PNU)                               DEXAY138
        CALL DWLUPI(KTO,ISGN,PPI,PNU)                                   DEXAY139
      ELSEIF(JAK.EQ.4) THEN                                             DEXAY140
        CALL DEXRO(0, ISGN,POLAR,PNU,PRHO,PIC,PIZ)                      DEXAY141
        CALL DWLURO(KTO,ISGN,PNU,PRHO,PIC,PIZ)                          DEXAY142
      ELSEIF(JAK.EQ.5) THEN                                             DEXAY143
        CALL DEXAA(0, ISGN,POLAR,PNU,PAA,PIM1,PIM2,PIPL,JAA)            DEXAY144
        CALL DWLUAA(KTO,ISGN,PNU,PAA,PIM1,PIM2,PIPL,JAA)                DEXAY145
      ELSEIF(JAK.EQ.6) THEN                                             DEXAY146
        CALL DEXKK(0, ISGN,POLAR,PKK,PNU)                               DEXAY147
        CALL DWLUKK(KTO,ISGN,PKK,PNU)                                   DEXAY148
      ELSEIF(JAK.EQ.7) THEN                                             DEXAY149
        CALL DEXKS(0, ISGN,POLAR,PNU,PKS,PKK,PPI,JKST)                  DEXAY150
        CALL DWLUKS(KTO,ISGN,PNU,PKS,PKK,PPI,JKST)                      DEXAY151
      ELSE                                                              DEXAY152
        JNPI=JAK-7                                                      DEXAY153
        CALL DEXNEW(0, ISGN,POLAR,PNU,PWB,PNPI,JNPI)                    DEXAY154
        CALL DWLNEW(KTO,ISGN,PNU,PWB,PNPI,JAK)                          DEXAY155
      ENDIF                                                             DEXAY156
      NEVDEC(JAK)=NEVDEC(JAK)+1                                         DEXAY157
      END                                                               DEXAY158
      SUBROUTINE DEXEL(MODE,ISGN,POL,PNU,PWB,Q1,Q2,PH)                  DEXEL  2
C ----------------------------------------------------------------------DEXEL  3
C THIS SIMULATES TAU DECAY IN TAU REST FRAME                            DEXEL  4
C INTO ELECTRON AND TWO NEUTRINOS                                       DEXEL  5
C                                                                       DEXEL  6
C     called by : DEXAY,DEXAY1                                          DEXEL  7
C ----------------------------------------------------------------------DEXEL  8
      REAL  POL(4),HV(4),PWB(4),PNU(4),Q1(4),Q2(4),PH(4)                DEXEL  9
      DATA IWARM/0/                                                     DEXEL 10
C                                                                       DEXEL 11
      IF(MODE.EQ.-1) THEN                                               DEXEL 12
C     ===================                                               DEXEL 13
        IWARM=1                                                         DEXEL 14
        CALL DADMEL( -1,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXEL 15
CC      CALL HBOOK1(813,'WEIGHT DISTRIBUTION  DEXEL    $',100,0,2)      DEXEL 16
C                                                                       DEXEL 17
      ELSEIF(MODE.EQ. 0) THEN                                           DEXEL 18
C     =======================                                           DEXEL 19
300     CONTINUE                                                        DEXEL 20
        IF(IWARM.EQ.0) GOTO 902                                         DEXEL 21
        CALL DADMEL(  0,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXEL 22
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXEL 23
CC      CALL HFILL(813,WT)                                              DEXEL 24
        CALL RANMAR(RN,1)                                               DEXEL 25
        IF(RN.GT.WT) GOTO 300                                           DEXEL 26
C                                                                       DEXEL 27
      ELSEIF(MODE.EQ. 1) THEN                                           DEXEL 28
C     =======================                                           DEXEL 29
        CALL DADMEL(  1,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXEL 30
CC      CALL HPRINT(813)                                                DEXEL 31
      ENDIF                                                             DEXEL 32
C     =====                                                             DEXEL 33
      RETURN                                                            DEXEL 34
 902  PRINT 9020                                                        DEXEL 35
 9020 FORMAT(' ----- DEXEL: LACK OF INITIALISATION')                    DEXEL 36
      STOP                                                              DEXEL 37
      END                                                               DEXEL 38
      SUBROUTINE DEXMU(MODE,ISGN,POL,PNU,PWB,Q1,Q2,PH)                  DEXMU  2
C ----------------------------------------------------------------------DEXMU  3
C THIS SIMULATES TAU DECAY IN ITS REST FRAME                            DEXMU  4
C INTO MUON AND TWO NEUTRINOS                                           DEXMU  5
C OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXMU  6
C                      PWB   W-BOSON                                    DEXMU  7
C                      Q1    MUON                                       DEXMU  8
C                      Q2    MUON-NEUTRINO                              DEXMU  9
C ----------------------------------------------------------------------DEXMU 10
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),HV(4),PWB(4),PNU(4),Q1(4),Q2(4),PH(4)                DEXMU 12
      DATA IWARM/0/                                                     DEXMU 13
C                                                                       DEXMU 14
      IF(MODE.EQ.-1) THEN                                               DEXMU 15
C     ===================                                               DEXMU 16
        IWARM=1                                                         DEXMU 17
        CALL DADMMU( -1,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXMU 18
CC      CALL HBOOK1(814,'WEIGHT DISTRIBUTION  DEXMU    $',100,0,2)      DEXMU 19
C                                                                       DEXMU 20
      ELSEIF(MODE.EQ. 0) THEN                                           DEXMU 21
C     =======================                                           DEXMU 22
300     CONTINUE                                                        DEXMU 23
        IF(IWARM.EQ.0) GOTO 902                                         DEXMU 24
        CALL DADMMU(  0,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXMU 25
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXMU 26
CC      CALL HFILL(814,WT)                                              DEXMU 27
        CALL RANMAR(RN,1)                                               DEXMU 28
        IF(RN.GT.WT) GOTO 300                                           DEXMU 29
C                                                                       DEXMU 30
      ELSEIF(MODE.EQ. 1) THEN                                           DEXMU 31
C     =======================                                           DEXMU 32
        CALL DADMMU(  1,ISGN,HV,PNU,PWB,Q1,Q2,PH)                       DEXMU 33
CC      CALL HPRINT(814)                                                DEXMU 34
      ENDIF                                                             DEXMU 35
C     =====                                                             DEXMU 36
      RETURN                                                            DEXMU 37
 902  WRITE(IOUT, 9020)                                                 DEXMU 38
 9020 FORMAT(' ----- DEXMU: LACK OF INITIALISATION')                    DEXMU 39
      STOP                                                              DEXMU 40
      END                                                               DEXMU 41
      SUBROUTINE DADMEL(MODE,ISGN,HHV,PNU,PWB,Q1,Q2,PHX)                DADMEL 2
C ----------------------------------------------------------------------DADMEL 3
C                                                                       DADMEL 4
C     called by : DEXEL,(DEKAY,DEKAY1)                                  DADMEL 5
C ----------------------------------------------------------------------DADMEL 6
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*4         PHX(4)                                             DADMEL11
      REAL  HHV(4),HV(4),PWB(4),PNU(4),Q1(4),Q2(4)                      DADMEL12
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4),PDUM5(4)                DADMEL13
      REAL*4 RRR(3)                                                     DADMEL14
      REAL*8 SWT, SSWT                                                  DADMEL15
      DATA PI /3.141592653589793238462643/                              DADMEL16
      DATA IWARM/0/                                                     DADMEL17
C                                                                       DADMEL18
      IF(MODE.EQ.-1) THEN                                               DADMEL19
C     ===================                                               DADMEL20
        IWARM=1                                                         DADMEL21
        NEVRAW=0                                                        DADMEL22
        NEVACC=0                                                        DADMEL23
        NEVOVR=0                                                        DADMEL24
        SWT=0                                                           DADMEL25
        SSWT=0                                                          DADMEL26
        WTMAX=1E-20                                                     DADMEL27
        DO 15 I=1,500                                                   DADMEL28
        CALL DPHSEL(WT,HV,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)                DADMEL29
        IF(WT.GT.WTMAX/1.2) WTMAX=WT*1.2                                DADMEL30
15      CONTINUE                                                        DADMEL31
CC      CALL HBOOK1(803,'WEIGHT DISTRIBUTION  DADMEL    $',100,0,2)     DADMEL32
C                                                                       DADMEL33
      ELSEIF(MODE.EQ. 0) THEN                                           DADMEL34
C     =======================                                           DADMEL35
300     CONTINUE                                                        DADMEL36
        IF(IWARM.EQ.0) GOTO 902                                         DADMEL37
        NEVRAW=NEVRAW+1                                                 DADMEL38
        CALL DPHSEL(WT,HV,PNU,PWB,Q1,Q2,PHX)                            DADMEL39
CC      CALL HFILL(803,WT/WTMAX)                                        DADMEL40
        SWT=SWT+WT                                                      DADMEL41
        SSWT=SSWT+WT**2                                                 DADMEL42
        CALL RANMAR(RRR,3)                                              DADMEL43
        RN=RRR(1)                                                       DADMEL44
        IF(WT.GT.WTMAX) NEVOVR=NEVOVR+1                                 DADMEL45
        IF(RN*WTMAX.GT.WT) GOTO 300                                     DADMEL46
C ROTATIONS TO BASIC TAU REST FRAME                                     DADMEL47
        RR2=RRR(2)                                                      DADMEL48
        COSTHE=-1.+2.*RR2                                               DADMEL49
        THET=ACOS(COSTHE)                                               DADMEL50
        RR3=RRR(3)                                                      DADMEL51
        PHI =2*PI*RR3                                                   DADMEL52
        CALL ROTOR2(THET,PNU,PNU)                                       DADMEL53
        CALL ROTOR3( PHI,PNU,PNU)                                       DADMEL54
        CALL ROTOR2(THET,PWB,PWB)                                       DADMEL55
        CALL ROTOR3( PHI,PWB,PWB)                                       DADMEL56
        CALL ROTOR2(THET,Q1,Q1)                                         DADMEL57
        CALL ROTOR3( PHI,Q1,Q1)                                         DADMEL58
        CALL ROTOR2(THET,Q2,Q2)                                         DADMEL59
        CALL ROTOR3( PHI,Q2,Q2)                                         DADMEL60
        CALL ROTOR2(THET,HV,HV)                                         DADMEL61
        CALL ROTOR3( PHI,HV,HV)                                         DADMEL62
        CALL ROTOR2(THET,PHX,PHX)                                       DADMEL63
        CALL ROTOR3( PHI,PHX,PHX)                                       DADMEL64
        DO 44,I=1,3                                                     DADMEL65
 44     HHV(I)=-ISGN*HV(I)                                              DADMEL66
        NEVACC=NEVACC+1                                                 DADMEL67
C                                                                       DADMEL68
      ELSEIF(MODE.EQ. 1) THEN                                           DADMEL69
C     =======================                                           DADMEL70
        IF(NEVRAW.EQ.0) RETURN                                          DADMEL71
        PARGAM=SWT/FLOAT(NEVRAW+1)                                      DADMEL72
        ERROR=0                                                         DADMEL73
        IF(NEVRAW.NE.0) ERROR=SQRT(SSWT/SWT**2-1./FLOAT(NEVRAW))        DADMEL74
        RAT=PARGAM/GAMEL                                                DADMEL75
        WRITE(IOUT, 7010) NEVRAW,NEVACC,NEVOVR,PARGAM,RAT,ERROR         DADMEL76
CC      CALL HPRINT(803)                                                DADMEL77
        GAMPMC(1)=RAT                                                   DADMEL78
        GAMPER(1)=ERROR                                                 DADMEL79
CAM     NEVDEC(1)=NEVACC                                                DADMEL80
      ENDIF                                                             DADMEL81
C     =====                                                             DADMEL82
      RETURN                                                            DADMEL83
 7010 FORMAT(///1X,15(5H*****)                                          DADMEL84
     $ /,' *',     25X,'******** DADMEL FINAL REPORT  ******** ',9X,1H* DADMEL85
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF EL  DECAYS TOTAL       ',9X,1H* DADMEL86
     $ /,' *',I20  ,5X,'NEVACC = NO. OF EL   DECS. ACCEPTED    ',9X,1H* DADMEL87
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADMEL88
     $ /,' *',E20.5,5X,'PARTIAL WTDTH ( ELECTRON) IN GEV UNITS ',9X,1H* DADMEL89
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMEL90
     $ /,' *',F20.9,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADMEL91
     $ /,' *',25X,     'COMPLETE QED CORRECTIONS INCLUDED      ',9X,1H* DADMEL92
     $ /,' *',25X,     'BUT ONLY V-A CUPLINGS                  ',9X,1H* DADMEL93
     $  /,1X,15(5H*****)/)                                              DADMEL94
 902  WRITE(IOUT, 9020)                                                 DADMEL95
 9020 FORMAT(' ----- DADMEL: LACK OF INITIALISATION')                   DADMEL96
      STOP                                                              DADMEL97
      END                                                               DADMEL98
      SUBROUTINE DADMMU(MODE,ISGN,HHV,PNU,PWB,Q1,Q2,PHX)                DADMMU 2
C ----------------------------------------------------------------------DADMMU 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL*4         PHX(4)                                             DADMMU 8
      REAL  HHV(4),HV(4),PNU(4),PWB(4),Q1(4),Q2(4)                      DADMMU 9
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4),PDUM5(4)                DADMMU10
      REAL*4 RRR(3)                                                     DADMMU11
      REAL*8 SWT, SSWT                                                  DADMMU12
      DATA PI /3.141592653589793238462643/                              DADMMU13
      DATA IWARM /0/                                                    DADMMU14
C                                                                       DADMMU15
      IF(MODE.EQ.-1) THEN                                               DADMMU16
C     ===================                                               DADMMU17
        IWARM=1                                                         DADMMU18
        NEVRAW=0                                                        DADMMU19
        NEVACC=0                                                        DADMMU20
        NEVOVR=0                                                        DADMMU21
        SWT=0                                                           DADMMU22
        SSWT=0                                                          DADMMU23
        WTMAX=1E-20                                                     DADMMU24
        DO 15 I=1,500                                                   DADMMU25
        CALL DPHSMU(WT,HV,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5)                DADMMU26
        IF(WT.GT.WTMAX/1.2) WTMAX=WT*1.2                                DADMMU27
15      CONTINUE                                                        DADMMU28
CC      CALL HBOOK1(802,'WEIGHT DISTRIBUTION  DADMMU    $',100,0,2)     DADMMU29
C                                                                       DADMMU30
      ELSEIF(MODE.EQ. 0) THEN                                           DADMMU31
C     =======================                                           DADMMU32
300     CONTINUE                                                        DADMMU33
        IF(IWARM.EQ.0) GOTO 902                                         DADMMU34
        NEVRAW=NEVRAW+1                                                 DADMMU35
        CALL DPHSMU(WT,HV,PNU,PWB,Q1,Q2,PHX)                            DADMMU36
CC      CALL HFILL(802,WT/WTMAX)                                        DADMMU37
        SWT=SWT+WT                                                      DADMMU38
        SSWT=SSWT+WT**2                                                 DADMMU39
        CALL RANMAR(RRR,3)                                              DADMMU40
        RN=RRR(1)                                                       DADMMU41
        IF(WT.GT.WTMAX) NEVOVR=NEVOVR+1                                 DADMMU42
        IF(RN*WTMAX.GT.WT) GOTO 300                                     DADMMU43
C ROTATIONS TO BASIC TAU REST FRAME                                     DADMMU44
        COSTHE=-1.+2.*RRR(2)                                            DADMMU45
        THET=ACOS(COSTHE)                                               DADMMU46
        PHI =2*PI*RRR(3)                                                DADMMU47
        CALL ROTOR2(THET,PNU,PNU)                                       DADMMU48
        CALL ROTOR3( PHI,PNU,PNU)                                       DADMMU49
        CALL ROTOR2(THET,PWB,PWB)                                       DADMMU50
        CALL ROTOR3( PHI,PWB,PWB)                                       DADMMU51
        CALL ROTOR2(THET,Q1,Q1)                                         DADMMU52
        CALL ROTOR3( PHI,Q1,Q1)                                         DADMMU53
        CALL ROTOR2(THET,Q2,Q2)                                         DADMMU54
        CALL ROTOR3( PHI,Q2,Q2)                                         DADMMU55
        CALL ROTOR2(THET,HV,HV)                                         DADMMU56
        CALL ROTOR3( PHI,HV,HV)                                         DADMMU57
        CALL ROTOR2(THET,PHX,PHX)                                       DADMMU58
        CALL ROTOR3( PHI,PHX,PHX)                                       DADMMU59
        DO 44,I=1,3                                                     DADMMU60
 44     HHV(I)=-ISGN*HV(I)                                              DADMMU61
        NEVACC=NEVACC+1                                                 DADMMU62
C                                                                       DADMMU63
      ELSEIF(MODE.EQ. 1) THEN                                           DADMMU64
C     =======================                                           DADMMU65
        IF(NEVRAW.EQ.0) RETURN                                          DADMMU66
        PARGAM=SWT/FLOAT(NEVRAW+1)                                      DADMMU67
        ERROR=0                                                         DADMMU68
        IF(NEVRAW.NE.0) ERROR=SQRT(SSWT/SWT**2-1./FLOAT(NEVRAW))        DADMMU69
        RAT=PARGAM/GAMEL                                                DADMMU70
        WRITE(IOUT, 7010) NEVRAW,NEVACC,NEVOVR,PARGAM,RAT,ERROR         DADMMU71
CC      CALL HPRINT(802)                                                DADMMU72
        GAMPMC(2)=RAT                                                   DADMMU73
        GAMPER(2)=ERROR                                                 DADMMU74
CAM     NEVDEC(2)=NEVACC                                                DADMMU75
      ENDIF                                                             DADMMU76
C     =====                                                             DADMMU77
      RETURN                                                            DADMMU78
 7010 FORMAT(///1X,15(5H*****)                                          DADMMU79
     $ /,' *',     25X,'******** DADMMU FINAL REPORT  ******** ',9X,1H* DADMMU80
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF MU  DECAYS TOTAL       ',9X,1H* DADMMU81
     $ /,' *',I20  ,5X,'NEVACC = NO. OF MU   DECS. ACCEPTED    ',9X,1H* DADMMU82
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADMMU83
     $ /,' *',E20.5,5X,'PARTIAL WTDTH (MU  DECAY) IN GEV UNITS ',9X,1H* DADMMU84
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMMU85
     $ /,' *',F20.9,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADMMU86
     $ /,' *',25X,     'COMPLETE QED CORRECTIONS INCLUDED      ',9X,1H* DADMMU87
     $ /,' *',25X,     'BUT ONLY V-A CUPLINGS                  ',9X,1H* DADMMU88
     $  /,1X,15(5H*****)/)                                              DADMMU89
 902  WRITE(IOUT, 9020)                                                 DADMMU90
 9020 FORMAT(' ----- DADMMU: LACK OF INITIALISATION')                   DADMMU91
      STOP                                                              DADMMU92
      END                                                               DADMMU93
      SUBROUTINE DPHSEL(DGAMX,HVX,XNX,PAAX,QPX,XAX,PHX)                 DPHSEL 2
C XNX,XNA was flipped in parameters of dphsel and dphsmu                DPHSEL 3
C ********************************************************************* DPHSEL 4
C *   ELECTRON DECAY MODE                                             * DPHSEL 5
C ********************************************************************* DPHSEL 6
      REAL*4         PHX(4)                                             DPHSEL 7
      REAL*4  HVX(4),PAAX(4),XAX(4),QPX(4),XNX(4)                       DPHSEL 8
      REAL*8  HV(4),PH(4),PAA(4),XA(4),QP(4),XN(4)                      DPHSEL 9
      REAL*8  DGAMT                                                     DPHSEL10
      IELMU=1                                                           DPHSEL11
      CALL DRCMU(DGAMT,HV,PH,PAA,XA,QP,XN,IELMU)                        DPHSEL12
      DO 7 K=1,4                                                        DPHSEL13
        HVX(K)=HV(K)                                                    DPHSEL14
        PHX(K)=PH(K)                                                    DPHSEL15
        PAAX(K)=PAA(K)                                                  DPHSEL16
        XAX(K)=XA(K)                                                    DPHSEL17
        QPX(K)=QP(K)                                                    DPHSEL18
        XNX(K)=XN(K)                                                    DPHSEL19
  7   CONTINUE                                                          DPHSEL20
      DGAMX=DGAMT                                                       DPHSEL21
      END                                                               DPHSEL22
      SUBROUTINE DPHSMU(DGAMX,HVX,XNX,PAAX,QPX,XAX,PHX)                 DPHSMU 2
C XNX,XNA was flipped in parameters of dphsel and dphsmu                DPHSMU 3
C ********************************************************************* DPHSMU 4
C *   MUON     DECAY MODE                                             * DPHSMU 5
C ********************************************************************* DPHSMU 6
      REAL*4         PHX(4)                                             DPHSMU 7
      REAL*4  HVX(4),PAAX(4),XAX(4),QPX(4),XNX(4)                       DPHSMU 8
      REAL*8  HV(4),PH(4),PAA(4),XA(4),QP(4),XN(4)                      DPHSMU 9
      REAL*8  DGAMT                                                     DPHSMU10
      IELMU=2                                                           DPHSMU11
      CALL DRCMU(DGAMT,HV,PH,PAA,XA,QP,XN,IELMU)                        DPHSMU12
      DO 7 K=1,4                                                        DPHSMU13
        HVX(K)=HV(K)                                                    DPHSMU14
        PHX(K)=PH(K)                                                    DPHSMU15
        PAAX(K)=PAA(K)                                                  DPHSMU16
        XAX(K)=XA(K)                                                    DPHSMU17
        QPX(K)=QP(K)                                                    DPHSMU18
        XNX(K)=XN(K)                                                    DPHSMU19
  7   CONTINUE                                                          DPHSMU20
      DGAMX=DGAMT                                                       DPHSMU21
      END                                                               DPHSMU22
      SUBROUTINE DRCMU(DGAMT,HV,PH,PAA,XA,QP,XN,IELMU)                  DRCMU  2
      IMPLICIT REAL*8 (A-H,O-Z)                                         DRCMU  3
C ----------------------------------------------------------------------DRCMU  4
* IT SIMULATES E,MU CHANNELS OF TAU  DECAY IN ITS REST FRAME WITH       DRCMU  5
* QED ORDER ALPHA CORRECTIONS                                           DRCMU  6
C ----------------------------------------------------------------------DRCMU  7
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      COMMON / TAURAD / XK0DEC,ITDKRC                                   TAURAD 2
      REAL*8            XK0DEC                                          TAURAD 3
      REAL*8  HV(4),PT(4),PH(4),PAA(4),XA(4),QP(4),XN(4)                DRCMU 13
      REAL*8  PR(4)                                                     DRCMU 14
      REAL*4 RRR(6)                                                     DRCMU 15
      LOGICAL IHARD                                                     DRCMU 16
      DATA PI /3.141592653589793238462643D0/                            DRCMU 17
      XLAM(X,Y,Z)=SQRT((X-Y-Z)**2-4.0*Y*Z)                              DRCMU 18
C AMRO, GAMRO IS ONLY A PARAMETER FOR GETING HIGHT EFFICIENCY           DRCMU 19
C                                                                       DRCMU 20
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DRCMU 21
C D**3 P /2E/(2PI)**3 (2PI)**4 DELTA4(SUM P)                            DRCMU 22
      PHSPAC=1./2**17/PI**8                                             DRCMU 23
      AMTAX=AMTAU                                                       DRCMU 24
C TAU MOMENTUM                                                          DRCMU 25
      PT(1)=0.D0                                                        DRCMU 26
      PT(2)=0.D0                                                        DRCMU 27
      PT(3)=0.D0                                                        DRCMU 28
      PT(4)=AMTAX                                                       DRCMU 29
C                                                                       DRCMU 30
      CALL RANMAR(RRR,6)                                                DRCMU 31
C                                                                       DRCMU 32
        IF (IELMU.EQ.1) THEN                                            DRCMU 33
          AMU=AMEL                                                      DRCMU 34
        ELSE                                                            DRCMU 35
          AMU=AMMU                                                      DRCMU 36
        ENDIF                                                           DRCMU 37
C                                                                       DRCMU 38
        PRHARD=0.30D0                                                   DRCMU 39
        IF (  ITDKRC.EQ.0) PRHARD=0D0                                   DRCMU 40
        PRSOFT=1.-PRHARD                                                DRCMU 41
         IF(PRSOFT.LT.0.1) THEN                                         DRCMU 42
           PRINT *, 'ERROR IN DRCMU; PRSOFT=',PRSOFT                    DRCMU 43
           STOP                                                         DRCMU 44
         ENDIF                                                          DRCMU 45
C                                                                       DRCMU 46
        RR5=RRR(5)                                                      DRCMU 47
        IHARD=(RR5.GT.PRSOFT)                                           DRCMU 48
       IF (IHARD) THEN                                                  DRCMU 49
C                     TAU DECAY TO `TAU+photon'                         DRCMU 50
          RR1=RRR(1)                                                    DRCMU 51
          AMS1=(AMU+AMNUTA)**2                                          DRCMU 52
          AMS2=(AMTAX)**2                                               DRCMU 53
          XK1=1-AMS1/AMS2                                               DRCMU 54
          XL1=LOG(XK1/2/XK0DEC)                                         DRCMU 55
          XL0=LOG(2*XK0DEC)                                             DRCMU 56
          XK=EXP(XL1*RR1+XL0)                                           DRCMU 57
          AM3SQ=(1-XK)*AMS2                                             DRCMU 58
          AM3 =SQRT(AM3SQ)                                              DRCMU 59
          PHSPAC=PHSPAC*AMS2*XL1*XK                                     DRCMU 60
          PHSPAC=PHSPAC/PRHARD                                          DRCMU 61
        ELSE                                                            DRCMU 62
          AM3=AMTAX                                                     DRCMU 63
          PHSPAC=PHSPAC*2**6*PI**3                                      DRCMU 64
          PHSPAC=PHSPAC/PRSOFT                                          DRCMU 65
        ENDIF                                                           DRCMU 66
C MASS OF NEUTRINA SYSTEM                                               DRCMU 67
        RR2=RRR(2)                                                      DRCMU 68
        AMS1=(AMNUTA)**2                                                DRCMU 69
        AMS2=(AM3-AMU)**2                                               DRCMU 70
CAM                                                                     DRCMU 71
CAM                                                                     DRCMU 72
* FLAT PHASE SPACE;                                                     DRCMU 73
      AM2SQ=AMS1+   RR2*(AMS2-AMS1)                                     DRCMU 74
      AM2 =SQRT(AM2SQ)                                                  DRCMU 75
      PHSPAC=PHSPAC*(AMS2-AMS1)                                         DRCMU 76
* NEUTRINA REST FRAME, DEFINE XN AND XA                                 DRCMU 77
        ENQ1=(AM2SQ+AMNUTA**2)/(2*AM2)                                  DRCMU 78
        ENQ2=(AM2SQ-AMNUTA**2)/(2*AM2)                                  DRCMU 79
        PPI=         ENQ1**2-AMNUTA**2                                  DRCMU 80
        PPPI=SQRT(ABS(ENQ1**2-AMNUTA**2))                               DRCMU 81
        PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AM2)                               DRCMU 82
* NU TAU IN NUNU REST FRAME                                             DRCMU 83
        CALL SPHERD(PPPI,XN)                                            DRCMU 84
        XN(4)=ENQ1                                                      DRCMU 85
* NU LIGHT IN NUNU REST FRAME                                           DRCMU 86
        DO 30 I=1,3                                                     DRCMU 87
 30     XA(I)=-XN(I)                                                    DRCMU 88
        XA(4)=ENQ2                                                      DRCMU 89
* TAU' REST FRAME, DEFINE QP (muon                                      DRCMU 90
*       NUNU  MOMENTUM                                                  DRCMU 91
        PR(1)=0                                                         DRCMU 92
        PR(2)=0                                                         DRCMU 93
        PR(4)=1.D0/(2*AM3)*(AM3**2+AM2**2-AMU**2)                       DRCMU 94
        PR(3)= SQRT(ABS(PR(4)**2-AM2**2))                               DRCMU 95
        PPI  =          PR(4)**2-AM2**2                                 DRCMU 96
*       MUON MOMENTUM                                                   DRCMU 97
        QP(1)=0                                                         DRCMU 98
        QP(2)=0                                                         DRCMU 99
        QP(4)=1.D0/(2*AM3)*(AM3**2-AM2**2+AMU**2)                       DRCMU100
        QP(3)=-PR(3)                                                    DRCMU101
      PHSPAC=PHSPAC*(4*PI)*(2*PR(3)/AM3)                                DRCMU102
* NEUTRINA BOOSTED FROM THEIR FRAME TO TAU' REST FRAME                  DRCMU103
      EXE=(PR(4)+PR(3))/AM2                                             DRCMU104
      CALL BOSTD3(EXE,XN,XN)                                            DRCMU105
      CALL BOSTD3(EXE,XA,XA)                                            DRCMU106
      RR3=RRR(3)                                                        DRCMU107
      RR4=RRR(4)                                                        DRCMU108
      IF (IHARD) THEN                                                   DRCMU109
        EPS=4*(AMU/AMTAX)**2                                            DRCMU110
        XL1=LOG((2+EPS)/EPS)                                            DRCMU111
        XL0=LOG(EPS)                                                    DRCMU112
        ETA  =EXP(XL1*RR3+XL0)                                          DRCMU113
        CTHET=1+EPS-ETA                                                 DRCMU114
        THET =ACOS(CTHET)                                               DRCMU115
        PHSPAC=PHSPAC*XL1/2*ETA                                         DRCMU116
        PHI = 2*PI*RR4                                                  DRCMU117
        CALL ROTPOX(THET,PHI,XN)                                        DRCMU118
        CALL ROTPOX(THET,PHI,XA)                                        DRCMU119
        CALL ROTPOX(THET,PHI,QP)                                        DRCMU120
        CALL ROTPOX(THET,PHI,PR)                                        DRCMU121
C                                                                       DRCMU122
* NOW TO THE TAU REST FRAME, DEFINE TAU' AND GAMMA MOMENTA              DRCMU123
* tau'  MOMENTUM                                                        DRCMU124
        PAA(1)=0                                                        DRCMU125
        PAA(2)=0                                                        DRCMU126
        PAA(4)=1/(2*AMTAX)*(AMTAX**2+AM3**2)                            DRCMU127
        PAA(3)= SQRT(ABS(PAA(4)**2-AM3**2))                             DRCMU128
        PPI   =          PAA(4)**2-AM3**2                               DRCMU129
        PHSPAC=PHSPAC*(4*PI)*(2*PAA(3)/AMTAX)                           DRCMU130
* GAMMA MOMENTUM                                                        DRCMU131
        PH(1)=0                                                         DRCMU132
        PH(2)=0                                                         DRCMU133
        PH(4)=PAA(3)                                                    DRCMU134
        PH(3)=-PAA(3)                                                   DRCMU135
* ALL MOMENTA BOOSTED FROM TAU' REST FRAME TO TAU REST FRAME            DRCMU136
* Z-AXIS ANTIPARALLEL TO PHOTON MOMENTUM                                DRCMU137
        EXE=(PAA(4)+PAA(3))/AM3                                         DRCMU138
        CALL BOSTD3(EXE,XN,XN)                                          DRCMU139
        CALL BOSTD3(EXE,XA,XA)                                          DRCMU140
        CALL BOSTD3(EXE,QP,QP)                                          DRCMU141
        CALL BOSTD3(EXE,PR,PR)                                          DRCMU142
      ELSE                                                              DRCMU143
        THET =ACOS(-1.+2*RR3)                                           DRCMU144
        PHI = 2*PI*RR4                                                  DRCMU145
        CALL ROTPOX(THET,PHI,XN)                                        DRCMU146
        CALL ROTPOX(THET,PHI,XA)                                        DRCMU147
        CALL ROTPOX(THET,PHI,QP)                                        DRCMU148
        CALL ROTPOX(THET,PHI,PR)                                        DRCMU149
C                                                                       DRCMU150
* NOW TO THE TAU REST FRAME, DEFINE TAU' AND GAMMA MOMENTA              DRCMU151
* tau'  MOMENTUM                                                        DRCMU152
        PAA(1)=0                                                        DRCMU153
        PAA(2)=0                                                        DRCMU154
        PAA(4)=AMTAX                                                    DRCMU155
        PAA(3)=0                                                        DRCMU156
* GAMMA MOMENTUM                                                        DRCMU157
        PH(1)=0                                                         DRCMU158
        PH(2)=0                                                         DRCMU159
        PH(4)=0                                                         DRCMU160
        PH(3)=0                                                         DRCMU161
      ENDIF                                                             DRCMU162
C PARTIAL WIDTH CONSISTS OF PHASE SPACE AND AMPLITUDE                   DRCMU163
      CALL DAMPRY(ITDKRC,XK0DEC,PH,XA,QP,XN,AMPLIT,HV)                  DRCMU164
      DGAMT=1/(2.*AMTAX)*AMPLIT*PHSPAC                                  DRCMU165
      END                                                               DRCMU166
      SUBROUTINE DAMPRY(ITDKRC,XK0DEC,XK,XA,QP,XN,AMPLIT,HV)            DAMPRY 2
      IMPLICIT REAL*8 (A-H,O-Z)                                         DAMPRY 3
C ----------------------------------------------------------------------DAMPRY 4
C IT CALCULATES MATRIX ELEMENT FOR THE                                  DAMPRY 5
C TAU --> MU(E) NU NUBAR DECAY MODE                                     DAMPRY 6
C INCLUDING COMPLETE ORDER ALPHA QED CORRECTIONS.                       DAMPRY 7
C ----------------------------------------------------------------------DAMPRY 8
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      REAL*8  HV(4),QP(4),XN(4),XA(4),XK(4)                             DAMPRY10
C                                                                       DAMPRY11
      HV(4)=1.D0                                                        DAMPRY12
      AK0=XK0DEC*AMTAU                                                  DAMPRY13
      IF(XK(4).LT.0.1D0*AK0) THEN                                       DAMPRY14
        AMPLIT=THB(ITDKRC,QP,XN,XA,AK0,HV)                              DAMPRY15
      ELSE                                                              DAMPRY16
        AMPLIT=SQM2(ITDKRC,QP,XN,XA,XK,AK0,HV)                          DAMPRY17
      ENDIF                                                             DAMPRY18
      RETURN                                                            DAMPRY19
      END                                                               DAMPRY20
      FUNCTION SQM2(ITDKRC,QP,XN,XA,XK,AK0,HV)                          SQM2   2
C                                                                       SQM2   3
C **********************************************************************SQM2   4
C     REAL PHOTON MATRIX ELEMENT SQUARED                               *SQM2   5
C     PARAMETERS:                                                      *SQM2   6
C     HV- POLARIMETRIC FOUR-VECTOR OF TAU                              *SQM2   7
C     QP,XN,XA,XK - 4-momenta of electron (muon), NU, NUBAR and PHOTON *SQM2   8
C                   All four-vectors in TAU rest frame (in GeV)        *SQM2   9
C     AK0 - INFRARED CUTOFF, MINIMAL ENERGY OF HARD PHOTONS (GEV)      *SQM2  10
C     SQM2 - value for S=0                                             *SQM2  11
C     see Eqs. (2.9)-(2.10) from CJK ( Nucl.Phys.B(1991) )             *SQM2  12
C **********************************************************************SQM2  13
C                                                                       SQM2  14
      IMPLICIT REAL*8(A-H,O-Z)                                          SQM2  15
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      REAL*8    QP(4),XN(4),XA(4),XK(4)                                 SQM2  19
      REAL*8    R(4)                                                    SQM2  20
      REAL*8   HV(4)                                                    SQM2  21
      REAL*8 S0(3),RXA(3),RXK(3),RQP(3)                                 SQM2  22
      DATA PI /3.141592653589793238462643D0/                            SQM2  23
C                                                                       SQM2  24
      TMASS=AMTAU                                                       SQM2  25
      GF=GFERMI                                                         SQM2  26
      ALPHAI=ALFINV                                                     SQM2  27
      TMASS2=TMASS**2                                                   SQM2  28
      EMASS2=QP(4)**2-QP(1)**2-QP(2)**2-QP(3)**2                        SQM2  29
      R(4)=TMASS                                                        SQM2  30
C     SCALAR PRODUCTS OF FOUR-MOMENTA                                   SQM2  31
      DO 7 I=1,3                                                        SQM2  32
        R(1)=0.D0                                                       SQM2  33
        R(2)=0.D0                                                       SQM2  34
        R(3)=0.D0                                                       SQM2  35
        R(I)=TMASS                                                      SQM2  36
        RXA(I)=R(4)*XA(4)-R(1)*XA(1)-R(2)*XA(2)-R(3)*XA(3)              SQM2  37
C       RXN(I)=R(4)*XN(4)-R(1)*XN(1)-R(2)*XN(2)-R(3)*XN(3)              SQM2  38
        RXK(I)=R(4)*XK(4)-R(1)*XK(1)-R(2)*XK(2)-R(3)*XK(3)              SQM2  39
        RQP(I)=R(4)*QP(4)-R(1)*QP(1)-R(2)*QP(2)-R(3)*QP(3)              SQM2  40
  7   CONTINUE                                                          SQM2  41
      QPXN=QP(4)*XN(4)-QP(1)*XN(1)-QP(2)*XN(2)-QP(3)*XN(3)              SQM2  42
      QPXA=QP(4)*XA(4)-QP(1)*XA(1)-QP(2)*XA(2)-QP(3)*XA(3)              SQM2  43
      QPXK=QP(4)*XK(4)-QP(1)*XK(1)-QP(2)*XK(2)-QP(3)*XK(3)              SQM2  44
c     XNXA=XN(4)*XA(4)-XN(1)*XA(1)-XN(2)*XA(2)-XN(3)*XA(3)              SQM2  45
      XNXK=XN(4)*XK(4)-XN(1)*XK(1)-XN(2)*XK(2)-XN(3)*XK(3)              SQM2  46
      XAXK=XA(4)*XK(4)-XA(1)*XK(1)-XA(2)*XK(2)-XA(3)*XK(3)              SQM2  47
      TXN=TMASS*XN(4)                                                   SQM2  48
      TXA=TMASS*XA(4)                                                   SQM2  49
      TQP=TMASS*QP(4)                                                   SQM2  50
      TXK=TMASS*XK(4)                                                   SQM2  51
C                                                                       SQM2  52
      X= XNXK/QPXN                                                      SQM2  53
      Z= TXK/TQP                                                        SQM2  54
      A= 1+X                                                            SQM2  55
      B= 1+ X*(1+Z)/2+Z/2                                               SQM2  56
      S1= QPXN*TXA*( -EMASS2/QPXK**2*A + 2*TQP/(QPXK*TXK)*B-            SQM2  57
     $TMASS2/TXK**2)  +                                                 SQM2  58
     $QPXN/TXK**2* ( TMASS2*XAXK - TXA*TXK+ XAXK*TXK) -                 SQM2  59
     $TXA*TXN/TXK - QPXN/(QPXK*TXK)* (TQP*XAXK-TXK*QPXA)                SQM2  60
      CONST4=256*PI/ALPHAI*GF**2                                        SQM2  61
      IF (ITDKRC.EQ.0) CONST4=0D0                                       SQM2  62
      SQM2=S1*CONST4                                                    SQM2  63
      DO 5 I=1,3                                                        SQM2  64
        S0(I) = QPXN*RXA(I)*(-EMASS2/QPXK**2*A + 2*TQP/(QPXK*TXK)*B-    SQM2  65
     $  TMASS2/TXK**2) +                                                SQM2  66
     $  QPXN/TXK**2* (TMASS2*XAXK - TXA*RXK(I)+ XAXK*RXK(I))-           SQM2  67
     $  RXA(I)*TXN/TXK - QPXN/(QPXK*TXK)*(RQP(I)*XAXK- RXK(I)*QPXA)     SQM2  68
  5     HV(I)=S0(I)/S1-1.D0                                             SQM2  69
      RETURN                                                            SQM2  70
      END                                                               SQM2  71
      FUNCTION THB(ITDKRC,QP,XN,XA,AK0,HV)                              THB    2
C                                                                       THB    3
C **********************************************************************THB    4
C     BORN +VIRTUAL+SOFT PHOTON MATRIX ELEMENT**2  O(ALPHA)            *THB    5
C     PARAMETERS:                                                      *THB    6
C     HV- POLARIMETRIC FOUR-VECTOR OF TAU                              *THB    7
C     QP,XN,XA - FOUR-MOMENTA OF ELECTRON (MUON), NU AND NUBAR IN GEV  *THB    8
C     ALL FOUR-VECTORS IN TAU REST FRAME                               *THB    9
C     AK0 - INFRARED CUTOFF, MINIMAL ENERGY OF HARD PHOTONS            *THB   10
C     THB - VALUE FOR S=0                                              *THB   11
C     SEE EQS. (2.2),(2.4)-(2.5) FROM CJK (NUCL.PHYS.B351(1991)70      *THB   12
C     AND (C.2) FROM JK (NUCL.PHYS.B320(1991)20 )                      *THB   13
C **********************************************************************THB   14
C                                                                       THB   15
      IMPLICIT REAL*8(A-H,O-Z)                                          THB   16
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / QEDPRM /ALFINV,ALFPI,XK0                                 QEDPRM 2
      REAL*8           ALFINV,ALFPI,XK0                                 QEDPRM 3
      DIMENSION QP(4),XN(4),XA(4)                                       THB   20
      REAL*8 HV(4)                                                      THB   21
      DIMENSION R(4)                                                    THB   22
      REAL*8 RXA(3),RXN(3),RQP(3)                                       THB   23
      REAL*8 BORNPL(3),AM3POL(3),XM3POL(3)                              THB   24
      DATA PI /3.141592653589793238462643D0/                            THB   25
C                                                                       THB   26
      TMASS=AMTAU                                                       THB   27
      GF=GFERMI                                                         THB   28
      ALPHAI=ALFINV                                                     THB   29
C                                                                       THB   30
      TMASS2=TMASS**2                                                   THB   31
      R(4)=TMASS                                                        THB   32
      DO 7 I=1,3                                                        THB   33
        R(1)=0.D0                                                       THB   34
        R(2)=0.D0                                                       THB   35
        R(3)=0.D0                                                       THB   36
        R(I)=TMASS                                                      THB   37
        RXA(I)=R(4)*XA(4)-R(1)*XA(1)-R(2)*XA(2)-R(3)*XA(3)              THB   38
        RXN(I)=R(4)*XN(4)-R(1)*XN(1)-R(2)*XN(2)-R(3)*XN(3)              THB   39
C       RXK(I)=R(4)*XK(4)-R(1)*XK(1)-R(2)*XK(2)-R(3)*XK(3)              THB   40
        RQP(I)=R(4)*QP(4)-R(1)*QP(1)-R(2)*QP(2)-R(3)*QP(3)              THB   41
  7   CONTINUE                                                          THB   42
C     QUASI TWO-BODY VARIABLES                                          THB   43
      U0=QP(4)/TMASS                                                    THB   44
      U3=SQRT(QP(1)**2+QP(2)**2+QP(3)**2)/TMASS                         THB   45
      W3=U3                                                             THB   46
      W0=(XN(4)+XA(4))/TMASS                                            THB   47
      UP=U0+U3                                                          THB   48
      UM=U0-U3                                                          THB   49
      WP=W0+W3                                                          THB   50
      WM=W0-W3                                                          THB   51
      YU=LOG(UP/UM)/2                                                   THB   52
      YW=LOG(WP/WM)/2                                                   THB   53
      EPS2=U0**2-U3**2                                                  THB   54
      EPS=SQRT(EPS2)                                                    THB   55
      Y=W0**2-W3**2                                                     THB   56
      AL=AK0/TMASS                                                      THB   57
C     FORMFACTORS                                                       THB   58
      F0=2*U0/U3*(  DILOGY(1-(UM*WM/(UP*WP)))- DILOGY(1-WM/WP) +        BBL95087
     $DILOGY(1-UM/UP) -2*YU+ 2*LOG(UP)*(YW+YU) ) +                      BBL95088
     $1/Y* ( 2*U3*YU + (1-EPS2- 2*Y)*LOG(EPS) ) +                       THB   61
     $ 2 - 4*(U0/U3*YU -1)* LOG(2*AL)                                   THB   62
      FP= YU/(2*U3)*(1 + (1-EPS2)/Y ) + LOG(EPS)/Y                      THB   63
      FM= YU/(2*U3)*(1 - (1-EPS2)/Y ) - LOG(EPS)/Y                      THB   64
      F3= EPS2*(FP+FM)/2                                                THB   65
C     SCALAR PRODUCTS OF FOUR-MOMENTA                                   THB   66
      QPXN=QP(4)*XN(4)-QP(1)*XN(1)-QP(2)*XN(2)-QP(3)*XN(3)              THB   67
      QPXA=QP(4)*XA(4)-QP(1)*XA(1)-QP(2)*XA(2)-QP(3)*XA(3)              THB   68
      XNXA=XN(4)*XA(4)-XN(1)*XA(1)-XN(2)*XA(2)-XN(3)*XA(3)              THB   69
      TXN=TMASS*XN(4)                                                   THB   70
      TXA=TMASS*XA(4)                                                   THB   71
      TQP=TMASS*QP(4)                                                   THB   72
C     DECAY DIFFERENTIAL WIDTH WITHOUT AND WITH POLARIZATION            THB   73
      CONST3=1/(2*ALPHAI*PI)*64*GF**2                                   THB   74
      IF (ITDKRC.EQ.0) CONST3=0D0                                       THB   75
      XM3= -( F0* QPXN*TXA +  FP*EPS2* TXN*TXA +                        THB   76
     $FM* QPXN*QPXA + F3* TMASS2*XNXA )                                 THB   77
      AM3=XM3*CONST3                                                    THB   78
C V-A  AND  V+A COUPLINGS, BUT IN THE BORN PART ONLY                    THB   79
      BRAK= (GV+GA)**2*TQP*XNXA+(GV-GA)**2*TXA*QPXN                     THB   80
     &     -(GV**2-GA**2)*TMASS*AMNUTA*QPXA                             THB   81
      BORN= 32*(GFERMI**2/2.)*BRAK                                      THB   82
      DO 5 I=1,3                                                        THB   83
        XM3POL(I)= -( F0* QPXN*RXA(I) +  FP*EPS2* TXN*RXA(I) +          THB   84
     $  FM* QPXN* (QPXA + (RXA(I)*TQP-TXA*RQP(I))/TMASS2 ) +            THB   85
     $  F3* (TMASS2*XNXA +TXN*RXA(I) -RXN(I)*TXA)  )                    THB   86
        AM3POL(I)=XM3POL(I)*CONST3                                      THB   87
C V-A  AND  V+A COUPLINGS, BUT IN THE BORN PART ONLY                    THB   88
        BORNPL(I)=BORN+(                                                THB   89
     &            (GV+GA)**2*TMASS*XNXA*QP(I)                           THB   90
     &           -(GV-GA)**2*TMASS*QPXN*XA(I)                           THB   91
     &           +(GV**2-GA**2)*AMNUTA*TXA*QP(I)                        THB   92
     &           -(GV**2-GA**2)*AMNUTA*TQP*XA(I) )*                     THB   93
     &                                             32*(GFERMI**2/2.)    THB   94
  5     HV(I)=(BORNPL(I)+AM3POL(I))/(BORN+AM3)-1.D0                     THB   95
      THB=BORN+AM3                                                      THB   96
      IF (THB/BORN.LT.0.1D0) THEN                                       THB   97
        PRINT *, 'ERROR IN THB, THB/BORN=',THB/BORN                     THB   98
        STOP                                                            THB   99
      ENDIF                                                             THB  100
      RETURN                                                            THB  101
      END                                                               THB  102
      SUBROUTINE DEXPI(MODE,ISGN,POL,PPI,PNU)                           DEXPI  2
C ----------------------------------------------------------------------DEXPI  3
C TAU DECAY INTO PION AND TAU-NEUTRINO                                  DEXPI  4
C IN TAU REST FRAME                                                     DEXPI  5
C OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXPI  6
C                      PPI   PION CHARGED                               DEXPI  7
C ----------------------------------------------------------------------DEXPI  8
      REAL  POL(4),HV(4),PNU(4),PPI(4)                                  DEXPI  9
CC                                                                      DEXPI 10
      IF(MODE.EQ.-1) THEN                                               DEXPI 11
C     ===================                                               DEXPI 12
        CALL DADMPI(-1,ISGN,HV,PPI,PNU)                                 DEXPI 13
CC      CALL HBOOK1(815,'WEIGHT DISTRIBUTION  DEXPI    $',100,0,2)      DEXPI 14
                                                                        DEXPI 15
      ELSEIF(MODE.EQ. 0) THEN                                           DEXPI 16
C     =======================                                           DEXPI 17
300     CONTINUE                                                        DEXPI 18
        CALL DADMPI( 0,ISGN,HV,PPI,PNU)                                 DEXPI 19
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXPI 20
CC      CALL HFILL(815,WT)                                              DEXPI 21
        CALL RANMAR(RN,1)                                               DEXPI 22
        IF(RN.GT.WT) GOTO 300                                           DEXPI 23
C                                                                       DEXPI 24
      ELSEIF(MODE.EQ. 1) THEN                                           DEXPI 25
C     =======================                                           DEXPI 26
        CALL DADMPI( 1,ISGN,HV,PPI,PNU)                                 DEXPI 27
CC      CALL HPRINT(815)                                                DEXPI 28
      ENDIF                                                             DEXPI 29
C     =====                                                             DEXPI 30
      RETURN                                                            DEXPI 31
      END                                                               DEXPI 32
      SUBROUTINE DADMPI(MODE,ISGN,HV,PPI,PNU)                           DADMPI 2
C ----------------------------------------------------------------------DADMPI 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  PPI(4),PNU(4),HV(4)                                         DADMPI 8
      DATA PI /3.141592653589793238462643/                              DADMPI 9
C                                                                       DADMPI10
      IF(MODE.EQ.-1) THEN                                               DADMPI11
C     ===================                                               DADMPI12
        NEVTOT=0                                                        DADMPI13
      ELSEIF(MODE.EQ. 0) THEN                                           DADMPI14
C     =======================                                           DADMPI15
        NEVTOT=NEVTOT+1                                                 DADMPI16
        EPI= (AMTAU**2+AMPI**2-AMNUTA**2)/(2*AMTAU)                     DADMPI17
        ENU= (AMTAU**2-AMPI**2+AMNUTA**2)/(2*AMTAU)                     DADMPI18
        XPI= SQRT(EPI**2-AMPI**2)                                       DADMPI19
C PI MOMENTUM                                                           DADMPI20
        CALL SPHERA(XPI,PPI)                                            DADMPI21
        PPI(4)=EPI                                                      DADMPI22
C TAU-NEUTRINO MOMENTUM                                                 DADMPI23
        DO 30 I=1,3                                                     DADMPI24
30      PNU(I)=-PPI(I)                                                  DADMPI25
        PNU(4)=ENU                                                      DADMPI26
        PXQ=AMTAU*EPI                                                   DADMPI27
        PXN=AMTAU*ENU                                                   DADMPI28
        QXN=PPI(4)*PNU(4)-PPI(1)*PNU(1)-PPI(2)*PNU(2)-PPI(3)*PNU(3)     DADMPI29
        BRAK=(GV**2+GA**2)*(2*PXQ*QXN-AMPI**2*PXN)                      DADMPI30
     &      +(GV**2-GA**2)*AMTAU*AMNUTA*AMPI**2                         DADMPI31
        DO 40 I=1,3                                                     DADMPI32
40      HV(I)=-ISGN*2*GA*GV*AMTAU*(2*PPI(I)*QXN-PNU(I)*AMPI**2)/BRAK    DADMPI33
        HV(4)=1                                                         DADMPI34
C                                                                       DADMPI35
      ELSEIF(MODE.EQ. 1) THEN                                           DADMPI36
C     =======================                                           DADMPI37
        IF(NEVTOT.EQ.0) RETURN                                          DADMPI38
        FPI=0.1284                                                      DADMPI39
C        GAMM=(GFERMI*FPI)**2/(16.*PI)*AMTAU**3*                        DADMPI40
C     *       (BRAK/AMTAU**4)**2                                        DADMPI41
CZW 7.02.93 here was an error affecting non standard model              DADMPI42
C       configurations only                                             DADMPI43
        GAMM=(GFERMI*FPI)**2/(16.*PI)*AMTAU**3*                         DADMPI44
     $       (BRAK/AMTAU**4)*                                           DADMPI45
     $       SQRT((AMTAU**2-AMPI**2-AMNUTA**2)**2                       DADMPI46
     $            -4*AMPI**2*AMNUTA**2           )/AMTAU**2             DADMPI47
        ERROR=0                                                         DADMPI48
        RAT=GAMM/GAMEL                                                  DADMPI49
        WRITE(IOUT, 7010) NEVTOT,GAMM,RAT,ERROR                         DADMPI50
        GAMPMC(3)=RAT                                                   DADMPI51
        GAMPER(3)=ERROR                                                 DADMPI52
CAM     NEVDEC(3)=NEVTOT                                                DADMPI53
      ENDIF                                                             DADMPI54
C     =====                                                             DADMPI55
      RETURN                                                            DADMPI56
 7010 FORMAT(///1X,15(5H*****)                                          DADMPI57
     $ /,' *',     25X,'******** DADMPI FINAL REPORT  ******** ',9X,1H* DADMPI58
     $ /,' *',I20  ,5X,'NEVTOT = NO. OF PI  DECAYS TOTAL       ',9X,1H* DADMPI59
     $ /,' *',E20.5,5X,'PARTIAL WTDTH ( PI DECAY) IN GEV UNITS ',9X,1H* DADMPI60
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMPI61
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH (STAT.)',9X,1H* DADMPI62
     $  /,1X,15(5H*****)/)                                              DADMPI63
      END                                                               DADMPI64
      SUBROUTINE DEXRO(MODE,ISGN,POL,PNU,PRO,PIC,PIZ)                   DEXRO  2
C ----------------------------------------------------------------------DEXRO  3
C THIS SIMULATES TAU DECAY IN TAU REST FRAME                            DEXRO  4
C INTO NU RHO, NEXT RHO DECAYS INTO PION PAIR.                          DEXRO  5
C OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXRO  6
C                      PRO   RHO                                        DEXRO  7
C                      PIC   PION CHARGED                               DEXRO  8
C                      PIZ   PION ZERO                                  DEXRO  9
C ----------------------------------------------------------------------DEXRO 10
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),HV(4),PRO(4),PNU(4),PIC(4),PIZ(4)                    DEXRO 12
      DATA IWARM/0/                                                     DEXRO 13
C                                                                       DEXRO 14
      IF(MODE.EQ.-1) THEN                                               DEXRO 15
C     ===================                                               DEXRO 16
        IWARM=1                                                         DEXRO 17
        CALL DADMRO( -1,ISGN,HV,PNU,PRO,PIC,PIZ)                        DEXRO 18
CC      CALL HBOOK1(816,'WEIGHT DISTRIBUTION  DEXRO    $',100,0,2)      DEXRO 19
CC      CALL HBOOK1(916,'ABS2 OF HV IN ROUTINE DEXRO   $',100,0,2)      DEXRO 20
C                                                                       DEXRO 21
      ELSEIF(MODE.EQ. 0) THEN                                           DEXRO 22
C     =======================                                           DEXRO 23
300     CONTINUE                                                        DEXRO 24
        IF(IWARM.EQ.0) GOTO 902                                         DEXRO 25
        CALL DADMRO(  0,ISGN,HV,PNU,PRO,PIC,PIZ)                        DEXRO 26
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXRO 27
CC      CALL HFILL(816,WT)                                              DEXRO 28
CC      XHELP=HV(1)**2+HV(2)**2+HV(3)**2                                DEXRO 29
CC      CALL HFILL(916,XHELP)                                           DEXRO 30
        CALL RANMAR(RN,1)                                               DEXRO 31
        IF(RN.GT.WT) GOTO 300                                           DEXRO 32
C                                                                       DEXRO 33
      ELSEIF(MODE.EQ. 1) THEN                                           DEXRO 34
C     =======================                                           DEXRO 35
        CALL DADMRO(  1,ISGN,HV,PNU,PRO,PIC,PIZ)                        DEXRO 36
CC      CALL HPRINT(816)                                                DEXRO 37
CC      CALL HPRINT(916)                                                DEXRO 38
      ENDIF                                                             DEXRO 39
C     =====                                                             DEXRO 40
      RETURN                                                            DEXRO 41
 902  WRITE(IOUT, 9020)                                                 DEXRO 42
 9020 FORMAT(' ----- DEXRO: LACK OF INITIALISATION')                    DEXRO 43
      STOP                                                              DEXRO 44
      END                                                               DEXRO 45
      SUBROUTINE DADMRO(MODE,ISGN,HHV,PNU,PRO,PIC,PIZ)                  DADMRO 2
C ----------------------------------------------------------------------DADMRO 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  HHV(4)                                                      DADMRO 8
      REAL  HV(4),PRO(4),PNU(4),PIC(4),PIZ(4)                           DADMRO 9
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4)                         DADMRO10
      REAL*4 RRR(3)                                                     DADMRO11
      REAL*8 SWT, SSWT                                                  DADMRO12
      DATA PI /3.141592653589793238462643/                              DADMRO13
      DATA IWARM/0/                                                     DADMRO14
C                                                                       DADMRO15
      IF(MODE.EQ.-1) THEN                                               DADMRO16
C     ===================                                               DADMRO17
        IWARM=1                                                         DADMRO18
        NEVRAW=0                                                        DADMRO19
        NEVACC=0                                                        DADMRO20
        NEVOVR=0                                                        DADMRO21
        SWT=0                                                           DADMRO22
        SSWT=0                                                          DADMRO23
        WTMAX=1E-20                                                     DADMRO24
        DO 15 I=1,500                                                   DADMRO25
        CALL DPHSRO(WT,HV,PDUM1,PDUM2,PDUM3,PDUM4)                      DADMRO26
        IF(WT.GT.WTMAX/1.2) WTMAX=WT*1.2                                DADMRO27
15      CONTINUE                                                        DADMRO28
CC      CALL HBOOK1(801,'WEIGHT DISTRIBUTION  DADMRO    $',100,0,2)     DADMRO29
CC      PRINT 7003,WTMAX                                                DADMRO30
C                                                                       DADMRO31
      ELSEIF(MODE.EQ. 0) THEN                                           DADMRO32
C     =======================                                           DADMRO33
300     CONTINUE                                                        DADMRO34
        IF(IWARM.EQ.0) GOTO 902                                         DADMRO35
        CALL DPHSRO(WT,HV,PNU,PRO,PIC,PIZ)                              DADMRO36
CC      CALL HFILL(801,WT/WTMAX)                                        DADMRO37
        NEVRAW=NEVRAW+1                                                 DADMRO38
        SWT=SWT+WT                                                      DADMRO39
        SSWT=SSWT+WT**2                                                 DADMRO40
        CALL RANMAR(RRR,3)                                              DADMRO41
        RN=RRR(1)                                                       DADMRO42
        IF(WT.GT.WTMAX) NEVOVR=NEVOVR+1                                 DADMRO43
        IF(RN*WTMAX.GT.WT) GOTO 300                                     DADMRO44
C ROTATIONS TO BASIC TAU REST FRAME                                     DADMRO45
        COSTHE=-1.+2.*RRR(2)                                            DADMRO46
        THET=ACOS(COSTHE)                                               DADMRO47
        PHI =2*PI*RRR(3)                                                DADMRO48
        CALL ROTOR2(THET,PNU,PNU)                                       DADMRO49
        CALL ROTOR3( PHI,PNU,PNU)                                       DADMRO50
        CALL ROTOR2(THET,PRO,PRO)                                       DADMRO51
        CALL ROTOR3( PHI,PRO,PRO)                                       DADMRO52
        CALL ROTOR2(THET,PIC,PIC)                                       DADMRO53
        CALL ROTOR3( PHI,PIC,PIC)                                       DADMRO54
        CALL ROTOR2(THET,PIZ,PIZ)                                       DADMRO55
        CALL ROTOR3( PHI,PIZ,PIZ)                                       DADMRO56
        CALL ROTOR2(THET,HV,HV)                                         DADMRO57
        CALL ROTOR3( PHI,HV,HV)                                         DADMRO58
        DO 44 I=1,3                                                     DADMRO59
 44     HHV(I)=-ISGN*HV(I)                                              DADMRO60
        NEVACC=NEVACC+1                                                 DADMRO61
C                                                                       DADMRO62
      ELSEIF(MODE.EQ. 1) THEN                                           DADMRO63
C     =======================                                           DADMRO64
        IF(NEVRAW.EQ.0) RETURN                                          DADMRO65
        PARGAM=SWT/FLOAT(NEVRAW+1)                                      DADMRO66
        ERROR=0                                                         DADMRO67
        IF(NEVRAW.NE.0) ERROR=SQRT(SSWT/SWT**2-1./FLOAT(NEVRAW))        DADMRO68
        RAT=PARGAM/GAMEL                                                DADMRO69
        WRITE(IOUT, 7010) NEVRAW,NEVACC,NEVOVR,PARGAM,RAT,ERROR         DADMRO70
CC      CALL HPRINT(801)                                                DADMRO71
        GAMPMC(4)=RAT                                                   DADMRO72
        GAMPER(4)=ERROR                                                 DADMRO73
CAM     NEVDEC(4)=NEVACC                                                DADMRO74
      ENDIF                                                             DADMRO75
C     =====                                                             DADMRO76
      RETURN                                                            DADMRO77
 7003 FORMAT(///1X,15(5H*****)                                          DADMRO78
     $ /,' *',     25X,'******** DADMRO INITIALISATION ********',9X,1H* DADMRO79
     $ /,' *',E20.5,5X,'WTMAX  = MAXIMUM WEIGHT                ',9X,1H* DADMRO80
     $  /,1X,15(5H*****)/)                                              DADMRO81
 7010 FORMAT(///1X,15(5H*****)                                          DADMRO82
     $ /,' *',     25X,'******** DADMRO FINAL REPORT  ******** ',9X,1H* DADMRO83
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF RHO DECAYS TOTAL       ',9X,1H* DADMRO84
     $ /,' *',I20  ,5X,'NEVACC = NO. OF RHO  DECS. ACCEPTED    ',9X,1H* DADMRO85
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADMRO86
     $ /,' *',E20.5,5X,'PARTIAL WTDTH (RHO DECAY) IN GEV UNITS ',9X,1H* DADMRO87
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMRO88
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADMRO89
     $  /,1X,15(5H*****)/)                                              DADMRO90
 902  WRITE(IOUT, 9020)                                                 DADMRO91
 9020 FORMAT(' ----- DADMRO: LACK OF INITIALISATION')                   DADMRO92
      STOP                                                              DADMRO93
      END                                                               DADMRO94
      SUBROUTINE DPHSRO(DGAMT,HV,PN,PR,PIC,PIZ)                         DPHSRO 2
C ----------------------------------------------------------------------DPHSRO 3
C IT SIMULATES RHO DECAY IN TAU REST FRAME WITH                         DPHSRO 4
C Z-AXIS ALONG RHO MOMENTUM                                             DPHSRO 5
C ----------------------------------------------------------------------DPHSRO 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PR(4),PIC(4),PIZ(4),QQ(4)                 DPHSRO 9
      DATA PI /3.141592653589793238462643/                              DPHSRO10
      DATA ICONT /0/                                                    DPHSRO11
C                                                                       DPHSRO12
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DPHSRO13
      PHSPAC=1./2**11/PI**5                                             DPHSRO14
C TAU MOMENTUM                                                          DPHSRO15
      PT(1)=0.                                                          DPHSRO16
      PT(2)=0.                                                          DPHSRO17
      PT(3)=0.                                                          DPHSRO18
      PT(4)=AMTAU                                                       DPHSRO19
C MASS OF (REAL/VIRTUAL) RHO                                            DPHSRO20
      AMS1=(AMPI+AMPIZ)**2                                              DPHSRO21
      AMS2=(AMTAU-AMNUTA)**2                                            DPHSRO22
C FLAT PHASE SPACE                                                      DPHSRO23
C     AMX2=AMS1+   RR1*(AMS2-AMS1)                                      DPHSRO24
C     AMX=SQRT(AMX2)                                                    DPHSRO25
C     PHSPAC=PHSPAC*(AMS2-AMS1)                                         DPHSRO26
C PHASE SPACE WITH SAMPLING FOR RHO RESONANCE                           DPHSRO27
      ALP1=ATAN((AMS1-AMRO**2)/AMRO/GAMRO)                              DPHSRO28
      ALP2=ATAN((AMS2-AMRO**2)/AMRO/GAMRO)                              DPHSRO29
CAM                                                                     DPHSRO30
 100  CONTINUE                                                          DPHSRO31
      CALL RANMAR(RR1,1)                                                DPHSRO32
      ALP=ALP1+RR1*(ALP2-ALP1)                                          DPHSRO33
      AMX2=AMRO**2+AMRO*GAMRO*TAN(ALP)                                  DPHSRO34
      AMX=SQRT(AMX2)                                                    DPHSRO35
      IF(AMX.LT.2.*AMPI) GO TO 100                                      DPHSRO36
CAM                                                                     DPHSRO37
      PHSPAC=PHSPAC*((AMX2-AMRO**2)**2+(AMRO*GAMRO)**2)/(AMRO*GAMRO)    DPHSRO38
      PHSPAC=PHSPAC*(ALP2-ALP1)                                         DPHSRO39
C                                                                       DPHSRO40
C TAU-NEUTRINO MOMENTUM                                                 DPHSRO41
      PN(1)=0                                                           DPHSRO42
      PN(2)=0                                                           DPHSRO43
      PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AMX**2)                    DPHSRO44
      PN(3)=-SQRT((PN(4)-AMNUTA)*(PN(4)+AMNUTA))                        DPHSRO45
C RHO MOMENTUM                                                          DPHSRO46
      PR(1)=0                                                           DPHSRO47
      PR(2)=0                                                           DPHSRO48
      PR(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AMX**2)                    DPHSRO49
      PR(3)=-PN(3)                                                      DPHSRO50
      PHSPAC=PHSPAC*(4*PI)*(2*PR(3)/AMTAU)                              DPHSRO51
C                                                                       DPHSRO52
CAM                                                                     DPHSRO53
      ENQ1=(AMX2+AMPI**2-AMPIZ**2)/(2.*AMX)                             DPHSRO54
      ENQ2=(AMX2-AMPI**2+AMPIZ**2)/(2.*AMX)                             DPHSRO55
      PPPI=SQRT((ENQ1-AMPI)*(ENQ1+AMPI))                                DPHSRO56
      PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AMX)                                 DPHSRO57
C CHARGED PI MOMENTUM IN RHO REST FRAME                                 DPHSRO58
      CALL SPHERA(PPPI,PIC)                                             DPHSRO59
      PIC(4)=ENQ1                                                       DPHSRO60
C NEUTRAL PI MOMENTUM IN RHO REST FRAME                                 DPHSRO61
      DO 20 I=1,3                                                       DPHSRO62
20    PIZ(I)=-PIC(I)                                                    DPHSRO63
      PIZ(4)=ENQ2                                                       DPHSRO64
      EXE=(PR(4)+PR(3))/AMX                                             DPHSRO65
C PIONS BOOSTED FROM RHO REST FRAME TO TAU REST FRAME                   DPHSRO66
      CALL BOSTR3(EXE,PIC,PIC)                                          DPHSRO67
      CALL BOSTR3(EXE,PIZ,PIZ)                                          DPHSRO68
      DO 30 I=1,4                                                       DPHSRO69
30    QQ(I)=PIC(I)-PIZ(I)                                               DPHSRO70
C AMPLITUDE                                                             DPHSRO71
      PRODPQ=PT(4)*QQ(4)                                                DPHSRO72
      PRODNQ=PN(4)*QQ(4)-PN(1)*QQ(1)-PN(2)*QQ(2)-PN(3)*QQ(3)            DPHSRO73
      PRODPN=PT(4)*PN(4)                                                DPHSRO74
      QQ2= QQ(4)**2-QQ(1)**2-QQ(2)**2-QQ(3)**2                          DPHSRO75
      BRAK=(GV**2+GA**2)*(2*PRODPQ*PRODNQ-PRODPN*QQ2)                   DPHSRO76
     &    +(GV**2-GA**2)*AMTAU*AMNUTA*QQ2                               DPHSRO77
      AMPLIT=(GFERMI*CCABIB)**2*BRAK*2*FPIRHO(AMX)                      DPHSRO78
      DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                  DPHSRO79
      DO 40 I=1,3                                                       DPHSRO80
 40   HV(I)=2*GV*GA*AMTAU*(2*PRODNQ*QQ(I)-QQ2*PN(I))/BRAK               DPHSRO81
      RETURN                                                            DPHSRO82
      END                                                               DPHSRO83
      SUBROUTINE DEXAA(MODE,ISGN,POL,PNU,PAA,PIM1,PIM2,PIPL,JAA)        DEXAA  2
C ----------------------------------------------------------------------DEXAA  3
* THIS SIMULATES TAU DECAY IN TAU REST FRAME                            DEXAA  4
* INTO NU A1, NEXT A1 DECAYS INTO RHO PI AND FINALLY RHO INTO PI PI.    DEXAA  5
* OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXAA  6
*                      PAA   A1                                         DEXAA  7
*                      PIM1  PION MINUS (OR PI0) 1      (FOR TAU MINUS) DEXAA  8
*                      PIM2  PION MINUS (OR PI0) 2                      DEXAA  9
*                      PIPL  PION PLUS  (OR PI-)                        DEXAA 10
*                      (PIPL,PIM1) FORM A RHO                           DEXAA 11
C ----------------------------------------------------------------------DEXAA 12
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),HV(4),PAA(4),PNU(4),PIM1(4),PIM2(4),PIPL(4)          DEXAA 14
      DATA IWARM/0/                                                     DEXAA 15
C                                                                       DEXAA 16
      IF(MODE.EQ.-1) THEN                                               DEXAA 17
C     ===================                                               DEXAA 18
        IWARM=1                                                         DEXAA 19
        CALL DADMAA( -1,ISGN,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)             DEXAA 20
CC      CALL HBOOK1(816,'WEIGHT DISTRIBUTION  DEXAA    $',100,-2.,2.)   DEXAA 21
C                                                                       DEXAA 22
      ELSEIF(MODE.EQ. 0) THEN                                           DEXAA 23
*     =======================                                           DEXAA 24
 300    CONTINUE                                                        DEXAA 25
        IF(IWARM.EQ.0) GOTO 902                                         DEXAA 26
        CALL DADMAA(  0,ISGN,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)             DEXAA 27
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXAA 28
CC      CALL HFILL(816,WT)                                              DEXAA 29
        CALL RANMAR(RN,1)                                               DEXAA 30
        IF(RN.GT.WT) GOTO 300                                           DEXAA 31
C                                                                       DEXAA 32
      ELSEIF(MODE.EQ. 1) THEN                                           DEXAA 33
*     =======================                                           DEXAA 34
        CALL DADMAA(  1,ISGN,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)             DEXAA 35
CC      CALL HPRINT(816)                                                DEXAA 36
      ENDIF                                                             DEXAA 37
C     =====                                                             DEXAA 38
      RETURN                                                            DEXAA 39
 902  WRITE(IOUT, 9020)                                                 DEXAA 40
 9020 FORMAT(' ----- DEXAA: LACK OF INITIALISATION')                    DEXAA 41
      STOP                                                              DEXAA 42
      END                                                               DEXAA 43
      SUBROUTINE DADMAA(MODE,ISGN,HHV,PNU,PAA,PIM1,PIM2,PIPL,JAA)       DADMAA 2
C ----------------------------------------------------------------------DADMAA 3
* A1 DECAY UNWEIGHTED EVENTS                                            DADMAA 4
C ----------------------------------------------------------------------DADMAA 5
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  HHV(4)                                                      DADMAA10
      REAL  HV(4),PAA(4),PNU(4),PIM1(4),PIM2(4),PIPL(4)                 DADMAA11
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4),PDUM5(4)                DADMAA12
      REAL*4 RRR(3)                                                     DADMAA13
      REAL*8 SWT, SSWT                                                  DADMAA14
      DATA PI /3.141592653589793238462643/                              DADMAA15
      DATA IWARM/0/                                                     DADMAA16
C                                                                       DADMAA17
      IF(MODE.EQ.-1) THEN                                               DADMAA18
C     ===================                                               DADMAA19
        IWARM=1                                                         DADMAA20
        NEVRAW=0                                                        DADMAA21
        NEVACC=0                                                        DADMAA22
        NEVOVR=0                                                        DADMAA23
        SWT=0                                                           DADMAA24
        SSWT=0                                                          DADMAA25
        WTMAX=1E-20                                                     DADMAA26
        DO 15 I=1,500                                                   DADMAA27
        CALL DPHSAA(WT,HV,PDUM1,PDUM2,PDUM3,PDUM4,PDUM5,JAA)            DADMAA28
        IF(WT.GT.WTMAX/1.2) WTMAX=WT*1.2                                DADMAA29
15      CONTINUE                                                        DADMAA30
CC      CALL HBOOK1(801,'WEIGHT DISTRIBUTION  DADMAA    $',100,0,2)     DADMAA31
C                                                                       DADMAA32
      ELSEIF(MODE.EQ. 0) THEN                                           DADMAA33
C     =======================                                           DADMAA34
300     CONTINUE                                                        DADMAA35
        IF(IWARM.EQ.0) GOTO 902                                         DADMAA36
        CALL DPHSAA(WT,HV,PNU,PAA,PIM1,PIM2,PIPL,JAA)                   DADMAA37
CC      CALL HFILL(801,WT/WTMAX)                                        DADMAA38
        NEVRAW=NEVRAW+1                                                 DADMAA39
        SWT=SWT+WT                                                      DADMAA40
        SSWT=SSWT+WT**2                                                 DADMAA41
        CALL RANMAR(RRR,3)                                              DADMAA42
        RN=RRR(1)                                                       DADMAA43
        IF(WT.GT.WTMAX) NEVOVR=NEVOVR+1                                 DADMAA44
        IF(RN*WTMAX.GT.WT) GOTO 300                                     DADMAA45
C ROTATIONS TO BASIC TAU REST FRAME                                     DADMAA46
        COSTHE=-1.+2.*RRR(2)                                            DADMAA47
        THET=ACOS(COSTHE)                                               DADMAA48
        PHI =2*PI*RRR(3)                                                DADMAA49
        CALL ROTPOL(THET,PHI,PNU)                                       DADMAA50
        CALL ROTPOL(THET,PHI,PAA)                                       DADMAA51
        CALL ROTPOL(THET,PHI,PIM1)                                      DADMAA52
        CALL ROTPOL(THET,PHI,PIM2)                                      DADMAA53
        CALL ROTPOL(THET,PHI,PIPL)                                      DADMAA54
        CALL ROTPOL(THET,PHI,HV)                                        DADMAA55
        DO 44 I=1,3                                                     DADMAA56
 44     HHV(I)=-ISGN*HV(I)                                              DADMAA57
        NEVACC=NEVACC+1                                                 DADMAA58
C                                                                       DADMAA59
      ELSEIF(MODE.EQ. 1) THEN                                           DADMAA60
C     =======================                                           DADMAA61
        IF(NEVRAW.EQ.0) RETURN                                          DADMAA62
        PARGAM=SWT/FLOAT(NEVRAW+1)                                      DADMAA63
        ERROR=0                                                         DADMAA64
        IF(NEVRAW.NE.0) ERROR=SQRT(SSWT/SWT**2-1./FLOAT(NEVRAW))        DADMAA65
        RAT=PARGAM/GAMEL                                                DADMAA66
        WRITE(IOUT, 7010) NEVRAW,NEVACC,NEVOVR,PARGAM,RAT,ERROR         DADMAA67
CC      CALL HPRINT(801)                                                DADMAA68
        GAMPMC(5)=RAT                                                   DADMAA69
        GAMPER(5)=ERROR                                                 DADMAA70
CAM     NEVDEC(5)=NEVACC                                                DADMAA71
      ENDIF                                                             DADMAA72
C     =====                                                             DADMAA73
      RETURN                                                            DADMAA74
 7003 FORMAT(///1X,15(5H*****)                                          DADMAA75
     $ /,' *',     25X,'******** DADMAA INITIALISATION ********',9X,1H* DADMAA76
     $ /,' *',E20.5,5X,'WTMAX  = MAXIMUM WEIGHT                ',9X,1H* DADMAA77
     $  /,1X,15(5H*****)/)                                              DADMAA78
 7010 FORMAT(///1X,15(5H*****)                                          DADMAA79
     $ /,' *',     25X,'******** DADMAA FINAL REPORT  ******** ',9X,1H* DADMAA80
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF A1  DECAYS TOTAL       ',9X,1H* DADMAA81
     $ /,' *',I20  ,5X,'NEVACC = NO. OF A1   DECS. ACCEPTED    ',9X,1H* DADMAA82
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADMAA83
     $ /,' *',E20.5,5X,'PARTIAL WTDTH (A1  DECAY) IN GEV UNITS ',9X,1H* DADMAA84
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMAA85
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADMAA86
     $  /,1X,15(5H*****)/)                                              DADMAA87
 902  WRITE(IOUT, 9020)                                                 DADMAA88
 9020 FORMAT(' ----- DADMAA: LACK OF INITIALISATION')                   DADMAA89
      STOP                                                              DADMAA90
      END                                                               DADMAA91
      SUBROUTINE DPHSAA(DGAMT,HV,PN,PAA,PIM1,PIM2,PIPL,JAA)             DPHSAA 2
C ----------------------------------------------------------------------DPHSAA 3
* IT SIMULATES A1  DECAY IN TAU REST FRAME WITH                         DPHSAA 4
* Z-AXIS ALONG A1  MOMENTUM                                             DPHSAA 5
C ----------------------------------------------------------------------DPHSAA 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            TAUKLE 2
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            TAUKLE 3
      REAL  HV(4),PN(4),PAA(4),PIM1(4),PIM2(4),PIPL(4)                  DPHSAA 9
      REAL*4 RRR(1)                                                     DPHSAA10
C MATRIX ELEMENT NUMBER:                                                DPHSAA11
      MNUM=0                                                            DPHSAA12
C TYPE OF THE GENERATION:                                               DPHSAA13
      KEYT=1                                                            DPHSAA14
      CALL RANMAR(RRR,1)                                                DPHSAA15
      RMOD=RRR(1)                                                       DPHSAA16
      IF (RMOD.LT.BRA1) THEN                                            DPHSAA17
       JAA=1                                                            DPHSAA18
       AMP1=AMPI                                                        DPHSAA19
       AMP2=AMPI                                                        DPHSAA20
       AMP3=AMPI                                                        DPHSAA21
      ELSE                                                              DPHSAA22
       JAA=2                                                            DPHSAA23
       AMP1=AMPIZ                                                       DPHSAA24
       AMP2=AMPIZ                                                       DPHSAA25
       AMP3=AMPI                                                        DPHSAA26
      ENDIF                                                             DPHSAA27
                                                                        DPHSAA28
      CALL                                                              DPHSAA29
     $   DPHTRE(DGAMT,HV,PN,PAA,PIM1,AMP1,PIM2,AMP2,PIPL,AMP3,KEYT,MNUM)DPHSAA30
      END                                                               DPHSAA31
      SUBROUTINE DEXKK(MODE,ISGN,POL,PKK,PNU)                           DEXKK  2
C ----------------------------------------------------------------------DEXKK  3
C TAU DECAY INTO KAON  AND TAU-NEUTRINO                                 DEXKK  4
C IN TAU REST FRAME                                                     DEXKK  5
C OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXKK  6
C                      PKK   KAON CHARGED                               DEXKK  7
C ----------------------------------------------------------------------DEXKK  8
      REAL  POL(4),HV(4),PNU(4),PKK(4)                                  DEXKK  9
C                                                                       DEXKK 10
      IF(MODE.EQ.-1) THEN                                               DEXKK 11
C     ===================                                               DEXKK 12
        CALL DADMKK(-1,ISGN,HV,PKK,PNU)                                 DEXKK 13
CC      CALL HBOOK1(815,'WEIGHT DISTRIBUTION  DEXPI    $',100,0,2)      DEXKK 14
C                                                                       DEXKK 15
      ELSEIF(MODE.EQ. 0) THEN                                           DEXKK 16
C     =======================                                           DEXKK 17
300     CONTINUE                                                        DEXKK 18
        CALL DADMKK( 0,ISGN,HV,PKK,PNU)                                 DEXKK 19
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXKK 20
CC      CALL HFILL(815,WT)                                              DEXKK 21
        CALL RANMAR(RN,1)                                               DEXKK 22
        IF(RN.GT.WT) GOTO 300                                           DEXKK 23
C                                                                       DEXKK 24
      ELSEIF(MODE.EQ. 1) THEN                                           DEXKK 25
C     =======================                                           DEXKK 26
        CALL DADMKK( 1,ISGN,HV,PKK,PNU)                                 DEXKK 27
CC      CALL HPRINT(815)                                                DEXKK 28
      ENDIF                                                             DEXKK 29
C     =====                                                             DEXKK 30
      RETURN                                                            DEXKK 31
      END                                                               DEXKK 32
      SUBROUTINE DADMKK(MODE,ISGN,HV,PKK,PNU)                           DADMKK 2
C ----------------------------------------------------------------------DADMKK 3
C FZ                                                                    DADMKK 4
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  PKK(4),PNU(4),HV(4)                                         DADMKK 9
      DATA PI /3.141592653589793238462643/                              DADMKK10
C                                                                       DADMKK11
      IF(MODE.EQ.-1) THEN                                               DADMKK12
C     ===================                                               DADMKK13
        NEVTOT=0                                                        DADMKK14
      ELSEIF(MODE.EQ. 0) THEN                                           DADMKK15
C     =======================                                           DADMKK16
        NEVTOT=NEVTOT+1                                                 DADMKK17
        EKK= (AMTAU**2+AMK**2-AMNUTA**2)/(2*AMTAU)                      DADMKK18
        ENU= (AMTAU**2-AMK**2+AMNUTA**2)/(2*AMTAU)                      DADMKK19
        XKK= SQRT(EKK**2-AMK**2)                                        DADMKK20
C K MOMENTUM                                                            DADMKK21
        CALL SPHERA(XKK,PKK)                                            DADMKK22
        PKK(4)=EKK                                                      DADMKK23
C TAU-NEUTRINO MOMENTUM                                                 DADMKK24
        DO 30 I=1,3                                                     DADMKK25
30      PNU(I)=-PKK(I)                                                  DADMKK26
        PNU(4)=ENU                                                      DADMKK27
        PXQ=AMTAU*EKK                                                   DADMKK28
        PXN=AMTAU*ENU                                                   DADMKK29
        QXN=PKK(4)*PNU(4)-PKK(1)*PNU(1)-PKK(2)*PNU(2)-PKK(3)*PNU(3)     DADMKK30
        BRAK=(GV**2+GA**2)*(2*PXQ*QXN-AMK**2*PXN)                       DADMKK31
     &      +(GV**2-GA**2)*AMTAU*AMNUTA*AMK**2                          DADMKK32
        DO 40 I=1,3                                                     DADMKK33
40      HV(I)=-ISGN*2*GA*GV*AMTAU*(2*PKK(I)*QXN-PNU(I)*AMK**2)/BRAK     DADMKK34
        HV(4)=1                                                         DADMKK35
C                                                                       DADMKK36
      ELSEIF(MODE.EQ. 1) THEN                                           DADMKK37
C     =======================                                           DADMKK38
        IF(NEVTOT.EQ.0) RETURN                                          DADMKK39
        FKK=0.0354                                                      DADMKK40
CFZ THERE WAS BRAK/AMTAU**4 BEFORE                                      DADMKK41
C        GAMM=(GFERMI*FKK)**2/(16.*PI)*AMTAU**3*                        DADMKK42
C     *       (BRAK/AMTAU**4)**2                                        DADMKK43
CZW 7.02.93 here was an error affecting non standard model              DADMKK44
C       configurations only                                             DADMKK45
        GAMM=(GFERMI*FKK)**2/(16.*PI)*AMTAU**3*                         DADMKK46
     $       (BRAK/AMTAU**4)*                                           DADMKK47
     $       SQRT((AMTAU**2-AMK**2-AMNUTA**2)**2                        DADMKK48
     $            -4*AMK**2*AMNUTA**2           )/AMTAU**2              DADMKK49
        ERROR=0                                                         DADMKK50
                                                                        DADMKK51
        ERROR=0                                                         DADMKK52
        RAT=GAMM/GAMEL                                                  DADMKK53
        WRITE(IOUT, 7010) NEVTOT,GAMM,RAT,ERROR                         DADMKK54
        GAMPMC(6)=RAT                                                   DADMKK55
        GAMPER(6)=ERROR                                                 DADMKK56
CAM     NEVDEC(6)=NEVTOT                                                DADMKK57
      ENDIF                                                             DADMKK58
C     =====                                                             DADMKK59
      RETURN                                                            DADMKK60
 7010 FORMAT(///1X,15(5H*****)                                          DADMKK61
     $ /,' *',     25X,'******** DADMKK FINAL REPORT   ********',9X,1H* DADMKK62
     $ /,' *',I20  ,5X,'NEVTOT = NO. OF K  DECAYS TOTAL        ',9X,1H*,DADMKK63
     $ /,' *',E20.5,5X,'PARTIAL WTDTH ( K DECAY) IN GEV UNITS  ',9X,1H*,DADMKK64
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMKK65
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH (STAT.)',9X,1H* DADMKK66
     $  /,1X,15(5H*****)/)                                              DADMKK67
      END                                                               DADMKK68
      SUBROUTINE DEXKS(MODE,ISGN,POL,PNU,PKS,PKK,PPI,JKST)              DEXKS  2
C ----------------------------------------------------------------------DEXKS  3
C THIS SIMULATES TAU DECAY IN TAU REST FRAME                            DEXKS  4
C INTO NU K*, THEN K* DECAYS INTO PI0,K+-(JKST=20)                      DEXKS  5
C OR PI+-,K0(JKST=10).                                                  DEXKS  6
C OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXKS  7
C                      PKS   K* CHARGED                                 DEXKS  8
C                      PK0   K ZERO                                     DEXKS  9
C                      PKC   K CHARGED                                  DEXKS 10
C                      PIC   PION CHARGED                               DEXKS 11
C                      PIZ   PION ZERO                                  DEXKS 12
C ----------------------------------------------------------------------DEXKS 13
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),HV(4),PKS(4),PNU(4),PKK(4),PPI(4)                    DEXKS 15
      DATA IWARM/0/                                                     DEXKS 16
C                                                                       DEXKS 17
      IF(MODE.EQ.-1) THEN                                               DEXKS 18
C     ===================                                               DEXKS 19
        IWARM=1                                                         DEXKS 20
CFZ INITIALISATION DONE WITH THE GHARGED PION NEUTRAL KAON MODE(JKST=10 DEXKS 21
        CALL DADMKS( -1,ISGN,HV,PNU,PKS,PKK,PPI,JKST)                   DEXKS 22
CC      CALL HBOOK1(816,'WEIGHT DISTRIBUTION  DEXKS    $',100,0,2)      DEXKS 23
CC      CALL HBOOK1(916,'ABS2 OF HV IN ROUTINE DEXKS   $',100,0,2)      DEXKS 24
C                                                                       DEXKS 25
      ELSEIF(MODE.EQ. 0) THEN                                           DEXKS 26
C     =======================                                           DEXKS 27
300     CONTINUE                                                        DEXKS 28
        IF(IWARM.EQ.0) GOTO 902                                         DEXKS 29
        CALL DADMKS(  0,ISGN,HV,PNU,PKS,PKK,PPI,JKST)                   DEXKS 30
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXKS 31
CC      CALL HFILL(816,WT)                                              DEXKS 32
CC      XHELP=HV(1)**2+HV(2)**2+HV(3)**2                                DEXKS 33
CC      CALL HFILL(916,XHELP)                                           DEXKS 34
        CALL RANMAR(RN,1)                                               DEXKS 35
        IF(RN.GT.WT) GOTO 300                                           DEXKS 36
C                                                                       DEXKS 37
      ELSEIF(MODE.EQ. 1) THEN                                           DEXKS 38
C     ======================================                            DEXKS 39
        CALL DADMKS( 1,ISGN,HV,PNU,PKS,PKK,PPI,JKST)                    DEXKS 40
CC      CALL HPRINT(816)                                                DEXKS 41
CC      CALL HPRINT(916)                                                DEXKS 42
      ENDIF                                                             DEXKS 43
C     =====                                                             DEXKS 44
      RETURN                                                            DEXKS 45
 902  WRITE(IOUT, 9020)                                                 DEXKS 46
 9020 FORMAT(' ----- DEXKS: LACK OF INITIALISATION')                    DEXKS 47
      STOP                                                              DEXKS 48
      END                                                               DEXKS 49
      SUBROUTINE DADMKS(MODE,ISGN,HHV,PNU,PKS,PKK,PPI,JKST)             DADMKS 2
C ----------------------------------------------------------------------DADMKS 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            TAUKLE 2
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            TAUKLE 3
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  HHV(4)                                                      DADMKS 9
      REAL  HV(4),PKS(4),PNU(4),PKK(4),PPI(4)                           DADMKS10
      REAL  PDUM1(4),PDUM2(4),PDUM3(4),PDUM4(4)                         DADMKS11
      REAL*4 RRR(3)                                                     DADMKS12
      REAL*8 SWT, SSWT                                                  DADMKS13
      DATA PI /3.141592653589793238462643/                              DADMKS14
      DATA IWARM/0/                                                     DADMKS15
C                                                                       DADMKS16
      IF(MODE.EQ.-1) THEN                                               DADMKS17
C     ===================                                               DADMKS18
        IWARM=1                                                         DADMKS19
        NEVRAW=0                                                        DADMKS20
        NEVACC=0                                                        DADMKS21
        NEVOVR=0                                                        DADMKS22
        SWT=0                                                           DADMKS23
        SSWT=0                                                          DADMKS24
        WTMAX=1E-20                                                     DADMKS25
        DO 15 I=1,500                                                   DADMKS26
C THE INITIALISATION IS DONE WITH THE 66.7% MODE                        DADMKS27
        JKST=10                                                         DADMKS28
        CALL DPHSKS(WT,HV,PDUM1,PDUM2,PDUM3,PDUM4,JKST)                 DADMKS29
        IF(WT.GT.WTMAX/1.2) WTMAX=WT*1.2                                DADMKS30
15      CONTINUE                                                        DADMKS31
CC      CALL HBOOK1(801,'WEIGHT DISTRIBUTION  DADMKS    $',100,0,2)     DADMKS32
CC      PRINT 7003,WTMAX                                                DADMKS33
CC      CALL HBOOK1(112,'-------- K* MASS -------- $',100,0.,2.)        DADMKS34
      ELSEIF(MODE.EQ. 0) THEN                                           DADMKS35
C     =====================================                             DADMKS36
        IF(IWARM.EQ.0) GOTO 902                                         DADMKS37
C  HERE WE CHOOSE RANDOMLY BETWEEN K0 PI+_ (66.7%)                      DADMKS38
C  AND K+_ PI0 (33.3%)                                                  DADMKS39
        DEC1=BRKS                                                       DADMKS40
400     CONTINUE                                                        DADMKS41
        CALL RANMAR(RMOD,1)                                             DADMKS42
        IF(RMOD.LT.DEC1) THEN                                           DADMKS43
          JKST=10                                                       DADMKS44
        ELSE                                                            DADMKS45
          JKST=20                                                       DADMKS46
        ENDIF                                                           DADMKS47
        CALL DPHSKS(WT,HV,PNU,PKS,PKK,PPI,JKST)                         DADMKS48
        CALL RANMAR(RRR,3)                                              DADMKS49
        RN=RRR(1)                                                       DADMKS50
        IF(WT.GT.WTMAX) NEVOVR=NEVOVR+1                                 DADMKS51
        NEVRAW=NEVRAW+1                                                 DADMKS52
        SWT=SWT+WT                                                      DADMKS53
        SSWT=SSWT+WT**2                                                 DADMKS54
        IF(RN*WTMAX.GT.WT) GOTO 400                                     DADMKS55
C ROTATIONS TO BASIC TAU REST FRAME                                     DADMKS56
        COSTHE=-1.+2.*RRR(2)                                            DADMKS57
        THET=ACOS(COSTHE)                                               DADMKS58
        PHI =2*PI*RRR(3)                                                DADMKS59
        CALL ROTOR2(THET,PNU,PNU)                                       DADMKS60
        CALL ROTOR3( PHI,PNU,PNU)                                       DADMKS61
        CALL ROTOR2(THET,PKS,PKS)                                       DADMKS62
        CALL ROTOR3( PHI,PKS,PKS)                                       DADMKS63
        CALL ROTOR2(THET,PKK,PKK)                                       DADMKS64
        CALL ROTOR3(PHI,PKK,PKK)                                        DADMKS65
        CALL ROTOR2(THET,PPI,PPI)                                       DADMKS66
        CALL ROTOR3( PHI,PPI,PPI)                                       DADMKS67
        CALL ROTOR2(THET,HV,HV)                                         DADMKS68
        CALL ROTOR3( PHI,HV,HV)                                         DADMKS69
        DO 44 I=1,3                                                     DADMKS70
 44     HHV(I)=-ISGN*HV(I)                                              DADMKS71
        NEVACC=NEVACC+1                                                 DADMKS72
C                                                                       DADMKS73
      ELSEIF(MODE.EQ. 1) THEN                                           DADMKS74
C     =======================                                           DADMKS75
        IF(NEVRAW.EQ.0) RETURN                                          DADMKS76
        PARGAM=SWT/FLOAT(NEVRAW+1)                                      DADMKS77
        ERROR=0                                                         DADMKS78
        IF(NEVRAW.NE.0) ERROR=SQRT(SSWT/SWT**2-1./FLOAT(NEVRAW))        DADMKS79
        RAT=PARGAM/GAMEL                                                DADMKS80
        WRITE(IOUT, 7010) NEVRAW,NEVACC,NEVOVR,PARGAM,RAT,ERROR         DADMKS81
CC      CALL HPRINT(801)                                                DADMKS82
        GAMPMC(7)=RAT                                                   DADMKS83
        GAMPER(7)=ERROR                                                 DADMKS84
CAM     NEVDEC(7)=NEVACC                                                DADMKS85
      ENDIF                                                             DADMKS86
C     =====                                                             DADMKS87
      RETURN                                                            DADMKS88
 7003 FORMAT(///1X,15(5H*****)                                          DADMKS89
     $ /,' *',     25X,'******** DADMKS INITIALISATION ********',9X,1H* DADMKS90
     $ /,' *',E20.5,5X,'WTMAX  = MAXIMUM WEIGHT                ',9X,1H* DADMKS91
     $  /,1X,15(5H*****)/)                                              DADMKS92
 7010 FORMAT(///1X,15(5H*****)                                          DADMKS93
     $ /,' *',     25X,'******** DADMKS FINAL REPORT   ********',9X,1H* DADMKS94
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF K* DECAYS TOTAL        ',9X,1H*,DADMKS95
     $ /,' *',I20  ,5X,'NEVACC = NO. OF K*  DECS. ACCEPTED     ',9X,1H*,DADMKS96
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADMKS97
     $ /,' *',E20.5,5X,'PARTIAL WTDTH (K* DECAY) IN GEV UNITS  ',9X,1H*,DADMKS98
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADMKS99
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADMK100
     $  /,1X,15(5H*****)/)                                              DADMK101
 902  WRITE(IOUT, 9020)                                                 DADMK102
 9020 FORMAT(' ----- DADMKS: LACK OF INITIALISATION')                   DADMK103
      STOP                                                              DADMK104
      END                                                               DADMK105
      SUBROUTINE DPHSKS(DGAMT,HV,PN,PKS,PKK,PPI,JKST)                   DPHSKS 2
C ----------------------------------------------------------------------DPHSKS 3
C IT SIMULATES KAON* DECAY IN TAU REST FRAME WITH                       DPHSKS 4
C Z-AXIS ALONG KAON* MOMENTUM                                           DPHSKS 5
C     JKST=10 FOR K* --->K0 + PI+-                                      DPHSKS 6
C     JKST=20 FOR K* --->K+- + PI0                                      DPHSKS 7
C ----------------------------------------------------------------------DPHSKS 8
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PKS(4),PKK(4),PPI(4),QQ(4)                DPHSKS11
cam   COMPLEX BWIGS                                                     DPHSKS12
      COMPLEX BWIGM                                                     DPHSKS13
      DATA PI /3.141592653589793238462643/                              DPHSKS14
C                                                                       DPHSKS15
      DATA ICONT /0/                                                    DPHSKS16
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DPHSKS17
      PHSPAC=1./2**11/PI**5                                             DPHSKS18
C TAU MOMENTUM                                                          DPHSKS19
      PT(1)=0.                                                          DPHSKS20
      PT(2)=0.                                                          DPHSKS21
      PT(3)=0.                                                          DPHSKS22
      PT(4)=AMTAU                                                       DPHSKS23
      CALL RANMAR(RR1,1)                                                DPHSKS24
C HERE BEGIN THE K0,PI+_ DECAY                                          DPHSKS25
      IF(JKST.EQ.10)THEN                                                DPHSKS26
C     ==================                                                DPHSKS27
C MASS OF (REAL/VIRTUAL) K*                                             DPHSKS28
        AMS1=(AMPI+AMKZ)**2                                             DPHSKS29
        AMS2=(AMTAU-AMNUTA)**2                                          DPHSKS30
C FLAT PHASE SPACE                                                      DPHSKS31
C       AMX2=AMS1+   RR1*(AMS2-AMS1)                                    DPHSKS32
C       AMX=SQRT(AMX2)                                                  DPHSKS33
C       PHSPAC=PHSPAC*(AMS2-AMS1)                                       DPHSKS34
C PHASE SPACE WITH SAMPLING FOR K* RESONANCE                            DPHSKS35
        ALP1=ATAN((AMS1-AMKST**2)/AMKST/GAMKST)                         DPHSKS36
        ALP2=ATAN((AMS2-AMKST**2)/AMKST/GAMKST)                         DPHSKS37
        ALP=ALP1+RR1*(ALP2-ALP1)                                        DPHSKS38
        AMX2=AMKST**2+AMKST*GAMKST*TAN(ALP)                             DPHSKS39
        AMX=SQRT(AMX2)                                                  DPHSKS40
        PHSPAC=PHSPAC*((AMX2-AMKST**2)**2+(AMKST*GAMKST)**2)            DPHSKS41
     &                /(AMKST*GAMKST)                                   DPHSKS42
        PHSPAC=PHSPAC*(ALP2-ALP1)                                       DPHSKS43
C                                                                       DPHSKS44
C TAU-NEUTRINO MOMENTUM                                                 DPHSKS45
        PN(1)=0                                                         DPHSKS46
        PN(2)=0                                                         DPHSKS47
        PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AMX**2)                  DPHSKS48
        PN(3)=-SQRT((PN(4)-AMNUTA)*(PN(4)+AMNUTA))                      DPHSKS49
C                                                                       DPHSKS50
C K* MOMENTUM                                                           DPHSKS51
        PKS(1)=0                                                        DPHSKS52
        PKS(2)=0                                                        DPHSKS53
        PKS(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AMX**2)                 DPHSKS54
        PKS(3)=-PN(3)                                                   DPHSKS55
        PHSPAC=PHSPAC*(4*PI)*(2*PKS(3)/AMTAU)                           DPHSKS56
C                                                                       DPHSKS57
CAM                                                                     DPHSKS58
        ENPI=( AMX**2+AMPI**2-AMKZ**2 ) / ( 2*AMX )                     DPHSKS59
        PPPI=SQRT((ENPI-AMPI)*(ENPI+AMPI))                              DPHSKS60
        PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AMX)                               DPHSKS61
C CHARGED PI MOMENTUM IN KAON* REST FRAME                               DPHSKS62
        CALL SPHERA(PPPI,PPI)                                           DPHSKS63
        PPI(4)=ENPI                                                     DPHSKS64
C NEUTRAL KAON MOMENTUM IN K* REST FRAME                                DPHSKS65
        DO 20 I=1,3                                                     DPHSKS66
20      PKK(I)=-PPI(I)                                                  DPHSKS67
        PKK(4)=( AMX**2+AMKZ**2-AMPI**2 ) / ( 2*AMX )                   DPHSKS68
        EXE=(PKS(4)+PKS(3))/AMX                                         DPHSKS69
C PION AND K  BOOSTED FROM K* REST FRAME TO TAU REST FRAME              DPHSKS70
        CALL BOSTR3(EXE,PPI,PPI)                                        DPHSKS71
        CALL BOSTR3(EXE,PKK,PKK)                                        DPHSKS72
        DO 30 I=1,4                                                     DPHSKS73
30      QQ(I)=PPI(I)-PKK(I)                                             DPHSKS74
C QQ transverse to PKS                                                  DPHSKS75
        PKSD =PKS(4)*PKS(4)-PKS(3)*PKS(3)-PKS(2)*PKS(2)-PKS(1)*PKS(1)   DPHSKS76
        QQPKS=PKS(4)* QQ(4)-PKS(3)* QQ(3)-PKS(2)* QQ(2)-PKS(1)* QQ(1)   DPHSKS77
        DO 31 I=1,4                                                     DPHSKS78
31      QQ(I)=QQ(I)-PKS(I)*QQPKS/PKSD                                   DPHSKS79
C AMPLITUDE                                                             DPHSKS80
        PRODPQ=PT(4)*QQ(4)                                              DPHSKS81
        PRODNQ=PN(4)*QQ(4)-PN(1)*QQ(1)-PN(2)*QQ(2)-PN(3)*QQ(3)          DPHSKS82
        PRODPN=PT(4)*PN(4)                                              DPHSKS83
        QQ2= QQ(4)**2-QQ(1)**2-QQ(2)**2-QQ(3)**2                        DPHSKS84
        BRAK=(GV**2+GA**2)*(2*PRODPQ*PRODNQ-PRODPN*QQ2)                 DPHSKS85
     &      +(GV**2-GA**2)*AMTAU*AMNUTA*QQ2                             DPHSKS86
C A SIMPLE BREIT-WIGNER IS CHOSEN FOR K* RESONANCE                      DPHSKS87
cam     FKS=CABS(BWIGS(AMX2,AMKST,GAMKST))**2                           DPHSKS88
        FKS=CABS(BWIGM(AMX2,AMKST,GAMKST,AMPI,AMKZ))**2                 DPHSKS89
        AMPLIT=(GFERMI*SCABIB)**2*BRAK*2*FKS                            DPHSKS90
        DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                DPHSKS91
        DO 40 I=1,3                                                     DPHSKS92
 40     HV(I)=2*GV*GA*AMTAU*(2*PRODNQ*QQ(I)-QQ2*PN(I))/BRAK             DPHSKS93
C                                                                       DPHSKS94
C HERE BEGIN THE K+-,PI0 DECAY                                          DPHSKS95
      ELSEIF(JKST.EQ.20)THEN                                            DPHSKS96
C     ======================                                            DPHSKS97
C MASS OF (REAL/VIRTUAL) K*                                             DPHSKS98
        AMS1=(AMPIZ+AMK)**2                                             DPHSKS99
        AMS2=(AMTAU-AMNUTA)**2                                          DPHSK100
C FLAT PHASE SPACE                                                      DPHSK101
C       AMX2=AMS1+   RR1*(AMS2-AMS1)                                    DPHSK102
C       AMX=SQRT(AMX2)                                                  DPHSK103
C       PHSPAC=PHSPAC*(AMS2-AMS1)                                       DPHSK104
C PHASE SPACE WITH SAMPLING FOR K* RESONANCE                            DPHSK105
        ALP1=ATAN((AMS1-AMKST**2)/AMKST/GAMKST)                         DPHSK106
        ALP2=ATAN((AMS2-AMKST**2)/AMKST/GAMKST)                         DPHSK107
        ALP=ALP1+RR1*(ALP2-ALP1)                                        DPHSK108
        AMX2=AMKST**2+AMKST*GAMKST*TAN(ALP)                             DPHSK109
        AMX=SQRT(AMX2)                                                  DPHSK110
        PHSPAC=PHSPAC*((AMX2-AMKST**2)**2+(AMKST*GAMKST)**2)            DPHSK111
     &                /(AMKST*GAMKST)                                   DPHSK112
        PHSPAC=PHSPAC*(ALP2-ALP1)                                       DPHSK113
C                                                                       DPHSK114
C TAU-NEUTRINO MOMENTUM                                                 DPHSK115
        PN(1)=0                                                         DPHSK116
        PN(2)=0                                                         DPHSK117
        PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AMX**2)                  DPHSK118
        PN(3)=-SQRT((PN(4)-AMNUTA)*(PN(4)+AMNUTA))                      DPHSK119
C KAON* MOMENTUM                                                        DPHSK120
        PKS(1)=0                                                        DPHSK121
        PKS(2)=0                                                        DPHSK122
        PKS(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AMX**2)                 DPHSK123
        PKS(3)=-PN(3)                                                   DPHSK124
        PHSPAC=PHSPAC*(4*PI)*(2*PKS(3)/AMTAU)                           DPHSK125
C                                                                       DPHSK126
CAM                                                                     DPHSK127
        ENPI=( AMX**2+AMPIZ**2-AMK**2 ) / ( 2*AMX )                     DPHSK128
        PPPI=SQRT((ENPI-AMPIZ)*(ENPI+AMPIZ))                            DPHSK129
        PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AMX)                               DPHSK130
C NEUTRAL PI MOMENTUM IN K* REST FRAME                                  DPHSK131
        CALL SPHERA(PPPI,PPI)                                           DPHSK132
        PPI(4)=ENPI                                                     DPHSK133
C CHARGED KAON MOMENTUM IN K* REST FRAME                                DPHSK134
        DO 50 I=1,3                                                     DPHSK135
50      PKK(I)=-PPI(I)                                                  DPHSK136
        PKK(4)=( AMX**2+AMK**2-AMPIZ**2 ) / ( 2*AMX )                   DPHSK137
        EXE=(PKS(4)+PKS(3))/AMX                                         DPHSK138
C PION AND K  BOOSTED FROM K* REST FRAME TO TAU REST FRAME              DPHSK139
        CALL BOSTR3(EXE,PPI,PPI)                                        DPHSK140
        CALL BOSTR3(EXE,PKK,PKK)                                        DPHSK141
        DO 60 I=1,4                                                     DPHSK142
60      QQ(I)=PKK(I)-PPI(I)                                             DPHSK143
C QQ transverse to PKS                                                  DPHSK144
        PKSD =PKS(4)*PKS(4)-PKS(3)*PKS(3)-PKS(2)*PKS(2)-PKS(1)*PKS(1)   DPHSK145
        QQPKS=PKS(4)* QQ(4)-PKS(3)* QQ(3)-PKS(2)* QQ(2)-PKS(1)* QQ(1)   DPHSK146
        DO 61 I=1,4                                                     DPHSK147
61      QQ(I)=QQ(I)-PKS(I)*QQPKS/PKSD                                   DPHSK148
C AMPLITUDE                                                             DPHSK149
        PRODPQ=PT(4)*QQ(4)                                              DPHSK150
        PRODNQ=PN(4)*QQ(4)-PN(1)*QQ(1)-PN(2)*QQ(2)-PN(3)*QQ(3)          DPHSK151
        PRODPN=PT(4)*PN(4)                                              DPHSK152
        QQ2= QQ(4)**2-QQ(1)**2-QQ(2)**2-QQ(3)**2                        DPHSK153
        BRAK=(GV**2+GA**2)*(2*PRODPQ*PRODNQ-PRODPN*QQ2)                 DPHSK154
     &      +(GV**2-GA**2)*AMTAU*AMNUTA*QQ2                             DPHSK155
C A SIMPLE BREIT-WIGNER IS CHOSEN FOR THE K* RESONANCE                  DPHSK156
cam     FKS=CABS(BWIGS(AMX2,AMKST,GAMKST))**2                           DPHSK157
        FKS=CABS(BWIGM(AMX2,AMKST,GAMKST,AMK,AMPIZ))**2                 DPHSK158
        AMPLIT=(GFERMI*SCABIB)**2*BRAK*2*FKS                            DPHSK159
        DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                DPHSK160
        DO 70 I=1,3                                                     DPHSK161
 70     HV(I)=2*GV*GA*AMTAU*(2*PRODNQ*QQ(I)-QQ2*PN(I))/BRAK             DPHSK162
      ENDIF                                                             DPHSK163
      RETURN                                                            DPHSK164
      END                                                               DPHSK165
      SUBROUTINE DPHNPI(DGAMT,HV,PN,PR,PPI,JNPI)                        DPHNPI 2
C ----------------------------------------------------------------------DPHNPI 3
C IT SIMULATES MULTIPI DECAY IN TAU REST FRAME WITH                     DPHNPI 4
C Z-AXIS OPPOSITE TO NEUTRINO MOMENTUM                                  DPHNPI 5
C ----------------------------------------------------------------------DPHNPI 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
C                                                                       DPHNPI10
      REAL  PN(4),PR(4),PPI(4,9),HV(4)                                  DPHNPI11
      REAL  PV(5,9),PT(4),UE(3),BE(3)                                   DPHNPI12
      REAL*4 RRR(9),RORD(9)                                             DPHNPI13
      real dpar(8)                                                      DPHNPI14
C                                                                       DPHNPI15
      DATA PI /3.141592653589793238462643/                              DPHNPI16
      DATA DPAR/2.,5.,15.,60.,250.,1500.,1.2E4,1.2E5/                   DPHNPI17
C                                                                       DPHNPI18
C     PAWT(A,B,C)=SQRT((A**2-(B+C)**2)*(A**2-(B-C)**2))/(2.*A)          DPHNPI19
      PAWT(A,B,C)=SQRT(MAX(0.,(A**2-(B+C)**2)*(A**2-(B-C)**2)))/(2.*A)  DPHNPI20
C                                                                       DPHNPI21
      AMPIK(I,J)=DCDMAS(IDFFIN(I,J))                                    DPHNPI22
C                                                                       DPHNPI23
C                                                                       DPHNPI24
C TAU MOMENTUM                                                          DPHNPI25
      PT(1)=0.                                                          DPHNPI26
      PT(2)=0.                                                          DPHNPI27
      PT(3)=0.                                                          DPHNPI28
      PT(4)=AMTAU                                                       DPHNPI29
C                                                                       DPHNPI30
C MASS OF VIRTUAL W                                                     DPHNPI31
      ND=MULPIK(JNPI)                                                   DPHNPI32
      PS=0.                                                             DPHNPI33
      PHSPAC = 1./2.**5 /PI**2                                          DPHNPI34
      DO 4 I=1,ND                                                       DPHNPI35
4     PS  =PS+AMPIK(I,JNPI)                                             DPHNPI36
      CALL RANMAR(RR1,1)                                                DPHNPI37
      AMS1=PS**2                                                        DPHNPI38
      AMS2=(AMTAU-AMNUTA)**2                                            DPHNPI39
C                                                                       DPHNPI40
C                                                                       DPHNPI41
      AMX2=AMS1+   RR1*(AMS2-AMS1)                                      DPHNPI42
      AMX =SQRT(AMX2)                                                   DPHNPI43
      AMW =AMX                                                          DPHNPI44
      PHSPAC=PHSPAC * (AMS2-AMS1)                                       DPHNPI45
C                                                                       DPHNPI46
C TAU-NEUTRINO MOMENTUM                                                 DPHNPI47
      PN(1)=0                                                           DPHNPI48
      PN(2)=0                                                           DPHNPI49
      PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AMX2)                      DPHNPI50
      PN(3)=-SQRT((PN(4)-AMNUTA)*(PN(4)+AMNUTA))                        DPHNPI51
C W MOMENTUM                                                            DPHNPI52
      PR(1)=0                                                           DPHNPI53
      PR(2)=0                                                           DPHNPI54
      PR(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AMX2)                      DPHNPI55
      PR(3)=-PN(3)                                                      DPHNPI56
      PHSPAC=PHSPAC * (4.*PI) * (2.*PR(3)/AMTAU)                        DPHNPI57
C                                                                       DPHNPI58
C AMPLITUDE  (cf YS.Tsai Phys.Rev.D4,2821(1971)                         DPHNPI59
C    or F.Gilman SH.Rhie Phys.Rev.D31,1066(1985)                        DPHNPI60
C                                                                       DPHNPI61
        PXQ=AMTAU*PR(4)                                                 DPHNPI62
        PXN=AMTAU*PN(4)                                                 DPHNPI63
        QXN=PR(4)*PN(4)-PR(1)*PN(1)-PR(2)*PN(2)-PR(3)*PN(3)             DPHNPI64
                                                                        DPHNPI65
        BRAK=2*(GV**2+GA**2)*(2*PXQ*QXN+AMX2*PXN)                       DPHNPI66
     &      -6*(GV**2-GA**2)*AMTAU*AMNUTA*AMX2                          DPHNPI67
                                                                        DPHNPI68
CAM     Assume neutrino mass=0. and sum over final polarisation         DPHNPI69
C     BRAK= 2*(AMTAU**2-AMX2) * (AMTAU**2+2.*AMX2)                      DPHNPI70
      AMPLIT=CCABIB**2*GFERMI**2/2. * BRAK * AMX2*SIGEE(AMX2,JNPI)      DPHNPI71
      DGAMT=1./(2.*AMTAU)*AMPLIT*PHSPAC                                 DPHNPI72
C                                                                       DPHNPI73
C   ISOTROPIC W DECAY IN W REST FRAME                                   DPHNPI74
      PHSPAC = 1./2.**(6*ND-7) /PI**(3*ND-4)                            DPHNPI75
      PHSMAX = 1./dpar(nd-2)                                            DPHNPI76
      DO 200 I=1,4                                                      DPHNPI77
  200 PV(I,1)=PR(I)                                                     DPHNPI78
      PV(5,1)=AMW                                                       DPHNPI79
      PV(5,ND)=AMPIK(ND,JNPI)                                           DPHNPI80
C    COMPUTE MAX. PHASE SPACE FACTOR                                    DPHNPI81
      PMAX=AMW-PS+AMPIK(ND,JNPI)                                        DPHNPI82
      PMIN=.0                                                           DPHNPI83
      DO 220 IL=ND-1,1,-1                                               DPHNPI84
      PMAX=PMAX+AMPIK(IL,JNPI)                                          DPHNPI85
      PMIN=PMIN+AMPIK(IL+1,JNPI)                                        DPHNPI86
  220 PHSMAX=PHSMAX*PAWT(PMAX,PMIN,AMPIK(IL,JNPI))                      DPHNPI87
CAM  GENERATE ND-2 EFFECTIVE MASSES  (cf LUDECY)                        DPHNPI88
      PHSPAC = 1./2.**(6*ND-7) /PI**(3*ND-4)                            DPHNPI89
  240 RORD(1)=1.                                                        DPHNPI90
      CALL RANMAR(RRR,ND-1)                                             DPHNPI91
      DO 260 IL=2,ND-1                                                  DPHNPI92
      RSAV=RRR(IL)                                                      DPHNPI93
      DO 250 JL=IL-1,1,-1                                               DPHNPI94
      IF(RSAV.LE.RORD(JL)) GOTO 260                                     DPHNPI95
  250 RORD(JL+1)=RORD(JL)                                               DPHNPI96
  260 RORD(JL+1)=RSAV                                                   DPHNPI97
      RORD(ND)=0.                                                       DPHNPI98
      PHS=1.                                                            DPHNPI99
      DO 270 IL=ND-1,1,-1                                               DPHNP100
      PV(5,IL)=PV(5,IL+1)+AMPIK(IL,JNPI)                                DPHNP101
     &        +(RORD(IL)-RORD(IL+1))*(PV(5,1)-PS)                       DPHNP102
  270 PHS=PHS*PAWT(PV(5,IL),PV(5,IL+1),AMPIK(IL,JNPI))                  DPHNP103
      RN = RRR(1)                                                       DPHNP104
      IF(PHS.LT.RN*PHSMAX) GOTO 240                                     DPHNP105
C...PERFORM SUCCESSIVE TWO-PARTICLE DECAYS IN RESPECTIVE CM FRAME       DPHNP106
  280 DO 300 IL=1,ND-1                                                  DPHNP107
      PA=PAWT(PV(5,IL),PV(5,IL+1),AMPIK(IL,JNPI))                       DPHNP108
      CALL RANMAR(RRR,2)                                                DPHNP109
      UE(3)=2.*RRR(1)-1.                                                DPHNP110
      PHI=2.*PI*RRR(2)                                                  DPHNP111
      UE(1)=SQRT(1.-UE(3)**2)*COS(PHI)                                  DPHNP112
      UE(2)=SQRT(1.-UE(3)**2)*SIN(PHI)                                  DPHNP113
      DO 290 J=1,3                                                      DPHNP114
      PPI(J,IL)=PA*UE(J)                                                DPHNP115
  290 PV(J,IL+1)=-PA*UE(J)                                              DPHNP116
      PPI(4,IL)=SQRT(PA**2+AMPIK(IL,JNPI)**2)                           DPHNP117
      PV(4,IL+1)=SQRT(PA**2+PV(5,IL+1)**2)                              DPHNP118
      PHSPAC=PHSPAC *(4.*PI)*(2.*PA/PV(5,IL))                           DPHNP119
  300 CONTINUE                                                          DPHNP120
C...LORENTZ TRANSFORM DECAY PRODUCTS TO TAU FRAME                       DPHNP121
      DO 310 J=1,4                                                      DPHNP122
  310 PPI(J,ND)=PV(J,ND)                                                DPHNP123
      DO 340 IL=ND-1,1,-1                                               DPHNP124
      DO 320 J=1,3                                                      DPHNP125
  320 BE(J)=PV(J,IL)/PV(4,IL)                                           DPHNP126
      GAM=PV(4,IL)/PV(5,IL)                                             DPHNP127
      DO 340 I=IL,ND                                                    DPHNP128
      BEP=BE(1)*PPI(1,I)+BE(2)*PPI(2,I)+BE(3)*PPI(3,I)                  DPHNP129
      DO 330 J=1,3                                                      DPHNP130
  330 PPI(J,I)=PPI(J,I)+GAM*(GAM*BEP/(1.+GAM)+PPI(4,I))*BE(J)           DPHNP131
      PPI(4,I)=GAM*(PPI(4,I)+BEP)                                       DPHNP132
  340 CONTINUE                                                          DPHNP133
C                                                                       DPHNP134
            HV(4)=1.                                                    DPHNP135
            HV(3)=0.                                                    DPHNP136
            HV(2)=0.                                                    DPHNP137
            HV(1)=0.                                                    DPHNP138
      RETURN                                                            DPHNP139
      END                                                               DPHNP140
      FUNCTION SIGEE(Q2,JNP)                                            SIGEE  2
C ----------------------------------------------------------------------SIGEE  3
C  e+e- cross section in the (1.GEV2,AMTAU**2) region                   SIGEE  4
C  normalised to sig0 = 4/3 pi alfa2                                    SIGEE  5
C  used in matrix element for multipion tau decays                      SIGEE  6
C  cf YS.Tsai        Phys.Rev D4 ,2821(1971)                            SIGEE  7
C     F.Gilman et al Phys.Rev D17,1846(1978)                            SIGEE  8
C     C.Kiesling, to be pub. in High Energy e+e- Physics (1988)         SIGEE  9
C  DATSIG(*,1) = e+e- -> pi+pi-2pi0                                     SIGEE 10
C  DATSIG(*,2) = e+e- -> 2pi+2pi-                                       SIGEE 11
C  DATSIG(*,3) = 5-pion contribution (a la TN.Pham et al)               SIGEE 12
C                (Phys Lett 78B,623(1978)                               SIGEE 13
C  DATSIG(*,5) = e+e- -> 6pi                                            SIGEE 14
C                                                                       SIGEE 15
C  4- and 6-pion cross sections from data                               SIGEE 16
C  5-pion contribution related to 4-pion cross section                  SIGEE 17
C                                                                       SIGEE 18
C     Called by DPHNPI                                                  SIGEE 19
C ----------------------------------------------------------------------SIGEE 20
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      REAL*4 DATSIG(17,6)                                               SIGEE 22
C                                                                       SIGEE 23
      DATA DATSIG/                                                      SIGEE 24
     1  7.40,12.00,16.15,21.25,24.90,29.55,34.15,37.40,37.85,37.40,     SIGEE 25
     2 36.00,33.25,30.50,27.70,24.50,21.25,18.90,                       SIGEE 26
     3  1.24, 2.50, 3.70, 5.40, 7.45,10.75,14.50,18.20,22.30,28.90,     SIGEE 27
     4 29.35,25.60,22.30,18.60,14.05,11.60, 9.10,                       SIGEE 28
     5 17*.0,                                                           SIGEE 29
     6 17*.0,                                                           SIGEE 30
     7 9*.0,.65,1.25,2.20,3.15,5.00,5.75,7.80,8.25,                     SIGEE 31
     8 17*.0/                                                           SIGEE 32
      DATA SIG0 / 86.8 /                                                SIGEE 33
      DATA PI /3.141592653589793238462643/                              SIGEE 34
      DATA INIT / 0 /                                                   SIGEE 35
C                                                                       SIGEE 36
      JNPI=JNP                                                          SIGEE 37
      IF(JNP.EQ.4) JNPI=3                                               SIGEE 38
      IF(JNP.EQ.3) JNPI=4                                               SIGEE 39
      IF(INIT.EQ.0) THEN                                                SIGEE 40
        INIT=1                                                          SIGEE 41
        AMPI2=AMPI**2                                                   SIGEE 42
        FPI = .943*AMPI                                                 SIGEE 43
        DO 100 I=1,17                                                   SIGEE 44
        DATSIG(I,2) = DATSIG(I,2)/2.                                    SIGEE 45
        DATSIG(I,1) = DATSIG(I,1) + DATSIG(I,2)                         SIGEE 46
        S = 1.025+(I-1)*.05                                             SIGEE 47
        FACT=0.                                                         SIGEE 48
        S2=S**2                                                         SIGEE 49
        DO 200 J=1,17                                                   SIGEE 50
        T= 1.025+(J-1)*.05                                              SIGEE 51
        IF(T . GT. S-AMPI ) GO TO 201                                   SIGEE 52
        T2=T**2                                                         SIGEE 53
        FACT=(T2/S2)**2*SQRT((S2-T2-AMPI2)**2-4.*T2*AMPI2)/S2 *2.*T*.05 SIGEE 54
        FACT = FACT * (DATSIG(J,1)+DATSIG(J+1,1))                       SIGEE 55
 200    DATSIG(I,3) = DATSIG(I,3) + FACT                                SIGEE 56
 201    DATSIG(I,3) = DATSIG(I,3) /(2*PI*FPI)**2                        SIGEE 57
        DATSIG(I,4) = DATSIG(I,3)                                       SIGEE 58
        DATSIG(I,6) = DATSIG(I,5)                                       SIGEE 59
 100    CONTINUE                                                        SIGEE 60
C       WRITE(6,1000) DATSIG                                            SIGEE 61
 1000   FORMAT(///1X,' EE SIGMA USED IN MULTIPI DECAYS'/                SIGEE 62
     %        (17F7.2/))                                                SIGEE 63
      ENDIF                                                             SIGEE 64
      Q=SQRT(Q2)                                                        SIGEE 65
      QMIN=1.                                                           SIGEE 66
      IF(Q.LT.QMIN) THEN                                                SIGEE 67
        SIGEE=DATSIG(1,JNPI)+                                           SIGEE 68
     &       (DATSIG(2,JNPI)-DATSIG(1,JNPI))*(Q-1.)/.05                 SIGEE 69
      ELSEIF(Q.LT.1.8) THEN                                             SIGEE 70
        DO 1 I=1,16                                                     SIGEE 71
        QMAX = QMIN + .05                                               SIGEE 72
        IF(Q.LT.QMAX) GO TO 2                                           SIGEE 73
        QMIN = QMIN + .05                                               SIGEE 74
 1      CONTINUE                                                        SIGEE 75
 2      SIGEE=DATSIG(I,JNPI)+                                           SIGEE 76
     &       (DATSIG(I+1,JNPI)-DATSIG(I,JNPI)) * (Q-QMIN)/.05           SIGEE 77
      ELSEIF(Q.GT.1.8) THEN                                             SIGEE 78
        SIGEE=DATSIG(17,JNPI)+                                          SIGEE 79
     &       (DATSIG(17,JNPI)-DATSIG(16,JNPI)) * (Q-1.8)/.05            SIGEE 80
      ENDIF                                                             SIGEE 81
      IF(SIGEE.LT..0) SIGEE=0.                                          SIGEE 82
C                                                                       SIGEE 83
      SIGEE = SIGEE/(6.*PI**2*SIG0)                                     SIGEE 84
C                                                                       SIGEE 85
      RETURN                                                            SIGEE 86
      END                                                               SIGEE 87
      FUNCTION SIGOLD(Q2,JNPI)                                          SIGEE 88
C ----------------------------------------------------------------------SIGEE 89
C  e+e- cross section in the (1.GEV2,AMTAU**2) region                   SIGEE 90
C  normalised to sig0 = 4/3 pi alfa2                                    SIGEE 91
C  used in matrix element for multipion tau decays                      SIGEE 92
C  cf YS.Tsai        Phys.Rev D4 ,2821(1971)                            SIGEE 93
C     F.Gilman et al Phys.Rev D17,1846(1978)                            SIGEE 94
C     C.Kiesling, to be pub. in High Energy e+e- Physics (1988)         SIGEE 95
C  DATSIG(*,1) = e+e- -> pi+pi-2pi0                                     SIGEE 96
C  DATSIG(*,2) = e+e- -> 2pi+2pi-                                       SIGEE 97
C  DATSIG(*,3) = 5-pion contribution (a la TN.Pham et al)               SIGEE 98
C                (Phys Lett 78B,623(1978)                               SIGEE 99
C  DATSIG(*,4) = e+e- -> 6pi                                            SIGEE100
C                                                                       SIGEE101
C  4- and 6-pion cross sections from data                               SIGEE102
C  5-pion contribution related to 4-pion cross section                  SIGEE103
C                                                                       SIGEE104
C     Called by DPHNPI                                                  SIGEE105
C ----------------------------------------------------------------------SIGEE106
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      REAL*4 DATSIG(17,4)                                               SIGEE108
C                                                                       SIGEE109
      DATA DATSIG/                                                      SIGEE110
     1  7.40,12.00,16.15,21.25,24.90,29.55,34.15,37.40,37.85,37.40,     SIGEE111
     2 36.00,33.25,30.50,27.70,24.50,21.25,18.90,                       SIGEE112
     3  1.24, 2.50, 3.70, 5.40, 7.45,10.75,14.50,18.20,22.30,28.90,     SIGEE113
     4 29.35,25.60,22.30,18.60,14.05,11.60, 9.10,                       SIGEE114
     5 17*.0,                                                           SIGEE115
     6 9*.0,.65,1.25,2.20,3.15,5.00,5.75,7.80,8.25/                     SIGEE116
      DATA SIG0 / 86.8 /                                                SIGEE117
      DATA PI /3.141592653589793238462643/                              SIGEE118
      DATA INIT / 0 /                                                   SIGEE119
C                                                                       SIGEE120
      IF(INIT.EQ.0) THEN                                                SIGEE121
        INIT=1                                                          SIGEE122
        AMPI2=AMPI**2                                                   SIGEE123
        FPI = .943*AMPI                                                 SIGEE124
        DO 100 I=1,17                                                   SIGEE125
        DATSIG(I,2) = DATSIG(I,2)/2.                                    SIGEE126
        DATSIG(I,1) = DATSIG(I,1) + DATSIG(I,2)                         SIGEE127
        S = 1.025+(I-1)*.05                                             SIGEE128
        FACT=0.                                                         SIGEE129
        S2=S**2                                                         SIGEE130
        DO 200 J=1,17                                                   SIGEE131
        T= 1.025+(J-1)*.05                                              SIGEE132
        IF(T . GT. S-AMPI ) GO TO 201                                   SIGEE133
        T2=T**2                                                         SIGEE134
        FACT=(T2/S2)**2*SQRT((S2-T2-AMPI2)**2-4.*T2*AMPI2)/S2 *2.*T*.05 SIGEE135
        FACT = FACT * (DATSIG(J,1)+DATSIG(J+1,1))                       SIGEE136
 200    DATSIG(I,3) = DATSIG(I,3) + FACT                                SIGEE137
 201    DATSIG(I,3) = DATSIG(I,3) /(2*PI*FPI)**2                        SIGEE138
 100    CONTINUE                                                        SIGEE139
C       WRITE(6,1000) DATSIG                                            SIGEE140
 1000   FORMAT(///1X,' EE SIGMA USED IN MULTIPI DECAYS'/                SIGEE141
     %        (17F7.2/))                                                SIGEE142
      ENDIF                                                             SIGEE143
      Q=SQRT(Q2)                                                        SIGEE144
      QMIN=1.                                                           SIGEE145
      IF(Q.LT.QMIN) THEN                                                SIGEE146
        SIGEE=DATSIG(1,JNPI)+                                           SIGEE147
     &       (DATSIG(2,JNPI)-DATSIG(1,JNPI))*(Q-1.)/.05                 SIGEE148
      ELSEIF(Q.LT.1.8) THEN                                             SIGEE149
        DO 1 I=1,16                                                     SIGEE150
        QMAX = QMIN + .05                                               SIGEE151
        IF(Q.LT.QMAX) GO TO 2                                           SIGEE152
        QMIN = QMIN + .05                                               SIGEE153
 1      CONTINUE                                                        SIGEE154
 2      SIGEE=DATSIG(I,JNPI)+                                           SIGEE155
     &       (DATSIG(I+1,JNPI)-DATSIG(I,JNPI)) * (Q-QMIN)/.05           SIGEE156
      ELSEIF(Q.GT.1.8) THEN                                             SIGEE157
        SIGEE=DATSIG(17,JNPI)+                                          SIGEE158
     &       (DATSIG(17,JNPI)-DATSIG(16,JNPI)) * (Q-1.8)/.05            SIGEE159
      ENDIF                                                             SIGEE160
      IF(SIGEE.LT..0) SIGEE=0.                                          SIGEE161
C                                                                       SIGEE162
      SIGEE = SIGEE/(6.*PI**2*SIG0)                                     SIGEE163
      SIGOLD=SIGEE                                                      SIGEE164
C                                                                       SIGEE165
      RETURN                                                            SIGEE166
      END                                                               SIGEE167
      SUBROUTINE DPHSPK(DGAMT,HV,PN,PAA,PNPI,JAA)                       DPHSPK 2
C ----------------------------------------------------------------------DPHSPK 3
* IT SIMULATES THREE PI (K) DECAY IN THE TAU REST FRAME                 DPHSPK 4
* Z-AXIS ALONG HADRONIC SYSTEM                                          DPHSPK 5
C ----------------------------------------------------------------------DPHSPK 6
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      REAL  HV(4),PN(4),PAA(4),PIM1(4),PIM2(4),PIPL(4),PNPI(4,9)        DPHSPK 8
C MATRIX ELEMENT NUMBER:                                                DPHSPK 9
      MNUM=JAA                                                          DPHSPK10
C TYPE OF THE GENERATION:                                               DPHSPK11
      KEYT=4                                                            DPHSPK12
      IF(JAA.EQ.7) KEYT=3                                               DPHSPK13
C --- MASSES OF THE DECAY PRODUCTS                                      DPHSPK14
       AMP1=DCDMAS(IDFFIN(1,JAA+NM4+NM5+NM6))                           DPHSPK15
       AMP2=DCDMAS(IDFFIN(2,JAA+NM4+NM5+NM6))                           DPHSPK16
       AMP3=DCDMAS(IDFFIN(3,JAA+NM4+NM5+NM6))                           DPHSPK17
      CALL                                                              DPHSPK18
     $   DPHTRE(DGAMT,HV,PN,PAA,PIM1,AMP1,PIM2,AMP2,PIPL,AMP3,KEYT,MNUM)DPHSPK19
            DO I=1,4                                                    DPHSPK20
              PNPI(I,1)=PIM1(I)                                         DPHSPK21
              PNPI(I,2)=PIM2(I)                                         DPHSPK22
              PNPI(I,3)=PIPL(I)                                         DPHSPK23
            ENDDO                                                       DPHSPK24
      END                                                               DPHSPK25
      SUBROUTINE                                                        DPHTRE 2
     $   DPHTRE(DGAMT,HV,PN,PAA,PIM1,AMPA,PIM2,AMPB,PIPL,AMP3,KEYT,MNUM)DPHTRE 3
C ----------------------------------------------------------------------DPHTRE 4
* IT SIMULATES A1  DECAY IN TAU REST FRAME WITH                         DPHTRE 5
* Z-AXIS ALONG A1  MOMENTUM                                             DPHTRE 6
* it can be also used to generate K K pi and K pi pi tau decays.        DPHTRE 7
* INPUT PARAMETERS                                                      DPHTRE 8
* KEYT - algorithm controlling switch                                   DPHTRE 9
*  2   - flat phase space PIM1 PIM2 symmetrized statistical factor 1/2  DPHTRE10
*  1   - like 1 but peaked around a1 and rho (two channels) masses.     DPHTRE11
*  3   - peaked around omega, all particles different                   DPHTRE12
* other- flat phase space, all particles different                      DPHTRE13
* AMP1 - mass of first pi, etc. (1-3)                                   DPHTRE14
* MNUM - matrix element type                                            DPHTRE15
*  0   - a1 matrix element                                              DPHTRE16
* 1-6  - matrix element for K pi pi, K K pi decay modes                 DPHTRE17
*  7   - pi- pi0 gamma matrix element                                   DPHTRE18
C ----------------------------------------------------------------------DPHTRE19
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PAA(4),PIM1(4),PIM2(4),PIPL(4)            DPHTRE22
      REAL  PR(4)                                                       DPHTRE23
      REAL*4 RRR(5)                                                     DPHTRE24
      DATA PI /3.141592653589793238462643/                              DPHTRE25
      DATA ICONT /0/                                                    DPHTRE26
      XLAM(X,Y,Z)=SQRT(ABS((X-Y-Z)**2-4.0*Y*Z))                         DPHTRE27
C AMRO, GAMRO IS ONLY A PARAMETER FOR GETING HIGHT EFFICIENCY           DPHTRE28
C                                                                       DPHTRE29
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DPHTRE30
C D**3 P /2E/(2PI)**3 (2PI)**4 DELTA4(SUM P)                            DPHTRE31
      PHSPAC=1./2**17/PI**8                                             DPHTRE32
C TAU MOMENTUM                                                          DPHTRE33
      PT(1)=0.                                                          DPHTRE34
      PT(2)=0.                                                          DPHTRE35
      PT(3)=0.                                                          DPHTRE36
      PT(4)=AMTAU                                                       DPHTRE37
C                                                                       DPHTRE38
      CALL RANMAR(RRR,5)                                                DPHTRE39
      RR=RRR(5)                                                         DPHTRE40
C                                                                       DPHTRE41
      CALL CHOICE(MNUM,RR,ICHAN,PROB1,PROB2,PROB3,                      DPHTRE42
     $            AMRX,GAMRX,AMRA,GAMRA,AMRB,GAMRB)                     DPHTRE43
      IF     (ICHAN.EQ.1) THEN                                          DPHTRE44
        AMP1=AMPB                                                       DPHTRE45
        AMP2=AMPA                                                       DPHTRE46
      ELSEIF (ICHAN.EQ.2) THEN                                          DPHTRE47
        AMP1=AMPA                                                       DPHTRE48
        AMP2=AMPB                                                       DPHTRE49
      ELSE                                                              DPHTRE50
        AMP1=AMPB                                                       DPHTRE51
        AMP2=AMPA                                                       DPHTRE52
      ENDIF                                                             DPHTRE53
CAM                                                                     DPHTRE54
        RR1=RRR(1)                                                      DPHTRE55
        AMS1=(AMP1+AMP2+AMP3)**2                                        DPHTRE56
        AMS2=(AMTAU-AMNUTA)**2                                          DPHTRE57
C phase space with sampling for a1  resonance                           DPHTRE58
        ALP1=ATAN((AMS1-AMRX**2)/AMRX/GAMRX)                            DPHTRE59
        ALP2=ATAN((AMS2-AMRX**2)/AMRX/GAMRX)                            DPHTRE60
        ALP=ALP1+RR1*(ALP2-ALP1)                                        DPHTRE61
        AM3SQ =AMRX**2+AMRX*GAMRX*TAN(ALP)                              DPHTRE62
        AM3 =SQRT(AM3SQ)                                                DPHTRE63
        PHSPAC=PHSPAC*((AM3SQ-AMRX**2)**2+(AMRX*GAMRX)**2)/(AMRX*GAMRX) DPHTRE64
        PHSPAC=PHSPAC*(ALP2-ALP1)                                       DPHTRE65
C mass of (real/virtual) rho -                                          DPHTRE66
        RR2=RRR(2)                                                      DPHTRE67
        AMS1=(AMP2+AMP3)**2                                             DPHTRE68
        AMS2=(AM3-AMP1)**2                                              DPHTRE69
      IF (ICHAN.LE.2) THEN                                              DPHTRE70
C phase space with sampling for rho resonance,                          DPHTRE71
        ALP1=ATAN((AMS1-AMRA**2)/AMRA/GAMRA)                            DPHTRE72
        ALP2=ATAN((AMS2-AMRA**2)/AMRA/GAMRA)                            DPHTRE73
        ALP=ALP1+RR2*(ALP2-ALP1)                                        DPHTRE74
        AM2SQ =AMRA**2+AMRA*GAMRA*TAN(ALP)                              DPHTRE75
        AM2 =SQRT(AM2SQ)                                                DPHTRE76
C --- this part of the jacobian will be recovered later --------------- DPHTRE77
C     PHSPAC=PHSPAC*(ALP2-ALP1)                                         DPHTRE78
C     PHSPAC=PHSPAC*((AM2SQ-AMRA**2)**2+(AMRA*GAMRA)**2)/(AMRA*GAMRA)   DPHTRE79
C---------------------------------------------------------------------- DPHTRE80
      ELSE                                                              DPHTRE81
C flat phase space;                                                     DPHTRE82
        AM2SQ=AMS1+   RR2*(AMS2-AMS1)                                   DPHTRE83
        AM2 =SQRT(AM2SQ)                                                DPHTRE84
        PHF0=(AMS2-AMS1)                                                DPHTRE85
      ENDIF                                                             DPHTRE86
C rho restframe, define pipl and pim1                                   DPHTRE87
        ENQ1=(AM2SQ-AMP2**2+AMP3**2)/(2*AM2)                            DPHTRE88
        ENQ2=(AM2SQ+AMP2**2-AMP3**2)/(2*AM2)                            DPHTRE89
        PPI=         ENQ1**2-AMP3**2                                    DPHTRE90
        PPPI=SQRT(ABS(ENQ1**2-AMP3**2))                                 DPHTRE91
C --- this part of jacobian will be recovered later                     DPHTRE92
        PHF1=(4*PI)*(2*PPPI/AM2)                                        DPHTRE93
C pi minus momentum in rho rest frame                                   DPHTRE94
        CALL SPHERA(PPPI,PIPL)                                          DPHTRE95
        PIPL(4)=ENQ1                                                    DPHTRE96
C pi0 1 momentum in rho rest frame                                      DPHTRE97
        DO 30 I=1,3                                                     DPHTRE98
 30     PIM1(I)=-PIPL(I)                                                DPHTRE99
        PIM1(4)=ENQ2                                                    DPHTR100
C a1 rest frame, define pim2                                            DPHTR101
*       RHO  MOMENTUM                                                   DPHTR102
        PR(1)=0                                                         DPHTR103
        PR(2)=0                                                         DPHTR104
        PR(4)=1./(2*AM3)*(AM3**2+AM2**2-AMP1**2)                        DPHTR105
        PR(3)= SQRT(ABS(PR(4)**2-AM2**2))                               DPHTR106
        PPI  =          PR(4)**2-AM2**2                                 DPHTR107
*       PI0 2 MOMENTUM                                                  DPHTR108
        PIM2(1)=0                                                       DPHTR109
        PIM2(2)=0                                                       DPHTR110
        PIM2(4)=1./(2*AM3)*(AM3**2-AM2**2+AMP1**2)                      DPHTR111
        PIM2(3)=-PR(3)                                                  DPHTR112
      PHF2=(4*PI)*(2*PR(3)/AM3)                                         DPHTR113
C old pions boosted from rho rest frame to a1 rest frame                DPHTR114
      EXE=(PR(4)+PR(3))/AM2                                             DPHTR115
      CALL BOSTR3(EXE,PIPL,PIPL)                                        DPHTR116
      CALL BOSTR3(EXE,PIM1,PIM1)                                        DPHTR117
      RR3=RRR(3)                                                        DPHTR118
      RR4=RRR(4)                                                        DPHTR119
      THET =ACOS(-1.+2*RR3)                                             DPHTR120
      PHI = 2*PI*RR4                                                    DPHTR121
      CALL ROTPOL(THET,PHI,PIPL)                                        DPHTR122
      CALL ROTPOL(THET,PHI,PIM1)                                        DPHTR123
      CALL ROTPOL(THET,PHI,PIM2)                                        DPHTR124
      CALL ROTPOL(THET,PHI,PR)                                          DPHTR125
C                                                                       DPHTR126
* now to the tau rest frame, define a1 and neutrino momenta             DPHTR127
* a1  momentum                                                          DPHTR128
      PAA(1)=0                                                          DPHTR129
      PAA(2)=0                                                          DPHTR130
      PAA(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AM3**2)                   DPHTR131
      PAA(3)= SQRT(ABS(PAA(4)**2-AM3**2))                               DPHTR132
      PPI   =          PAA(4)**2-AM3**2                                 DPHTR133
      PHSPAC=PHSPAC*(4*PI)*(2*PAA(3)/AMTAU)                             DPHTR134
* tau-neutrino momentum                                                 DPHTR135
      PN(1)=0                                                           DPHTR136
      PN(2)=0                                                           DPHTR137
      PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AM3**2)                    DPHTR138
      PN(3)=-PAA(3)                                                     DPHTR139
c here we correct for the jacobians of the two chains                   DPHTR140
c ---first channel ------- pim1+pipl                                    DPHTR141
        AMS1=(AMP2+AMP3)**2                                             DPHTR142
        AMS2=(AM3-AMP1)**2                                              DPHTR143
        ALP1=ATAN((AMS1-AMRA**2)/AMRA/GAMRA)                            DPHTR144
        ALP2=ATAN((AMS2-AMRA**2)/AMRA/GAMRA)                            DPHTR145
       XPRO =      (PIM1(3)+PIPL(3))**2                                 DPHTR146
     $            +(PIM1(2)+PIPL(2))**2+(PIM1(1)+PIPL(1))**2            DPHTR147
       AM2SQ=-XPRO+(PIM1(4)+PIPL(4))**2                                 DPHTR148
c jacobian of speeding                                                  DPHTR149
       FF1   =       ((AM2SQ-AMRA**2)**2+(AMRA*GAMRA)**2)/(AMRA*GAMRA)  DPHTR150
       FF1   =FF1     *(ALP2-ALP1)                                      DPHTR151
c lambda of rho decay                                                   DPHTR152
       GG1   =       (4*PI)*(XLAM(AM2SQ,AMP2**2,AMP3**2)/AM2SQ)         DPHTR153
c lambda of a1 decay                                                    DPHTR154
       GG1   =GG1   *(4*PI)*SQRT(4*XPRO/AM3SQ)                          DPHTR155
       XJAJE=GG1*(AMS2-AMS1)                                            DPHTR156
c ---second channel ------ pim2+pipl                                    DPHTR157
       AMS1=(AMP1+AMP3)**2                                              DPHTR158
       AMS2=(AM3-AMP2)**2                                               DPHTR159
        ALP1=ATAN((AMS1-AMRB**2)/AMRB/GAMRB)                            DPHTR160
        ALP2=ATAN((AMS2-AMRB**2)/AMRB/GAMRB)                            DPHTR161
       XPRO =      (PIM2(3)+PIPL(3))**2                                 DPHTR162
     $            +(PIM2(2)+PIPL(2))**2+(PIM2(1)+PIPL(1))**2            DPHTR163
       AM2SQ=-XPRO+(PIM2(4)+PIPL(4))**2                                 DPHTR164
       FF2   =       ((AM2SQ-AMRB**2)**2+(AMRB*GAMRB)**2)/(AMRB*GAMRB)  DPHTR165
       FF2   =FF2     *(ALP2-ALP1)                                      DPHTR166
       GG2   =       (4*PI)*(XLAM(AM2SQ,AMP1**2,AMP3**2)/AM2SQ)         DPHTR167
       GG2   =GG2   *(4*PI)*SQRT(4*XPRO/AM3SQ)                          DPHTR168
       XJADW=GG2*(AMS2-AMS1)                                            DPHTR169
C                                                                       DPHTR170
       A1=0.0                                                           DPHTR171
       A2=0.0                                                           DPHTR172
       A3=0.0                                                           DPHTR173
       XJAC1=FF1*GG1                                                    DPHTR174
       XJAC2=FF2*GG2                                                    DPHTR175
       IF (ICHAN.EQ.2) THEN                                             DPHTR176
         XJAC3=XJADW                                                    DPHTR177
       ELSE                                                             DPHTR178
         XJAC3=XJAJE                                                    DPHTR179
       ENDIF                                                            DPHTR180
       IF (XJAC1.NE.0.0) A1=PROB1/XJAC1                                 DPHTR181
       IF (XJAC2.NE.0.0) A2=PROB2/XJAC2                                 DPHTR182
       IF (XJAC3.NE.0.0) A3=PROB3/XJAC3                                 DPHTR183
C                                                                       DPHTR184
       IF (A1+A2+A3.NE.0.0) THEN                                        DPHTR185
         PHSPAC=PHSPAC/(A1+A2+A3)                                       DPHTR186
       ELSE                                                             DPHTR187
         PHSPAC=0.0                                                     DPHTR188
       ENDIF                                                            DPHTR189
       IF(ICHAN.EQ.2) THEN                                              DPHTR190
        DO 70 I=1,4                                                     DPHTR191
        X=PIM1(I)                                                       DPHTR192
        PIM1(I)=PIM2(I)                                                 DPHTR193
 70     PIM2(I)=X                                                       DPHTR194
       ENDIF                                                            DPHTR195
* all pions boosted from a1  rest frame to tau rest frame               DPHTR196
* z-axis antiparallel to neutrino momentum                              DPHTR197
      EXE=(PAA(4)+PAA(3))/AM3                                           DPHTR198
      CALL BOSTR3(EXE,PIPL,PIPL)                                        DPHTR199
      CALL BOSTR3(EXE,PIM1,PIM1)                                        DPHTR200
      CALL BOSTR3(EXE,PIM2,PIM2)                                        DPHTR201
      CALL BOSTR3(EXE,PR,PR)                                            DPHTR202
c partial width consists of phase space and amplitude                   DPHTR203
      IF (MNUM.EQ.8) THEN                                               DPHTR204
        CALL DAMPOG(PT,PN,PIM1,PIM2,PIPL,AMPLIT,HV)                     DPHTR205
C      ELSEIF (MNUM.EQ.0) THEN                                          DPHTR206
C        CALL DAMPAA(PT,PN,PIM1,PIM2,PIPL,AMPLIT,HV)                    DPHTR207
      ELSE                                                              DPHTR208
        CALL DAMPPK(MNUM,PT,PN,PIM1,PIM2,PIPL,AMPLIT,HV)                DPHTR209
      ENDIF                                                             DPHTR210
      IF (KEYT.EQ.1.OR.KEYT.EQ.2) THEN                                  DPHTR211
c the statistical factor for identical pi's is cancelled with           DPHTR212
c two, for two modes of a1 decay namelly pi+pi-pi- and pi-pi0pi0        DPHTR213
Cam     PHSPAC=PHSPAC*2.0                                               DPHTR214
Cam     PHSPAC=PHSPAC/2.                                                DPHTR215
      ENDIF                                                             DPHTR216
      DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                  DPHTR217
      END                                                               DPHTR218
      SUBROUTINE DAMPAA(PT,PN,PIM1,PIM2,PIPL,AMPLIT,HV)                 DAMPAA 2
C ----------------------------------------------------------------------DAMPAA 3
* CALCULATES DIFFERENTIAL CROSS SECTION AND POLARIMETER VECTOR          DAMPAA 4
* FOR TAU DECAY INTO A1, A1 DECAYS NEXT INTO RHO+PI AND RHO INTO PI+PI. DAMPAA 5
* ALL SPIN EFFECTS IN THE FULL DECAY CHAIN ARE TAKEN INTO ACCOUNT.      DAMPAA 6
* CALCULATIONS DONE IN TAU REST FRAME WITH Z-AXIS ALONG NEUTRINO MOMENT DAMPAA 7
* THE ROUTINE IS WRITEN FOR ZERO NEUTRINO MASS.                         DAMPAA 8
C                                                                       DAMPAA 9
C     called by : DPHSAA                                                DAMPAA10
C ----------------------------------------------------------------------DAMPAA11
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON /TESTA1/ KEYA1                                             DAMPAA14
      REAL  HV(4),PT(4),PN(4),PIM1(4),PIM2(4),PIPL(4)                   DAMPAA15
      REAL  PAA(4),VEC1(4),VEC2(4)                                      DAMPAA16
      REAL  PIVEC(4),PIAKS(4),HVM(4)                                    DAMPAA17
      COMPLEX BWIGN,HADCUR(4),FPIK                                      DAMPAA18
      DATA ICONT /1/                                                    DAMPAA19
C                                                                       DAMPAA20
* F CONSTANTS FOR A1, A1-RHO-PI, AND RHO-PI-PI                          DAMPAA21
*                                                                       DAMPAA22
      DATA  FPI /93.3E-3/                                               DAMPAA23
* THIS INLINE FUNCT. CALCULATES THE SCALAR PART OF THE PROPAGATOR       DAMPAA24
      BWIGN(XM,AM,GAMMA)=1./CMPLX(XM**2-AM**2,GAMMA*AM)                 DAMPAA25
C                                                                       DAMPAA26
* FOUR MOMENTUM OF A1                                                   DAMPAA27
      DO 10 I=1,4                                                       DAMPAA28
   10 PAA(I)=PIM1(I)+PIM2(I)+PIPL(I)                                    DAMPAA29
* MASSES OF A1, AND OF TWO PI-PAIRS WHICH MAY FORM RHO                  DAMPAA30
      XMAA   =SQRT(ABS(PAA(4)**2-PAA(3)**2-PAA(2)**2-PAA(1)**2))        DAMPAA31
      XMRO1  =SQRT(ABS((PIPL(4)+PIM1(4))**2-(PIPL(1)+PIM1(1))**2        DAMPAA32
     $                -(PIPL(2)+PIM1(2))**2-(PIPL(3)+PIM1(3))**2))      DAMPAA33
      XMRO2  =SQRT(ABS((PIPL(4)+PIM2(4))**2-(PIPL(1)+PIM2(1))**2        DAMPAA34
     $                -(PIPL(2)+PIM2(2))**2-(PIPL(3)+PIM2(3))**2))      DAMPAA35
* ELEMENTS OF HADRON CURRENT                                            DAMPAA36
      PROD1  =PAA(4)*(PIM1(4)-PIPL(4))-PAA(1)*(PIM1(1)-PIPL(1))         DAMPAA37
     $       -PAA(2)*(PIM1(2)-PIPL(2))-PAA(3)*(PIM1(3)-PIPL(3))         DAMPAA38
      PROD2  =PAA(4)*(PIM2(4)-PIPL(4))-PAA(1)*(PIM2(1)-PIPL(1))         DAMPAA39
     $       -PAA(2)*(PIM2(2)-PIPL(2))-PAA(3)*(PIM2(3)-PIPL(3))         DAMPAA40
      DO 40 I=1,4                                                       DAMPAA41
      VEC1(I)= PIM1(I)-PIPL(I) -PAA(I)*PROD1/XMAA**2                    DAMPAA42
 40   VEC2(I)= PIM2(I)-PIPL(I) -PAA(I)*PROD2/XMAA**2                    DAMPAA43
* HADRON CURRENT SATURATED WITH A1 AND RHO RESONANCES                   DAMPAA44
      IF (KEYA1.EQ.1) THEN                                              DAMPAA45
        FA1=9.87                                                        DAMPAA46
        FAROPI=1.0                                                      DAMPAA47
        FRO2PI=1.0                                                      DAMPAA48
        FNORM=FA1/SQRT(2.)*FAROPI*FRO2PI                                DAMPAA49
        DO 45 I=1,4                                                     DAMPAA50
        HADCUR(I)= CMPLX(FNORM) *AMA1**2*BWIGN(XMAA,AMA1,GAMA1)         DAMPAA51
     $              *(CMPLX(VEC1(I))*AMRO**2*BWIGN(XMRO1,AMRO,GAMRO)    DAMPAA52
     $               +CMPLX(VEC2(I))*AMRO**2*BWIGN(XMRO2,AMRO,GAMRO))   DAMPAA53
 45     CONTINUE                                                        DAMPAA54
      ELSE                                                              DAMPAA55
        FNORM=2.0*SQRT(2.)/3.0/FPI                                      DAMPAA56
        GAMAX=GAMA1*GFUN(XMAA**2)/GFUN(AMA1**2)                         DAMPAA57
        DO 46 I=1,4                                                     DAMPAA58
        HADCUR(I)= CMPLX(FNORM) *AMA1**2*BWIGN(XMAA,AMA1,GAMAX)         DAMPAA59
     $              *(CMPLX(VEC1(I))*FPIK(XMRO1)                        DAMPAA60
     $               +CMPLX(VEC2(I))*FPIK(XMRO2))                       DAMPAA61
 46     CONTINUE                                                        DAMPAA62
      ENDIF                                                             DAMPAA63
C                                                                       DAMPAA64
* CALCULATE PI-VECTORS: VECTOR AND AXIAL                                DAMPAA65
      CALL CLVEC(HADCUR,PN,PIVEC)                                       DAMPAA66
      CALL CLAXI(HADCUR,PN,PIAKS)                                       DAMPAA67
      CALL CLNUT(HADCUR,BRAKM,HVM)                                      DAMPAA68
* SPIN INDEPENDENT PART OF DECAY DIFF-CROSS-SECT. IN TAU REST  FRAME    DAMPAA69
      BRAK= (GV**2+GA**2)*PT(4)*PIVEC(4) +2.*GV*GA*PT(4)*PIAKS(4)       DAMPAA70
     &     +2.*(GV**2-GA**2)*AMNUTA*AMTAU*BRAKM                         DAMPAA71
      AMPLIT=(GFERMI*CCABIB)**2*BRAK/2.                                 DAMPAA72
C THE STATISTICAL FACTOR FOR IDENTICAL PI'S WAS CANCELLED WITH          DAMPAA73
C TWO, FOR TWO MODES OF A1 DECAY NAMELLY PI+PI-PI- AND PI-PI0PI0        DAMPAA74
C POLARIMETER VECTOR IN TAU REST FRAME                                  DAMPAA75
      DO 90 I=1,3                                                       DAMPAA76
      HV(I)=-(AMTAU*((GV**2+GA**2)*PIAKS(I)+2.*GV*GA*PIVEC(I)))         DAMPAA77
     &      +(GV**2-GA**2)*AMNUTA*AMTAU*HVM(I)                          DAMPAA78
C HV IS DEFINED FOR TAU-    WITH GAMMA=B+HV*POL                         DAMPAA79
      HV(I)=-HV(I)/BRAK                                                 DAMPAA80
 90   CONTINUE                                                          DAMPAA81
      END                                                               DAMPAA82
                                                                        DAMPAA83
      FUNCTION GFUN(QKWA)                                               GFUN   2
C ****************************************************************      GFUN   3
C     G-FUNCTION USED TO INRODUCE ENERGY DEPENDENCE IN A1 WIDTH         GFUN   4
C ****************************************************************      GFUN   5
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
C                                                                       GFUN   7
       IF (QKWA.LT.(AMRO+AMPI)**2) THEN                                 GFUN   8
          GFUN=4.1*(QKWA-9*AMPIZ**2)**3                                 GFUN   9
     $        *(1.-3.3*(QKWA-9*AMPIZ**2)+5.8*(QKWA-9*AMPIZ**2)**2)      GFUN  10
       ELSE                                                             GFUN  11
          GFUN=QKWA*(1.623+10.38/QKWA-9.32/QKWA**2+0.65/QKWA**3)        GFUN  12
       ENDIF                                                            GFUN  13
      END                                                               GFUN  14
      COMPLEX FUNCTION BWIGS(S,M,G)                                     BWIGS  2
C **********************************************************            BWIGS  3
C     P-WAVE BREIT-WIGNER  FOR K*                                       BWIGS  4
C **********************************************************            BWIGS  5
      REAL S,M,G                                                        BWIGS  6
      REAL PI,PIM,QS,QM,W,GS,MK                                         BWIGS  7
      DATA INIT /0/                                                     BWIGS  8
      P(A,B,C)=SQRT(ABS(ABS(((A+B-C)**2-4.*A*B)/4./A)                   BWIGS  9
     $                    +(((A+B-C)**2-4.*A*B)/4./A))/2.0)             BWIGS 10
C ------------ PARAMETERS --------------------                          BWIGS 11
      IF (INIT.EQ.0) THEN                                               BWIGS 12
      INIT=1                                                            BWIGS 13
      PI=3.141592654                                                    BWIGS 14
      PIM=.139                                                          BWIGS 15
      MK=.493667                                                        BWIGS 16
C -------  BREIT-WIGNER -----------------------                         BWIGS 17
      ENDIF                                                             BWIGS 18
      IF (S.GT.(PIM+MK)**2) THEN                                        BWIGS 19
         QS=P(S,PIM**2,MK**2)                                           BWIGS 20
         QM=P(M**2,PIM**2,MK**2)                                        BWIGS 21
         W=SQRT(S)                                                      BWIGS 22
         GS=G*(M/W)*(QS/QM)**3                                          BWIGS 23
      ELSE                                                              BWIGS 24
         GS=0.0                                                         BWIGS 25
      ENDIF                                                             BWIGS 26
      BWIGS=M**2/CMPLX(M**2-S,-M*GS)                                    BWIGS 27
      RETURN                                                            BWIGS 28
      END                                                               BWIGS 29
      COMPLEX FUNCTION BWIG(S,M,G)                                      BWIG   2
C **********************************************************            BWIG   3
C     P-WAVE BREIT-WIGNER  FOR RHO                                      BWIG   4
C **********************************************************            BWIG   5
      REAL S,M,G                                                        BWIG   6
      REAL PI,PIM,QS,QM,W,GS                                            BWIG   7
      DATA INIT /0/                                                     BWIG   8
C ------------ PARAMETERS --------------------                          BWIG   9
      IF (INIT.EQ.0) THEN                                               BWIG  10
      INIT=1                                                            BWIG  11
      PI=3.141592654                                                    BWIG  12
      PIM=.139                                                          BWIG  13
C -------  BREIT-WIGNER -----------------------                         BWIG  14
         ENDIF                                                          BWIG  15
       IF (S.GT.4.*PIM**2) THEN                                         BWIG  16
         QS=SQRT(ABS(ABS(S/4.-PIM**2)+(S/4.-PIM**2))/2.0)               BWIG  17
         QM=SQRT(M**2/4.-PIM**2)                                        BWIG  18
         W=SQRT(S)                                                      BWIG  19
         GS=G*(M/W)*(QS/QM)**3                                          BWIG  20
       ELSE                                                             BWIG  21
         GS=0.0                                                         BWIG  22
       ENDIF                                                            BWIG  23
         BWIG=M**2/CMPLX(M**2-S,-M*GS)                                  BWIG  24
      RETURN                                                            BWIG  25
      END                                                               BWIG  26
      COMPLEX FUNCTION FPIK(W)                                          FPIK   2
C **********************************************************            FPIK   3
C     PION FORM FACTOR                                                  FPIK   4
C **********************************************************            FPIK   5
      COMPLEX BWIG                                                      FPIK   6
      REAL ROM,ROG,ROM1,ROG1,BETA1,PI,PIM,S,W                           FPIK   7
      EXTERNAL BWIG                                                     FPIK   8
      DATA  INIT /0/                                                    FPIK   9
C                                                                       FPIK  10
C ------------ PARAMETERS --------------------                          FPIK  11
      IF (INIT.EQ.0 ) THEN                                              FPIK  12
      INIT=1                                                            FPIK  13
      PI=3.141592654                                                    FPIK  14
      PIM=.140                                                          FPIK  15
      ROM=0.773                                                         FPIK  16
      ROG=0.145                                                         FPIK  17
      ROM1=1.370                                                        FPIK  18
      ROG1=0.510                                                        FPIK  19
      BETA1=-0.145                                                      FPIK  20
      ENDIF                                                             FPIK  21
C -----------------------------------------------                       FPIK  22
      S=W**2                                                            FPIK  23
      FPIK= (BWIG(S,ROM,ROG)+BETA1*BWIG(S,ROM1,ROG1))                   FPIK  24
     & /(1+BETA1)                                                       FPIK  25
      RETURN                                                            FPIK  26
      END                                                               FPIK  27
      FUNCTION FPIRHO(W)                                                FPIRHO 2
C **********************************************************            FPIRHO 3
C     SQUARE OF PION FORM FACTOR                                        FPIRHO 4
C **********************************************************            FPIRHO 5
      COMPLEX FPIK                                                      FPIRHO 6
      FPIRHO=CABS(FPIK(W))**2                                           FPIRHO 7
      END                                                               FPIRHO 8
      SUBROUTINE CLVEC(HJ,PN,PIV)                                       CLVEC  2
C ----------------------------------------------------------------------CLVEC  3
* CALCULATES THE "VECTOR TYPE"  PI-VECTOR  PIV                          CLVEC  4
* NOTE THAT THE NEUTRINO MOM. PN IS ASSUMED TO BE ALONG Z-AXIS          CLVEC  5
C                                                                       CLVEC  6
C     called by : DAMPAA                                                CLVEC  7
C ----------------------------------------------------------------------CLVEC  8
      REAL PIV(4),PN(4)                                                 CLVEC  9
      COMPLEX HJ(4),HN                                                  CLVEC 10
C                                                                       CLVEC 11
      HN= HJ(4)*CMPLX(PN(4))-HJ(3)*CMPLX(PN(3))                         CLVEC 12
      HH= REAL(HJ(4)*CONJG(HJ(4))-HJ(3)*CONJG(HJ(3))                    CLVEC 13
     $        -HJ(2)*CONJG(HJ(2))-HJ(1)*CONJG(HJ(1)))                   CLVEC 14
      DO 10 I=1,4                                                       CLVEC 15
   10 PIV(I)=4.*REAL(HN*CONJG(HJ(I)))-2.*HH*PN(I)                       CLVEC 16
      RETURN                                                            CLVEC 17
      END                                                               CLVEC 18
      SUBROUTINE CLAXI(HJ,PN,PIA)                                       CLAXI  2
C ----------------------------------------------------------------------CLAXI  3
* CALCULATES THE "AXIAL TYPE"  PI-VECTOR  PIA                           CLAXI  4
* NOTE THAT THE NEUTRINO MOM. PN IS ASSUMED TO BE ALONG Z-AXIS          CLAXI  5
C SIGN is chosen +/- for decay of TAU +/- respectively                  CLAXI  6
C     called by : DAMPAA, CLNUT                                         CLAXI  7
C ----------------------------------------------------------------------CLAXI  8
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / IDFC  / IDFF                                             IDFC   2
      REAL PIA(4),PN(4)                                                 CLAXI 11
      COMPLEX HJ(4),HJC(4)                                              CLAXI 12
C     DET2(I,J)=AIMAG(HJ(I)*HJC(J)-HJ(J)*HJC(I))                        CLAXI 13
C -- here was an error (ZW, 21.11.1991)                                 CLAXI 14
      DET2(I,J)=AIMAG(HJC(I)*HJ(J)-HJC(J)*HJ(I))                        CLAXI 15
C -- it was affecting sign of A_LR asymmetry in a1 decay.               CLAXI 16
C -- note also collision of notation of gamma_va as defined in          CLAXI 17
C -- TAUOLA paper and J.H. Kuhn and Santamaria Z. Phys C 48 (1990) 445  CLAXI 18
* -----------------------------------                                   CLAXI 19
      IF     (KTOM.EQ.1.OR.KTOM.EQ.-1) THEN                             CLAXI 20
        SIGN= IDFF/ABS(IDFF)                                            CLAXI 21
      ELSEIF (KTOM.EQ.2) THEN                                           CLAXI 22
        SIGN=-IDFF/ABS(IDFF)                                            CLAXI 23
      ELSE                                                              CLAXI 24
        PRINT *, 'STOP IN CLAXI: KTOM=',KTOM                            CLAXI 25
        STOP                                                            CLAXI 26
      ENDIF                                                             CLAXI 27
C                                                                       CLAXI 28
      DO 10 I=1,4                                                       CLAXI 29
 10   HJC(I)=CONJG(HJ(I))                                               CLAXI 30
      PIA(1)= -2.*PN(3)*DET2(2,4)+2.*PN(4)*DET2(2,3)                    CLAXI 31
      PIA(2)= -2.*PN(4)*DET2(1,3)+2.*PN(3)*DET2(1,4)                    CLAXI 32
      PIA(3)=  2.*PN(4)*DET2(1,2)                                       CLAXI 33
      PIA(4)=  2.*PN(3)*DET2(1,2)                                       CLAXI 34
C ALL FOUR INDICES ARE UP SO  PIA(3) AND PIA(4) HAVE SAME SIGN          CLAXI 35
      DO 20 I=1,4                                                       CLAXI 36
  20  PIA(I)=PIA(I)*SIGN                                                CLAXI 37
      END                                                               CLAXI 38
      SUBROUTINE CLNUT(HJ,B,HV)                                         CLNUT  2
C ----------------------------------------------------------------------CLNUT  3
* CALCULATES THE CONTRIBUTION BY NEUTRINO MASS                          CLNUT  4
* NOTE THE TAU IS ASSUMED TO BE AT REST                                 CLNUT  5
C                                                                       CLNUT  6
C     called by : DAMPAA                                                CLNUT  7
C ----------------------------------------------------------------------CLNUT  8
      COMPLEX HJ(4)                                                     CLNUT  9
      REAL HV(4),P(4)                                                   CLNUT 10
      DATA P /3*0.,1.0/                                                 CLNUT 11
C                                                                       CLNUT 12
      CALL CLAXI(HJ,P,HV)                                               CLNUT 13
      B=REAL( HJ(4)*AIMAG(HJ(4)) - HJ(3)*AIMAG(HJ(3))                   CLNUT 14
     &      - HJ(2)*AIMAG(HJ(2)) - HJ(1)*AIMAG(HJ(1))  )                CLNUT 15
      RETURN                                                            CLNUT 16
      END                                                               CLNUT 17
      SUBROUTINE DAMPOG(PT,PN,PIM1,PIM2,PIPL,AMPLIT,HV)                 DAMPOG 2
C ----------------------------------------------------------------------DAMPOG 3
* CALCULATES DIFFERENTIAL CROSS SECTION AND POLARIMETER VECTOR          DAMPOG 4
* FOR TAU DECAY INTO A1, A1 DECAYS NEXT INTO RHO+PI AND RHO INTO PI+PI. DAMPOG 5
* ALL SPIN EFFECTS IN THE FULL DECAY CHAIN ARE TAKEN INTO ACCOUNT.      DAMPOG 6
* CALCULATIONS DONE IN TAU REST FRAME WITH Z-AXIS ALONG NEUTRINO MOMENT DAMPOG 7
* THE ROUTINE IS WRITEN FOR ZERO NEUTRINO MASS.                         DAMPOG 8
C                                                                       DAMPOG 9
C     called by : DPHTRE                                                DAMPOG10
C ----------------------------------------------------------------------DAMPOG11
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON /TESTA1/ KEYA1                                             DAMPOG14
      REAL  HV(4),PT(4),PN(4),PIM1(4),PIM2(4),PIPL(4)                   DAMPOG15
      REAL  PAA(4),VEC1(4),VEC2(4)                                      DAMPOG16
      REAL  PIVEC(4),PIAKS(4),HVM(4)                                    DAMPOG17
      COMPLEX BWIGN,HADCUR(4),FNORM,FORMOM                              DAMPOG18
      DATA ICONT /1/                                                    DAMPOG19
* THIS INLINE FUNCT. CALCULATES THE SCALAR PART OF THE PROPAGATOR       DAMPOG20
      BWIGN(XM,AM,GAMMA)=1./CMPLX(XM**2-AM**2,GAMMA*AM)                 DAMPOG21
C                                                                       DAMPOG22
* FOUR MOMENTUM OF A1                                                   DAMPOG23
      DO 10 I=1,4                                                       DAMPOG24
      VEC1(I)=0.0                                                       DAMPOG25
      VEC2(I)=0.0                                                       DAMPOG26
      HV(I)  =0.0                                                       DAMPOG27
   10 PAA(I)=PIM1(I)+PIM2(I)+PIPL(I)                                    DAMPOG28
      VEC1(1)=1.0                                                       DAMPOG29
* MASSES OF A1, AND OF TWO PI-PAIRS WHICH MAY FORM RHO                  DAMPOG30
      XMAA   =SQRT(ABS(PAA(4)**2-PAA(3)**2-PAA(2)**2-PAA(1)**2))        DAMPOG31
      XMOM   =SQRT(ABS( (PIM2(4)+PIPL(4))**2-(PIM2(3)+PIPL(3))**2       DAMPOG32
     $                 -(PIM2(2)+PIPL(2))**2-(PIM2(1)+PIPL(1))**2   ))  DAMPOG33
      XMRO2  =(PIPL(1))**2 +(PIPL(2))**2 +(PIPL(3))**2                  DAMPOG34
* ELEMENTS OF HADRON CURRENT                                            DAMPOG35
      PROD1  =VEC1(1)*PIPL(1)                                           DAMPOG36
      PROD2  =VEC2(2)*PIPL(2)                                           DAMPOG37
      P12    =PIM1(4)*PIM2(4)-PIM1(1)*PIM2(1)                           DAMPOG38
     $       -PIM1(2)*PIM2(2)-PIM1(3)*PIM2(3)                           DAMPOG39
      P1PL   =PIM1(4)*PIPL(4)-PIM1(1)*PIPL(1)                           DAMPOG40
     $       -PIM1(2)*PIPL(2)-PIM1(3)*PIPL(3)                           DAMPOG41
      P2PL   =PIPL(4)*PIM2(4)-PIPL(1)*PIM2(1)                           DAMPOG42
     $       -PIPL(2)*PIM2(2)-PIPL(3)*PIM2(3)                           DAMPOG43
      DO 40 I=1,3                                                       DAMPOG44
        VEC1(I)= (VEC1(I)-PROD1/XMRO2*PIPL(I))                          DAMPOG45
 40   CONTINUE                                                          DAMPOG46
      GNORM=SQRT(VEC1(1)**2+VEC1(2)**2+VEC1(3)**2)                      DAMPOG47
      DO 41 I=1,3                                                       DAMPOG48
        VEC1(I)= VEC1(I)/GNORM                                          DAMPOG49
 41   CONTINUE                                                          DAMPOG50
      VEC2(1)=(VEC1(2)*PIPL(3)-VEC1(3)*PIPL(2))/SQRT(XMRO2)             DAMPOG51
      VEC2(2)=(VEC1(3)*PIPL(1)-VEC1(1)*PIPL(3))/SQRT(XMRO2)             DAMPOG52
      VEC2(3)=(VEC1(1)*PIPL(2)-VEC1(2)*PIPL(1))/SQRT(XMRO2)             DAMPOG53
      P1VEC1   =PIM1(4)*VEC1(4)-PIM1(1)*VEC1(1)                         DAMPOG54
     $         -PIM1(2)*VEC1(2)-PIM1(3)*VEC1(3)                         DAMPOG55
      P2VEC1   =VEC1(4)*PIM2(4)-VEC1(1)*PIM2(1)                         DAMPOG56
     $         -VEC1(2)*PIM2(2)-VEC1(3)*PIM2(3)                         DAMPOG57
      P1VEC2   =PIM1(4)*VEC2(4)-PIM1(1)*VEC2(1)                         DAMPOG58
     $         -PIM1(2)*VEC2(2)-PIM1(3)*VEC2(3)                         DAMPOG59
      P2VEC2   =VEC2(4)*PIM2(4)-VEC2(1)*PIM2(1)                         DAMPOG60
     $         -VEC2(2)*PIM2(2)-VEC2(3)*PIM2(3)                         DAMPOG61
* HADRON CURRENT                                                        DAMPOG62
      FNORM=FORMOM(XMAA,XMOM)                                           DAMPOG63
      BRAK=0.0                                                          DAMPOG64
      DO 120 JJ=1,2                                                     DAMPOG65
        DO 45 I=1,4                                                     DAMPOG66
       IF (JJ.EQ.1) THEN                                                DAMPOG67
        HADCUR(I) = FNORM *(                                            DAMPOG68
     $             VEC1(I)*(AMPI**2*P1PL-P2PL*(P12-P1PL))               DAMPOG69
     $            -PIM2(I)*(P2VEC1*P1PL-P1VEC1*P2PL)                    DAMPOG70
     $            +PIPL(I)*(P2VEC1*P12 -P1VEC1*(AMPI**2+P2PL))  )       DAMPOG71
       ELSE                                                             DAMPOG72
        HADCUR(I) = FNORM *(                                            DAMPOG73
     $             VEC2(I)*(AMPI**2*P1PL-P2PL*(P12-P1PL))               DAMPOG74
     $            -PIM2(I)*(P2VEC2*P1PL-P1VEC2*P2PL)                    DAMPOG75
     $            +PIPL(I)*(P2VEC2*P12 -P1VEC2*(AMPI**2+P2PL))  )       DAMPOG76
       ENDIF                                                            DAMPOG77
 45     CONTINUE                                                        DAMPOG78
C                                                                       DAMPOG79
* CALCULATE PI-VECTORS: VECTOR AND AXIAL                                DAMPOG80
      CALL CLVEC(HADCUR,PN,PIVEC)                                       DAMPOG81
      CALL CLAXI(HADCUR,PN,PIAKS)                                       DAMPOG82
      CALL CLNUT(HADCUR,BRAKM,HVM)                                      DAMPOG83
* SPIN INDEPENDENT PART OF DECAY DIFF-CROSS-SECT. IN TAU REST  FRAME    DAMPOG84
      BRAK=BRAK+(GV**2+GA**2)*PT(4)*PIVEC(4) +2.*GV*GA*PT(4)*PIAKS(4)   DAMPOG85
     &         +2.*(GV**2-GA**2)*AMNUTA*AMTAU*BRAKM                     DAMPOG86
      DO 90 I=1,3                                                       DAMPOG87
      HV(I)=HV(I)-(AMTAU*((GV**2+GA**2)*PIAKS(I)+2.*GV*GA*PIVEC(I)))    DAMPOG88
     &      +(GV**2-GA**2)*AMNUTA*AMTAU*HVM(I)                          DAMPOG89
  90  CONTINUE                                                          DAMPOG90
C HV IS DEFINED FOR TAU-    WITH GAMMA=B+HV*POL                         DAMPOG91
 120  CONTINUE                                                          DAMPOG92
      AMPLIT=(GFERMI*CCABIB)**2*BRAK/2.                                 DAMPOG93
C THE STATISTICAL FACTOR FOR IDENTICAL PI'S WAS CANCELLED WITH          DAMPOG94
C TWO, FOR TWO MODES OF A1 DECAY NAMELLY PI+PI-PI- AND PI-PI0PI0        DAMPOG95
C POLARIMETER VECTOR IN TAU REST FRAME                                  DAMPOG96
      DO 91 I=1,3                                                       DAMPOG97
      HV(I)=-HV(I)/BRAK                                                 DAMPOG98
 91   CONTINUE                                                          DAMPOG99
      END                                                               DAMPO100
      SUBROUTINE DAMPPK(MNUM,PT,PN,PIM1,PIM2,PIM3,AMPLIT,HV)            DAMPPK 2
C ----------------------------------------------------------------------DAMPPK 3
* CALCULATES DIFFERENTIAL CROSS SECTION AND POLARIMETER VECTOR          DAMPPK 4
* FOR TAU DECAY INTO K K pi, K pi pi.                                   DAMPPK 5
* ALL SPIN EFFECTS IN THE FULL DECAY CHAIN ARE TAKEN INTO ACCOUNT.      DAMPPK 6
* CALCULATIONS DONE IN TAU REST FRAME WITH Z-AXIS ALONG NEUTRINO MOMENT DAMPPK 7
C MNUM DECAY MODE IDENTIFIER.                                           DAMPPK 8
C                                                                       DAMPPK 9
C     called by : DPHTRE                                                DAMPPK10
C ----------------------------------------------------------------------DAMPPK11
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PIM1(4),PIM2(4),PIM3(4)                   DAMPPK14
      REAL  PAA(4),VEC1(4),VEC2(4),VEC3(4),VEC4(4),VEC5(4)              DAMPPK15
      REAL  PIVEC(4),PIAKS(4),HVM(4)                                    DAMPPK16
      REAL FNORM(0:7),COEF(1:5,0:7)                                     DAMPPK17
      COMPLEX HADCUR(4),FORM1,FORM2,FORM3,FORM4,FORM5,UROJ              DAMPPK18
      EXTERNAL FORM1,FORM2,FORM3,FORM4,FORM5                            DAMPPK19
      DATA PI /3.141592653589793238462643/                              DAMPPK20
      DATA ICONT /0/                                                    DAMPPK21
C                                                                       DAMPPK22
      DATA  FPI /93.3E-3/                                               DAMPPK23
      IF (ICONT.EQ.0) THEN                                              DAMPPK24
       ICONT=1                                                          DAMPPK25
       UROJ=CMPLX(0.0,1.0)                                              DAMPPK26
       DWAPI0=SQRT(2.0)                                                 DAMPPK27
       FNORM(0)=CCABIB/FPI                                              DAMPPK28
       FNORM(1)=CCABIB/FPI                                              DAMPPK29
       FNORM(2)=CCABIB/FPI                                              DAMPPK30
       FNORM(3)=CCABIB/FPI                                              DAMPPK31
       FNORM(4)=SCABIB/FPI/DWAPI0                                       DAMPPK32
       FNORM(5)=SCABIB/FPI                                              DAMPPK33
       FNORM(6)=SCABIB/FPI                                              DAMPPK34
       FNORM(7)=CCABIB/FPI                                              DAMPPK35
C                                                                       DAMPPK36
       COEF(1,0)= 2.0*SQRT(2.)/3.0                                      DAMPPK37
       COEF(2,0)=-2.0*SQRT(2.)/3.0                                      DAMPPK38
       COEF(3,0)= 0.0                                                   DAMPPK39
       COEF(4,0)= FPI                                                   DAMPPK40
       COEF(5,0)= 0.0                                                   DAMPPK41
C                                                                       DAMPPK42
       COEF(1,1)=-SQRT(2.)/3.0                                          DAMPPK43
       COEF(2,1)= SQRT(2.)/3.0                                          DAMPPK44
       COEF(3,1)= 0.0                                                   DAMPPK45
       COEF(4,1)= FPI                                                   DAMPPK46
       COEF(5,1)= SQRT(2.)                                              DAMPPK47
C                                                                       DAMPPK48
       COEF(1,2)=-SQRT(2.)/3.0                                          DAMPPK49
       COEF(2,2)= SQRT(2.)/3.0                                          DAMPPK50
       COEF(3,2)= 0.0                                                   DAMPPK51
       COEF(4,2)= 0.0                                                   DAMPPK52
       COEF(5,2)=-SQRT(2.)                                              DAMPPK53
C                                                                       DAMPPK54
       COEF(1,3)= 0.0                                                   DAMPPK55
       COEF(2,3)=-1.0                                                   DAMPPK56
       COEF(3,3)= 0.0                                                   DAMPPK57
       COEF(4,3)= 0.0                                                   DAMPPK58
       COEF(5,3)= 0.0                                                   DAMPPK59
C                                                                       DAMPPK60
       COEF(1,4)= 1.0/SQRT(2.)/3.0                                      DAMPPK61
       COEF(2,4)=-1.0/SQRT(2.)/3.0                                      DAMPPK62
       COEF(3,4)= 0.0                                                   DAMPPK63
       COEF(4,4)= 0.0                                                   DAMPPK64
       COEF(5,4)= 0.0                                                   DAMPPK65
C                                                                       DAMPPK66
       COEF(1,5)=-SQRT(2.)/3.0                                          DAMPPK67
       COEF(2,5)= SQRT(2.)/3.0                                          DAMPPK68
       COEF(3,5)= 0.0                                                   DAMPPK69
       COEF(4,5)= 0.0                                                   DAMPPK70
       COEF(5,5)=-SQRT(2.)                                              DAMPPK71
C                                                                       DAMPPK72
       COEF(1,6)= 0.0                                                   DAMPPK73
       COEF(2,6)=-1.0                                                   DAMPPK74
       COEF(3,6)= 0.0                                                   DAMPPK75
       COEF(4,6)= 0.0                                                   DAMPPK76
       COEF(5,6)=-2.0                                                   DAMPPK77
C                                                                       DAMPPK78
       COEF(1,7)= 0.0                                                   DAMPPK79
       COEF(2,7)= 0.0                                                   DAMPPK80
       COEF(3,7)= 0.0                                                   DAMPPK81
       COEF(4,7)= 0.0                                                   DAMPPK82
       COEF(5,7)=-SQRT(2.0/3.0)                                         DAMPPK83
C                                                                       DAMPPK84
      ENDIF                                                             DAMPPK85
C                                                                       DAMPPK86
      DO 10 I=1,4                                                       DAMPPK87
   10 PAA(I)=PIM1(I)+PIM2(I)+PIM3(I)                                    DAMPPK88
      XMAA   =SQRT(ABS(PAA(4)**2-PAA(3)**2-PAA(2)**2-PAA(1)**2))        DAMPPK89
      XMRO1  =SQRT(ABS((PIM3(4)+PIM2(4))**2-(PIM3(1)+PIM2(1))**2        DAMPPK90
     $                -(PIM3(2)+PIM2(2))**2-(PIM3(3)+PIM2(3))**2))      DAMPPK91
      XMRO2  =SQRT(ABS((PIM3(4)+PIM1(4))**2-(PIM3(1)+PIM1(1))**2        DAMPPK92
     $                -(PIM3(2)+PIM1(2))**2-(PIM3(3)+PIM1(3))**2))      DAMPPK93
      XMRO3  =SQRT(ABS((PIM1(4)+PIM2(4))**2-(PIM1(1)+PIM2(1))**2        DAMPPK94
     $                -(PIM1(2)+PIM2(2))**2-(PIM1(3)+PIM2(3))**2))      DAMPPK95
* ELEMENTS OF HADRON CURRENT                                            DAMPPK96
      PROD1  =PAA(4)*(PIM2(4)-PIM3(4))-PAA(1)*(PIM2(1)-PIM3(1))         DAMPPK97
     $       -PAA(2)*(PIM2(2)-PIM3(2))-PAA(3)*(PIM2(3)-PIM3(3))         DAMPPK98
      PROD2  =PAA(4)*(PIM3(4)-PIM1(4))-PAA(1)*(PIM3(1)-PIM1(1))         DAMPPK99
     $       -PAA(2)*(PIM3(2)-PIM1(2))-PAA(3)*(PIM3(3)-PIM1(3))         DAMPP100
      PROD3  =PAA(4)*(PIM1(4)-PIM2(4))-PAA(1)*(PIM1(1)-PIM2(1))         DAMPP101
     $       -PAA(2)*(PIM1(2)-PIM2(2))-PAA(3)*(PIM1(3)-PIM2(3))         DAMPP102
      DO 40 I=1,4                                                       DAMPP103
      VEC1(I)= PIM2(I)-PIM3(I) -PAA(I)*PROD1/XMAA**2                    DAMPP104
      VEC2(I)= PIM3(I)-PIM1(I) -PAA(I)*PROD2/XMAA**2                    DAMPP105
      VEC3(I)= PIM1(I)-PIM2(I) -PAA(I)*PROD3/XMAA**2                    DAMPP106
 40   VEC4(I)= PIM1(I)+PIM2(I)+PIM3(I)                                  DAMPP107
      CALL PROD5(PIM1,PIM2,PIM3,VEC5)                                   DAMPP108
* HADRON CURRENT                                                        DAMPP109
C be aware that sign of vec2 is opposite to sign of vec1 in a1 case     DAMPP110
      DO 45 I=1,4                                                       DAMPP111
      HADCUR(I)= CMPLX(FNORM(MNUM)) * (                                 DAMPP112
     $CMPLX(VEC1(I)*COEF(1,MNUM))*FORM1(MNUM,XMAA**2,XMRO1**2,XMRO2**2)+DAMPP113
     $CMPLX(VEC2(I)*COEF(2,MNUM))*FORM2(MNUM,XMAA**2,XMRO2**2,XMRO1**2)+DAMPP114
     $CMPLX(VEC3(I)*COEF(3,MNUM))*FORM3(MNUM,XMAA**2,XMRO3**2,XMRO1**2)+DAMPP115
     *(-1.0*UROJ)*                                                      DAMPP116
     $CMPLX(VEC4(I)*COEF(4,MNUM))*FORM4(MNUM,XMAA**2,XMRO1**2,          DAMPP117
     $                                      XMRO2**2,XMRO3**2)         +DAMPP118
     $(-1.0)*UROJ/4.0/PI**2/FPI**2*                                     DAMPP119
     $CMPLX(VEC5(I)*COEF(5,MNUM))*FORM5(MNUM,XMAA**2,XMRO1**2,XMRO2**2))DAMPP120
 45   CONTINUE                                                          DAMPP121
C                                                                       DAMPP122
* CALCULATE PI-VECTORS: VECTOR AND AXIAL                                DAMPP123
      CALL CLVEC(HADCUR,PN,PIVEC)                                       DAMPP124
      CALL CLAXI(HADCUR,PN,PIAKS)                                       DAMPP125
      CALL CLNUT(HADCUR,BRAKM,HVM)                                      DAMPP126
* SPIN INDEPENDENT PART OF DECAY DIFF-CROSS-SECT. IN TAU REST  FRAME    DAMPP127
      BRAK= (GV**2+GA**2)*PT(4)*PIVEC(4) +2.*GV*GA*PT(4)*PIAKS(4)       DAMPP128
     &     +2.*(GV**2-GA**2)*AMNUTA*AMTAU*BRAKM                         DAMPP129
      AMPLIT=(GFERMI)**2*BRAK/2.                                        DAMPP130
      IF (MNUM.GE.9) THEN                                               DAMPP131
        PRINT *, 'MNUM=',MNUM                                           DAMPP132
        ZNAK=-1.0                                                       DAMPP133
        XM1=0.0                                                         DAMPP134
        XM2=0.0                                                         DAMPP135
        XM3=0.0                                                         DAMPP136
        DO 77 K=1,4                                                     DAMPP137
        IF (K.EQ.4) ZNAK=1.0                                            DAMPP138
        XM1=ZNAK*PIM1(K)**2+XM1                                         DAMPP139
        XM2=ZNAK*PIM2(K)**2+XM2                                         DAMPP140
        XM3=ZNAK*PIM3(K)**2+XM3                                         DAMPP141
 77     PRINT *, 'PIM1=',PIM1(K),'PIM2=',PIM2(K),'PIM3=',PIM3(K)        DAMPP142
        PRINT *, 'XM1=',SQRT(XM1),'XM2=',SQRT(XM2),'XM3=',SQRT(XM3)     DAMPP143
        PRINT *, '************************************************'     DAMPP144
      ENDIF                                                             DAMPP145
C POLARIMETER VECTOR IN TAU REST FRAME                                  DAMPP146
      DO 90 I=1,3                                                       DAMPP147
      HV(I)=-(AMTAU*((GV**2+GA**2)*PIAKS(I)+2.*GV*GA*PIVEC(I)))         DAMPP148
     &      +(GV**2-GA**2)*AMNUTA*AMTAU*HVM(I)                          DAMPP149
C HV IS DEFINED FOR TAU-    WITH GAMMA=B+HV*POL                         DAMPP150
      HV(I)=-HV(I)/BRAK                                                 DAMPP151
 90   CONTINUE                                                          DAMPP152
      END                                                               DAMPP153
      SUBROUTINE PROD5(P1,P2,P3,PIA)                                    PROD5  2
C ----------------------------------------------------------------------PROD5  3
C external product of P1, P2, P3 4-momenta.                             PROD5  4
C SIGN is chosen +/- for decay of TAU +/- respectively                  PROD5  5
C     called by : DAMPAA, CLNUT                                         PROD5  6
C ----------------------------------------------------------------------PROD5  7
      COMMON / JAKI   /  JAK1,JAK2,JAKP,JAKM,KTOM                       JAKI   2
      COMMON / IDFC  / IDFF                                             IDFC   2
      REAL PIA(4),P1(4),P2(4),P3(4)                                     PROD5 10
      DET2(I,J)=P1(I)*P2(J)-P2(I)*P1(J)                                 PROD5 11
* -----------------------------------                                   PROD5 12
      IF     (KTOM.EQ.1.OR.KTOM.EQ.-1) THEN                             PROD5 13
        SIGN= IDFF/ABS(IDFF)                                            PROD5 14
      ELSEIF (KTOM.EQ.2) THEN                                           PROD5 15
        SIGN=-IDFF/ABS(IDFF)                                            PROD5 16
      ELSE                                                              PROD5 17
        PRINT *, 'STOP IN PROD5: KTOM=',KTOM                            PROD5 18
        STOP                                                            PROD5 19
      ENDIF                                                             PROD5 20
C                                                                       PROD5 21
C EPSILON( p1(1), p2(2), p3(3), (4) ) = 1                               PROD5 22
C                                                                       PROD5 23
      PIA(1)= -P3(3)*DET2(2,4)+P3(4)*DET2(2,3)+P3(2)*DET2(3,4)          PROD5 24
      PIA(2)= -P3(4)*DET2(1,3)+P3(3)*DET2(1,4)-P3(1)*DET2(3,4)          PROD5 25
      PIA(3)=  P3(4)*DET2(1,2)-P3(2)*DET2(1,4)+P3(1)*DET2(2,4)          PROD5 26
      PIA(4)=  P3(3)*DET2(1,2)-P3(2)*DET2(1,3)+P3(1)*DET2(2,3)          PROD5 27
C ALL FOUR INDICES ARE UP SO  PIA(3) AND PIA(4) HAVE SAME SIGN          PROD5 28
      DO 20 I=1,4                                                       PROD5 29
  20  PIA(I)=PIA(I)*SIGN                                                PROD5 30
      END                                                               PROD5 31
                                                                        PROD5 32
      SUBROUTINE DEXNEW(MODE,ISGN,POL,PNU,PAA,PNPI,JNPI)                DEXNEW 2
C ----------------------------------------------------------------------DEXNEW 3
* THIS SIMULATES TAU DECAY IN TAU REST FRAME                            DEXNEW 4
* INTO NU A1, NEXT A1 DECAYS INTO RHO PI AND FINALLY RHO INTO PI PI.    DEXNEW 5
* OUTPUT FOUR MOMENTA: PNU   TAUNEUTRINO,                               DEXNEW 6
*                      PAA   hadron 4-vector                            DEXNEW 7
*                      PNPI  final state particles                      DEXNEW 8
*                      JNPI  decay type                                 DEXNEW 9
C ----------------------------------------------------------------------DEXNEW10
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      REAL  POL(4),HV(4),PAA(4),PNU(4),PNPI(4,9)                        DEXNEW12
      DATA IWARM/0/                                                     DEXNEW13
C                                                                       DEXNEW14
      IF(MODE.EQ.-1) THEN                                               DEXNEW15
C     ===================                                               DEXNEW16
        IWARM=1                                                         DEXNEW17
        CALL DADNEW( -1,ISGN,HV,PNU,PAA,PNPI,JDUMM)                     DEXNEW18
CC      CALL HBOOK1(816,'WEIGHT DISTRIBUTION  DEXNEW   $',100,-2.,2.)   DEXNEW19
C                                                                       DEXNEW20
      ELSEIF(MODE.EQ. 0) THEN                                           DEXNEW21
*     =======================                                           DEXNEW22
 300    CONTINUE                                                        DEXNEW23
        IF(IWARM.EQ.0) GOTO 902                                         DEXNEW24
        CALL DADNEW( 0,ISGN,HV,PNU,PAA,PNPI,JNPI)                       DEXNEW25
        WT=(1+POL(1)*HV(1)+POL(2)*HV(2)+POL(3)*HV(3))/2.                DEXNEW26
CC      CALL HFILL(816,WT)                                              DEXNEW27
        CALL RANMAR(RN,1)                                               DEXNEW28
        IF(RN.GT.WT) GOTO 300                                           DEXNEW29
C                                                                       DEXNEW30
      ELSEIF(MODE.EQ. 1) THEN                                           DEXNEW31
*     =======================                                           DEXNEW32
        CALL DADNEW( 1,ISGN,HV,PNU,PAA,PNPI,JDUMM)                      DEXNEW33
CC      CALL HPRINT(816)                                                DEXNEW34
      ENDIF                                                             DEXNEW35
C     =====                                                             DEXNEW36
      RETURN                                                            DEXNEW37
 902  WRITE(IOUT, 9020)                                                 DEXNEW38
 9020 FORMAT(' ----- DEXNEW: LACK OF INITIALISATION')                   DEXNEW39
      STOP                                                              DEXNEW40
      END                                                               DEXNEW41
      SUBROUTINE DADNEW(MODE,ISGN,HV,PNU,PWB,PNPI,JNPI)                 DADNEW 2
C ----------------------------------------------------------------------DADNEW 3
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      COMMON / TAUBMC / GAMPMC(30),GAMPER(30),NEVDEC(30)                TAUBMC 2
      REAL*4            GAMPMC    ,GAMPER                               TAUBMC 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
                                                                        DADNEW 9
      REAL*4 PNU(4),PWB(4),PNPI(4,9),HV(4),HHV(4)                       DADNEW10
      REAL*4 PDUM1(4),PDUM2(4),PDUMI(4,9)                               DADNEW11
      REAL*4 RRR(3)                                                     DADNEW12
      REAL*4 WTMAX(NMODE)                                               DADNEW13
      REAL*8              SWT(NMODE),SSWT(NMODE)                        DADNEW14
      DIMENSION NEVRAW(NMODE),NEVOVR(NMODE),NEVACC(NMODE)               DADNEW15
C                                                                       DADNEW16
      DATA PI /3.141592653589793238462643/                              DADNEW17
      DATA IWARM/0/                                                     DADNEW18
C                                                                       DADNEW19
      IF(MODE.EQ.-1) THEN                                               DADNEW20
C     ===================                                               DADNEW21
C -- AT THE MOMENT ONLY TWO DECAY MODES OF MULTIPIONS HAVE M. ELEM      DADNEW22
        NMOD=NMODE                                                      DADNEW23
        IWARM=1                                                         DADNEW24
C       PRINT 7003                                                      DADNEW25
        DO 1 JNPI=1,NMOD                                                DADNEW26
        NEVRAW(JNPI)=0                                                  DADNEW27
        NEVACC(JNPI)=0                                                  DADNEW28
        NEVOVR(JNPI)=0                                                  DADNEW29
        SWT(JNPI)=0                                                     DADNEW30
        SSWT(JNPI)=0                                                    DADNEW31
        WTMAX(JNPI)=-1.                                                 DADNEW32
        DO  I=1,500                                                     DADNEW33
          IF    (JNPI.LE.0) THEN                                        DADNEW34
            GOTO 903                                                    DADNEW35
          ELSEIF(JNPI.LE.NM4) THEN                                      DADNEW36
            CALL DPH4PI(WT,HV,PDUM1,PDUM2,PDUMI,JNPI)                   DADNEW37
          ELSEIF(JNPI.LE.NM4+NM5) THEN                                  DADNEW38
             CALL DPH5PI(WT,HV,PDUM1,PDUM2,PDUMI,JNPI)                  DADNEW39
          ELSEIF(JNPI.LE.NM4+NM5+NM6) THEN                              DADNEW40
            CALL DPHNPI(WT,HV,PDUM1,PDUM2,PDUMI,JNPI)                   DADNEW41
          ELSEIF(JNPI.LE.NM4+NM5+NM6+NM3) THEN                          DADNEW42
            INUM=JNPI-NM4-NM5-NM6                                       DADNEW43
            CALL DPHSPK(WT,HV,PDUM1,PDUM2,PDUMI,INUM)                   DADNEW44
          ELSEIF(JNPI.LE.NM4+NM5+NM6+NM3+NM2) THEN                      DADNEW45
            INUM=JNPI-NM4-NM5-NM6-NM3                                   DADNEW46
            CALL DPHSRK(WT,HV,PDUM1,PDUM2,PDUMI,INUM)                   DADNEW47
          ELSE                                                          DADNEW48
           GOTO 903                                                     DADNEW49
          ENDIF                                                         DADNEW50
        IF(WT.GT.WTMAX(JNPI)/1.2) WTMAX(JNPI)=WT*1.2                    DADNEW51
        ENDDO                                                           DADNEW52
C       CALL HBOOK1(801,'WEIGHT DISTRIBUTION  DADNPI    $',100,0.,2.,.0)DADNEW53
C       PRINT 7004,WTMAX(JNPI)                                          DADNEW54
1       CONTINUE                                                        DADNEW55
        WRITE(IOUT,7005)                                                DADNEW56
C                                                                       DADNEW57
      ELSEIF(MODE.EQ. 0) THEN                                           DADNEW58
C     =======================                                           DADNEW59
        IF(IWARM.EQ.0) GOTO 902                                         DADNEW60
C                                                                       DADNEW61
300     CONTINUE                                                        DADNEW62
          IF    (JNPI.LE.0) THEN                                        DADNEW63
            GOTO 903                                                    DADNEW64
          ELSEIF(JNPI.LE.NM4) THEN                                      DADNEW65
             CALL DPH4PI(WT,HHV,PNU,PWB,PNPI,JNPI)                      DADNEW66
          ELSEIF(JNPI.LE.NM4+NM5) THEN                                  DADNEW67
             CALL DPH5PI(WT,HHV,PNU,PWB,PNPI,JNPI)                      DADNEW68
          ELSEIF(JNPI.LE.NM4+NM5+NM6) THEN                              DADNEW69
            CALL DPHNPI(WT,HHV,PNU,PWB,PNPI,JNPI)                       DADNEW70
          ELSEIF(JNPI.LE.NM4+NM5+NM6+NM3) THEN                          DADNEW71
            INUM=JNPI-NM4-NM5-NM6                                       DADNEW72
            CALL DPHSPK(WT,HHV,PNU,PWB,PNPI,INUM)                       DADNEW73
          ELSEIF(JNPI.LE.NM4+NM5+NM6+NM3+NM2) THEN                      DADNEW74
            INUM=JNPI-NM4-NM5-NM6-NM3                                   DADNEW75
            CALL DPHSRK(WT,HHV,PNU,PWB,PNPI,INUM)                       DADNEW76
          ELSE                                                          DADNEW77
           GOTO 903                                                     DADNEW78
          ENDIF                                                         DADNEW79
          DO I=1,4                                                      DADNEW80
            HV(I)=-ISGN*HHV(I)                                          DADNEW81
          ENDDO                                                         DADNEW82
C       CALL HFILL(801,WT/WTMAX(JNPI))                                  DADNEW83
        NEVRAW(JNPI)=NEVRAW(JNPI)+1                                     DADNEW84
        SWT(JNPI)=SWT(JNPI)+WT                                          DADNEW85
        SSWT(JNPI)=SSWT(JNPI)+WT**2                                     DADNEW86
        CALL RANMAR(RRR,3)                                              DADNEW87
        RN=RRR(1)                                                       DADNEW88
        IF(WT.GT.WTMAX(JNPI)) NEVOVR(JNPI)=NEVOVR(JNPI)+1               DADNEW89
        IF(RN*WTMAX(JNPI).GT.WT) GOTO 300                               DADNEW90
C ROTATIONS TO BASIC TAU REST FRAME                                     DADNEW91
        COSTHE=-1.+2.*RRR(2)                                            DADNEW92
        THET=ACOS(COSTHE)                                               DADNEW93
        PHI =2*PI*RRR(3)                                                DADNEW94
        CALL ROTOR2(THET,PNU,PNU)                                       DADNEW95
        CALL ROTOR3( PHI,PNU,PNU)                                       DADNEW96
        CALL ROTOR2(THET,PWB,PWB)                                       DADNEW97
        CALL ROTOR3( PHI,PWB,PWB)                                       DADNEW98
        CALL ROTOR2(THET,HV,HV)                                         DADNEW99
        CALL ROTOR3( PHI,HV,HV)                                         DADNE100
        ND=MULPIK(JNPI)                                                 DADNE101
        DO 301 I=1,ND                                                   DADNE102
        CALL ROTOR2(THET,PNPI(1,I),PNPI(1,I))                           DADNE103
        CALL ROTOR3( PHI,PNPI(1,I),PNPI(1,I))                           DADNE104
301     CONTINUE                                                        DADNE105
        NEVACC(JNPI)=NEVACC(JNPI)+1                                     DADNE106
C                                                                       DADNE107
      ELSEIF(MODE.EQ. 1) THEN                                           DADNE108
C     =======================                                           DADNE109
        DO 500 JNPI=1,NMOD                                              DADNE110
          IF(NEVRAW(JNPI).EQ.0) GOTO 500                                DADNE111
          PARGAM=SWT(JNPI)/FLOAT(NEVRAW(JNPI)+1)                        DADNE112
          ERROR=0                                                       DADNE113
          IF(NEVRAW(JNPI).NE.0)                                         DADNE114
     &    ERROR=SQRT(SSWT(JNPI)/SWT(JNPI)**2-1./FLOAT(NEVRAW(JNPI)))    DADNE115
          RAT=PARGAM/GAMEL                                              DADNE116
          WRITE(IOUT, 7010) NAMES(JNPI),                                DADNE117
     &     NEVRAW(JNPI),NEVACC(JNPI),NEVOVR(JNPI),PARGAM,RAT,ERROR      DADNE118
CC        CALL HPRINT(801)                                              DADNE119
          GAMPMC(8+JNPI-1)=RAT                                          DADNE120
          GAMPER(8+JNPI-1)=ERROR                                        DADNE121
CAM       NEVDEC(8+JNPI-1)=NEVACC(JNPI)                                 DADNE122
  500     CONTINUE                                                      DADNE123
      ENDIF                                                             DADNE124
C     =====                                                             DADNE125
      RETURN                                                            DADNE126
 7003 FORMAT(///1X,15(5H*****)                                          DADNE127
     $ /,' *',     25X,'******** DADNEW INITIALISATION ********',9X,1H* DADNE128
     $ )                                                                DADNE129
 7004 FORMAT(' *',E20.5,5X,'WTMAX  = MAXIMUM WEIGHT  ',9X,1H*/)         DADNE130
 7005 FORMAT(                                                           DADNE131
     $  /,1X,15(5H*****)/)                                              DADNE132
 7010 FORMAT(///1X,15(5H*****)                                          DADNE133
     $ /,' *',     25X,'******** DADNEW FINAL REPORT  ******** ',9X,1H* DADNE134
     $ /,' *',     25X,'CHANNEL:',A31                           ,9X,1H* DADNE135
     $ /,' *',I20  ,5X,'NEVRAW = NO. OF DECAYS TOTAL           ',9X,1H* DADNE136
     $ /,' *',I20  ,5X,'NEVACC = NO. OF DECAYS ACCEPTED        ',9X,1H* DADNE137
     $ /,' *',I20  ,5X,'NEVOVR = NO. OF OVERWEIGHTED EVENTS    ',9X,1H* DADNE138
     $ /,' *',E20.5,5X,'PARTIAL WTDTH IN GEV UNITS             ',9X,1H* DADNE139
     $ /,' *',F20.9,5X,'IN UNITS GFERMI**2*MASS**5/192/PI**3   ',9X,1H* DADNE140
     $ /,' *',F20.8,5X,'RELATIVE ERROR OF PARTIAL WIDTH        ',9X,1H* DADNE141
     $  /,1X,15(5H*****)/)                                              DADNE142
 902  WRITE(IOUT, 9020)                                                 DADNE143
 9020 FORMAT(' ----- DADNEW: LACK OF INITIALISATION')                   DADNE144
      STOP                                                              DADNE145
 903  WRITE(IOUT, 9030) JNPI,MODE                                       DADNE146
 9030 FORMAT(' ----- DADNEW: WRONG JNPI',2I5)                           DADNE147
      STOP                                                              DADNE148
      END                                                               DADNE149
      SUBROUTINE DPH4PI(DGAMT,HV,PN,PAA,PMULT,JNPI)                     DPH4PI 2
C ----------------------------------------------------------------------DPH4PI 3
* IT SIMULATES 4pi DECAY IN TAU REST FRAME WITH                         DPH4PI 4
* Z-AXIS ALONG 4pi MOMENTUM                                             DPH4PI 5
C ----------------------------------------------------------------------DPH4PI 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      REAL  HV(4),PT(4),PN(4),PAA(4),PIM1(4),PIM2(4),PIPL(4),PMULT(4,9) DPH4PI10
      REAL  PR(4),PIZ(4)                                                DPH4PI11
      REAL*4 RRR(9)                                                     DPH4PI12
      REAL*8 UU,FF,FF1,FF2,FF3,FF4,GG1,GG2,GG3,GG4,RR                   DPH4PI13
      DATA PI /3.141592653589793238462643/                              DPH4PI14
      DATA ICONT /0/                                                    DPH4PI15
      XLAM(X,Y,Z)=SQRT(ABS((X-Y-Z)**2-4.0*Y*Z))                         DPH4PI16
C AMRO, GAMRO IS ONLY A PARAMETER FOR GETING HIGHT EFFICIENCY           DPH4PI17
C                                                                       DPH4PI18
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DPH4PI19
C D**3 P /2E/(2PI)**3 (2PI)**4 DELTA4(SUM P)                            DPH4PI20
      PHSPAC=1./2**23/PI**11                                            DPH4PI21
      PHSP=1./2**5/PI**2                                                DPH4PI22
C init decay mode JNPI                                                  DPH4PI23
      AMP1=DCDMAS(IDFFIN(1,JNPI))                                       DPH4PI24
      AMP2=DCDMAS(IDFFIN(2,JNPI))                                       DPH4PI25
      AMP3=DCDMAS(IDFFIN(3,JNPI))                                       DPH4PI26
      AMP4=DCDMAS(IDFFIN(4,JNPI))                                       DPH4PI27
      IF (JNPI.EQ.1) THEN                                               DPH4PI28
       PREZ=0.7                                                         DPH4PI29
       AMRX=0.782                                                       DPH4PI30
       GAMRX=0.0084                                                     DPH4PI31
       AMROP =1.2                                                       DPH4PI32
       GAMROP=.46                                                       DPH4PI33
                                                                        DPH4PI34
      ELSE                                                              DPH4PI35
       PREZ=0.0                                                         DPH4PI36
       AMRX=1.4                                                         DPH4PI37
       GAMRX=.6                                                         DPH4PI38
       AMROP =AMRX                                                      DPH4PI39
       GAMROP=GAMRX                                                     DPH4PI40
                                                                        DPH4PI41
      ENDIF                                                             DPH4PI42
! 07.06.96 here was an error in the type of variable.                   BBL96072
      RRDUM=0.3                                                         BBL96073
      CALL CHOICE(100+JNPI,RRDUM,ICHAN,PROB1,PROB2,PROB3,               BBL96074
     $            AMROP,GAMROP,AMRX,GAMRX,AMRB,GAMRB)                   DPH4PI45
      PREZ=PROB1+PROB2                                                  DPH4PI46
C TAU MOMENTUM                                                          DPH4PI47
      PT(1)=0.                                                          DPH4PI48
      PT(2)=0.                                                          DPH4PI49
      PT(3)=0.                                                          DPH4PI50
      PT(4)=AMTAU                                                       DPH4PI51
C                                                                       DPH4PI52
      CALL RANMAR(RRR,9)                                                DPH4PI53
C                                                                       DPH4PI54
* MASSES OF 4, 3 AND 2 PI SYSTEMS                                       DPH4PI55
C 3 PI WITH SAMPLING FOR RESONANCE                                      DPH4PI56
CAM                                                                     DPH4PI57
        RR1=RRR(6)                                                      DPH4PI58
        AMS1=(AMP1+AMP2+AMP3+AMP4)**2                                   DPH4PI59
        AMS2=(AMTAU-AMNUTA)**2                                          DPH4PI60
        ALP1=ATAN((AMS1-AMROP**2)/AMROP/GAMROP)                         DPH4PI61
        ALP2=ATAN((AMS2-AMROP**2)/AMROP/GAMROP)                         DPH4PI62
        ALP=ALP1+RR1*(ALP2-ALP1)                                        DPH4PI63
        AM4SQ =AMROP**2+AMROP*GAMROP*TAN(ALP)                           DPH4PI64
        AM4 =SQRT(AM4SQ)                                                DPH4PI65
        PHSPAC=PHSPAC*                                                  DPH4PI66
     $         ((AM4SQ-AMROP**2)**2+(AMROP*GAMROP)**2)/(AMROP*GAMROP)   DPH4PI67
        PHSPAC=PHSPAC*(ALP2-ALP1)                                       DPH4PI68
C                                                                       DPH4PI69
        RR1=RRR(1)                                                      DPH4PI70
        AMS1=(AMP2+AMP3+AMP4)**2                                        DPH4PI71
        AMS2=(AM4-AMP1)**2                                              DPH4PI72
        IF (RRR(9).GT.PREZ) THEN                                        DPH4PI73
          AM3SQ=AMS1+   RR1*(AMS2-AMS1)                                 DPH4PI74
          AM3 =SQRT(AM3SQ)                                              DPH4PI75
C --- this part of jacobian will be recovered later                     DPH4PI76
          FF1=AMS2-AMS1                                                 DPH4PI77
        ELSE                                                            DPH4PI78
* phase space with sampling for omega resonance,                        DPH4PI79
        ALP1=ATAN((AMS1-AMRX**2)/AMRX/GAMRX)                            DPH4PI80
        ALP2=ATAN((AMS2-AMRX**2)/AMRX/GAMRX)                            DPH4PI81
        ALP=ALP1+RR1*(ALP2-ALP1)                                        DPH4PI82
        AM3SQ =AMRX**2+AMRX*GAMRX*TAN(ALP)                              DPH4PI83
        AM3 =SQRT(AM3SQ)                                                DPH4PI84
c --- this part of the jacobian will be recovered later --------------- DPH4PI85
        FF1=((AM3SQ-AMRX**2)**2+(AMRX*GAMRX)**2)/(AMRX*GAMRX)           DPH4PI86
        FF1=FF1*(ALP2-ALP1)                                             DPH4PI87
        ENDIF                                                           DPH4PI88
c mass of 2                                                             DPH4PI89
        RR2=RRR(2)                                                      DPH4PI90
        AMS1=(AMP3+AMP4)**2                                             DPH4PI91
        AMS2=(AM3-AMP2)**2                                              DPH4PI92
* flat phase space;                                                     DPH4PI93
        AM2SQ=AMS1+   RR2*(AMS2-AMS1)                                   DPH4PI94
        AM2 =SQRT(AM2SQ)                                                DPH4PI95
C --- this part of jacobian will be recovered later                     DPH4PI96
        FF2=(AMS2-AMS1)                                                 DPH4PI97
*  2 restframe, define PIZ and PIPL                                     DPH4PI98
        ENQ1=(AM2SQ+AMP3**2-AMP4**2)/(2*AM2)                            DPH4PI99
        ENQ2=(AM2SQ-AMP3**2+AMP4**2)/(2*AM2)                            DPH4P100
        PPI=          ENQ1**2-AMP3**2                                   DPH4P101
        PPPI=SQRT(ABS(ENQ1**2-AMP3**2))                                 DPH4P102
        PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AM2)                               DPH4P103
* PIZ   momentum in 2 rest frame  (PIZ is 3rd pi)                       DPH4P104
        CALL SPHERA(PPPI,PIZ)                                           DPH4P105
        PIZ(4)=ENQ1                                                     DPH4P106
C PIPL  momentum in 2 rest frame  (PIPL is 4th pi)                      DPH4P107
        DO 30 I=1,3                                                     DPH4P108
 30     PIPL(I)=-PIZ(I)                                                 DPH4P109
        PIPL(4)=ENQ2                                                    DPH4P110
* 3 rest frame, define pim1                                             DPH4P111
C PR   momentum                                                         DPH4P112
        PR(1)=0                                                         DPH4P113
        PR(2)=0                                                         DPH4P114
        PR(4)=1./(2*AM3)*(AM3**2+AM2**2-AMP2**2)                        DPH4P115
        PR(3)= SQRT(ABS(PR(4)**2-AM2**2))                               DPH4P116
        PPI  =          PR(4)**2-AM2**2                                 DPH4P117
C PIM1  momentum                                                        DPH4P118
        PIM1(1)=0                                                       DPH4P119
        PIM1(2)=0                                                       DPH4P120
        PIM1(4)=1./(2*AM3)*(AM3**2-AM2**2+AMP2**2)                      DPH4P121
        PIM1(3)=-PR(3)                                                  DPH4P122
C --- this part of jacobian will be recovered later                     DPH4P123
        FF3=(4*PI)*(2*PR(3)/AM3)                                        DPH4P124
* old pions boosted from 2 rest frame to 3 rest frame                   DPH4P125
      EXE=(PR(4)+PR(3))/AM2                                             DPH4P126
      CALL BOSTR3(EXE,PIZ,PIZ)                                          DPH4P127
      CALL BOSTR3(EXE,PIPL,PIPL)                                        DPH4P128
      RR3=RRR(3)                                                        DPH4P129
      RR4=RRR(4)                                                        DPH4P130
      THET =ACOS(-1.+2*RR3)                                             DPH4P131
      PHI = 2*PI*RR4                                                    DPH4P132
      CALL ROTPOL(THET,PHI,PIPL)                                        DPH4P133
      CALL ROTPOL(THET,PHI,PIM1)                                        DPH4P134
      CALL ROTPOL(THET,PHI,PIZ)                                         DPH4P135
      CALL ROTPOL(THET,PHI,PR)                                          DPH4P136
C 4  rest frame, define PIM2                                            DPH4P137
C PR   momentum                                                         DPH4P138
        PR(1)=0                                                         DPH4P139
        PR(2)=0                                                         DPH4P140
        PR(4)=1./(2*AM4)*(AM4**2+AM3**2-AMP1**2)                        DPH4P141
        PR(3)= SQRT(ABS(PR(4)**2-AM3**2))                               DPH4P142
        PPI  =          PR(4)**2-AM3**2                                 DPH4P143
C PIM2 momentum                                                         DPH4P144
        PIM2(1)=0                                                       DPH4P145
        PIM2(2)=0                                                       DPH4P146
        PIM2(4)=1./(2*AM4)*(AM4**2-AM3**2+AMP1**2)                      DPH4P147
        PIM2(3)=-PR(3)                                                  DPH4P148
C --- this part of jacobian will be recovered later                     DPH4P149
        FF4=(4*PI)*(2*PR(3)/AM4)                                        DPH4P150
* old pions boosted from 3 rest frame to 4 rest frame                   DPH4P151
      EXE=(PR(4)+PR(3))/AM3                                             DPH4P152
      CALL BOSTR3(EXE,PIZ,PIZ)                                          DPH4P153
      CALL BOSTR3(EXE,PIPL,PIPL)                                        DPH4P154
      CALL BOSTR3(EXE,PIM1,PIM1)                                        DPH4P155
      RR3=RRR(7)                                                        DPH4P156
      RR4=RRR(8)                                                        DPH4P157
      THET =ACOS(-1.+2*RR3)                                             DPH4P158
      PHI = 2*PI*RR4                                                    DPH4P159
      CALL ROTPOL(THET,PHI,PIPL)                                        DPH4P160
      CALL ROTPOL(THET,PHI,PIM1)                                        DPH4P161
      CALL ROTPOL(THET,PHI,PIM2)                                        DPH4P162
      CALL ROTPOL(THET,PHI,PIZ)                                         DPH4P163
      CALL ROTPOL(THET,PHI,PR)                                          DPH4P164
C                                                                       DPH4P165
* NOW TO THE TAU REST FRAME, DEFINE PAA AND NEUTRINO MOMENTA            DPH4P166
* PAA  MOMENTUM                                                         DPH4P167
      PAA(1)=0                                                          DPH4P168
      PAA(2)=0                                                          DPH4P169
      PAA(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AM4**2)                   DPH4P170
      PAA(3)= SQRT(ABS(PAA(4)**2-AM4**2))                               DPH4P171
      PPI   =          PAA(4)**2-AM4**2                                 DPH4P172
      PHSPAC=PHSPAC*(4*PI)*(2*PAA(3)/AMTAU)                             DPH4P173
      PHSP=PHSP*(4*PI)*(2*PAA(3)/AMTAU)                                 DPH4P174
* TAU-NEUTRINO MOMENTUM                                                 DPH4P175
      PN(1)=0                                                           DPH4P176
      PN(2)=0                                                           DPH4P177
      PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AM4**2)                    DPH4P178
      PN(3)=-PAA(3)                                                     DPH4P179
c we include remaining part of the jacobian                             DPH4P180
c --- flat channel                                                      DPH4P181
        AM3SQ=(PIM1(4)+PIZ(4)+PIPL(4))**2-(PIM1(3)+PIZ(3)+PIPL(3))**2   DPH4P182
     $       -(PIM1(2)+PIZ(2)+PIPL(2))**2-(PIM1(1)+PIZ(1)+PIPL(1))**2   DPH4P183
        AMS2=(AM4-AMP2)**2                                              DPH4P184
        AMS1=(AMP1+AMP3+AMP4)**2                                        DPH4P185
        FF1=(AMS2-AMS1)                                                 DPH4P186
        AMS1=(AMP3+AMP4)**2                                             DPH4P187
        AMS2=(SQRT(AM3SQ)-AMP1)**2                                      DPH4P188
        FF2=AMS2-AMS1                                                   DPH4P189
        FF3=(4*PI)*(XLAM(AM2**2,AMP1**2,AM3SQ)/AM3SQ)                   DPH4P190
        FF4=(4*PI)*(XLAM(AM3SQ,AMP2**2,AM4**2)/AM4**2)                  DPH4P191
        UU=FF1*FF2*FF3*FF4                                              DPH4P192
c --- first channel                                                     DPH4P193
        AM3SQ=(PIM1(4)+PIZ(4)+PIPL(4))**2-(PIM1(3)+PIZ(3)+PIPL(3))**2   DPH4P194
     $       -(PIM1(2)+PIZ(2)+PIPL(2))**2-(PIM1(1)+PIZ(1)+PIPL(1))**2   DPH4P195
        AMS2=(AM4-AMP2)**2                                              DPH4P196
        AMS1=(AMP1+AMP3+AMP4)**2                                        DPH4P197
        ALP1=ATAN((AMS1-AMRX**2)/AMRX/GAMRX)                            DPH4P198
        ALP2=ATAN((AMS2-AMRX**2)/AMRX/GAMRX)                            DPH4P199
        FF1=((AM3SQ-AMRX**2)**2+(AMRX*GAMRX)**2)/(AMRX*GAMRX)           DPH4P200
        FF1=FF1*(ALP2-ALP1)                                             DPH4P201
        AMS1=(AMP3+AMP4)**2                                             DPH4P202
        AMS2=(SQRT(AM3SQ)-AMP1)**2                                      DPH4P203
        FF2=AMS2-AMS1                                                   DPH4P204
        FF3=(4*PI)*(XLAM(AM2**2,AMP1**2,AM3SQ)/AM3SQ)                   DPH4P205
        FF4=(4*PI)*(XLAM(AM3SQ,AMP2**2,AM4**2)/AM4**2)                  DPH4P206
        FF=FF1*FF2*FF3*FF4                                              DPH4P207
c --- second channel                                                    DPH4P208
        AM3SQ=(PIM2(4)+PIZ(4)+PIPL(4))**2-(PIM2(3)+PIZ(3)+PIPL(3))**2   DPH4P209
     $       -(PIM2(2)+PIZ(2)+PIPL(2))**2-(PIM2(1)+PIZ(1)+PIPL(1))**2   DPH4P210
        AMS2=(AM4-AMP1)**2                                              DPH4P211
        AMS1=(AMP2+AMP3+AMP4)**2                                        DPH4P212
        ALP1=ATAN((AMS1-AMRX**2)/AMRX/GAMRX)                            DPH4P213
        ALP2=ATAN((AMS2-AMRX**2)/AMRX/GAMRX)                            DPH4P214
        GG1=((AM3SQ-AMRX**2)**2+(AMRX*GAMRX)**2)/(AMRX*GAMRX)           DPH4P215
        GG1=GG1*(ALP2-ALP1)                                             DPH4P216
        AMS1=(AMP3+AMP4)**2                                             DPH4P217
        AMS2=(SQRT(AM3SQ)-AMP2)**2                                      DPH4P218
        GG2=AMS2-AMS1                                                   DPH4P219
        GG3=(4*PI)*(XLAM(AM2**2,AMP2**2,AM3SQ)/AM3SQ)                   DPH4P220
        GG4=(4*PI)*(XLAM(AM3SQ,AMP1**2,AM4**2)/AM4**2)                  DPH4P221
        GG=GG1*GG2*GG3*GG4                                              DPH4P222
c --- jacobian averaged over the two                                    DPH4P223
        IF ( ( (FF+GG)*UU+FF*GG ).GT.0.0D0) THEN                        DPH4P224
          RR=FF*GG*UU/(0.5*PREZ*(FF+GG)*UU+(1.0-PREZ)*FF*GG)            DPH4P225
          PHSPAC=PHSPAC*RR                                              DPH4P226
        ELSE                                                            DPH4P227
          PHSPAC=0.0                                                    DPH4P228
        ENDIF                                                           DPH4P229
* momenta of the two pi-minus are randomly symmetrised                  DPH4P230
       IF (JNPI.EQ.1) THEN                                              DPH4P231
        RR5= RRR(5)                                                     DPH4P232
        IF(RR5.LE.0.5) THEN                                             DPH4P233
         DO 70 I=1,4                                                    DPH4P234
         X=PIM1(I)                                                      DPH4P235
         PIM1(I)=PIM2(I)                                                DPH4P236
 70      PIM2(I)=X                                                      DPH4P237
        ENDIF                                                           DPH4P238
        PHSPAC=PHSPAC/2.                                                DPH4P239
       ELSE                                                             DPH4P240
c momenta of pi0's are generated uniformly only if prez=0.0             DPH4P241
        RR5= RRR(5)                                                     DPH4P242
        IF(RR5.LE.0.5) THEN                                             DPH4P243
         DO 71 I=1,4                                                    DPH4P244
         X=PIM1(I)                                                      DPH4P245
         PIM1(I)=PIM2(I)                                                DPH4P246
 71      PIM2(I)=X                                                      DPH4P247
        ENDIF                                                           DPH4P248
        PHSPAC=PHSPAC/6.                                                DPH4P249
       ENDIF                                                            DPH4P250
* all pions boosted from  4  rest frame to tau rest frame               DPH4P251
* z-axis antiparallel to neutrino momentum                              DPH4P252
      EXE=(PAA(4)+PAA(3))/AM4                                           DPH4P253
      CALL BOSTR3(EXE,PIZ,PIZ)                                          DPH4P254
      CALL BOSTR3(EXE,PIPL,PIPL)                                        DPH4P255
      CALL BOSTR3(EXE,PIM1,PIM1)                                        DPH4P256
      CALL BOSTR3(EXE,PIM2,PIM2)                                        DPH4P257
      CALL BOSTR3(EXE,PR,PR)                                            DPH4P258
c partial width consists of phase space and amplitude                   DPH4P259
c check on consistency with dadnpi, then, code breakes uniform pion     DPH4P260
c distribution in hadronic system                                       DPH4P261
      CALL DAM4PI(JNPI,PT,PN,PIM1,PIM2,PIZ,PIPL,AMPLIT,HV)              DPH4P262
      DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                  DPH4P263
C PHASE SPACE CHECK                                                     DPH4P264
C      DGAMT=PHSPAC                                                     DPH4P265
      DO 77 K=1,4                                                       DPH4P266
        PMULT(K,1)=PIM1(K)                                              DPH4P267
        PMULT(K,2)=PIM2(K)                                              DPH4P268
        PMULT(K,3)=PIZ (K)                                              DPH4P269
        PMULT(K,4)=PIPL(K)                                              DPH4P270
 77   CONTINUE                                                          DPH4P271
      END                                                               DPH4P272
      SUBROUTINE DAM4PI(MNUM,PT,PN,PIM1,PIM2,PIM3,PIM4,AMPLIT,HV)       DAM4PI 2
C ----------------------------------------------------------------------DAM4PI 3
* CALCULATES DIFFERENTIAL CROSS SECTION AND POLARIMETER VECTOR          DAM4PI 4
* FOR TAU DECAY INTO 4 PI MODES                                         DAM4PI 5
* ALL SPIN EFFECTS IN THE FULL DECAY CHAIN ARE TAKEN INTO ACCOUNT.      DAM4PI 6
* CALCULATIONS DONE IN TAU REST FRAME WITH Z-AXIS ALONG NEUTRINO MOMENT DAM4PI 7
C MNUM DECAY MODE IDENTIFIER.                                           DAM4PI 8
C                                                                       DAM4PI 9
C     called by : DPH4PI                                                DAM4PI10
C ----------------------------------------------------------------------DAM4PI11
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PIM1(4),PIM2(4),PIM3(4),PIM4(4)           DAM4PI14
      REAL  PIVEC(4),PIAKS(4),HVM(4)                                    DAM4PI15
      COMPLEX HADCUR(4),FORM1,FORM2,FORM3,FORM4,FORM5                   DAM4PI16
      EXTERNAL FORM1,FORM2,FORM3,FORM4,FORM5                            DAM4PI17
      DATA PI /3.141592653589793238462643/                              DAM4PI18
      DATA ICONT /0/                                                    DAM4PI19
C                                                                       DAM4PI20
      CALL CURR(MNUM,PIM1,PIM2,PIM3,PIM4,HADCUR)                        DAM4PI21
C                                                                       DAM4PI22
* CALCULATE PI-VECTORS: VECTOR AND AXIAL                                DAM4PI23
      CALL CLVEC(HADCUR,PN,PIVEC)                                       DAM4PI24
      CALL CLAXI(HADCUR,PN,PIAKS)                                       DAM4PI25
      CALL CLNUT(HADCUR,BRAKM,HVM)                                      DAM4PI26
* SPIN INDEPENDENT PART OF DECAY DIFF-CROSS-SECT. IN TAU REST  FRAME    DAM4PI27
      BRAK= (GV**2+GA**2)*PT(4)*PIVEC(4) +2.*GV*GA*PT(4)*PIAKS(4)       DAM4PI28
     &     +2.*(GV**2-GA**2)*AMNUTA*AMTAU*BRAKM                         DAM4PI29
      AMPLIT=(CCABIB*GFERMI)**2*BRAK/2.                                 DAM4PI30
C POLARIMETER VECTOR IN TAU REST FRAME                                  DAM4PI31
      DO 90 I=1,3                                                       DAM4PI32
      HV(I)=-(AMTAU*((GV**2+GA**2)*PIAKS(I)+2.*GV*GA*PIVEC(I)))         DAM4PI33
     &      +(GV**2-GA**2)*AMNUTA*AMTAU*HVM(I)                          DAM4PI34
C HV IS DEFINED FOR TAU-    WITH GAMMA=B+HV*POL                         DAM4PI35
      IF (BRAK.NE.0.0)                                                  DAM4PI36
     &HV(I)=-HV(I)/BRAK                                                 DAM4PI37
 90   CONTINUE                                                          DAM4PI38
      END                                                               DAM4PI39
      SUBROUTINE DPH5PI(DGAMT,HV,PN,PAA,PMULT,JNPI)                     DPH5PI 2
C ----------------------------------------------------------------------DPH5PI 3
* IT SIMULATES 5pi DECAY IN TAU REST FRAME WITH                         DPH5PI 4
* Z-AXIS ALONG 5pi MOMENTUM                                             DPH5PI 5
C ----------------------------------------------------------------------DPH5PI 6
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      REAL  HV(4),PT(4),PN(4),PAA(4),PMULT(4,9)                         DPH5PI10
      REAL*4 PR(4),PI1(4),PI2(4),PI3(4),PI4(4),PI5(4)                   DPH5PI11
      REAL*8 AMP1,AMP2,AMP3,AMP4,AMP5,ams1,ams2,amom,gamom              DPH5PI12
      REAL*8 AM5SQ,AM4SQ,AM3SQ,AM2SQ,AM5,AM4,AM3                        DPH5PI13
      REAL*4 RRR(10)                                                    DPH5PI14
      REAL*8 gg1,gg2,gg3,ff1,ff2,ff3,ff4,alp,alp1,alp2                  DPH5PI15
      REAL*8 XM,AM,GAMMAB                                               BBL95089
      DATA PI /3.141592653589793238462643/                              DPH5PI17
      DATA ICONT /0/                                                    DPH5PI18
      data fpi /93.3e-3/                                                DPH5PI19
c                                                                       DPH5PI20
      COMPLEX BWIGN                                                     DPH5PI21
C                                                                       DPH5PI22
      BWIGN(XM,AM,GAMMAB)=XM**2/CMPLX(XM**2-AM**2,GAMMAB*AM)            BBL95010
C                                                                       DPH5PI24
      AMOM=.782                                                         DPH5PI25
      GAMOM=0.0085                                                      DPH5PI26
c                                                                       DPH5PI27
C 6 BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                     DPH5PI28
C D**3 P /2E/(2PI)**3 (2PI)**4 DELTA4(SUM P)                            DPH5PI29
      PHSPAC=1./2**29/PI**14                                            DPH5PI30
c     PHSPAC=1./2**5/PI**2                                              DPH5PI31
C init 5pi decay mode (JNPI)                                            DPH5PI32
      AMP1=DCDMAS(IDFFIN(1,JNPI))                                       DPH5PI33
      AMP2=DCDMAS(IDFFIN(2,JNPI))                                       DPH5PI34
      AMP3=DCDMAS(IDFFIN(3,JNPI))                                       DPH5PI35
      AMP4=DCDMAS(IDFFIN(4,JNPI))                                       DPH5PI36
      AMP5=DCDMAS(IDFFIN(5,JNPI))                                       DPH5PI37
c                                                                       DPH5PI38
C TAU MOMENTUM                                                          DPH5PI39
      PT(1)=0.                                                          DPH5PI40
      PT(2)=0.                                                          DPH5PI41
      PT(3)=0.                                                          DPH5PI42
      PT(4)=AMTAU                                                       DPH5PI43
C                                                                       DPH5PI44
      CALL RANMAR(RRR,10)                                               DPH5PI45
C                                                                       DPH5PI46
c masses of 5, 4, 3 and 2 pi systems                                    DPH5PI47
c 3 pi with sampling for omega resonance                                DPH5PI48
cam                                                                     DPH5PI49
c mass of 5   (12345)                                                   DPH5PI50
      rr1=rrr(10)                                                       DPH5PI51
      ams1=(amp1+amp2+amp3+amp4+amp5)**2                                DPH5PI52
      ams2=(amtau-amnuta)**2                                            DPH5PI53
      am5sq=ams1+   rr1*(ams2-ams1)                                     DPH5PI54
      am5 =sqrt(am5sq)                                                  DPH5PI55
      phspac=phspac*(ams2-ams1)                                         DPH5PI56
c                                                                       DPH5PI57
c mass of 4   (2345)                                                    DPH5PI58
c flat phase space                                                      DPH5PI59
      rr1=rrr(9)                                                        DPH5PI60
      ams1=(amp2+amp3+amp4+amp5)**2                                     DPH5PI61
      ams2=(am5-amp1)**2                                                DPH5PI62
      am4sq=ams1+   rr1*(ams2-ams1)                                     DPH5PI63
      am4 =sqrt(am4sq)                                                  DPH5PI64
      gg1=ams2-ams1                                                     DPH5PI65
c                                                                       DPH5PI66
c mass of 3   (234)                                                     DPH5PI67
C phase space with sampling for omega resonance                         DPH5PI68
      rr1=rrr(1)                                                        DPH5PI69
      ams1=(amp2+amp3+amp4)**2                                          DPH5PI70
      ams2=(am4-amp5)**2                                                DPH5PI71
      alp1=atan((ams1-amom**2)/amom/gamom)                              DPH5PI72
      alp2=atan((ams2-amom**2)/amom/gamom)                              DPH5PI73
      alp=alp1+rr1*(alp2-alp1)                                          DPH5PI74
      am3sq =amom**2+amom*gamom*tan(alp)                                DPH5PI75
      am3 =sqrt(am3sq)                                                  DPH5PI76
c --- this part of the jacobian will be recovered later --------------- DPH5PI77
      gg2=((am3sq-amom**2)**2+(amom*gamom)**2)/(amom*gamom)             DPH5PI78
      gg2=gg2*(alp2-alp1)                                               DPH5PI79
c flat phase space;                                                     DPH5PI80
C      am3sq=ams1+   rr1*(ams2-ams1)                                    DPH5PI81
C      am3 =sqrt(am3sq)                                                 DPH5PI82
c --- this part of jacobian will be recovered later                     DPH5PI83
C      gg2=ams2-ams1                                                    DPH5PI84
c                                                                       DPH5PI85
C mass of 2  (34)                                                       DPH5PI86
      rr2=rrr(2)                                                        DPH5PI87
      ams1=(amp3+amp4)**2                                               DPH5PI88
      ams2=(am3-amp2)**2                                                DPH5PI89
c flat phase space;                                                     DPH5PI90
      am2sq=ams1+   rr2*(ams2-ams1)                                     DPH5PI91
      am2 =sqrt(am2sq)                                                  DPH5PI92
c --- this part of jacobian will be recovered later                     DPH5PI93
      gg3=ams2-ams1                                                     DPH5PI94
c                                                                       DPH5PI95
c (34) restframe, define pi3 and pi4                                    DPH5PI96
      enq1=(am2sq+amp3**2-amp4**2)/(2*am2)                              DPH5PI97
      enq2=(am2sq-amp3**2+amp4**2)/(2*am2)                              DPH5PI98
      ppi=          enq1**2-amp3**2                                     DPH5PI99
      pppi=sqrt(abs(enq1**2-amp3**2))                                   DPH5P100
      ff1=(4*pi)*(2*pppi/am2)                                           DPH5P101
c pi3   momentum in (34) rest frame                                     DPH5P102
      call sphera(pppi,pi3)                                             DPH5P103
      pi3(4)=enq1                                                       DPH5P104
c pi4   momentum in (34) rest frame                                     DPH5P105
      do 30 i=1,3                                                       DPH5P106
 30   pi4(i)=-pi3(i)                                                    DPH5P107
      pi4(4)=enq2                                                       DPH5P108
c                                                                       DPH5P109
c (234) rest frame, define pi2                                          DPH5P110
c pr   momentum                                                         DPH5P111
      pr(1)=0                                                           DPH5P112
      pr(2)=0                                                           DPH5P113
      pr(4)=1./(2*am3)*(am3**2+am2**2-amp2**2)                          DPH5P114
      pr(3)= sqrt(abs(pr(4)**2-am2**2))                                 DPH5P115
      ppi  =          pr(4)**2-am2**2                                   DPH5P116
c pi2   momentum                                                        DPH5P117
      pi2(1)=0                                                          DPH5P118
      pi2(2)=0                                                          DPH5P119
      pi2(4)=1./(2*am3)*(am3**2-am2**2+amp2**2)                         DPH5P120
      pi2(3)=-pr(3)                                                     DPH5P121
c --- this part of jacobian will be recovered later                     DPH5P122
      ff2=(4*pi)*(2*pr(3)/am3)                                          DPH5P123
c old pions boosted from 2 rest frame to 3 rest frame                   DPH5P124
      exe=(pr(4)+pr(3))/am2                                             DPH5P125
      call bostr3(exe,pi3,pi3)                                          DPH5P126
      call bostr3(exe,pi4,pi4)                                          DPH5P127
      rr3=rrr(3)                                                        DPH5P128
      rr4=rrr(4)                                                        DPH5P129
      thet =acos(-1.+2*rr3)                                             DPH5P130
      phi = 2*pi*rr4                                                    DPH5P131
      call rotpol(thet,phi,pi2)                                         DPH5P132
      call rotpol(thet,phi,pi3)                                         DPH5P133
      call rotpol(thet,phi,pi4)                                         DPH5P134
C                                                                       DPH5P135
C (2345)  rest frame, define pi5                                        DPH5P136
c pr   momentum                                                         DPH5P137
      pr(1)=0                                                           DPH5P138
      pr(2)=0                                                           DPH5P139
      pr(4)=1./(2*am4)*(am4**2+am3**2-amp5**2)                          DPH5P140
      pr(3)= sqrt(abs(pr(4)**2-am3**2))                                 DPH5P141
      ppi  =          pr(4)**2-am3**2                                   DPH5P142
c pi5  momentum                                                         DPH5P143
      pi5(1)=0                                                          DPH5P144
      pi5(2)=0                                                          DPH5P145
      pi5(4)=1./(2*am4)*(am4**2-am3**2+amp5**2)                         DPH5P146
      pi5(3)=-pr(3)                                                     DPH5P147
c --- this part of jacobian will be recovered later                     DPH5P148
      ff3=(4*pi)*(2*pr(3)/am4)                                          DPH5P149
c old pions boosted from 3 rest frame to 4 rest frame                   DPH5P150
      exe=(pr(4)+pr(3))/am3                                             DPH5P151
      call bostr3(exe,pi2,pi2)                                          DPH5P152
      call bostr3(exe,pi3,pi3)                                          DPH5P153
      call bostr3(exe,pi4,pi4)                                          DPH5P154
      rr3=rrr(5)                                                        DPH5P155
      rr4=rrr(6)                                                        DPH5P156
      thet =acos(-1.+2*rr3)                                             DPH5P157
      phi = 2*pi*rr4                                                    DPH5P158
      call rotpol(thet,phi,pi2)                                         DPH5P159
      call rotpol(thet,phi,pi3)                                         DPH5P160
      call rotpol(thet,phi,pi4)                                         DPH5P161
      call rotpol(thet,phi,pi5)                                         DPH5P162
C                                                                       DPH5P163
C (12345)  rest frame, define pi1                                       DPH5P164
c pr   momentum                                                         DPH5P165
      pr(1)=0                                                           DPH5P166
      pr(2)=0                                                           DPH5P167
      pr(4)=1./(2*am5)*(am5**2+am4**2-amp1**2)                          DPH5P168
      pr(3)= sqrt(abs(pr(4)**2-am4**2))                                 DPH5P169
      ppi  =          pr(4)**2-am4**2                                   DPH5P170
c pi1  momentum                                                         DPH5P171
      pi1(1)=0                                                          DPH5P172
      pi1(2)=0                                                          DPH5P173
      pi1(4)=1./(2*am5)*(am5**2-am4**2+amp1**2)                         DPH5P174
      pi1(3)=-pr(3)                                                     DPH5P175
c --- this part of jacobian will be recovered later                     DPH5P176
      ff4=(4*pi)*(2*pr(3)/am5)                                          DPH5P177
c old pions boosted from 4 rest frame to 5 rest frame                   DPH5P178
      exe=(pr(4)+pr(3))/am4                                             DPH5P179
      call bostr3(exe,pi2,pi2)                                          DPH5P180
      call bostr3(exe,pi3,pi3)                                          DPH5P181
      call bostr3(exe,pi4,pi4)                                          DPH5P182
      call bostr3(exe,pi5,pi5)                                          DPH5P183
      rr3=rrr(7)                                                        DPH5P184
      rr4=rrr(8)                                                        DPH5P185
      thet =acos(-1.+2*rr3)                                             DPH5P186
      phi = 2*pi*rr4                                                    DPH5P187
      call rotpol(thet,phi,pi1)                                         DPH5P188
      call rotpol(thet,phi,pi2)                                         DPH5P189
      call rotpol(thet,phi,pi3)                                         DPH5P190
      call rotpol(thet,phi,pi4)                                         DPH5P191
      call rotpol(thet,phi,pi5)                                         DPH5P192
c                                                                       DPH5P193
* now to the tau rest frame, define paa and neutrino momenta            DPH5P194
* paa  momentum                                                         DPH5P195
      paa(1)=0                                                          DPH5P196
      paa(2)=0                                                          DPH5P197
c     paa(4)=1./(2*amtau)*(amtau**2-amnuta**2+am5**2)                   DPH5P198
c     paa(3)= sqrt(abs(paa(4)**2-am5**2))                               DPH5P199
c     ppi   =          paa(4)**2-am5**2                                 DPH5P200
      paa(4)=1./(2*amtau)*(amtau**2-amnuta**2+am5sq)                    DPH5P201
      paa(3)= sqrt(abs(paa(4)**2-am5sq))                                DPH5P202
      ppi   =          paa(4)**2-am5sq                                  DPH5P203
      phspac=phspac*(4*pi)*(2*paa(3)/amtau)                             DPH5P204
* tau-neutrino momentum                                                 DPH5P205
      pn(1)=0                                                           DPH5P206
      pn(2)=0                                                           DPH5P207
      pn(4)=1./(2*amtau)*(amtau**2+amnuta**2-am5**2)                    DPH5P208
      pn(3)=-paa(3)                                                     DPH5P209
c                                                                       DPH5P210
      phspac=phspac * gg1*gg2*gg3*ff1*ff2*ff3*ff4                       DPH5P211
c                                                                       DPH5P212
C all pions boosted from  5  rest frame to tau rest frame               DPH5P213
C z-axis antiparallel to neutrino momentum                              DPH5P214
      exe=(paa(4)+paa(3))/am5                                           DPH5P215
      call bostr3(exe,pi1,pi1)                                          DPH5P216
      call bostr3(exe,pi2,pi2)                                          DPH5P217
      call bostr3(exe,pi3,pi3)                                          DPH5P218
      call bostr3(exe,pi4,pi4)                                          DPH5P219
      call bostr3(exe,pi5,pi5)                                          DPH5P220
c                                                                       DPH5P221
C partial width consists of phase space and amplitude                   DPH5P222
C AMPLITUDE  (cf YS.Tsai Phys.Rev.D4,2821(1971)                         DPH5P223
C    or F.Gilman SH.Rhie Phys.Rev.D31,1066(1985)                        DPH5P224
C                                                                       DPH5P225
      PXQ=AMTAU*PAA(4)                                                  DPH5P226
      PXN=AMTAU*PN(4)                                                   DPH5P227
      QXN=PAA(4)*PN(4)-PAA(1)*PN(1)-PAA(2)*PN(2)-PAA(3)*PN(3)           DPH5P228
      BRAK=2*(GV**2+GA**2)*(2*PXQ*QXN+AM5SQ*PXN)                        DPH5P229
     &    -6*(GV**2-GA**2)*AMTAU*AMNUTA*AM5SQ                           DPH5P230
      fompp = cabs(bwign(am3,amom,gamom))**2                            DPH5P231
c normalisation factor (to some numerical undimensioned factor;         DPH5P232
c cf R.Fischer et al ZPhys C3, 313 (1980))                              DPH5P233
      fnorm = 1/fpi**6                                                  DPH5P234
c     AMPLIT=CCABIB**2*GFERMI**2/2. * BRAK * AM5SQ*SIGEE(AM5SQ,JNPI)    DPH5P235
      AMPLIT=CCABIB**2*GFERMI**2/2. * BRAK                              DPH5P236
      amplit = amplit * fompp * fnorm                                   DPH5P237
c phase space test                                                      DPH5P238
c     amplit = amplit * fnorm                                           DPH5P239
      DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                  DPH5P240
c ignore spin terms                                                     DPH5P241
      DO 40 I=1,3                                                       DPH5P242
 40   HV(I)=0.                                                          DPH5P243
c                                                                       DPH5P244
      do 77 k=1,4                                                       DPH5P245
        pmult(k,1)=pi1(k)                                               DPH5P246
        pmult(k,2)=pi2(k)                                               DPH5P247
        pmult(k,3)=pi3(k)                                               DPH5P248
        pmult(k,4)=pi4(k)                                               DPH5P249
        pmult(k,5)=pi5(k)                                               DPH5P250
 77   continue                                                          DPH5P251
      return                                                            DPH5P252
C missing: transposition of identical particles, statistical factors    DPH5P253
C for identical matrices, polarimetric vector. Matrix element rather naiDPH5P254
C flat phase space in pion system + with breit wigner for omega         DPH5P255
C anyway it is better than nothing, and code is improvable.             DPH5P256
      end                                                               DPH5P257
      SUBROUTINE DPHSRK(DGAMT,HV,PN,PR,PMULT,INUM)                      DPHSRK 2
C ----------------------------------------------------------------------DPHSRK 3
C IT SIMULATES RHO DECAY IN TAU REST FRAME WITH                         DPHSRK 4
C Z-AXIS ALONG RHO MOMENTUM                                             DPHSRK 5
C Rho decays to K Kbar                                                  DPHSRK 6
C ----------------------------------------------------------------------DPHSRK 7
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
      COMMON / DECPAR / GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 2
      REAL*4            GFERMI,GV,GA,CCABIB,SCABIB,GAMEL                DECPAR 3
      REAL  HV(4),PT(4),PN(4),PR(4),PKC(4),PKZ(4),QQ(4),PMULT(4,9)      DPHSRK10
      DATA PI /3.141592653589793238462643/                              DPHSRK11
      DATA ICONT /0/                                                    DPHSRK12
C                                                                       DPHSRK13
C THREE BODY PHASE SPACE NORMALISED AS IN BJORKEN-DRELL                 DPHSRK14
      PHSPAC=1./2**11/PI**5                                             DPHSRK15
C TAU MOMENTUM                                                          DPHSRK16
      PT(1)=0.                                                          DPHSRK17
      PT(2)=0.                                                          DPHSRK18
      PT(3)=0.                                                          DPHSRK19
      PT(4)=AMTAU                                                       DPHSRK20
C MASS OF (REAL/VIRTUAL) RHO                                            DPHSRK21
      AMS1=(AMK+AMKZ)**2                                                DPHSRK22
      AMS2=(AMTAU-AMNUTA)**2                                            DPHSRK23
C FLAT PHASE SPACE                                                      DPHSRK24
      CALL RANMAR(RR1,1)                                                DPHSRK25
      AMX2=AMS1+   RR1*(AMS2-AMS1)                                      DPHSRK26
      AMX=SQRT(AMX2)                                                    DPHSRK27
      PHSPAC=PHSPAC*(AMS2-AMS1)                                         DPHSRK28
C PHASE SPACE WITH SAMPLING FOR RHO RESONANCE                           DPHSRK29
c     ALP1=ATAN((AMS1-AMRO**2)/AMRO/GAMRO)                              DPHSRK30
c     ALP2=ATAN((AMS2-AMRO**2)/AMRO/GAMRO)                              DPHSRK31
CAM                                                                     DPHSRK32
 100  CONTINUE                                                          DPHSRK33
c     CALL RANMAR(RR1,1)                                                DPHSRK34
c     ALP=ALP1+RR1*(ALP2-ALP1)                                          DPHSRK35
c     AMX2=AMRO**2+AMRO*GAMRO*TAN(ALP)                                  DPHSRK36
c     AMX=SQRT(AMX2)                                                    DPHSRK37
c     IF(AMX.LT.(AMK+AMKZ)) GO TO 100                                   DPHSRK38
CAM                                                                     DPHSRK39
c     PHSPAC=PHSPAC*((AMX2-AMRO**2)**2+(AMRO*GAMRO)**2)/(AMRO*GAMRO)    DPHSRK40
c     PHSPAC=PHSPAC*(ALP2-ALP1)                                         DPHSRK41
C                                                                       DPHSRK42
C TAU-NEUTRINO MOMENTUM                                                 DPHSRK43
      PN(1)=0                                                           DPHSRK44
      PN(2)=0                                                           DPHSRK45
      PN(4)=1./(2*AMTAU)*(AMTAU**2+AMNUTA**2-AMX**2)                    DPHSRK46
      PN(3)=-SQRT((PN(4)-AMNUTA)*(PN(4)+AMNUTA))                        DPHSRK47
C RHO MOMENTUM                                                          DPHSRK48
      PR(1)=0                                                           DPHSRK49
      PR(2)=0                                                           DPHSRK50
      PR(4)=1./(2*AMTAU)*(AMTAU**2-AMNUTA**2+AMX**2)                    DPHSRK51
      PR(3)=-PN(3)                                                      DPHSRK52
      PHSPAC=PHSPAC*(4*PI)*(2*PR(3)/AMTAU)                              DPHSRK53
C                                                                       DPHSRK54
CAM                                                                     DPHSRK55
      ENQ1=(AMX2+AMK**2-AMKZ**2)/(2.*AMX)                               DPHSRK56
      ENQ2=(AMX2-AMK**2+AMKZ**2)/(2.*AMX)                               DPHSRK57
      PPPI=SQRT((ENQ1-AMK)*(ENQ1+AMK))                                  DPHSRK58
      PHSPAC=PHSPAC*(4*PI)*(2*PPPI/AMX)                                 DPHSRK59
C CHARGED PI MOMENTUM IN RHO REST FRAME                                 DPHSRK60
      CALL SPHERA(PPPI,PKC)                                             DPHSRK61
      PKC(4)=ENQ1                                                       DPHSRK62
C NEUTRAL PI MOMENTUM IN RHO REST FRAME                                 DPHSRK63
      DO 20 I=1,3                                                       DPHSRK64
20    PKZ(I)=-PKC(I)                                                    DPHSRK65
      PKZ(4)=ENQ2                                                       DPHSRK66
      EXE=(PR(4)+PR(3))/AMX                                             DPHSRK67
C PIONS BOOSTED FROM RHO REST FRAME TO TAU REST FRAME                   DPHSRK68
      CALL BOSTR3(EXE,PKC,PKC)                                          DPHSRK69
      CALL BOSTR3(EXE,PKZ,PKZ)                                          DPHSRK70
      DO 30 I=1,4                                                       DPHSRK71
 30   QQ(I)=PKC(I)-PKZ(I)                                               DPHSRK72
C QQ transverse to PR                                                   DPHSRK73
      PKSD =PR(4)*PR(4)-PR(3)*PR(3)-PR(2)*PR(2)-PR(1)*PR(1)             DPHSRK74
      QQPKS=PR(4)* QQ(4)-PR(3)* QQ(3)-PR(2)* QQ(2)-PR(1)* QQ(1)         DPHSRK75
      DO 31 I=1,4                                                       DPHSRK76
31    QQ(I)=QQ(I)-PR(I)*QQPKS/PKSD                                      DPHSRK77
C AMPLITUDE                                                             DPHSRK78
      PRODPQ=PT(4)*QQ(4)                                                DPHSRK79
      PRODNQ=PN(4)*QQ(4)-PN(1)*QQ(1)-PN(2)*QQ(2)-PN(3)*QQ(3)            DPHSRK80
      PRODPN=PT(4)*PN(4)                                                DPHSRK81
      QQ2= QQ(4)**2-QQ(1)**2-QQ(2)**2-QQ(3)**2                          DPHSRK82
      BRAK=(GV**2+GA**2)*(2*PRODPQ*PRODNQ-PRODPN*QQ2)                   DPHSRK83
     &    +(GV**2-GA**2)*AMTAU*AMNUTA*QQ2                               DPHSRK84
      AMPLIT=(GFERMI*CCABIB)**2*BRAK*2*FPIRK(AMX)                       DPHSRK85
      DGAMT=1/(2.*AMTAU)*AMPLIT*PHSPAC                                  DPHSRK86
      DO 40 I=1,3                                                       DPHSRK87
 40   HV(I)=2*GV*GA*AMTAU*(2*PRODNQ*QQ(I)-QQ2*PN(I))/BRAK               DPHSRK88
      do 77 k=1,4                                                       DPHSRK89
        pmult(k,1)=pkc(k)                                               DPHSRK90
        pmult(k,2)=pkz(k)                                               DPHSRK91
 77   continue                                                          DPHSRK92
      RETURN                                                            DPHSRK93
      END                                                               DPHSRK94
      FUNCTION FPIRK(W)                                                 FPIRK  2
C ----------------------------------------------------------            FPIRK  3
c     square of pion form factor                                        FPIRK  4
C ----------------------------------------------------------            FPIRK  5
      COMMON / PARMAS / AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 2
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 3
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 4
C                                                                       PARMAS 5
      REAL*4            AMTAU,AMNUTA,AMEL,AMNUE,AMMU,AMNUMU             PARMAS 6
     *                 ,AMPIZ,AMPI,AMRO,GAMRO,AMA1,GAMA1                PARMAS 7
     *                 ,AMK,AMKZ,AMKST,GAMKST                           PARMAS 8
c     COMPLEX FPIKMK                                                    FPIRK  7
      COMPLEX FPIKM                                                     FPIRK  8
      FPIRK=CABS(FPIKM(W,AMK,AMKZ))**2                                  FPIRK  9
c     FPIRK=CABS(FPIKMK(W,AMK,AMKZ))**2                                 FPIRK 10
      END                                                               FPIRK 11
      COMPLEX FUNCTION FPIKMK(W,XM1,XM2)                                FPIKMK 2
C **********************************************************            FPIKMK 3
C     Kaon form factor                                                  FPIKMK 4
C **********************************************************            FPIKMK 5
      COMPLEX BWIGM                                                     FPIKMK 6
      REAL ROM,ROG,ROM1,ROG1,BETA1,PI,PIM,S,W                           FPIKMK 7
      EXTERNAL BWIG                                                     FPIKMK 8
      DATA  INIT /0/                                                    FPIKMK 9
C                                                                       FPIKMK10
C ------------ PARAMETERS --------------------                          FPIKMK11
      IF (INIT.EQ.0 ) THEN                                              FPIKMK12
      INIT=1                                                            FPIKMK13
      PI=3.141592654                                                    FPIKMK14
      PIM=.140                                                          FPIKMK15
      ROM=0.773                                                         FPIKMK16
      ROG=0.145                                                         FPIKMK17
      ROM1=1.570                                                        FPIKMK18
      ROG1=0.510                                                        FPIKMK19
c     BETA1=-0.111                                                      FPIKMK20
      BETA1=-0.221                                                      FPIKMK21
      ENDIF                                                             FPIKMK22
C -----------------------------------------------                       FPIKMK23
      S=W**2                                                            FPIKMK24
      FPIKMK=(BWIGM(S,ROM,ROG,XM1,XM2)+BETA1*BWIGM(S,ROM1,ROG1,XM1,XM2))FPIKMK25
     & /(1+BETA1)                                                       FPIKMK26
      RETURN                                                            FPIKMK27
      END                                                               FPIKMK28
      SUBROUTINE RESLU                                                  RESLU  2
C     ****************                                                  RESLU  3
C INITIALIZE LUND COMMON                                                RESLU  4
      PARAMETER (NMXHEP=2000)                                           HEPEVT 2
      COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(NMXHEP),IDHEP(NMXHEP),           HEPEVT 3
     &JMOHEP(2,NMXHEP),JDAHEP(2,NMXHEP),PHEP(5,NMXHEP),VHEP(4,NMXHEP)   HEPEVT 4
      SAVE /HEPEVT/                                                     HEPEVT 5
      NHEP=0                                                            RESLU  6
      END                                                               RESLU  7
      SUBROUTINE DWRPH(KTO,PHX)                                         DWRPH  2
C                                                                       DWRPH  3
C -------------------------                                             DWRPH  4
C                                                                       DWRPH  5
      IMPLICIT REAL*8 (A-H,O-Z)                                         DWRPH  6
      REAL*4         PHX(4)                                             DWRPH  7
      REAL*4 QHOT(4)                                                    DWRPH  8
C                                                                       DWRPH  9
      DO  9 K=1,4                                                       DWRPH 10
      QHOT(K)  =0.0                                                     DWRPH 11
  9   CONTINUE                                                          DWRPH 12
C CASE OF TAU RADIATIVE DECAYS.                                         DWRPH 13
C FILLING OF THE LUND COMMON BLOCK.                                     DWRPH 14
        DO 1002 I=1,4                                                   DWRPH 15
 1002   QHOT(I)=PHX(I)                                                  DWRPH 16
        IF (QHOT(4).GT.1.E-5) CALL DWLUPH(KTO,QHOT)                     DWRPH 17
        RETURN                                                          DWRPH 18
      END                                                               DWRPH 19
      SUBROUTINE DWLUPH(KTO,PHOT)                                       DWLUPH 2
C---------------------------------------------------------------------  DWLUPH 3
C Lorentz transformation to CMsystem and                                DWLUPH 4
C Updating of HEPEVT record                                             DWLUPH 5
C                                                                       DWLUPH 6
C     called by : DEXAY1,(DEKAY1,DEKAY2)                                DWLUPH 7
C                                                                       DWLUPH 8
C used when radiative corrections in decays are generated               DWLUPH 9
C---------------------------------------------------------------------  DWLUPH10
C                                                                       DWLUPH11
      REAL  PHOT(4)                                                     DWLUPH12
C                                                                       DWLUPH13
C check energy                                                          DWLUPH14
      IF (PHOT(4).LE.0.0) RETURN                                        DWLUPH15
C                                                                       DWLUPH16
C position of decaying particle:                                        DWLUPH17
      IF((KTO.EQ. 1).OR.(KTO.EQ.11)) THEN                               DWLUPH18
        NPS=3                                                           DWLUPH19
      ELSE                                                              DWLUPH20
        NPS=4                                                           DWLUPH21
      ENDIF                                                             DWLUPH22
C                                                                       DWLUPH23
      KTOS=KTO                                                          DWLUPH24
      IF(KTOS.GT.10) KTOS=KTOS-10                                       DWLUPH25
C boost and append photon (gamma is 22)                                 DWLUPH26
      CALL TRALO4(KTOS,PHOT,PHOT,AM)                                    DWLUPH27
      CALL FILHEP(0,1,22,NPS,NPS,0,0,PHOT,0.0,.TRUE.)                   DWLUPH28
C                                                                       DWLUPH29
      RETURN                                                            DWLUPH30
      END                                                               DWLUPH31
                                                                        DWLUPH32
      SUBROUTINE DWLUEL(KTO,ISGN,PNU,PWB,PEL,PNE)                       DWLUEL 2
C ----------------------------------------------------------------------DWLUEL 3
C Lorentz transformation to CMsystem and                                DWLUEL 4
C Updating of HEPEVT record                                             DWLUEL 5
C                                                                       DWLUEL 6
C ISGN = 1/-1 for tau-/tau+                                             DWLUEL 7
C                                                                       DWLUEL 8
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLUEL 9
C ----------------------------------------------------------------------DWLUEL10
C                                                                       DWLUEL11
      REAL  PNU(4),PWB(4),PEL(4),PNE(4)                                 DWLUEL12
C                                                                       DWLUEL13
C position of decaying particle:                                        DWLUEL14
      IF(KTO.EQ. 1) THEN                                                DWLUEL15
        NPS=3                                                           DWLUEL16
      ELSE                                                              DWLUEL17
        NPS=4                                                           DWLUEL18
      ENDIF                                                             DWLUEL19
C                                                                       DWLUEL20
C tau neutrino (nu_tau is 16)                                           DWLUEL21
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLUEL22
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUEL23
C                                                                       DWLUEL24
C W boson (W+ is 24)                                                    DWLUEL25
      CALL TRALO4(KTO,PWB,PWB,AM)                                       DWLUEL26
C     CALL FILHEP(0,2,-24*ISGN,NPS,NPS,0,0,PWB,AM,.TRUE.)               DWLUEL27
C                                                                       DWLUEL28
C electron (e- is 11)                                                   DWLUEL29
      CALL TRALO4(KTO,PEL,PEL,AM)                                       DWLUEL30
      CALL FILHEP(0,1,11*ISGN,NPS,NPS,0,0,PEL,AM,.FALSE.)               DWLUEL31
C                                                                       DWLUEL32
C anti electron neutrino (nu_e is 12)                                   DWLUEL33
      CALL TRALO4(KTO,PNE,PNE,AM)                                       DWLUEL34
      CALL FILHEP(0,1,-12*ISGN,NPS,NPS,0,0,PNE,AM,.TRUE.)               DWLUEL35
C                                                                       DWLUEL36
      RETURN                                                            DWLUEL37
      END                                                               DWLUEL38
      SUBROUTINE DWLUMU(KTO,ISGN,PNU,PWB,PMU,PNM)                       DWLUMU 2
C ----------------------------------------------------------------------DWLUMU 3
C Lorentz transformation to CMsystem and                                DWLUMU 4
C Updating of HEPEVT record                                             DWLUMU 5
C                                                                       DWLUMU 6
C ISGN = 1/-1 for tau-/tau+                                             DWLUMU 7
C                                                                       DWLUMU 8
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLUMU 9
C ----------------------------------------------------------------------DWLUMU10
C                                                                       DWLUMU11
      REAL  PNU(4),PWB(4),PMU(4),PNM(4)                                 DWLUMU12
C                                                                       DWLUMU13
C position of decaying particle:                                        DWLUMU14
      IF(KTO.EQ. 1) THEN                                                DWLUMU15
        NPS=3                                                           DWLUMU16
      ELSE                                                              DWLUMU17
        NPS=4                                                           DWLUMU18
      ENDIF                                                             DWLUMU19
C                                                                       DWLUMU20
C tau neutrino (nu_tau is 16)                                           DWLUMU21
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLUMU22
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUMU23
C                                                                       DWLUMU24
C W boson (W+ is 24)                                                    DWLUMU25
      CALL TRALO4(KTO,PWB,PWB,AM)                                       DWLUMU26
C     CALL FILHEP(0,2,-24*ISGN,NPS,NPS,0,0,PWB,AM,.TRUE.)               DWLUMU27
C                                                                       DWLUMU28
C muon (mu- is 13)                                                      DWLUMU29
      CALL TRALO4(KTO,PMU,PMU,AM)                                       DWLUMU30
      CALL FILHEP(0,1,13*ISGN,NPS,NPS,0,0,PMU,AM,.FALSE.)               DWLUMU31
C                                                                       DWLUMU32
C anti muon neutrino (nu_mu is 14)                                      DWLUMU33
      CALL TRALO4(KTO,PNM,PNM,AM)                                       DWLUMU34
      CALL FILHEP(0,1,-14*ISGN,NPS,NPS,0,0,PNM,AM,.TRUE.)               DWLUMU35
C                                                                       DWLUMU36
      RETURN                                                            DWLUMU37
      END                                                               DWLUMU38
      SUBROUTINE DWLUPI(KTO,ISGN,PPI,PNU)                               DWLUPI 2
C ----------------------------------------------------------------------DWLUPI 3
C Lorentz transformation to CMsystem and                                DWLUPI 4
C Updating of HEPEVT record                                             DWLUPI 5
C                                                                       DWLUPI 6
C ISGN = 1/-1 for tau-/tau+                                             DWLUPI 7
C                                                                       DWLUPI 8
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLUPI 9
C ----------------------------------------------------------------------DWLUPI10
C                                                                       DWLUPI11
      REAL  PNU(4),PPI(4)                                               DWLUPI12
C                                                                       DWLUPI13
C position of decaying particle:                                        DWLUPI14
      IF(KTO.EQ. 1) THEN                                                DWLUPI15
        NPS=3                                                           DWLUPI16
      ELSE                                                              DWLUPI17
        NPS=4                                                           DWLUPI18
      ENDIF                                                             DWLUPI19
C                                                                       DWLUPI20
C tau neutrino (nu_tau is 16)                                           DWLUPI21
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLUPI22
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUPI23
C                                                                       DWLUPI24
C charged pi meson (pi+ is 211)                                         DWLUPI25
      CALL TRALO4(KTO,PPI,PPI,AM)                                       DWLUPI26
      CALL FILHEP(0,1,-211*ISGN,NPS,NPS,0,0,PPI,AM,.TRUE.)              DWLUPI27
C                                                                       DWLUPI28
      RETURN                                                            DWLUPI29
      END                                                               DWLUPI30
      SUBROUTINE DWLURO(KTO,ISGN,PNU,PRHO,PIC,PIZ)                      DWLURO 2
C ----------------------------------------------------------------------DWLURO 3
C Lorentz transformation to CMsystem and                                DWLURO 4
C Updating of HEPEVT record                                             DWLURO 5
C                                                                       DWLURO 6
C ISGN = 1/-1 for tau-/tau+                                             DWLURO 7
C                                                                       DWLURO 8
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLURO 9
C ----------------------------------------------------------------------DWLURO10
C                                                                       DWLURO11
      REAL  PNU(4),PRHO(4),PIC(4),PIZ(4)                                DWLURO12
C                                                                       DWLURO13
C position of decaying particle:                                        DWLURO14
      IF(KTO.EQ. 1) THEN                                                DWLURO15
        NPS=3                                                           DWLURO16
      ELSE                                                              DWLURO17
        NPS=4                                                           DWLURO18
      ENDIF                                                             DWLURO19
C                                                                       DWLURO20
C tau neutrino (nu_tau is 16)                                           DWLURO21
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLURO22
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLURO23
C                                                                       DWLURO24
C charged rho meson (rho+ is 213)                                       DWLURO25
      CALL TRALO4(KTO,PRHO,PRHO,AM)                                     DWLURO26
      CALL FILHEP(0,2,-213*ISGN,NPS,NPS,0,0,PRHO,AM,.TRUE.)             DWLURO27
C                                                                       DWLURO28
C charged pi meson (pi+ is 211)                                         DWLURO29
      CALL TRALO4(KTO,PIC,PIC,AM)                                       DWLURO30
      CALL FILHEP(0,1,-211*ISGN,-1,-1,0,0,PIC,AM,.TRUE.)                DWLURO31
C                                                                       DWLURO32
C pi0 meson (pi0 is 111)                                                DWLURO33
      CALL TRALO4(KTO,PIZ,PIZ,AM)                                       DWLURO34
      CALL FILHEP(0,1,111,-2,-2,0,0,PIZ,AM,.TRUE.)                      DWLURO35
C                                                                       DWLURO36
      RETURN                                                            DWLURO37
      END                                                               DWLURO38
      SUBROUTINE DWLUAA(KTO,ISGN,PNU,PAA,PIM1,PIM2,PIPL,JAA)            DWLUAA 2
C ----------------------------------------------------------------------DWLUAA 3
C Lorentz transformation to CMsystem and                                DWLUAA 4
C Updating of HEPEVT record                                             DWLUAA 5
C                                                                       DWLUAA 6
C ISGN = 1/-1 for tau-/tau+                                             DWLUAA 7
C JAA  = 1 (2) FOR A_1- DECAY TO PI+ 2PI- (PI- 2PI0)                    DWLUAA 8
C                                                                       DWLUAA 9
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLUAA10
C ----------------------------------------------------------------------DWLUAA11
C                                                                       DWLUAA12
      REAL  PNU(4),PAA(4),PIM1(4),PIM2(4),PIPL(4)                       DWLUAA13
C                                                                       DWLUAA14
C position of decaying particle:                                        DWLUAA15
      IF(KTO.EQ. 1) THEN                                                DWLUAA16
        NPS=3                                                           DWLUAA17
      ELSE                                                              DWLUAA18
        NPS=4                                                           DWLUAA19
      ENDIF                                                             DWLUAA20
C                                                                       DWLUAA21
C tau neutrino (nu_tau is 16)                                           DWLUAA22
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLUAA23
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUAA24
C                                                                       DWLUAA25
C charged a_1 meson (a_1+ is 20213)                                     DWLUAA26
      CALL TRALO4(KTO,PAA,PAA,AM)                                       DWLUAA27
      CALL FILHEP(0,1,-20213*ISGN,NPS,NPS,0,0,PAA,AM,.TRUE.)            DWLUAA28
C                                                                       DWLUAA29
C two possible decays of the charged a1 meson                           DWLUAA30
      IF(JAA.EQ.1) THEN                                                 DWLUAA31
C                                                                       DWLUAA32
C A1  --> PI+ PI-  PI- (or charged conjugate)                           DWLUAA33
C                                                                       DWLUAA34
C pi minus (or c.c.) (pi+ is 211)                                       DWLUAA35
        CALL TRALO4(KTO,PIM2,PIM2,AM)                                   DWLUAA36
        CALL FILHEP(0,1,-211*ISGN,-1,-1,0,0,PIM2,AM,.TRUE.)             DWLUAA37
C                                                                       DWLUAA38
C pi minus (or c.c.) (pi+ is 211)                                       DWLUAA39
        CALL TRALO4(KTO,PIM1,PIM1,AM)                                   DWLUAA40
        CALL FILHEP(0,1,-211*ISGN,-2,-2,0,0,PIM1,AM,.TRUE.)             DWLUAA41
C                                                                       DWLUAA42
C pi plus (or c.c.) (pi+ is 211)                                        DWLUAA43
        CALL TRALO4(KTO,PIPL,PIPL,AM)                                   DWLUAA44
        CALL FILHEP(0,1, 211*ISGN,-3,-3,0,0,PIPL,AM,.TRUE.)             DWLUAA45
C                                                                       DWLUAA46
      ELSE IF (JAA.EQ.2) THEN                                           DWLUAA47
C                                                                       DWLUAA48
C A1  --> PI- PI0  PI0 (or charged conjugate)                           DWLUAA49
C                                                                       DWLUAA50
C pi zero (pi0 is 111)                                                  DWLUAA51
        CALL TRALO4(KTO,PIM2,PIM2,AM)                                   DWLUAA52
        CALL FILHEP(0,1,111,-1,-1,0,0,PIM2,AM,.TRUE.)                   DWLUAA53
C                                                                       DWLUAA54
C pi zero (pi0 is 111)                                                  DWLUAA55
        CALL TRALO4(KTO,PIM1,PIM1,AM)                                   DWLUAA56
        CALL FILHEP(0,1,111,-2,-2,0,0,PIM1,AM,.TRUE.)                   DWLUAA57
C                                                                       DWLUAA58
C pi minus (or c.c.) (pi+ is 211)                                       DWLUAA59
        CALL TRALO4(KTO,PIPL,PIPL,AM)                                   DWLUAA60
        CALL FILHEP(0,1,-211*ISGN,-3,-3,0,0,PIPL,AM,.TRUE.)             DWLUAA61
C                                                                       DWLUAA62
      ENDIF                                                             DWLUAA63
C                                                                       DWLUAA64
      RETURN                                                            DWLUAA65
      END                                                               DWLUAA66
      SUBROUTINE DWLUKK (KTO,ISGN,PKK,PNU)                              DWLUKK 2
C ----------------------------------------------------------------------DWLUKK 3
C Lorentz transformation to CMsystem and                                DWLUKK 4
C Updating of HEPEVT record                                             DWLUKK 5
C                                                                       DWLUKK 6
C ISGN = 1/-1 for tau-/tau+                                             DWLUKK 7
C                                                                       DWLUKK 8
C ----------------------------------------------------------------------DWLUKK 9
C                                                                       DWLUKK10
      REAL PKK(4),PNU(4)                                                DWLUKK11
C                                                                       DWLUKK12
C position of decaying particle                                         DWLUKK13
      IF (KTO.EQ.1) THEN                                                DWLUKK14
        NPS=3                                                           DWLUKK15
      ELSE                                                              DWLUKK16
        NPS=4                                                           DWLUKK17
      ENDIF                                                             DWLUKK18
C                                                                       DWLUKK19
C tau neutrino (nu_tau is 16)                                           DWLUKK20
      CALL TRALO4 (KTO,PNU,PNU,AM)                                      DWLUKK21
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUKK22
C                                                                       DWLUKK23
C K meson (K+ is 321)                                                   DWLUKK24
      CALL TRALO4 (KTO,PKK,PKK,AM)                                      DWLUKK25
      CALL FILHEP(0,1,-321*ISGN,NPS,NPS,0,0,PKK,AM,.TRUE.)              DWLUKK26
C                                                                       DWLUKK27
      RETURN                                                            DWLUKK28
      END                                                               DWLUKK29
      SUBROUTINE DWLUKS(KTO,ISGN,PNU,PKS,PKK,PPI,JKST)                  DWLUKS 2
      COMMON / TAUKLE / BRA1,BRK0,BRK0B,BRKS                            DWLUKS 3
      REAL*4            BRA1,BRK0,BRK0B,BRKS                            DWLUKS 4
C ----------------------------------------------------------------------DWLUKS 5
C Lorentz transformation to CMsystem and                                DWLUKS 6
C Updating of HEPEVT record                                             DWLUKS 7
C                                                                       DWLUKS 8
C ISGN = 1/-1 for tau-/tau+                                             DWLUKS 9
C JKST=10 (20) corresponds to K0B pi- (K- pi0) decay                    DWLUKS10
C                                                                       DWLUKS11
C ----------------------------------------------------------------------DWLUKS12
C                                                                       DWLUKS13
      REAL  PNU(4),PKS(4),PKK(4),PPI(4)                                 DWLUKS14
C                                                                       DWLUKS15
C position of decaying particle                                         DWLUKS16
      IF(KTO.EQ. 1) THEN                                                DWLUKS17
        NPS=3                                                           DWLUKS18
      ELSE                                                              DWLUKS19
        NPS=4                                                           DWLUKS20
      ENDIF                                                             DWLUKS21
C                                                                       DWLUKS22
C tau neutrino (nu_tau is 16)                                           DWLUKS23
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLUKS24
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLUKS25
C                                                                       DWLUKS26
C charged K* meson (K*+ is 323)                                         DWLUKS27
      CALL TRALO4(KTO,PKS,PKS,AM)                                       DWLUKS28
      CALL FILHEP(0,1,-323*ISGN,NPS,NPS,0,0,PKS,AM,.TRUE.)              DWLUKS29
C                                                                       DWLUKS30
C two possible decay modes of charged K*                                DWLUKS31
      IF(JKST.EQ.10) THEN                                               DWLUKS32
C                                                                       DWLUKS33
C K*- --> pi- K0B (or charged conjugate)                                DWLUKS34
C                                                                       DWLUKS35
C charged pi meson  (pi+ is 211)                                        DWLUKS36
        CALL TRALO4(KTO,PPI,PPI,AM)                                     DWLUKS37
        CALL FILHEP(0,1,-211*ISGN,-1,-1,0,0,PPI,AM,.TRUE.)              DWLUKS38
C                                                                       DWLUKS39
        BRAN=BRK0B                                                      DWLUKS40
        IF (ISGN.EQ.-1) BRAN=BRK0                                       DWLUKS41
C K0 --> K0_long (is 130) / K0_short (is 310) = 1/1                     DWLUKS42
        CALL RANMAR(XIO,1)                                              DWLUKS43
        IF(XIO.GT.BRAN) THEN                                            DWLUKS44
          K0TYPE = 130                                                  DWLUKS45
        ELSE                                                            DWLUKS46
          K0TYPE = 310                                                  DWLUKS47
        ENDIF                                                           DWLUKS48
C                                                                       DWLUKS49
        CALL TRALO4(KTO,PKK,PKK,AM)                                     DWLUKS50
        CALL FILHEP(0,1,K0TYPE,-2,-2,0,0,PKK,AM,.TRUE.)                 DWLUKS51
C                                                                       DWLUKS52
      ELSE IF(JKST.EQ.20) THEN                                          DWLUKS53
C                                                                       DWLUKS54
C K*- --> pi0 K-                                                        DWLUKS55
C                                                                       DWLUKS56
C pi zero (pi0 is 111)                                                  DWLUKS57
        CALL TRALO4(KTO,PPI,PPI,AM)                                     DWLUKS58
        CALL FILHEP(0,1,111,-1,-1,0,0,PPI,AM,.TRUE.)                    DWLUKS59
C                                                                       DWLUKS60
C charged K meson (K+ is 321)                                           DWLUKS61
        CALL TRALO4(KTO,PKK,PKK,AM)                                     DWLUKS62
        CALL FILHEP(0,1,-321*ISGN,-2,-2,0,0,PKK,AM,.TRUE.)              DWLUKS63
C                                                                       DWLUKS64
      ENDIF                                                             DWLUKS65
C                                                                       DWLUKS66
      RETURN                                                            DWLUKS67
      END                                                               DWLUKS68
      SUBROUTINE DWLNEW(KTO,ISGN,PNU,PWB,PNPI,MODE)                     DWLNEW 2
C ----------------------------------------------------------------------DWLNEW 3
C Lorentz transformation to CMsystem and                                DWLNEW 4
C Updating of HEPEVT record                                             DWLNEW 5
C                                                                       DWLNEW 6
C ISGN = 1/-1 for tau-/tau+                                             DWLNEW 7
C                                                                       DWLNEW 8
C     called by : DEXAY,(DEKAY1,DEKAY2)                                 DWLNEW 9
C ----------------------------------------------------------------------DWLNEW10
C                                                                       DWLNEW11
      PARAMETER (NMODE=15,NM1=0,NM2=1,NM3=8,NM4=2,NM5=1,NM6=3)          TAUDCD 2
      COMMON / TAUDCD /IDFFIN(9,NMODE),MULPIK(NMODE)                    TAUDCD 3
     &                ,NAMES                                            TAUDCD 4
      CHARACTER NAMES(NMODE)*31                                         TAUDCD 5
      REAL  PNU(4),PWB(4),PNPI(4,9)                                     DWLNEW13
      REAL  PPI(4)                                                      DWLNEW14
C                                                                       DWLNEW15
      JNPI=MODE-7                                                       DWLNEW16
C position of decaying particle                                         DWLNEW17
      IF(KTO.EQ. 1) THEN                                                DWLNEW18
        NPS=3                                                           DWLNEW19
      ELSE                                                              DWLNEW20
        NPS=4                                                           DWLNEW21
      ENDIF                                                             DWLNEW22
C                                                                       DWLNEW23
C tau neutrino (nu_tau is 16)                                           DWLNEW24
      CALL TRALO4(KTO,PNU,PNU,AM)                                       DWLNEW25
      CALL FILHEP(0,1,16*ISGN,NPS,NPS,0,0,PNU,AM,.TRUE.)                DWLNEW26
C                                                                       DWLNEW27
C W boson (W+ is 24)                                                    DWLNEW28
      CALL TRALO4(KTO,PWB,PWB,AM)                                       DWLNEW29
      CALL FILHEP(0,1,-24*ISGN,NPS,NPS,0,0,PWB,AM,.TRUE.)               DWLNEW30
C                                                                       DWLNEW31
C multi pi mode JNPI                                                    DWLNEW32
C                                                                       DWLNEW33
C get multiplicity of mode JNPI                                         DWLNEW34
      ND=MULPIK(JNPI)                                                   DWLNEW35
      DO I=1,ND                                                         DWLNEW36
cam     KFPI=LUNPIK(IDFFIN(I,JNPI),-ISGN)                               DWLNEW37
        KFPI=LUNPIK(IDFFIN(I,JNPI), ISGN)                               DWLNEW38
C for charged conjugate case, change charged pions only                 DWLNEW39
C        IF(KFPI.NE.111)KFPI=KFPI*ISGN                                  DWLNEW40
        DO J=1,4                                                        DWLNEW41
          PPI(J)=PNPI(J,I)                                              DWLNEW42
        END DO                                                          DWLNEW43
        CALL TRALO4(KTO,PPI,PPI,AM)                                     DWLNEW44
        CALL FILHEP(0,1,KFPI,-I,-I,0,0,PPI,AM,.TRUE.)                   DWLNEW45
      END DO                                                            DWLNEW46
C                                                                       DWLNEW47
      RETURN                                                            DWLNEW48
      END                                                               DWLNEW49
      SUBROUTINE FILHEP(N,IST,ID,JMO1,JMO2,JDA1,JDA2,P4,PINV,PHFLAG)    FILHEP 2
C ----------------------------------------------------------------------FILHEP 3
C this subroutine fills one entry into the HEPEVT common                FILHEP 4
C and updates the information for affected mother entries               FILHEP 5
C                                                                       FILHEP 6
C written by Martin W. Gruenewald (91/01/28)                            FILHEP 7
C                                                                       FILHEP 8
C     called by : ZTOHEP,BTOHEP,DWLUxy                                  FILHEP 9
C ----------------------------------------------------------------------FILHEP10
C                                                                       FILHEP11
      PARAMETER (NMXHEP=2000)                                           HEPEVT 2
      COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(NMXHEP),IDHEP(NMXHEP),           HEPEVT 3
     &JMOHEP(2,NMXHEP),JDAHEP(2,NMXHEP),PHEP(5,NMXHEP),VHEP(4,NMXHEP)   HEPEVT 4
      SAVE /HEPEVT/                                                     HEPEVT 5
      COMMON/PHOQED/QEDRAD(NMXHEP)                                      FILHEP13
      LOGICAL QEDRAD                                                    FILHEP14
      SAVE /PHOQED/                                                     FILHEP15
      LOGICAL PHFLAG                                                    FILHEP16
C                                                                       FILHEP17
      REAL*4  P4(4)                                                     FILHEP18
C                                                                       FILHEP19
C check address mode                                                    FILHEP20
      IF (N.EQ.0) THEN                                                  FILHEP21
C                                                                       FILHEP22
C append mode                                                           FILHEP23
        IHEP=NHEP+1                                                     FILHEP24
      ELSE IF (N.GT.0) THEN                                             FILHEP25
C                                                                       FILHEP26
C absolute position                                                     FILHEP27
        IHEP=N                                                          FILHEP28
      ELSE                                                              FILHEP29
C                                                                       FILHEP30
C relative position                                                     FILHEP31
        IHEP=NHEP+N                                                     FILHEP32
      END IF                                                            FILHEP33
C                                                                       FILHEP34
C check on IHEP                                                         FILHEP35
      IF ((IHEP.LE.0).OR.(IHEP.GT.NMXHEP)) RETURN                       FILHEP36
C                                                                       FILHEP37
C add entry                                                             FILHEP38
      NHEP=IHEP                                                         FILHEP39
      ISTHEP(IHEP)=IST                                                  FILHEP40
      IDHEP(IHEP)=ID                                                    FILHEP41
      JMOHEP(1,IHEP)=JMO1                                               FILHEP42
      IF(JMO1.LT.0)JMOHEP(1,IHEP)=JMOHEP(1,IHEP)+IHEP                   FILHEP43
      JMOHEP(2,IHEP)=JMO2                                               FILHEP44
      IF(JMO2.LT.0)JMOHEP(2,IHEP)=JMOHEP(2,IHEP)+IHEP                   FILHEP45
      JDAHEP(1,IHEP)=JDA1                                               FILHEP46
      JDAHEP(2,IHEP)=JDA2                                               FILHEP47
C                                                                       FILHEP48
      DO I=1,4                                                          FILHEP49
        PHEP(I,IHEP)=P4(I)                                              FILHEP50
C                                                                       FILHEP51
C KORAL-B and KORAL-Z do not provide vertex and/or lifetime informationsFILHEP52
        VHEP(I,IHEP)=0.0                                                FILHEP53
      END DO                                                            FILHEP54
      PHEP(5,IHEP)=PINV                                                 FILHEP55
C FLAG FOR PHOTOS...                                                    FILHEP56
      QEDRAD(IHEP)=PHFLAG                                               FILHEP57
C                                                                       FILHEP58
C update process:                                                       FILHEP59
      DO IP=JMOHEP(1,IHEP),JMOHEP(2,IHEP)                               FILHEP60
        IF(IP.GT.0)THEN                                                 FILHEP61
C                                                                       FILHEP62
C if there is a daughter at IHEP, mother entry at IP has decayed        FILHEP63
          IF(ISTHEP(IP).EQ.1)ISTHEP(IP)=2                               FILHEP64
C                                                                       FILHEP65
C and daughter pointers of mother entry must be updated                 FILHEP66
          IF(JDAHEP(1,IP).EQ.0)THEN                                     FILHEP67
            JDAHEP(1,IP)=IHEP                                           FILHEP68
            JDAHEP(2,IP)=IHEP                                           FILHEP69
          ELSE                                                          FILHEP70
            JDAHEP(2,IP)=MAX(IHEP,JDAHEP(2,IP))                         FILHEP71
          END IF                                                        FILHEP72
        END IF                                                          FILHEP73
      END DO                                                            FILHEP74
C                                                                       FILHEP75
      RETURN                                                            FILHEP76
      END                                                               FILHEP77
                                                                        FILHEP78
      FUNCTION AMAST(PP)                                                AMAST  2
C ----------------------------------------------------------------------AMAST  3
C CALCULATES MASS OF PP (DOUBLE PRECISION)                              AMAST  4
C                                                                       AMAST  5
C     USED BY : RADKOR                                                  AMAST  6
C ----------------------------------------------------------------------AMAST  7
      IMPLICIT REAL*8 (A-H,O-Z)                                         AMAST  8
      REAL*8  PP(4)                                                     AMAST  9
      AAA=PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                           AMAST 10
C                                                                       AMAST 11
      IF(AAA.NE.0.0) AAA=AAA/SQRT(ABS(AAA))                             AMAST 12
      AMAST=AAA                                                         AMAST 13
      RETURN                                                            AMAST 14
      END                                                               AMAST 15
      FUNCTION AMAS4(PP)                                                AMAS4  2
C     ******************                                                AMAS4  3
C ----------------------------------------------------------------------AMAS4  4
C CALCULATES MASS OF PP                                                 AMAS4  5
C                                                                       AMAS4  6
C     USED BY :                                                         AMAS4  7
C ----------------------------------------------------------------------AMAS4  8
      REAL  PP(4)                                                       AMAS4  9
      AAA=PP(4)**2-PP(3)**2-PP(2)**2-PP(1)**2                           AMAS4 10
      IF(AAA.NE.0.0) AAA=AAA/SQRT(ABS(AAA))                             AMAS4 11
      AMAS4=AAA                                                         AMAS4 12
      RETURN                                                            AMAS4 13
      END                                                               AMAS4 14
      FUNCTION ANGXY(X,Y)                                               ANGXY  2
C ----------------------------------------------------------------------ANGXY  3
C                                                                       ANGXY  4
C     USED BY : KORALZ RADKOR                                           ANGXY  5
C ----------------------------------------------------------------------ANGXY  6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ANGXY  7
      DATA PI /3.141592653589793238462643D0/                            ANGXY  8
C                                                                       ANGXY  9
      IF(ABS(Y).LT.ABS(X)) THEN                                         ANGXY 10
        THE=ATAN(ABS(Y/X))                                              ANGXY 11
        IF(X.LE.0D0) THE=PI-THE                                         ANGXY 12
      ELSE                                                              ANGXY 13
        THE=ACOS(X/SQRT(X**2+Y**2))                                     ANGXY 14
      ENDIF                                                             ANGXY 15
      ANGXY=THE                                                         ANGXY 16
      RETURN                                                            ANGXY 17
      END                                                               ANGXY 18
      FUNCTION ANGFI(X,Y)                                               ANGFI  2
C ----------------------------------------------------------------------ANGFI  3
* CALCULATES ANGLE IN (0,2*PI) RANGE OUT OF X-Y                         ANGFI  4
C                                                                       ANGFI  5
C     USED BY : KORALZ RADKOR                                           ANGFI  6
C ----------------------------------------------------------------------ANGFI  7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ANGFI  8
      DATA PI /3.141592653589793238462643D0/                            ANGFI  9
C                                                                       ANGFI 10
      IF(ABS(Y).LT.ABS(X)) THEN                                         ANGFI 11
        THE=ATAN(ABS(Y/X))                                              ANGFI 12
        IF(X.LE.0D0) THE=PI-THE                                         ANGFI 13
      ELSE                                                              ANGFI 14
        THE=ACOS(X/SQRT(X**2+Y**2))                                     ANGFI 15
      ENDIF                                                             ANGFI 16
      IF(Y.LT.0D0) THE=2D0*PI-THE                                       ANGFI 17
      ANGFI=THE                                                         ANGFI 18
      END                                                               ANGFI 19
      SUBROUTINE ROTOD1(PH1,PVEC,QVEC)                                  ROTOD1 2
C ----------------------------------------------------------------------ROTOD1 3
C                                                                       ROTOD1 4
C     USED BY : KORALZ                                                  ROTOD1 5
C ----------------------------------------------------------------------ROTOD1 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ROTOD1 7
      DIMENSION PVEC(4),QVEC(4),RVEC(4)                                 ROTOD1 8
C                                                                       ROTOD1 9
      PHI=PH1                                                           ROTOD110
      CS=COS(PHI)                                                       ROTOD111
      SN=SIN(PHI)                                                       ROTOD112
      DO 10 I=1,4                                                       ROTOD113
  10  RVEC(I)=PVEC(I)                                                   ROTOD114
      QVEC(1)=RVEC(1)                                                   ROTOD115
      QVEC(2)= CS*RVEC(2)-SN*RVEC(3)                                    ROTOD116
      QVEC(3)= SN*RVEC(2)+CS*RVEC(3)                                    ROTOD117
      QVEC(4)=RVEC(4)                                                   ROTOD118
      RETURN                                                            ROTOD119
      END                                                               ROTOD120
      SUBROUTINE ROTOD2(PH1,PVEC,QVEC)                                  ROTOD2 2
C ----------------------------------------------------------------------ROTOD2 3
C                                                                       ROTOD2 4
C     USED BY : KORALZ RADKOR                                           ROTOD2 5
C ----------------------------------------------------------------------ROTOD2 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ROTOD2 7
      DIMENSION PVEC(4),QVEC(4),RVEC(4)                                 ROTOD2 8
C                                                                       ROTOD2 9
      PHI=PH1                                                           ROTOD210
      CS=COS(PHI)                                                       ROTOD211
      SN=SIN(PHI)                                                       ROTOD212
      DO 10 I=1,4                                                       ROTOD213
  10  RVEC(I)=PVEC(I)                                                   ROTOD214
      QVEC(1)= CS*RVEC(1)+SN*RVEC(3)                                    ROTOD215
      QVEC(2)=RVEC(2)                                                   ROTOD216
      QVEC(3)=-SN*RVEC(1)+CS*RVEC(3)                                    ROTOD217
      QVEC(4)=RVEC(4)                                                   ROTOD218
      RETURN                                                            ROTOD219
      END                                                               ROTOD220
      SUBROUTINE ROTOD3(PH1,PVEC,QVEC)                                  ROTOD3 2
C ----------------------------------------------------------------------ROTOD3 3
C                                                                       ROTOD3 4
C     USED BY : KORALZ RADKOR                                           ROTOD3 5
C ----------------------------------------------------------------------ROTOD3 6
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               ROTOD3 7
C                                                                       ROTOD3 8
      DIMENSION PVEC(4),QVEC(4),RVEC(4)                                 ROTOD3 9
      PHI=PH1                                                           ROTOD310
      CS=COS(PHI)                                                       ROTOD311
      SN=SIN(PHI)                                                       ROTOD312
      DO 10 I=1,4                                                       ROTOD313
  10  RVEC(I)=PVEC(I)                                                   ROTOD314
      QVEC(1)= CS*RVEC(1)-SN*RVEC(2)                                    ROTOD315
      QVEC(2)= SN*RVEC(1)+CS*RVEC(2)                                    ROTOD316
      QVEC(3)=RVEC(3)                                                   ROTOD317
      QVEC(4)=RVEC(4)                                                   ROTOD318
      END                                                               ROTOD319
      SUBROUTINE BOSTR3(EXE,PVEC,QVEC)                                  BOSTR3 2
C ----------------------------------------------------------------------BOSTR3 3
C BOOST ALONG Z AXIS, EXE=EXP(ETA), ETA= HIPERBOLIC VELOCITY.           BOSTR3 4
C                                                                       BOSTR3 5
C     USED BY : TAUOLA KORALZ (?)                                       BOSTR3 6
C ----------------------------------------------------------------------BOSTR3 7
      REAL*4 PVEC(4),QVEC(4),RVEC(4)                                    BOSTR3 8
C                                                                       BOSTR3 9
      DO 10 I=1,4                                                       BOSTR310
  10  RVEC(I)=PVEC(I)                                                   BOSTR311
      RPL=RVEC(4)+RVEC(3)                                               BOSTR312
      RMI=RVEC(4)-RVEC(3)                                               BOSTR313
      QPL=RPL*EXE                                                       BOSTR314
      QMI=RMI/EXE                                                       BOSTR315
      QVEC(1)=RVEC(1)                                                   BOSTR316
      QVEC(2)=RVEC(2)                                                   BOSTR317
      QVEC(3)=(QPL-QMI)/2                                               BOSTR318
      QVEC(4)=(QPL+QMI)/2                                               BOSTR319
      END                                                               BOSTR320
      SUBROUTINE BOSTD3(EXE,PVEC,QVEC)                                  BOSTD3 2
C ----------------------------------------------------------------------BOSTD3 3
C BOOST ALONG Z AXIS, EXE=EXP(ETA), ETA= HIPERBOLIC VELOCITY.           BOSTD3 4
C                                                                       BOSTD3 5
C     USED BY : KORALZ RADKOR                                           BOSTD3 6
C ----------------------------------------------------------------------BOSTD3 7
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)                               BOSTD3 8
      DIMENSION PVEC(4),QVEC(4),RVEC(4)                                 BOSTD3 9
C                                                                       BOSTD310
      DO 10 I=1,4                                                       BOSTD311
  10  RVEC(I)=PVEC(I)                                                   BOSTD312
      RPL=RVEC(4)+RVEC(3)                                               BOSTD313
      RMI=RVEC(4)-RVEC(3)                                               BOSTD314
      QPL=RPL*EXE                                                       BOSTD315
      QMI=RMI/EXE                                                       BOSTD316
      QVEC(1)=RVEC(1)                                                   BOSTD317
      QVEC(2)=RVEC(2)                                                   BOSTD318
      QVEC(3)=(QPL-QMI)/2                                               BOSTD319
      QVEC(4)=(QPL+QMI)/2                                               BOSTD320
      RETURN                                                            BOSTD321
      END                                                               BOSTD322
      SUBROUTINE ROTOR1(PH1,PVEC,QVEC)                                  ROTOR1 2
C ----------------------------------------------------------------------ROTOR1 3
C                                                                       ROTOR1 4
C     called by :                                                       ROTOR1 5
C ----------------------------------------------------------------------ROTOR1 6
      REAL*4 PVEC(4),QVEC(4),RVEC(4)                                    ROTOR1 7
C                                                                       ROTOR1 8
      PHI=PH1                                                           ROTOR1 9
      CS=COS(PHI)                                                       ROTOR110
      SN=SIN(PHI)                                                       ROTOR111
      DO 10 I=1,4                                                       ROTOR112
  10  RVEC(I)=PVEC(I)                                                   ROTOR113
      QVEC(1)=RVEC(1)                                                   ROTOR114
      QVEC(2)= CS*RVEC(2)-SN*RVEC(3)                                    ROTOR115
      QVEC(3)= SN*RVEC(2)+CS*RVEC(3)                                    ROTOR116
      QVEC(4)=RVEC(4)                                                   ROTOR117
      END                                                               ROTOR118
      SUBROUTINE ROTOR2(PH1,PVEC,QVEC)                                  ROTOR2 2
C ----------------------------------------------------------------------ROTOR2 3
C                                                                       ROTOR2 4
C     USED BY : TAUOLA                                                  ROTOR2 5
C ----------------------------------------------------------------------ROTOR2 6
      IMPLICIT REAL*4(A-H,O-Z)                                          ROTOR2 7
      REAL*4 PVEC(4),QVEC(4),RVEC(4)                                    ROTOR2 8
C                                                                       ROTOR2 9
      PHI=PH1                                                           ROTOR210
      CS=COS(PHI)                                                       ROTOR211
      SN=SIN(PHI)                                                       ROTOR212
      DO 10 I=1,4                                                       ROTOR213
  10  RVEC(I)=PVEC(I)                                                   ROTOR214
      QVEC(1)= CS*RVEC(1)+SN*RVEC(3)                                    ROTOR215
      QVEC(2)=RVEC(2)                                                   ROTOR216
      QVEC(3)=-SN*RVEC(1)+CS*RVEC(3)                                    ROTOR217
      QVEC(4)=RVEC(4)                                                   ROTOR218
      END                                                               ROTOR219
      SUBROUTINE ROTOR3(PHI,PVEC,QVEC)                                  ROTOR3 2
C ----------------------------------------------------------------------ROTOR3 3
C                                                                       ROTOR3 4
C     USED BY : TAUOLA                                                  ROTOR3 5
C ----------------------------------------------------------------------ROTOR3 6
      REAL*4 PVEC(4),QVEC(4),RVEC(4)                                    ROTOR3 7
C                                                                       ROTOR3 8
      CS=COS(PHI)                                                       ROTOR3 9
      SN=SIN(PHI)                                                       ROTOR310
      DO 10 I=1,4                                                       ROTOR311
  10  RVEC(I)=PVEC(I)                                                   ROTOR312
      QVEC(1)= CS*RVEC(1)-SN*RVEC(2)                                    ROTOR313
      QVEC(2)= SN*RVEC(1)+CS*RVEC(2)                                    ROTOR314
      QVEC(3)=RVEC(3)                                                   ROTOR315
      QVEC(4)=RVEC(4)                                                   ROTOR316
      END                                                               ROTOR317
      SUBROUTINE SPHERD(R,X)                                            SPHERD 2
C ----------------------------------------------------------------------SPHERD 3
C GENERATES UNIFORMLY THREE-VECTOR X ON SPHERE  OF RADIUS R             SPHERD 4
C DOUBLE PRECISON VERSION OF SPHERA                                     SPHERD 5
C ----------------------------------------------------------------------SPHERD 6
      REAL*8  R,X(4),PI,COSTH,SINTH                                     SPHERD 7
      REAL*4 RRR(2)                                                     SPHERD 8
      DATA PI /3.141592653589793238462643D0/                            SPHERD 9
C                                                                       SPHERD10
      CALL RANMAR(RRR,2)                                                SPHERD11
      COSTH=-1+2*RRR(1)                                                 SPHERD12
      SINTH=SQRT(1 -COSTH**2)                                           SPHERD13
      X(1)=R*SINTH*COS(2*PI*RRR(2))                                     SPHERD14
      X(2)=R*SINTH*SIN(2*PI*RRR(2))                                     SPHERD15
      X(3)=R*COSTH                                                      SPHERD16
      RETURN                                                            SPHERD17
      END                                                               SPHERD18
      SUBROUTINE ROTPOX(THET,PHI,PP)                                    ROTPOX 2
      IMPLICIT REAL*8 (A-H,O-Z)                                         ROTPOX 3
C ----------------------------------------------------------------------ROTPOX 4
C double precison version of ROTPOL                                     ROTPOX 5
C ----------------------------------------------------------------------ROTPOX 6
      DIMENSION PP(4)                                                   ROTPOX 7
C                                                                       ROTPOX 8
      CALL ROTOD2(THET,PP,PP)                                           ROTPOX 9
      CALL ROTOD3( PHI,PP,PP)                                           ROTPOX10
      RETURN                                                            ROTPOX11
      END                                                               ROTPOX12
      SUBROUTINE SPHERA(R,X)                                            SPHERA 2
C ----------------------------------------------------------------------SPHERA 3
C GENERATES UNIFORMLY THREE-VECTOR X ON SPHERE  OF RADIUS R             SPHERA 4
C                                                                       SPHERA 5
C     called by : DPHSxx,DADMPI,DADMKK                                  SPHERA 6
C ----------------------------------------------------------------------SPHERA 7
      REAL  X(4)                                                        SPHERA 8
      REAL*4 RRR(2)                                                     SPHERA 9
      DATA PI /3.141592653589793238462643/                              SPHERA10
C                                                                       SPHERA11
      CALL RANMAR(RRR,2)                                                SPHERA12
      COSTH=-1.+2.*RRR(1)                                               SPHERA13
      SINTH=SQRT(1.-COSTH**2)                                           SPHERA14
      X(1)=R*SINTH*COS(2*PI*RRR(2))                                     SPHERA15
      X(2)=R*SINTH*SIN(2*PI*RRR(2))                                     SPHERA16
      X(3)=R*COSTH                                                      SPHERA17
      RETURN                                                            SPHERA18
      END                                                               SPHERA19
      SUBROUTINE ROTPOL(THET,PHI,PP)                                    ROTPOL 2
C ----------------------------------------------------------------------ROTPOL 3
C                                                                       ROTPOL 4
C     called by : DADMAA,DPHSAA                                         ROTPOL 5
C ----------------------------------------------------------------------ROTPOL 6
      REAL  PP(4)                                                       ROTPOL 7
C                                                                       ROTPOL 8
      CALL ROTOR2(THET,PP,PP)                                           ROTPOL 9
      CALL ROTOR3( PHI,PP,PP)                                           ROTPOL10
      RETURN                                                            ROTPOL11
      END                                                               ROTPOL12
      SUBROUTINE RANMAR(RVEC,LENV)                                      RANMAR 2
C ----------------------------------------------------------------------RANMAR 3
C<<<<<FUNCTION RANMAR(IDUMM)                                            RANMAR 4
C CERNLIB V113, VERSION WITH AUTOMATIC DEFAULT INITIALIZATION           RANMAR 5
C     Transformed to SUBROUTINE to be as in CERNLIB                     RANMAR 6
C     AM.Lutz   November 1988, Feb. 1989                                RANMAR 7
C                                                                       RANMAR 8
C!Universal random number generator proposed by Marsaglia and Zaman     RANMAR 9
C in report FSU-SCRI-87-50                                              RANMAR10
C        modified by F. James, 1988 and 1989, to generate a vector      RANMAR11
C        of pseudorandom numbers RVEC of length LENV, and to put in     RANMAR12
C        the COMMON block everything needed to specify currrent state,  RANMAR13
C        and to add input and output entry points RMARIN, RMARUT.       RANMAR14
C                                                                       RANMAR15
C     Unique random number used in the program                          RANMAR16
C ----------------------------------------------------------------------RANMAR17
      COMMON / INOUT / INUT,IOUT                                        INOUT  2
      DIMENSION RVEC(*)                                                 RANMAR19
      COMMON/RASET1/U(97),C,I97,J97                                     RANMAR20
      PARAMETER (MODCNS=1000000000)                                     RANMAR21
      DATA NTOT,NTOT2,IJKL/-1,0,0/                                      RANMAR22
C                                                                       RANMAR23
      IF (NTOT .GE. 0)  GO TO 50                                        RANMAR24
C                                                                       RANMAR25
C        Default initialization. User has called RANMAR without RMARIN. RANMAR26
      IJKL = 54217137                                                   RANMAR27
      NTOT = 0                                                          RANMAR28
      NTOT2 = 0                                                         RANMAR29
      KALLED = 0                                                        RANMAR30
      GO TO 1                                                           RANMAR31
C                                                                       RANMAR32
      ENTRY      RMARIN(IJKLIN, NTOTIN,NTOT2N)                          RANMAR33
C         Initializing routine for RANMAR, may be called before         RANMAR34
C         generating pseudorandom numbers with RANMAR. The input        RANMAR35
C         values should be in the ranges:  0<=IJKLIN<=900 OOO OOO       RANMAR36
C                                          0<=NTOTIN<=999 999 999       RANMAR37
C                                          0<=NTOT2N<<999 999 999!      RANMAR38
C To get the standard values in Marsaglia's paper, IJKLIN=54217137      RANMAR39
C                                            NTOTIN,NTOT2N=0            RANMAR40
      IJKL = IJKLIN                                                     RANMAR41
      NTOT = MAX(NTOTIN,0)                                              RANMAR42
      NTOT2= MAX(NTOT2N,0)                                              RANMAR43
      KALLED = 1                                                        RANMAR44
C          always come here to initialize                               RANMAR45
    1 CONTINUE                                                          RANMAR46
      IJ = IJKL/30082                                                   RANMAR47
      KL = IJKL - 30082*IJ                                              RANMAR48
      I = MOD(IJ/177, 177) + 2                                          RANMAR49
      J = MOD(IJ, 177)     + 2                                          RANMAR50
      K = MOD(KL/169, 178) + 1                                          RANMAR51
      L = MOD(KL, 169)                                                  RANMAR52
      WRITE(IOUT,201) IJKL,NTOT,NTOT2                                   RANMAR53
 201  FORMAT(1X,' RANMAR INITIALIZED: ',I10,2X,2I10)                    RANMAR54
      DO 2 II= 1, 97                                                    RANMAR55
      S = 0.                                                            RANMAR56
      T = .5                                                            RANMAR57
      DO 3 JJ= 1, 24                                                    RANMAR58
         M = MOD(MOD(I*J,179)*K, 179)                                   RANMAR59
         I = J                                                          RANMAR60
         J = K                                                          RANMAR61
         K = M                                                          RANMAR62
         L = MOD(53*L+1, 169)                                           RANMAR63
         IF (MOD(L*M,64) .GE. 32)  S = S+T                              RANMAR64
    3    T = 0.5*T                                                      RANMAR65
    2 U(II) = S                                                         RANMAR66
      TWOM24 = 1.0                                                      RANMAR67
      DO 4 I24= 1, 24                                                   RANMAR68
    4 TWOM24 = 0.5*TWOM24                                               RANMAR69
      C  =   362436.*TWOM24                                             RANMAR70
      CD =  7654321.*TWOM24                                             RANMAR71
      CM = 16777213.*TWOM24                                             RANMAR72
      I97 = 97                                                          RANMAR73
      J97 = 33                                                          RANMAR74
C       Complete initialization by skipping                             RANMAR75
C            (NTOT2*MODCNS + NTOT) random numbers                       RANMAR76
      DO 45 LOOP2= 1, NTOT2+1                                           RANMAR77
      NOW = MODCNS                                                      RANMAR78
      IF (LOOP2 .EQ. NTOT2+1)  NOW=NTOT                                 RANMAR79
      IF (NOW .GT. 0)  THEN                                             RANMAR80
       WRITE (IOUT,'(A,I15)') ' RMARIN SKIPPING OVER ',NOW              RANMAR81
       DO 40 IDUM = 1, NTOT                                             RANMAR82
       UNI = U(I97)-U(J97)                                              RANMAR83
       IF (UNI .LT. 0.)  UNI=UNI+1.                                     RANMAR84
       U(I97) = UNI                                                     RANMAR85
       I97 = I97-1                                                      RANMAR86
       IF (I97 .EQ. 0)  I97=97                                          RANMAR87
       J97 = J97-1                                                      RANMAR88
       IF (J97 .EQ. 0)  J97=97                                          RANMAR89
       C = C - CD                                                       RANMAR90
       IF (C .LT. 0.)  C=C+CM                                           RANMAR91
   40  CONTINUE                                                         RANMAR92
      ENDIF                                                             RANMAR93
   45 CONTINUE                                                          RANMAR94
      IF (KALLED .EQ. 1)  RETURN                                        RANMAR95
C                                                                       RANMAR96
C          Normal entry to generate LENV random numbers                 RANMAR97
   50 CONTINUE                                                          RANMAR98
      DO 100 IVEC= 1, LENV                                              RANMAR99
      UNI = U(I97)-U(J97)                                               RANMA100
      IF (UNI .LT. 0.)  UNI=UNI+1.                                      RANMA101
      U(I97) = UNI                                                      RANMA102
      I97 = I97-1                                                       RANMA103
      IF (I97 .EQ. 0)  I97=97                                           RANMA104
      J97 = J97-1                                                       RANMA105
      IF (J97 .EQ. 0)  J97=97                                           RANMA106
      C = C - CD                                                        RANMA107
      IF (C .LT. 0.)  C=C+CM                                            RANMA108
      UNI = UNI-C                                                       RANMA109
      IF (UNI .LT. 0.) UNI=UNI+1.                                       RANMA110
C        Replace exact zeroes by uniform distr. *2**-24                 RANMA111
         IF (UNI .EQ. 0.)  THEN                                         RANMA112
         UNI = TWOM24*U(2)                                              RANMA113
C             An exact zero here is very unlikely, but let's be safe.   RANMA114
         IF (UNI .EQ. 0.) UNI= TWOM24*TWOM24                            RANMA115
         ENDIF                                                          RANMA116
      RVEC(IVEC) = UNI                                                  RANMA117
  100 CONTINUE                                                          RANMA118
      NTOT = NTOT + LENV                                                RANMA119
         IF (NTOT .GE. MODCNS)  THEN                                    RANMA120
         NTOT2 = NTOT2 + 1                                              RANMA121
         NTOT = NTOT - MODCNS                                           RANMA122
         ENDIF                                                          RANMA123
      RETURN                                                            RANMA124
C           Entry to output current status                              RANMA125
      ENTRY RMARUT(IJKLUT,NTOTUT,NTOT2T)                                RANMA126
      IJKLUT = IJKL                                                     RANMA127
      NTOTUT = NTOT                                                     RANMA128
      NTOT2T = NTOT2                                                    RANMA129
      RETURN                                                            RANMA130
      END                                                               RANMA131
      subroutine gmonit(mode,id,wt,wtmax,rn)                            GMONIT 2
c     **************************************                            GMONIT 3
c Utility program for monitoring m.c. rejection weights.                GMONIT 4
c ---------------------------------------------------------             GMONIT 5
C It is backward compatible with WMONIT except:                         GMONIT 6
c  (1) for id=-1 one  should call as follows:                           GMONIT 7
c      call(-1,id,0d0,1d0,1d0) or skip initialisation completely!       GMONIT 8
c  (2) maximum absolute weight is looked for,                           GMONIT 9
c  (3) gprint(-id) prints weight distribution, net profit!              GMONIT10
c  (4) no restriction id<100 any more!                                  GMONIT11
c ---------------------------------------------------------             GMONIT12
c wt is weight, wtmax is maximum weight and rn is random number.        GMONIT13
c if(mode.eq.-1) then                                                   GMONIT14
c          initalization if entry id,                                   GMONIT15
c        - wtmax is maximum weight used for couting overweighted        GMONIT16
c          other arguments are ignored                                  GMONIT17
c elseif(mode.eq.0) then                                                GMONIT18
c          summing up weights etc. for a given event for entry id       GMONIT19
c        - wt is current weight.                                        GMONIT20
c        - wtmax is maximum weight used for couting overweighted        GMONIT21
c          events with wt>wtmax.                                        GMONIT22
c        - rn is random number used in rejection, it is used to         GMONIT23
c          count no. of accepted (rn<wt/wtmax) and rejected             GMONIT24
c          (wt>wt/wtmax) events,                                        GMONIT25
c          if ro rejection then put rn=0d0.                             GMONIT26
c elseif(mode.eq.1) then                                                GMONIT27
c          in this mode wmonit repports on accumulated statistics       GMONIT28
c          and the information is stored in common /cmonit/             GMONIT29
c        - averwt= average weight wt counting all event                 GMONIT30
c        - errela= relative error of averwt                             GMONIT31
c        - nevtot= total nimber of accounted events                     GMONIT32
c        - nevacc= no. of accepted events (rn<wt\wtmax)                 GMONIT33
c        - nevneg= no. of events with negative weight (wt<0)            GMONIT34
c        - nevzer= no. of events with zero weight (wt.eq.0d0)           GMONIT35
c        - nevove= no. of overweghted events (wt>wtmax)                 GMONIT36
c          and if you do not want to use cmonit then the value          GMONIT37
c          the value of averwt is assigned to wt,                       GMONIT38
c          the value of errela is assigned to wtmax and                 GMONIT39
c          the value of wtmax  is assigned to rn in this mode.          GMONIT40
c elseif(mode.eq.2) then                                                GMONIT41
c          all information defined for entry id defined above           GMONIT42
c          for mode=2 is just printed of unit nout                      GMONIT43
c endif                                                                 GMONIT44
c note that output repport (mode=1,2) is done dynamically just for a    GMONIT45
c given entry id only and it may be repeated many times for one id and  GMONIT46
c for various id's as well.                                             GMONIT47
c     ************************                                          GMONIT48
      implicit double precision (a-h,o-z)                               GMONIT49
      COMMON / CMONIT/ AVERWT,ERRELA,NEVTOT,NEVACC,NEVNEG,NEVOVE,NEVZER CMONIT 2
      parameter( idmx=400,nbuf=24,nbuf2=24)                             GMONIT51
      common / cglib / b(20000)                                         GMONIT52
      common /gind/ nvrs,nout,lenmax,length,index(idmx,3),titlc(idmx)   GMONIT53
      character*80 titlc                                                GMONIT54
c special gmonit common                                                 GMONIT55
c                                                                       GMONIT56
      idg = -id                                                         GMONIT57
      if(id.le.0) then                                                  GMONIT58
           write(nout,*) ' =====wmonit: wrong id',id                    GMONIT59
           stop                                                         GMONIT60
      endif                                                             GMONIT61
      if(mode.eq.-1) then                                               GMONIT62
c     *******************                                               GMONIT63
           nbin = nint(dabs(rn))                                        GMONIT64
           if(nbin.gt.100) nbin =100                                    GMONIT65
           if(nbin.eq.0)   nbin =1                                      GMONIT66
           xl   =  wt                                                   GMONIT67
           xu   =  wtmax                                                GMONIT68
           if(xu.le.xl) then                                            GMONIT69
             xl = 0d0                                                   GMONIT70
             xu = 1d0                                                   GMONIT71
           endif                                                        GMONIT72
           lact=jadres(idg)                                             GMONIT73
           if(lact.eq.0) then                                           GMONIT74
              call gbook1(idg,' gmonit $',nbin,xl,xu)                   GMONIT75
           else                                                         GMONIT76
              call greset(idg,'  ')                                     GMONIT77
           endif                                                        GMONIT78
      elseif(mode.eq.0) then                                            GMONIT79
c     **********************                                            GMONIT80
           lact=jadres(idg)                                             GMONIT81
           if(lact.eq.0) then                                           GMONIT82
              write(nout,*) ' ***** Gmonit initialized, id=',id         GMONIT83
              call gbook1(idg,' gmonit $',1,0d0,1d0)                    GMONIT84
           endif                                                        GMONIT85
c     standard entries                                                  GMONIT86
           call gf1(idg,wt,1d0)                                         GMONIT87
c     additional goodies                                                GMONIT88
           ist  = index(lact,2)                                         GMONIT89
           ist2 = ist+7                                                 GMONIT90
           ist3 = ist+11                                                GMONIT91
c    maximum weight -- maximum by absolute value but keeping sign       GMONIT92
           IF(  dabs(b(ist3+13)).LT.dabs(wt)) THEN                      GMONIT93
             b(ist3+13)    = max( dabs(b(ist3+13)) ,dabs(wt))           GMONIT94
             if(wt.ne.0d0) b(ist3+13)=b(ist3+13) *wt/dabs(wt)           GMONIT95
           ENDIF                                                        GMONIT96
c    nevzer,nevove,nevacc                                               GMONIT97
           if(wt.eq.0d0)        b(ist3+10) =b(ist3+10) +1d0             GMONIT98
           if(wt.gt.wtmax)      b(ist3+11) =b(ist3+11) +1d0             GMONIT99
           if(rn*wtmax.le.wt)   b(ist3+12) =b(ist3+12) +1d0             GMONI100
      elseif(mode.ge.1.or.mode.le.3) then                               GMONI101
c     ***********************************                               GMONI102
           lact=jadres(idg)                                             GMONI103
           if(lact.eq.0) then                                           GMONI104
              write(nout,*) ' ==== warning from wmonit: '               GMONI105
              write(nout,*) ' lack of initialization, id=',id           GMONI106
              return                                                    GMONI107
           endif                                                        GMONI108
           ist    = index(lact,2)                                       GMONI109
           ist2   = ist+7                                               GMONI110
           ist3   = ist+11                                              GMONI111
           ntot = nint(b(ist3 +7))                                      GMONI112
           swt    =    b(ist3 +8)                                       GMONI113
           sswt   =    b(ist3 +9)                                       GMONI114
           if(ntot.le.0 .or. swt .eq. 0d0 )  then                       GMONI115
              averwt=0d0                                                GMONI116
              errela=0d0                                                GMONI117
           else                                                         GMONI118
              averwt=swt/float(ntot)                                    GMONI119
              errela=sqrt(abs(sswt/swt**2-1d0/float(ntot)))             GMONI120
           endif                                                        GMONI121
c   output through common                                               GMONI122
           nevtot = ntot                                                GMONI123
           nevacc = b(ist3 +12)                                         GMONI124
           nevneg = b(ist3  +1)                                         GMONI125
           nevzer = b(ist3 +10)                                         GMONI126
           nevove = b(ist3 +11)                                         GMONI127
           wwmax  = b(ist3 +13)                                         GMONI128
c   output through parameters                                           GMONI129
           wt     = averwt                                              GMONI130
           wtmax  = errela                                              GMONI131
           rn     = wwmax                                               GMONI132
c  no printout for mode > 1                                             GMONI133
c  ************************                                             GMONI134
           if(mode.eq.1) return                                         GMONI135
           write(nout,1003) id, averwt, errela, wwmax                   GMONI136
           write(nout,1004) nevtot,nevacc,nevneg,nevove,nevzer          GMONI137
           if(mode.eq.2) return                                         GMONI138
           call gprint(idg)                                             GMONI139
      else                                                              GMONI140
c     ****                                                              GMONI141
           write(nout,*) ' =====wmonit: wrong mode',mode                GMONI142
           stop                                                         GMONI143
      endif                                                             GMONI144
c     *****                                                             GMONI145
 1003 format(                                                           GMONI146
     $  ' =======================gmonit========================'        GMONI147
     $/,'   id           averwt         errela            wwmax'        GMONI148
     $/,    i5,           e17.7,         f15.9,           e17.7)        GMONI149
 1004 format(                                                           GMONI150
     $  ' -----------------------------------------------------------'  GMONI151
     $/,'      nevtot      nevacc      nevneg      nevove      nevzer'  GMONI152
     $/,   5i12)                                                        GMONI153
      end                                                               GMONI154
C=============================================================          GMONI155
