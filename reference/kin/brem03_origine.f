cFrom BLOCH@alws.cern.ch Fri Feb 13 15:12:46 2004
cDate: Fri, 13 Feb 2004 15:11:19 +0100
cFrom: BLOCH@alws.cern.ch
cTo: BLOCH@alws.cern.ch

C --------------------------------------------------------------------
C BREM03 : new version with new FUNCTIONS OPIQQP, HADRQQ, REXP, HADR3Q
C          identical to EXPOSTAR ORIGINE and foolowing ALEPH 88-107,
C          PHYSIC 88-32 "Quark loops in EXPOSTAR and BREM5" -
C          H. Burkhardt and G. Bonneaud October 19, 1988.
C
C --------------------------------------------------------------------
C ---------------------------------------------------------------------
C BREMUS - version BREM5 : transmitted by A. Blondel    November 1987.
C                          ALEPH code name BREMxx ( xx = 01,... is the
C                                                   version number )
C B. Bloch february 1988 for fortran mods to run on VAX
C
C modifications to the original code :
C
C  1. Subroutine SETMUS, the following local variables have been defined
C                        EBEA = E and PPOL = POL
C then in ENTRY GENMUS the variables E has been replaced by EBEA and POL
C by PPOL.
C  2. Subroutine SETUP1, same modification for EBEA = E, followed in
C ENTRY GENER1 where E has been replaced by EBEA.
C  3. idem in SUBROUTINE SETUP2 where EBEA = E
C             ENTRY GENER2 where E replaced by EBEA.
C  4. idem in SUBROUTINE SETUP3 where EBEA = E
C             ENTRY GENER3 where E replaced by EBEA.
C  5. idem in SUBROUTINE SETUP5 where EBEA = E
C             ENTRY GENER5 where E replaced by EBEA.
C  6. idem in FUNCTION SETUPS where XKK0 = XK0 and QMM0 = QM
C             ENTRY SIGSOF where XK0 and QM replaced by XKK0 and QMM0.
C  7. idem in SUBROUTINE SETUPW where EBEA = E
C             ENTRY APROXS where E replaced by EBEA.
C  8. idem in SUBROUTINE HISTO1 where XX0 = Y0(IH)
C                                     XX1 = Y1(IH)
C                                     IBB = IC(IH)
C             ENTRY HISTO2 where IB, X0 and X1 replaced by IBB, XX0, XX1
C  9. FUNCTION RN(XDMY) has been commented and replaced by
C             RN = RNDM(0)  (modif. done by A. Blondel)
C
C 10. Dummy version of subroutine LUTAUD added (G. Bonneaud Oct. 1988)
C
C
C G. Bonneaud April 1988 to run on IBM
C ---------------------------------------------------------------------
C
C A. Blondel and B. Bloch  may 4 1988 to fix the kinematics
C taking fermion masses into account.
C changes:
C    - definition of acolinearity and angle in the main prog
C    - GENER1, GENER3 , GENER5 : just use momentum instead of energy
C    - GENER2 : change kinematical limits for fbar energy
C               use momentum instead of energy to define fbar 4-vector
C               change calculation of photon angle vs fbar
C    - make sure that the fermion mass appears in the argument list
C      of SETUP1-5
C    -  add one argument to the call GENMUS
C      to pass the graph number involved
C ---------------------------------------------------------------------
C FORTOPT VS FIXED NOOPT NOPRINT
C NEW IMPROVED VERSION OF BREMMUS, KLEISS/STUART/LYNN
C
C IN THIS PROGRAM POLARIZATION XPOL IS FOR INITIAL STATE ELECTRON
C ONLY. UNPOLARIZED CROSS SECTION IS LEFT+RIGHT, POLARIZATION
C CROSS SECTION IS LEFT-RIGHT. TOTAL CROSS SECTION IS
C   (LEFT+RIGHT)-XPOL*(LEFT-RIGHT)
C NOTE MODIFICATION OF EFFECTIVE POLARIZATION FOR HARD BREM.
C
C THIS MAIN ROUTINE DOES THE SETUP, EVENT GENERATION LOOP, AND
C OUTPUTS THE FINAL RESULTS
C
C
C
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/INDAT/RDATIN(45)
      REAL*4 RAN11
C
C RDATIN CONTAINS THE INPUT PARAMETERS SET-UP IN BREM2 INPUT
C
C RDATIN(4)        MIN fermion polar angle
C RDATIN(5)        MAX fermion POLAR ANGLE
C RDATIN(6)        MAX HARD PHOTON ENERGY/BEAM ENERGY
C RDATIN(7)        MIN fermion ENERGY (often E/2)
C RDATIN(8)        MIN anti-fermion ENERGY
C RDATIN(9)        ACOLINEARITY CUT ANGLE
C RDATIN(17)       POLARIZATION INITIAL STATE ELECTRON
C RDATIN(18)       NUMBER OF FINAL STATE COLORS
C RDATIN(19)       FINAL FERMION MASS
C RDATIN(20)       NO. OF TREE DIAGRAMS
C RDATIN(21)       NO. OF 1 LOOP DIAGRAMS
C RDATIN(22)       SWITCH TO TURN HISTOGRAMS ON & OFF
C RDATIN(23)       RANDOM NUMBER GENERATOR SEED
C RDATIN(24)       TEST PARAMETER 1= FINAL STATE RAD,0= NONE
C RDATIN(25)       NUMBER OF ECM POINTS
C RDATIN(26)       STEP SIZE IN EBEAM  FOR ECM SCAN
C
C
C  COMMON CONSTS CONTAINS FREQUENTLY USED CONSTANTS......
C
      COMMON/CONSTS/PI,ALFA1,CV1,CV2,CA1,CA2,DEGRAD,RADDEG
C
      DIMENSION PP(4),PM(4),QP(4),QM(4),QK(4)
      DIMENSION RESULT(2),ANOC(2),FINAL(2),ACUT(2)
      DIMENSION EVNOCF(2),EVNOCT(2),EVCUTF(2),EVCUTT(2)
      LOGICAL HISTPR
C
C
C RDATIN CONTAINS THE INPUT PARAMETERS SET-UP IN BREM2 INPUT
C
      DO 50 I=1,26
      READ(5,*)RDATIN(I)
      WRITE(6,*)RDATIN(I)
  50  CONTINUE
C
      ISEED = RDATIN(23)
C
C                    USE BETTER RANDOM NUMBER GENERATOR
C                    INITIALISE ONCE ONLY SO GET DIFFERENT
C                    RANDOM NUMBERS FOR SECOND GO
C
      EB=RDATIN(2)
      XMZ=RDATIN(3)
      THMIN=RDATIN(4)
      THMAX=RDATIN(5)
      XKMAX=RDATIN(6)
      EMMIN=RDATIN(7)
      EMPLS=RDATIN(8)
      ACOL=RDATIN(9)
C
C
      POL=RDATIN(17)
C
      NSTEPS=RDATIN(25)
      IF(NSTEPS.LE.0) NSTEPS=1
      DEBEAM=RDATIN(26)
C
      DO 900 IBEAM=1,NSTEPS
      IF(IBEAM.GE.2)EB=EB+DEBEAM
      DO 1000 IPOL=1,2
      IF( IPOL . EQ . 1 ) CALL RDMIN(ISEED)
C
C
      IF(IBEAM.EQ.2) PRINT 1331,EB
1331  FORMAT(1X,'  CHANGING EB TO ',F10.5/)
C
      POL=DABS(POL)
      IF(IPOL .EQ. 2.AND.POL.NE.0.0D0)POL= -POL
      IF(IPOL .EQ. 2.AND.POL.NE.0.0D0)PRINT 1010, POL
 1010 FORMAT(1X,50(1H-),/' CHANGING R-POLARIZATION OF THE E- BEAM TO',
     .F10.4,/1X,50(1H-))
      IF(RDATIN(22) .NE. 0.0D0)HISTPR=.TRUE.
      CALL HISTCL
C     CALL RNCLR
      XNOCT=0.
      XNOCF=0.
      XCUTT=0.
      XCUTF=0.
C
C THE BOUNDARY BETWEEN SOFT AND HARD  BREMSSTRAHLUNG
C
      XK0=RDATIN(10)
C
C INITIALIZE THE SUBPROGRAMS
C
C
      CALL SETMUS(EB,XMZ,THMIN,THMAX,XKMAX,POL,IPOL)
C
C
      NNEV=RDATIN(1)
C
      DO 100 I=1,NNEV
C
C PP,PM are initial electron 4-vectors
C QP,QM,QK are final muon and photon LAB-frame 4-vectors
C
      CALL GENMUS(PP,PM,QP,QM,QK,WE,ICOND)
      PMOMP=SQRT(QP(1)**2+QP(2)**2+QP(3)**2)
      PMOMM=SQRT(QM(1)**2+QM(2)**2+QM(3)**2)
      CP=QP(3)/PMOMP
      CM=-QM(3)/PMOMM
      IJ=7
      IK=20
      XD=-1.D0
      XDD=1.D0
      CALL HISTO1(IJ,IK,XD,XDD,CP,WE)
      CALL HISTO1(IJ,IK,XD,XDD,CM,WE)
      XNOCT=XNOCT+WE
      IF(CP.GT.0.D0) XNOCF=XNOCF+WE
      IF(QP(4).LT.EMMIN.OR.QM(4).LT.EMPLS) GO TO 100
      Z=(QP(1)*QM(1)+QP(2)*QM(2)+QP(3)*QM(3))/(PMOMP*PMOMM)
      IF(DABS(Z).GT.1.0D0)PRINT 1413,NNEV,QP,QM
1413  FORMAT(1X,I10,8F15.8/)
C
C
      Z=DEGRAD*DACOS(-1.D0*Z)
      IM=8
      IN=9
      YD=0.D0
      YDD=40.D0
      CALL HISTO1(IM,IK,YD,YDD,Z,WE)
      IF(Z.GT.ACOL) GOTO 100
      CALL HISTO1(IN,IK,XD,XDD,CP,WE)
      CALL HISTO1(IN,IK,XD,XDD,CM,WE)
      XCUTT=XCUTT+WE
      IF(CP.GT.0.D0) XCUTF=XCUTF+WE
  100 CONTINUE
C
C     DO 200 I=1,6
C 200 CALL HISTO2(I,0)
C
      CALL ENDMUS(RESULT(IPOL))
      IF(.NOT. HISTPR)GO TO 190
C
C     CALL HISTO2(10,0)
      CALL HISTO2(8,1)
      CALL HISTO2(7,0)
      CALL HISTO2(9,0)
 190  CONTINUE
C
      ANOC(IPOL)=100.*(2.*XNOCF/XNOCT-1.)
      ACUT(IPOL)=100.*(2.*XCUTF/XCUTT-1.)
      FINAL(IPOL)=XCUTT/XNOCT*RESULT(IPOL)
      EVNOCF(IPOL)=XNOCF
      EVNOCT(IPOL)=XNOCT
      EVCUTF(IPOL)=XCUTF
      EVCUTT(IPOL)=XCUTT
C
      PRINT 300,ANOC(IPOL),ACUT(IPOL),FINAL(IPOL)
  300 FORMAT(' THE INTEGRATED FORWARD-BACKWARD ASYMMETRIES ARE:'/,
     .       ' WITHOUT ADDITIONAL CUTS =',F10.4,' %'/,
     .       '    WITH ADDITIONAL CUTS =',F10.4,' %'/,
     .       ' MOREOVER, DUE TO YOUR CUTS THE CROSS SECTION'/,
     .       ' IS REDUCED TO ',D15.6,' PICOBARNS')
 1000 CONTINUE
      ALRNOC = (RESULT(1)-RESULT(2))/(RESULT(1)+RESULT(2))/DABS(POL)
      ALRCUT = (FINAL(1)-FINAL(2))/(FINAL(1)+FINAL(2))/DABS(POL)
      PRINT 1020,ALRNOC,ALRCUT
 1020 FORMAT(1X,50(1H-),/,' THE LONGITUDINAL POLARIZATION ASYMMETRY IS:'
     .      ,/,' WITHOUT ADDITIONAL CUTS =',F10.4
     .      ,/,'    WITH ADDITIONAL CUTS =',F10.4
     .      ,/1X,50(1H-))
C
C     THE POLARIZED FORWARD-BACWARD ASYMMETRY
C
      APNOC=.5*(ANOC(2)-ANOC(1))/.75/DABS(POL)
      APCUT=.5*(ACUT(2)-ACUT(1))/.75/DABS(POL)
      PRINT 1021,APNOC,APCUT
 1021 FORMAT(1X,50(1H-),/,' THE  POLARIZED  ASYMMETRY IS:'
     .      ,/,' WITHOUT ADDITIONAL CUTS =',F10.4
     .      ,/,'    WITH ADDITIONAL CUTS =',F10.4
     .      ,/1X,50(1H-))
C
      APONOC=((EVNOCF(1)-EVNOCF(2))*2-(EVNOCT(1)-EVNOCT(2)))
     .          /(EVNOCT(1)+EVNOCT(2))/.75/DABS(POL)
      APOCUT=((EVCUTF(1)-EVCUTF(2))*2-(EVCUTT(1)-EVCUTT(2)))
     .          /(EVCUTT(1)+EVCUTT(2))/.75/DABS(POL)
      PRINT 1022,APONOC,APOCUT
 1022 FORMAT(1X,50(1H-),/,' THE FANCY POLARIZED  ASYMMETRY IS:'
     .      ,/,' WITHOUT ADDITIONAL CUTS =',F10.4
     .      ,/,'    WITH ADDITIONAL CUTS =',F10.4
     .      ,/1X,50(1H-))
      ANPNOC=((EVNOCF(1)+EVNOCF(2))*2-(EVNOCT(1)+EVNOCT(2)))
     .          /(EVNOCT(1)+EVNOCT(2))
      ANPCUT=((EVCUTF(1)+EVCUTF(2))*2-(EVCUTT(1)+EVCUTT(2)))
     .          /(EVCUTT(1)+EVCUTT(2))
      PRINT 1023,ANPNOC,ANPCUT
 1023 FORMAT(1X,50(1H-),/,' THE UNPOLARIZED  ASYMMETRY IS:'
     .      ,/,' WITHOUT ADDITIONAL CUTS =',F10.4
     .      ,/,'    WITH ADDITIONAL CUTS =',F10.4
     .      ,/1X,50(1H-))
  900 CONTINUE
      STOP
      END
      BLOCK DATA
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/CONSTS/PI,ALFA1,CV1,CV2,CA1,CA2,DEGRAD,RADDEG
      DATA PI/3.141592653897932D0/
      DATA ALFA1/7.297351D-3/
      DATA RADDEG/0.017453293D0/
      DATA DEGRAD/57.29577951D0/
C
      END
      SUBROUTINE SETMUS(E,XMZ,THMIN,THMAX,XKMAX,POL,IPOL)
C***************************************************************
C
C     MONTE CARLO EVENT GENERATOR FOR THE PROCESSES
C
C         E+(PP) E-(PM)   ---->  MU+(QP) MU-(QM)
C
C     AND
C
C         E+(PP) E-(PM)   ----> MU+(QP) MU-(QM) PHOTON(QK)
C
C
C  THE INPUT QUANTITIES ARE
C  E     = BEAM ENERGY, IN GEV;
C  XMZ   = MASS OF THE Z0 BOSON, IN GEV;
C  THMIN = MINIMUM POLAR PRODUCTION ANGLE OF THE MU+,MU- ,IN
C          DEGREES: IT MUST BE LARGER THAN 0 DEGREES BUT
C          SMALLER THAN THMAX;
C  THMAX = MAXIMUM POLAR SCATTERING ANGLE OF THE MU+,MU- ,IN
C          DEGREES: IT MUST BE SMALLER THAN 180 DEGREES BUT
C          LARGER THAN THMIN;
C  XKMAX = MAXIMUM ENERGY OF THE BREMSSTRAHLUNG PHOTON, AS A
C          FRACTION OF THE BEAM ENERGY E: IT MAY BE SET
C          TO 1, IN WHICH CASE THE PROGRAM CHANGES ITS VALUE
C          TO THE ACTUAL KINEMATIC LIMIT.
C  POL   = THE DEGREE OF RIGHT-HANDED POLARIZATION OF THE ELECTRON
C          BEAM (REAL NUMBER BETWEEN -1 AND +1)
C
C***************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
C
      COMMON/INDAT/RDATIN(45)
C
C RDATIN(10)       SOFT GAMMA CUT OFF
C
C     POLX CONTAINS POLARISATION INFO FOR USE BY WKCORS
      COMMON/POLX/XPOL
      COMMON / SETUPC / XGZ,GV,GA,XMM,QF,GV1,GA1,COLNUM,RA
      COMMON / ALFASC / ALFAST
      DIMENSION PP(4),PM(4),QP(4),QM(4),QK(4)
      DIMENSION SIGMA(5),PRIORI(5),DEEL(5),CUMUL(5)
      DIMENSION APPRO(4),WALL(3),WCON(3,5)
      DIMENSION WMEAN(5),WERRO(5),WMAXI(5),WEFFI(5)
C
C REPRODUCE THE INPUT PARAMETERS
      IF(IPOL .EQ. 1)PRINT 1,E,XMZ,THMIN,THMAX,XKMAX,POL
C   1 FORMAT(' ',50(1H-)/,' WELCOME TO MUON PAIR PRODUCTION !!'/,
C    . ' PLEASE EXCUSE ME FOR EXPRESSING MYSELF IN AMERICAN...'/,
    1 FORMAT(
     . ' ',50(1H-)/,
     .' YOU HAVE SUPPLIED THE FOLLOWING PARAMETERS :'/,
     .' BEAM ENERGY                     =',F10.4,' GEV'/,
     .' MASS OF THE Z0 BOSON            =',F10.4,' GEV'/,
     .' MINIMUM MU+,MU- POLAR ANGLE     =',F10.4,' DEGREES'/,
     .' MAXIMUM MU+,MU- POLAR ANGLE     =',F10.4,' DEGREES'/,
     .' MAXIMUM PHOTON ENERGY           =',F10.4,
     .' OF THE BEAM ENERGY'/,
     .' R-POLARIZATION OF THE E- BEAM   =',F10.4/,
C    .' I AM NOW READY TO START THE INITIALIZATION.'
     .' ',50(1H-))
      EBEA=E
C
      XPOL = POL
      PPOL=POL
C
C THE LIMITS ON THE COSINES OF THE E+,- SCATTERING ANGLES
      CMIN=DCOS(THMAX*3.1415926536D0/180.D0)
      CMAX=DCOS(THMIN*3.1415926536D0/180.D0)
C
C THE Z0 WIDTH, LEPTONIS COUPLINGS AND CHARGE RENORMALIZTION
C AS FOLLOWING FROM THE STANDARD MODEL
      CALL SETUPB(E,XMZ)
      AE=2.*(GV /GA )/(1.+(GV /GA )**2)
      AF=2.*(GV1/GA1)/(1.+(GV1/GA1)**2)
      IF(IPOL .EQ. 1)
     .PRINT2,XGZ,GV,GA,AE,XMM,QF,RDATIN(13),GV1,GA1,AF,COLNUM,RA
     .,ALFAST
    2 FORMAT('USING THE STANDARD MODEL I OBTAIN THE FOLLOWING'/,
     .       ' ADDITTIONAL PARAMETERS:'/,
     .' TOTAL WIDTH OF THE Z0 BOSON     =',F10.4,' GEV'/,
     .' VECTOR COUPLING OF E TO Z0      =',F14.8/,
     .' AXIAL  COUPLING OF E TO Z0      =',F14.8/,
     .' INTRINSIC Z TO E ASYMMETRY      =',F14.8/,
     .' MASS OF THE PRODUCED FERMION F  =',F14.8,' GEV'/,
     .' CHARGE QUANTUM NO. OF F         =',F14.8/,
     .' ISOSPIN OF F                    =',F14.8/,
     .' VECTOR COUPLING OF F TO Z0      =',F14.8/,
     .' AXIAL  COUPLING OF F TO Z0      =',F14.8/,
     .' INTRINSIC Z TO F ASYMMETRY      =',F14.8/,
     .' THE NUMBER OF COLORS OF F IS     ',F14.8/,
     .' AND THE ELECTROMAGNETIC CHARGE IS'/,
     .' RENORMALIZED BY A FACTOR         ',F10.4/,
     .' FOR THE STRONG INTERACTIONS I USE:'/,
     .' ALFA(S)/PI                      =',F10.4/,' ',50('-'))
C
C THE BOUNDARY BETWEEN SOFT AND HARD  BREMSSTRAHLUNG
      XK0=RDATIN(10)
C
C INITIALIZE THE SUBPROGRAMS
      CALL SETUP1(E,XK0,XKMAX,XMM,QF,RA,SIGMA(1))
      CALL SETUP2(E,XK0,XKMAX,XMZ,XGZ,GV,GA,XMM,QF,GV1,GA1,
     .            RA,SIGMA(2))
CAB   CALL SETUP3(E,XK0,XKMAX,XMZ,XGZ,GV,GA,GV1,GA1,RA,SIGMA(3))
CAB   CALL SETUP4(E,XK0,XKMAX,THMIN,THMAX,RA,SIGMA(4))
CAB   CALL SETUP5(E,THMIN,THMAX,SIGMA(5))
      CALL SETUP3(E,XK0,XKMAX,XMZ,XGZ,GV,GA,GV1,GA1,RA,SIGMA(3),XMM)
      CALL SETUP4(E,XK0,XKMAX,THMIN,THMAX,RA,SIGMA(4),XMM)
      CAL= SETUPS(E,XMZ,XGZ,GV,GA,XMM,QF,GV1,GA1,XK0,RA)
      CALL SETUP5(E,THMIN,THMAX,SIGMA(5),XMM)
      CALL SETUPW(E,XMZ,XGZ,GV,GA,QF,GV1,GA1,RA)
      CALL SETUPM(XMZ,XGZ,GV,GA,XMM,QF,GV1,GA1,RA)
C
C THE TOTAL APPROXIMATE CROSS SECTION
      PRIORI(1)=1.
      PRIORI(2)=1.
      PRIORI(3)=1.
      PRIORI(4)=0.
      PRIORI(5)=1.
      SIGAPP=0.
      DO 3 I=1,5
    3 SIGAPP=SIGAPP+SIGMA(I)*PRIORI(I)*COLNUM
      DO 4 I=1,5
    4 DEEL(I)=SIGMA(I)*PRIORI(I)*COLNUM/SIGAPP
      CUMUL(1)=DEEL(1)
      DO 5 I=2,5
    5 CUMUL(I)=CUMUL(I-1)+DEEL(I)
      PRINT 6,(I,SIGMA(I),PRIORI(I),DEEL(I),CUMUL(I),I=1,5)
    6 FORMAT(' ',50(1H-)/,
     .' I AM NOW AT THE END OF THE INITIALIZATION STEP.'/,
     . ' THE CONTRIBUTIONS ARE THE FOLLOWING:'/,
     . ' 1: INITIAL-STATE RADIATION IN THE PHOTON S-CHANNEL,'/,
     . ' 2: FINAL-STATE RADIATION IN THE Z0 S-CHANNEL,'/,
     . ' 3: INITIAL-STATE RADIATION IN THE Z0 S-CHANNEL,'/,
     . ' 4: BREMSSTRAHLUNG IN THE PHOTON T-CHANNEL,'/,
     . ' 5: THE CONTRIBUTIONS FROM LOOPS AND SOFT PHOTONS.'/,
     . ' MY RESULTS SO FAR ARE:'/,
     . ' CONTR.NO.   APPR.XSEC.   WEIGHT    FRACTION    CUMUL.FR.'/,
     .  5(I7,D15.6,G13.3,G10.3,G12.3/ ),
     . ' WHERE:'/,
     . ' CONTR.NO. = THE NUMBER OF A PARTICULAR CONTRIBUTION,'/,
     . ' APPR.XSEC.= IS THE INTEGRAL OF THAT CONTRIBUTION,'/,
     . ' WEIGHT    = ITS ASSIGNED A-PRIORI WEIGHT,'/,
     . ' FRACTION  = ITS FRACTION OF THE TOTAL INTEGRAL, AND'/,
     . ' CUMUL.FR. = IS THE CUMULATIVE FRACTION.'/,' ',50(1H-))
C
C INITIALIZE THE BOOKKEEPING QUANTITIES
      NEV=0
      WMAXT=0.
      DO 8 I=1,3
      WALL(I)=0.
      DO 7 J=1,5
      WMEAN(J)=0.
      WERRO(J)=0.
      WMAXI(J)=0.
      WEFFI(J)=0.
      WCON(I,J)=0.
    7 CONTINUE
    8 CONTINUE
C
C END OF THE INITIALIZATION PROCEDURE
      PRINT 9
    9 FORMAT(' I HAVE NOW FINISHED THE INITIALIZATION,'/,
     .' AND AM READY TO START GENERATING EVENTS.'/,' ',50(1H-))
      RETURN
C
      ENTRY GENMUS(PP,PM,QP,QM,QK,WEV,ICON)
C
C GENERATION OF THE PARTICLE MOMENTA.
C WEV = THE WEIGHT OF THE EVENT.
C
C DEFINE THE BEAM MOMENTA
      PP(4)=EBEA
      PP(3)=EBEA
      PP(2)=0.
      PP(1)=0.
      PM(4)=EBEA
      PM(3)=-EBEA
      PM(2)=0.
      PM(1)=0.
C
C DECIDE ON THE CONTRIBUTION THAT WILL SUPPLY THIS EVENT
  101 CONTINUE
      CHOOSE=RN(1.)
                             ICON=1
      IF(CHOOSE.GT.CUMUL(1)) ICON=2
      IF(CHOOSE.GT.CUMUL(2)) ICON=3
      IF(CHOOSE.GT.CUMUL(3)) ICON=4
      IF(CHOOSE.GT.CUMUL(4)) ICON=5
C
C GENERATE THE TRIAL EVENT
      IF(ICON.EQ.1) CALL GENER1(QP,QM,QK,WMASS)
      IF(ICON.EQ.2) CALL GENER2(QP,QM,QK,WMASS)
      IF(ICON.EQ.3) CALL GENER3(QP,QM,QK,WMASS)
      IF(ICON.EQ.4) CALL GENER4(QP,QM,QK,WMASS)
      IF(ICON.EQ.5) CALL GENER5(QP,QM,QK)
C
C DEFINE THE EVENT WEIGHT. THERE ARE THREE POSSIBILITIES:
C A) EVENT OUTSIDE ACCEPTANCE FOR THE E+,- ANGLES: WEIGHT=0
C B) SOFT EVENT, I.E. FROM GENER5: WEIGHT=1
C C) HARD EVENT, I.E. FROM GENER1,2,3,4: NOW THE WEIGHT IS
C    THE RATIO OF THE EXACT MATRIX ELEMENT SQUARED OVER THE
C    SUM OF THE APPROXIMATE CONTRIBUTIONS (TAKING THEIR
C    A-PRIORI WEIGHTS INTO ACCOUNT)
C
C CHECK ON ACCEPTABILITY
      CP=QP(3)/QP(4)
      CM=-QM(3)/QM(4)
      IF(     CP.GT.CMIN. AND. CP.LT.CMAX
     .  .AND. CM.GT.CMIN. AND. CM.LT.CMAX ) GOTO 102
C
C CASE A: EVENT OUTSIDE THE DEFINED PHASE SPACE
      W=0.
      GOTO 105
C
C EVENT INSIDE ACCEPTED PHASE SPACE
  102 CONTINUE
      IF(ICON.NE.5) GOTO 103
C
C CASE B: SOFT PHOTON EVENT
      W=1./PRIORI(5)
      GOTO 105
C
C CASE C: HARD PHOTON EVENT
  103 CONTINUE
C
C THE EXACT MATRIX ELEMENT SQUARED
C THE Z1...Z4 ARE THE MOMENTUM PRODUCTS P.K ETC
      CALL AMPLIT(PP,PM,QP,QM,QK,Z1,Z2,Z3,Z4,PPOL,WMASS,EXACT)
C
C THE SUM OF THE APPROXIMATIONS
      CALL APROXS(QP,QM,QK,Z1,Z2,Z3,Z4,APPRO(1),APPRO(2),
     .                                 APPRO(3),APPRO(4) )
      APPROX=0.
      DO 104 I=1,4
  104 APPROX=APPROX+APPRO(I)*PRIORI(I)
C
C THE EVENT WEIGHT: N.B. ALSO FINITE-MASS EFFECTS INCLUDED.
      W=EXACT*WMASS/APPROX
C
C THE EVENTY WEIGHT IS NOW DEFINED IN EVERY CASE
  105 WEV=W
C
C DO THE BOOKKEEPING TO FIND THE EXACT CROSS SECTION.
      WMAXT=DMAX1(WMAXT,WEV)
      WMAXI(ICON)=DMAX1(WMAXI(ICON),WEV)
      WALL(1)=WALL(1)+1.
      WALL(2)=WALL(2)+WEV
      WALL(3)=WALL(3)+WEV**2
      WCON(1,ICON)=WCON(1,ICON)+1.
      WCON(2,ICON)=WCON(2,ICON)+WEV
      WCON(3,ICON)=WCON(3,ICON)+WEV**2
      II=10
      IK=6
      XD0=0.D0
      XD1=1.0D0
      XD2=2.0D0
      CALL HISTO1(ICON,II,XD0,XD2,WEV,XD1)
      CALL HISTO1(  IK,II,XD0,XD2,WEV,XD1)
C
C ADD TO THE COUNTER OF SUCCESFUL EVENTS
      NEV=NEV+1
      RETURN
C
      ENTRY ENDMUS(SIGTOT)
C
C ANALYSIS OF THE GENERATED EVENT WEIGHTS IN ORDER TO FIND THE
C EXACT TOTAL CROSS SECTION.
      PRINT 201,NEV
  201 FORMAT(' ',50(1H-)/,
     .' I HAVE NOW GENERATED ',I10,' EVENTS.'/,
     .' THE STATISTICS OF THE EVENT WEIGHTS ARE AS FOLLOWS:'/,
     .' CONTR.NO   SUM(W**0)  SUM(W**1) SUM(W**2)   MEAN',
     .'    ERROR      MAX.W.    EFFIC.')
      DO 205 I=1,5
      IF(WCON(1,I).NE.0.D0) GOTO 203
      PRINT 202,I
  202 FORMAT(I7,
     .       '         0          0         0         --',
     .'     --          --        --')
      GOTO 205
  203 CONTINUE
      WMEAN(I)=WCON(2,I)/WCON(1,I)
      WERRO(I)=DSQRT(WCON(3,I)-WCON(2,I)**2/WCON(1,I))/WCON(1,I)
      WEFFI(I)=WMEAN(I)/WMAXI(I)
      PRINT 204,I,(WCON(J,I),J=1,3),WMEAN(I),WERRO(I)
     .  ,WMAXI(I),WEFFI(I)
  204 FORMAT(I7,G14.4,2G11.4,4G10.3)
  205 CONTINUE
      WMEANT=WALL(2)/WALL(1)
      WERROT=DSQRT(WALL(3)-WALL(2)**2/WALL(1))/WALL(1)
      WEFFT=WMEANT/WMAXT
      PRINT 206,(WALL(K),K=1,3),WMEANT,WERROT,WMAXT,WEFFT
  206 FORMAT(
     .'  TOTAL',G14.4,2G11.4,4G10.3/,
     .' WHERE:'/,
     .' CONTR.NO = THE CONTRIBUTION NUMBER AS BEFORE,'/,
     .' SUM(W**K)= THE K-TH MOMENT OF THE WEIGHT DISTRIBUTION,'/,
     .' MEAN     = THE MEAN WEIGHT FOR THIS CONTRIBUTION,'/,
     .' ERROR    = THE ESTIMATED ERROR ON THIS MEAN,'/,
     .' MAX.W.   = THE MAXIMUM WEIGHT THAT OCCURRED,'/,
     .' EFFIC.   = THE ALGORITHM EFFICIENCY = MEAN/MAX.W.')
C
C DERIVE SUGGESTED A PRIORI WEIGHTS FOR THE NEXT RUN UNDER
C THESE PARAMETER VALUES
C THIS DOESN'T SEEM TO WORK TOO WELL SO WE FORGET IT FOR THE MOMENT
      IF(1.EQ.1) GOTO 211
      WSUP=DMAX1(WMAXI(1),WMAXI(2),WMAXI(3),WMAXI(4),WMAXI(5))
      PRINT 207
  207 FORMAT('0THE NEXT TIME YOU RUN WITH THESE PARAMETERS'/,
     . ' MY EFFICIENCY WILL BE IMPROVED IF YOU CHANGE THE '/,
     . ' A-PRIORI WEIGHTS TO THE FOLLOWING VALUES:')
      DO 210 I=1,5
      POSTER=1.D0
      IF(WMAXI(I).EQ.0.D0.OR.WCON(1,I).EQ.0.D0) GOTO 208
      POSTER=WMAXI(I)/WSUP
  208 POSTER=PRIORI(I)*POSTER
      PRINT 209,I,POSTER
  209 FORMAT(' PRIORI(',I1,') = ',F10.4)
  210 CONTINUE
  211 CONTINUE
C
C THE FINAL RESULT: THE TOTAL CROSS SECTION (IN PICOBARN)
      SIGTOT=WMEANT*SIGAPP
      ERRTOT=WERROT*SIGAPP
      PRINT 311,SIGTOT,ERRTOT
C 211 FORMAT(' ',50(1H-)/,
  311 FORMAT(
     . ' THE CROSS SECTION CORRESPONDING TO THE GENERATED'/,
     . ' EVENT SAMPLE IS',D15.6,' +/-',D15.6,
     . ' PICOBARN'/,' ',50(1H-))
C
      RETURN
      END
      SUBROUTINE SETUP1(E,XK0,XK1,XMM,QMM,RA,SIGMA)
C
C SUBGENERATOR 1:
C INITIAL-STATE RADIATION IN QED S-CHANNEL GRAPHS
C E = BEAM ENERGY IN GEV
C XK0 = MINIMUM PHOTON ENERGY (FRACTION OF E)
C XK1 = MAXIMUM PHOTON ENERGY (FRACTION OF E)
C XMM = MASS OF THE PRODUCED FERMION (GEV)
C QMM = CHARGE QUANTUM NO. OF PRODUCED FERMION (=-1 FOR MUON)
C RA = RENAORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
      DIMENSION QP(4),QM(4),QK(4),H(4)
      COMMON / EFFIC1 / EFFK
C
C DEFINE CONSTANTS
      XME=0.000511D0
      XMU=XMM
      PI=3.1415926536D0
      EEL0=DSQRT(4.*PI/137.036D0)
      EEL=DSQRT(4.*PI/137.036D0*RA)
      FAC=4970.392/E**2*2.*EEL**4*EEL0**2*PI**2*QMM**2
      EPS=(XME/E)**2/2.
      EPSMU=(XMU/E)**2/2.
      XKMAX=1.-DEXP(5.D0/3.)/2.*EPSMU
      EBEA=E
C
C TOTAL APPROXIMATE CROSS SECTION
      E0=E*XK0
      IF(XK1.LE.XKMAX) GOTO 2
      PRINT 1,XKMAX
    1 FORMAT(' SETUP1 : THE MAXIMUM PHOTON ENERGY IS TOO HIGH;'/,
     .       ' SETUP1 : I CHANGE ITS VALUE TO',D30.20)
      XK1=XKMAX
    2 CONTINUE
      EMAX=XK1*E
      SIGMA=FAC*DLOG(4.*E**2/XME**2)*
     . (2.*DLOG(EMAX/E0) + DLOG((E-E0)/(E-EMAX))
     . -(EMAX-E0)/E )
C
C INITIALIZE CONSTANTS FOR EVENT GENERATION
      YK1=DLOG(E0/(E-E0))
      YK2=DLOG(EMAX/E0*(E-E0)/(E-EMAX))
      YK3=E**2+(E-E0)**2
      YZ1=DLOG(EPS)
      YZ2=DLOG((2.+EPS)/EPS)
      YF1=2.*PI
C
C THE EFFICIENCY OF THE PHOTON ENERGY LOOP
      EFFK=(2.*DLOG(EMAX/E0)+DLOG((E-E0)/(E-EMAX))
     . -(EMAX-E0)/E )/(1.+(1.-E0/E)**2)
     . /DLOG(EMAX*(E-E0)/E0/(E-EMAX))
      TRYK=0.
      PASK=0.
C
C PRINT THE RESULTS SO FAR
C     PRINT 3,     E,   XK0,   XK1,    RA,   XME,   XMU,   PI,
C    .          EEL0,    EEL,   FAC,   EPS, EPSMU, XKMAX,   E0,
C    .          EMAX, SIGMA,   YK1,   YK2,  YK3,
C    .           YZ1,   YZ2,   YF1,  EFFK, TRYK,
C    .          PASK,   XMM,   QMM
    3 FORMAT(' SETUP1 :',4D14.6)
      RETURN
      ENTRY GENER1(QP,QM,QK,WM)
C
C GENERATION OF THE FINAL-STATE MOMENTA
C
C GENERATE THE PHOTON ENERGY BY MAPPING AND W.R.P.
    4 TRYK=TRYK+1.
      QK(4)=EBEA/(1.+1./DEXP(YK1+RN(1.)*YK2))
      W=(EBEA**2+(EBEA-QK(4))**2)/YK3
      IF(W.LT.RN(2.)) GOTO 4
      PASK=PASK+1.
      EFFK=PASK/TRYK
C
C GENERATE THE PHOTON POLAR ANGLE (N.B. STABILITY)
      V=DEXP(YZ1+RN(3.)*YZ2)-EPS
      ZG=1.-V
      SG=DSQRT(V*(2.-V))
      IF(RN(4.).GT..5D0) ZG=-ZG
C
C GENERATE THE OTHER TRIVIAL VARIABLES
      FG=YF1*RN(5.)
      FR=YF1*RN(6.)
      CR=-1.+2.*RN(7.)
      SR=DSQRT(1.-CR*CR)
C
C CALCULATE THE MASS EFFECT FACTOR
      WM=1.-EPS/(EPS+V)*2.*EBEA*(EBEA-QK(4))/(EBEA**2+(EBEA-QK(4))**2)
C
C CONSTRUCT THE PHOTON MOMENTUM IN THE LAB
      QK(1)=QK(4)*SG*DSIN(FG)
      QK(2)=QK(4)*SG*DCOS(FG)
      QK(3)=QK(4)*ZG
      XK=QK(4)**2-QK(3)**2-QK(2)**2-QK(1)**2
C
C CONSTRUCT THE MU+ MOMENTUM IN THE E+E- REST FRAME
      H(4)=EBEA*DSQRT(1.-QK(4)/EBEA)
      PH= SQRT(H(4)**2-XMU**2)
      H(1)=PH*SR*DSIN(FR)
      H(2)=PH*SR*DCOS(FR)
      H(3)=PH*CR
CAB   H(1)=H(4)*SR*DSIN(FR)
CAB   H(2)=H(4)*SR*DCOS(FR)
CAB   H(3)=H(4)*CR
      XH=H(4)**2-H(3)**2-H(2)**2-H(1)**2
C
C BOOST TO OBTAIN THE LAB FRAME VALUE
      QP(4)=((2.*EBEA-QK(4))*H(4)
     .       -H(3)*QK(3)-H(2)*QK(2)-H(1)*QK(1))/(2.*H(4))
      R=(QP(4)+H(4))/(2.*EBEA-QK(4)+2.*H(4))
      DO 5 I=1,3
    5 QP(I)=H(I)-QK(I)*R
      XP=QP(4)**2-QP(3)**2-QP(2)**2-QP(1)**2
C
C CONSTRUCT THE MU- MOMENTUM FROM CONSERVATION
      QM(4)=2.*EBEA-QP(4)-QK(4)
      DO 6 I=1,3
    6 QM(I)=-QP(I)-QK(I)
      XM=QM(4)**2-QM(3)**2-QM(2)**2-QM(1)**2
C
      RETURN
      END
      SUBROUTINE SETUP2(E,XK0,XK1,XMZ,XGZ,GV,GA,XMM,QMM,GV1,GA1,
     .                  RA,SIGMA)
C
C SUBGENERATOR 2:
C FINAL-STATE RADIATION IN Z0 ANNIHILATION GRAPHS
C E = BEAM ENERGY IN GEV
C XK0 = MINIMUM PHOTON ENERGY (FRACTION OF E)
C XK1 = MAXIMUM PHOTON ENERGY (FRACTION OF E)
C XMZ = Z0 MASS IN GEV
C XGZ = Z0 WIDTH IN GEV
C GV = VECTOR COUPLING BETWEEN E AND Z0
C GA = AXIAL VECTOR COUPLING BETWEEN E AND Z0
C XMM = MASS OF PRODUCED FERMION F (GEV)
C QMM = ITS CHARGE QUANTUM NUMBER (MUON=-1)
C GV1 = VECTOR COUPLING BETWEEN F AND Z0
C GA1 = AXIAL-VECTOR COUPLING BETWEEN F AND Z0
C RA = RENORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
      DIMENSION QP(4),QM(4),QK(4)
      COMMON / EFFIC2 / EFFK
C
C THE INTEGRATED PHOTON SPECTRUM
      H(X)=XL*(2.*DLOG(X)-2.D0*X+X**2/2.)-2.*DILOG(X)
     . +(1.-X)*(3.-X)*DLOG(1.-X)/2.
     . -(1.-X)*(5.-X)/4.
C
C DEFINE CONSTANTS: XME HERE STANDS FOR THE FERMION MASS!
CAB   XME=XMM
C  DEFINE XMU= FERMION MASS AND XMU2=XMU*XMU
      XMU=XMM
      XMU2=XMU*XMU
      PI=3.1415926536D0
      EEL0=DSQRT(4.*PI/137.036)
      EEL=DSQRT(4.*PI/137.036*RA)
      XL=DLOG(4.*E**2/XMU2)
C
C TOTAL APPROXIMATE CROSS SECTION
      E0=XK0*E
      EMAX=XK1*E
      SIGMA=4970.392/E**2
     . *EEL0**2*QMM**2
     . *((GV**2+GA**2)*(GV1**2+GA1**2)+4.*DABS(GV*GA*GV1*GA1))
     . *32.*PI**2*E**4*(H(XK1)-H(XK0))
     . /((4.*E**2-XMZ**2)**2+XMZ**2*XGZ**2)
C
C INITIALIZE CONSTANTS FOR EVENT GENERATION
      EBEA=E
      YK1=XL
      YK2=(E**2+(E-E0)**2)*DLOG(4.*E*(E-E0)/XMU2)
      YV1=XMU2/4./E
      YF1=2.*PI
C
C THE EFFICIENCY OF THE PHOTON ENERGY LOOP
      TRYK=0.
      PASK=0.
C
C PRINT THE RESULTS SO FAR
C     PRINT 1,   XMU,    PI,  EEL0,   EEL,    RA,    XL,
C    .            E0,  EMAX, SIGMA,   YK1,
C    .           YK2,   YV1,   YF1,  TRYK,
C    .          PASK
    1 FORMAT(' SETUP2 :',4D14.6)
      RETURN
      ENTRY GENER2(QP,QM,QK,WM)
C
C GENERATION OF THE FINAL-STATE MOMENTA
C
C GENERATE THE PHOTON ENERGY BY MAPPING AND W.R.P.
    2 TRYK=TRYK+1.
      QK(4)=(EMAX/E0)**RN(1.)*E0
      W=(EBEA**2+(EBEA-QK(4))**2)*(YK1+DLOG(1.-QK(4)/EBEA))/YK2
      IF(W.LT.RN(2.)) GOTO 2
      PASK=PASK+1.
      EFFK=PASK/TRYK
C
C GENERATE THE MU+ ENERGY (N.B. NUMERICAL STABILITY)
      D=YV1*QK(4)/(EBEA-QK(4))
      V=DEXP(DLOG(D)+RN(3.)*DLOG(1.+QK(4)/D))-D
CAB**********************NEW*****************************
C
C---SLIGHT CHANGE OF VARIABLES TO TAKE FINAL STATE MASS INTO ACCOUNT
C A.B. MAY 1988
C
      ROOT=1.-XMU2/(EBEA*(EBEA-QK(4)) )
      IF (ROOT.LE.0.D0) GO TO 2
      HALFK = 0.5*QK(4)
      V = HALFK + (V-HALFK)*SQRT(ROOT)
C
CBACK TO ORIGINAL CODE
CAB*************************END NEW ************************
      QP(4)=EBEA-V
C
C GENERATE THE OTHER TRIVIAL VARIABLES
      FG=YF1*RN(4.)
      C=-1.+2.*RN(5.)
      FC=YF1*RN(6.)
C
C CALCULATE THE MASS EFFECT FACTOR
      WM=1.-XMU2/2./(V+D)*QK(4)/(EBEA**2+(EBEA-QK(4))**2)
C
C CONSTRUCT THE MU+ MOMENTUM
      SC=DSQRT(1.-C*C)
      C1=DCOS(FC)
      S1=DSIN(FC)
CAB   ***********NEW LINE********************
      PQP = SQRT(QP(4)**2-XMU2)
      QP(1)=PQP*SC*S1
      QP(2)=PQP*SC*C1
      QP(3)=PQP*C
CAB   ************END NEW *************************
CAB   QP(1)=QP(4)*SC*S1
CAB   QP(2)=QP(4)*SC*C1
CAB   QP(3)=QP(4)*C
      XP=QP(4)**2-QP(3)**2-QP(2)**2-QP(1)**2
C
C CONSTRUCT THE PHOTON MOMENTUM
CAB   VG=2.*(EBEA-QK(4))*V/(QK(4)*(EBEA-V))
CAB   CG=VG-1.
CAB   SG=DSQRT(VG*(2.-VG))
CAB *************NEW ************
      CG = (2.*EBEA*(EBEA-QP(4)-QK(4))+QP(4)*QK(4))/(PQP*QK(4))
      SG=SQRT(1.-CG*CG)
CAB **************END NEW ***********
      HX=QK(4)*SG*DSIN(FG)
      HY=QK(4)*SG*DCOS(FG)
      HZ=QK(4)*CG
      XH=QK(4)**2-HX**2-HY**2-HZ**2
      QK(1)=  C1*HX + S1*C*HY + S1*SC*HZ
      QK(2)= -S1*HX + C1*C*HY + C1*SC*HZ
      QK(3)=           -SC*HY      +C*HZ
      XK=QK(4)**2-QK(3)**2-QK(2)**2-QK(1)**2
C
C CONSTRUCT MU- MOMENTUM FROM CONSERVATION
      QM(4)=2.*EBEA-QP(4)-QK(4)
      DO 3 I=1,3
    3 QM(I)=-QP(I)-QK(I)
      XM=QM(4)**2-QM(3)**2-QM(2)**2-QM(1)**2
C
C SYMMETRIZE THE MU+ AND MU- MOMENTA
      IF(RN(8.).LT..5D0) RETURN
      DO 4 I=1,4
      X=QP(I)
      QP(I)=QM(I)
    4 QM(I)=X
      RETURN
      END
      FUNCTION DILOG(X)
      IMPLICIT REAL*8(A-H,O-Z)
      Z=-1.644934066848226D0
      IF(X .LT.-1.D0) GO TO 1
      IF(X .LE. 0.5D0) GO TO 2
      IF(X .EQ. 1.D0) GO TO 3
      IF(X .LE. 2.D0) GO TO 4
C
      Z=3.289868133696453D0
    1 T=1.D0/X
      S=-0.5D0
      Z=Z-0.5D0*DLOG(DABS(X))**2
      GO TO 5
C
    2 T=X
      S=0.5D0
      Z=0.D0
      GO TO 5
C
    3 DILOG=1.644934066848226D0
      RETURN
C
    4 T=1.D0-X
      S=-0.5D0
      Z=1.644934066848226D0-DLOG(X)*DLOG(DABS(T))
C
    5 Y=2.666666666666667D0*T+0.666666666666667D0
      B=      0.000000000000001D0
      A=Y*B  +0.000000000000004D0
      B=Y*A-B+0.000000000000011D0
      A=Y*B-A+0.000000000000037D0
      B=Y*A-B+0.000000000000121D0
      A=Y*B-A+0.000000000000398D0
      B=Y*A-B+0.000000000001312D0
      A=Y*B-A+0.000000000004342D0
      B=Y*A-B+0.000000000014437D0
      A=Y*B-A+0.000000000048274D0
      B=Y*A-B+0.000000000162421D0
      A=Y*B-A+0.000000000550291D0
      B=Y*A-B+0.000000001879117D0
      A=Y*B-A+0.000000006474338D0
      B=Y*A-B+0.000000022536705D0
      A=Y*B-A+0.000000079387055D0
      B=Y*A-B+0.000000283575385D0
      A=Y*B-A+0.000001029904264D0
      B=Y*A-B+0.000003816329463D0
      A=Y*B-A+0.000014496300557D0
      B=Y*A-B+0.000056817822718D0
      A=Y*B-A+0.000232002196094D0
      B=Y*A-B+0.001001627496164D0
      A=Y*B-A+0.004686361959447D0
      B=Y*A-B+0.024879322924228D0
      A=Y*B-A+0.166073032927855D0
      A=Y*A-B+1.935064300869969D0
      DILOG=S*T*(A-B)+Z
      RETURN
C
      END
      SUBROUTINE SETUP3(E,XK0,XK1,XMZ,XGZ,GV,GA,GV1,GA1,RA,SIGMA,XMM)
C
C SUBGENERATOR 3:
C INITIAL-STATE RADIATION IN Z0 ANNIHILATION GRAPH
C E = BEAM ENERGY IN GEV
C XK0 = MINIMUM PHOTON ENERGY (FRACTION OF E)
C XK1 = MAXIMUM PHOTON ENERGY (FRACTION OF E)
C XMZ = Z0 MASS IN GEV
C XGZ = Z0 WIDTH IN GEV
C GV = VECTOR COUPLING BETWEEN E AND Z0
C GA = AXIAL VECTOR COUPLING BETWEEN E AND Z0
C GV1 = VECTOR COUPLING BETWEEN F AND Z0
C GA1 = AXIAL VECTOR COUPLING BETWEEN F AND Z0
C RA = RENORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
      DIMENSION QP(4),QM(4),QK(4),H(4)
      COMMON / PARAM3 / Z,G2
      EXTERNAL FSPECT
C
C THE INTEGRATED PHOTON SPECTRUM
      HFUN(X)=H1*DLOG(X)+H2*DLOG((X-Z)**2+G2)/2.
     .    +H3*DATAN((X-Z)/G)+H4*X
C
C DEFINE CONSTANTS
      XME=0.511D-03
      XMU = XMM
      PI=3.1415926536D0
      EEL0=DSQRT(4.*PI/137.036D0)
      EEL=DSQRT(4.*PI/137.036D0*RA)
      XL=DLOG(4.*E**2/XME**2)
      EBEA=E
C
C DEFINE SPECTRUM PARAMETERS; TOTAL APPROXIMATE CROSS SECTION
      Z=1.-XMZ**2/4./E**2
      G=XMZ*XGZ/4./E**2
      G2=G**2
      H1=2./(Z**2+G2)
      H2=-H1+3.-2.*Z
      H3=Z/G*H1+(-4.+3.*Z-Z**2+G2)/G
      H4=-1.
      HFAC=HFUN(XK1)-HFUN(XK0)
      SIGMA=4970.392/E**2
     . *EEL0**2*2.*PI**2*
     . ((GV**2+GA**2)*(GV1**2+GA1**2)+4.*DABS(GV*GA*GV1*GA1))
     . *XL*HFAC
C
C SET UP THE PHOTON SPECTRUM WITH ITERATED INTERVAL STRETCHING
      I1=1000
      I2=10
      CALL IIS(I1,I2,XK0,XK1,FSPECT)
C
C INITIALIZE CONSTANTS FOR THE EVENT GENERATION
      EPS=XME**2/2./E**2
      YZ1=DLOG(EPS)
      YZ2=DLOG((2.+EPS)/EPS)
      YF1=2.*PI
C
C PRINT THE RESULTS SO FAR
C     PRINT 1,   XME,    PI,   EEL,    RA,    XL,
C    .             Z,     G,    G2,    H1,
C    .            H2,    H3,    H4,  HFAC,
C    .         SIGMA,   EPS,   YZ1,   YZ2,
C    .           YF1
    1 FORMAT(' SETUP3 :',4D14.6)
      RETURN
C
      ENTRY GENER3(QP,QM,QK,WM)
C
C GENERATION OF THE FINAL-STATE MOMENTA
C
C GENERATE THE PHOTON ENERGY BY USING THE SET-UP HISTOGRAM
      CALL PAK(XK)
      QK(4)=EBEA*XK
C
C GENERATE THE PHOTON POLAR ANGLE (N.B. STABILITY)
      V=DEXP(YZ1+RN(3.)*YZ2)-EPS
      ZG=1.-V
      SG=DSQRT(V*(2.-V))
      IF(RN(4.).GT..5D0) ZG=-ZG
C
C GENERATE THE OTHER TRIVIAL VARIABLES
      FG=YF1*RN(5.)
      FR=YF1*RN(6.)
      CR=-1.+2.*RN(7.)
      SR=DSQRT(1.-CR*CR)
C
C CALCULATE THE MASS EFFECT FACTOR
      WM=1.-EPS/(EPS+V)*2.*EBEA*(EBEA-QK(4))/(EBEA**2+(EBEA-QK(4))**2)
C
C CONSTRUCT THE PHOTON MOMENTUM IN THE LAB
      QK(1)=QK(4)*SG*DSIN(FG)
      QK(2)=QK(4)*SG*DCOS(FG)
      QK(3)=QK(4)*ZG
      XK=QK(4)**2-QK(3)**2-QK(2)**2-QK(1)**2
C
C CONSTRUCT THE MU+ MOMENTUM IN THE E+E- REST FRAME
      H(4)=EBEA*DSQRT(1.-QK(4)/EBEA)
CAB   H(1)=H(4)*SR*DSIN(FR)
CAB   H(2)=H(4)*SR*DCOS(FR)
CAB   H(3)=H(4)*CR
CAB ******************NEW *************************
      PH = SQRT (H(4)**2-XMU**2)
      H(1)=PH*SR*DSIN(FR)
      H(2)=PH*SR*DCOS(FR)
      H(3)=PH*CR
CAB **********************END NEW ************
      XH=H(4)**2-H(3)**2-H(2)**2-H(1)**2
C
C BOOST TO OBTAIN THE LAB FRAME VALUE
      QP(4)=((2.*EBEA-QK(4))*H(4)
     .       -H(3)*QK(3)-H(2)*QK(2)-H(1)*QK(1))/(2.*H(4))
      R=(QP(4)+H(4))/(2.*EBEA-QK(4)+2.*H(4))
      DO 4 I=1,3
    4 QP(I)=H(I)-QK(I)*R
      XP=QP(4)**2-QP(3)**2-QP(2)**2-QP(1)**2
C
C CONSTRUCT THE MU- MOMENTUM FROM CONSERVATION
      QM(4)=2.*EBEA-QP(4)-QK(4)
      DO 5 I=1,3
    5 QM(I)=-QP(I)-QK(I)
      XM=QM(4)**2-QM(3)**2-QM(2)**2-QM(1)**2
C
      RETURN
      END
      FUNCTION FSPECT(X)
C
C THE PHOTON SPECTRUM
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON / PARAM3 / Z,G2
      FSPECT=(1.-X)*(1.+(1.-X)**2)/X/((X-Z)**2+G2)
      RETURN
      END
      SUBROUTINE IIS(N,ITER,X1,XN,FUNC)
C
C ITERATED INTERVAL STRETCHING ROUTINE.
C IT TRIES TO PUT THE FUNCTION F ON THE INTERVAL [X0,X1]
C INTO A HISTOGRAM WITH N BINS. USINF ITER ITERATIONS
C IT TRIES TO MAKE ALL BINS HAVE THE SAME AREA.
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN,XDMY
      DIMENSION X(1000),F(1000),A(1000),Y(1000),Z(1000),XNEW(1000)
C
C PRINT OUT THE PARAMETERS
C     PRINT 1,X1,XN,N,ITER
    1 FORMAT(' I.I.S. : PARAMETERS OF INTERVAL STRETCHING:',/,
     .       ' I.I.S. : LOWEST  VARIABLE VALUE   : ',D10.3,/,
     .       ' I.I.S. : HIGHEST VARIABLE VALUE   : ',D10.3,/,
     .       ' I.I.S. : NO. OF POINTS            : ',I5,/,
     .       ' I.I.S. : NO. OF ITERATIONS        : ',I3)
C
C INITIALIZE BY CHOOSING EQUIDISTANT X VALUES
      IT=0
      M=N-1
      DX=(XN-X1)/DFLOAT(M)
      X(1)=X1
      DO 101 I=2,N
  101 X(I)=X(I-1)+DX
C
C STARTING POINT FOR ITERATIONS
  100 CONTINUE
C
C CALCULATE FUNCTION VALUES
      DO 102 I=1,N
  102 F(I)=FUNC(X(I))
C
C CALCULATE BIN AREAS
      DO 103 I=1,M
  103 A(I)=(X(I+1)-X(I))*(F(I+1)+F(I))/2.
C
C CALCULATE CUMULATIVE SPECTRUM Y VALUES
      Y(1)=0.D0
      DO 104 I=2,N
  104 Y(I)=Y(I-1)+A(I-1)
C
C PUT EQUIDISTANT POINTS ON Y SCALE
      DZ=Y(N)/DFLOAT(M)
      Z(1)=0.D0
      DO 105 I=2,N
  105 Z(I)=Z(I-1)+DZ
C
C DETERMINE SPACING OF Z POINTS IN BETWEEN Y POINTS
C FROM THIS, DETERMINE NEW X VALUES AND FINALLY REPLACE OLD VALUES
      XNEW(1)=X(1)
      XNEW(N)=X(N)
      K=1
      DO 108 I=2,M
  106 IF( Y(K+1) .GT. Z(I) ) GOTO 107
      K=K+1
      GOTO 106
  107 R= ( Z(I) - Y(K) ) / ( Y(K+1) - Y(K) )
  108 XNEW(I) = X(K) + ( X(K+1)-X(K) )*R
      DO 109 I=1,N
  109 X(I)=XNEW(I)
C
C CHECK ON END OF ITERATIONS AND RETURN
      IT=IT+1
C     PRINT 3,IT,Y(M)
    3 FORMAT(' I.I.S. : ITERATION ',I3,'  RESULT =',D15.6)
      IF(IT.LT.ITER) GOTO 100
      RETURN
      ENTRY PAK(VALUE)
C
C GENERATOR OF NUMBER 'VALUE' DISTRIBUTED ACCORDING TO THE
C HISTOGRAM. IT IS OBTAINED ASSUMING THAT ALL BINS HAVE THE
C SAME AREA.
C
C GENERATE VALUE FROM CUMULATIVE SPECTRUM BINS
      R=M*RN(1.)
      I=IDINT(R)
      S=R-I
      VALUE = X(I+1) + S*( X(I+2)-X(I+1) )
C
      RETURN
      END
      SUBROUTINE SETUP4(E,XK0,XK1,THMIN,THMAX,RA,SIGMA)
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
      DIMENSION H(1000),QP(4),QM(4),QK(4)
C
C SUBGENERATOR 4:
C RADIATION IN QED T-CHANNEL GRAPHS
C SINCE THERE ARE NO T-CHANNEL GRAPHS FOR MUON PAIR PRODUCTION,
C THIS ROUTINE IS JUST AN **EMPTY** BLACK BOX!
C     PRINT 1
    1 FORMAT(' SETUP4 : NO CONTRIBUTION FROM THIS CHANNEL')
      SIGMA=0.D0
      RETURN
C
      ENTRY GENER4(QP,QM,QK,WM)
      PRINT 2
    2 FORMAT(' GENER4 : ERROR! IMPOSSIBLE CHANNEL CHOSEN')
      RETURN
      END
      SUBROUTINE SETUP5(E,THMIN,THMAX,SIGMA,XMM)
C
C SUBGENERATOR 5:
C SOFT BREMSSTRAHLUNG AND VIRTUAL CORRECTIONS
C E = BEAM ENERGY IN GEV
C THMIN = MINIMUM E+E- POLAR SCATTERING ANGLE
C THMAX = MAXIMUM E+E- POLAR SCATTERING ANGLE
C
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 RN
      DIMENSION H(1000),QP(4),QM(4),QK(4)
      COMMON / EFFIC5 / EFF
C
C PARAMETERS OF THE NUMERICAL EXAMINATION STEP
      XMIN=DCOS(THMAX*3.1415926536D0/180.D0)
      XMAX=DCOS(THMIN*3.1415926536D0/180.D0)
      NP=30
      NP1=NP-1
      XP1=DFLOAT(NP1)
      XRAN=XMAX-XMIN
      DX=XRAN/XP1
      EBEA=E
      XMU = XMM
C
C FILL THE ARRAY H WITH VALUES OF THE SOFT CROSS SECTION
      Z=XMIN
C     PRINT 1313, E,THMIN,THMAX,SIGMA
C     PRINT 1314, XMIN,XMAX,XP1,XRAN
C     PRINT 1315, DX,Z,H(1),HM
      H(1)=SOFT(Z)
      HM=H(1)
1313  FORMAT (1X,' THIS BETTER WORK ',4F15.8/)
1314  FORMAT (1X, 4F20.5/)
1315  FORMAT (1X, 4F20.5/)
C
      DO 1 J=2,NP
      Z=Z+DX
      H(J)=SOFT(Z)
    1 HM=DMAX1(HM,H(J))
C
C COMPUTE THE TOTAL SOFT CROSS SECTION
      SIGMA=0.
      DO 2 J=2,NP1
    2 SIGMA=SIGMA+H(J)
      SIGMA=SIGMA+(H(1)+H(NP))/2.
      SIGMA=SIGMA*DX
      TRY=0.
      PAS=0.
C
C THE EFFICIENCY OF THE ANGLE GENERATION LOOP
      EF1=SIGMA/(HM*XRAN)
C
C PRINT THE RESULTS SO FAR
C     PRINT 3,     E, THMIN, THMAX,  XMIN,
C    .          XMAX,  XRAN,    DX,    HM,
C    .         SIGMA,   TRY,   PAS,   EF1
    3 FORMAT(' SETUP5 :',4D14.6)
      RETURN
      ENTRY GENER5(QP,QM,QK)
C
C GENERATION OF THE FINAL-STATE MOMENTA
C
C GENERATE THE SCATTERING ANGLE BY W.R.P. AND MAPPING
    4 TRY=TRY+1.
      R=RN(1.)*XP1
      X=XMIN+R*DX
      IR=IDINT(R)
      SR=R-DFLOAT(IR)
      HX=(1.-SR)*H(IR+1)+SR*H(IR+2)
      WX=HX/HM
      IF(WX.LT.RN(2.)) GOTO 4
      C=X
      PAS=PAS+1.
      EFF=PAS/TRY
C
C GENERATE THE AZIMUTHAL ANGLE
      FI=2.*3.1415926536D0*RN(3.)
      S=DSQRT(1.-C**2)
C
C CONSTRUCT THE MU+ MOMENTUM
      QP(4)=EBEA
CAB   QP(3)=EBEA*C
CAB   QP(2)=EBEA*S*DCOS(FI)
CAB   QP(1)=EBEA*S*DSIN(FI)
CAB   QP(3)=EBEA*C
CAB *************NEW ***************
      PP = SQRT (EBEA**2-XMU**2)
      QP(3)=PP*C
      QP(2)=PP*S*DCOS(FI)
      QP(1)=PP*S*DSIN(FI)
CAB ************END NEW *************
C
C CONSTRUCT THE MU- MOMENTUM
      DO 5 J=1,3
    5 QM(J)=-QP(J)
      QM(4)=EBEA
C
C THE PHOTON MOMENTUM IS SET TO ZERO IN THE SOFT CASE
      DO 6 J=1,4
    6 QK(J)=0.
      RETURN
      END
      FUNCTION SOFT(X)
C
C PREPARES THE VALUES D(SIGMA)/D(OMEGA) GIVEN BY
C THE FUNCTION 'SIGSOF' FOR USE IN ROUTINE 'SETUP5'
      IMPLICIT REAL*8(A-H,O-Z)
      SOFT=2.*3.1415926536D0*SIGSOF(X)
      RETURN
      END
      FUNCTION SETUPS(EXB,XMZ,XGZ,GV,GA,XMM,QM,GV1,GA1,XK0,RA)
C
C SETUP FOR THE VIRTUAL & SOFT PHOTON CORRECTIONS
C EB = BEAM ENERGY IN GEV
C XMZ = Z0 MASS IN GEV
C XGZ = Z0 TOTAL WIDTH IN GEV
C GV = VECTOR COUPLING CONSTANT BETWEEN E AND Z0
C GA = AXIAL COUPLING CONSTANT BETWEEN E AND Z0
C XMM = MASS OF PRODUCED FERMION F (GEV)
C QM = ITS CHARGE QUANTUM NUMBER (MUON=-1)
C GV1 = VECTOR COUPLING CONSTANT BETWEEN F AND Z0
C GA1 = AXIAL COUPLING CONSTANT BETWEEN F AND Z0
C XK0 = CUTOFF ON THE ENERGY OF THE SOFT PHOTON
C RA = RENORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16 XSTAR,FSYM,FANTI,FGSYM,FGANTI,FZSYM,FZANTI
     .,FGPLS,FGMIN,FZPLS,FZMIN,CNIL,BIGN,FSTU,FSUT
     .,FGPLSP,FGMINP,FGSYMP,FGANTP,FZPLSP,FZMINP,FZSYMP,FZANTP
C     POLX CONTAINS POLARISATION INFO FOR USE BY WKCORS
      COMMON/POLX/XPOL
      COMMON/INDAT/RDATIN(45)
C
      COMMON / BLABLA / W1Q,W1I,W2I,W1R,W2R
C     FUNCTION SETUPS(EB,XMZ,XGZ,GV,GA,XMM,QM,GV1,GA1,XK0,RA)
C     PRINT 3333,     EB,XMZ,XGZ,GV,GA,XMM,QM,GV1,GA1,XK0,RA
 3333 FORMAT(' SETUPS:     ************ EB =',D15.6/,
     .       '             *********** XMZ =',D15.6/,
     .       '             *********** XGZ =',D15.6/,
     .       '             ************ GV =',D15.6/,
     .       '             ************ GA =',D15.6/,
     .       '             *********** XMM =',D15.6/,
     .       '             ***********  QM =',D15.6/,
     .       '             *********** GV1 =',D15.6/,
     .       '             *********** GA1 =',D15.6/,
     .       '             *********** XK0 =',D15.6/,
     .       '             ************ RA =',D15.6)
C PUT IN PARAMETER TO TURN OFF FINAL STATE BREM
      TEST=RDATIN(24)
      QM1=QM*TEST
      XKK0=XK0
      QMM0=QM
C
C MOVE AWAY FROM THE EXACT Z0 POLE IF YOU ARE ON IT
C
C PUT IN FIX SO THIS DOESNT CAUSE PROBLEMS WHEN RUN SECOND POL.
C
      EB=EXB
      OFFRES=2.*EB-XMZ
      IF(DABS(OFFRES).GT.1.D-06) GOTO 100
      IF(OFFRES.GE.0.D0) EB=EB+1.D-06
      IF(OFFRES.LT.0.D0) EB=EB-1.D-06
  100 CONTINUE
C
C SOME CONSTANTS
      PI=3.1415926536D0
      ALFA0=1./137.036D0
      ALFA=1./137.036D0*RA
      E=DSQRT(4.*PI*ALFA)
      XME=0.511D-03
      XMU=XMM
      XLE=2.*DLOG(2.*EB/XME)
      XLM=2.*DLOG(2.*EB/XMU)
      CV=-GV/E
      CA=-GA/E
      CV1=-GV1/E
      CA1=-GA1/E
      S=4.*EB**2
      XM2=XMZ**2
      XMG=XMZ*XGZ
      ZS=(S-XM2)**2+XMG**2
      ZSI=S*(S-XM2)/ZS
      ZSR=S**2/ZS
C
C COEFFICIENTS FOR THE BORN TERM CONTRIBUTIONS
      OVRALL=ALFA**2/4./S
      W1Q=OVRALL*QM**2
      W1I=OVRALL*2.*ZSI*CV*CV1*(-QM)
      W1R=OVRALL*ZSR*(CV**2+CA**2)*(CV1**2+CA1**2)
      W2I=OVRALL*4.*ZSI*CA*CA1*(-QM)
      W2R=OVRALL*8.*ZSR*CV*CA*CV1*CA1
C
C POLARISATION (PARDON MY ENGLISH) CHANGES
C
      T1Q=0.
      T2Q=0.
      T1I=2.*(-QM)*CA*CV1*ZSI*OVRALL
      T2I=4.*(-QM)*CA1*CV*ZSI*OVRALL
      T1R=2.*CV*CA*(CV1**2+CA1**2)*ZSR*OVRALL
      T2R=4.*CV1*CA1*(CV**2+CA**2)*ZSR*OVRALL
C
C
C THE TWO VERTEX CORRECTIONS
      DVCE=2.*ALFA0/PI*(
     . -1. + PI**2/3.D0 + 3./4.*XLE - 1./4.*XLE**2
     . +(1.-XLE)*DLOG(XME)                         )
      DVCM=2.*ALFA0/PI*QM**2*(
     . -1. + PI**2/3.D0 + 3./4.*XLM - 1./4.*XLM**2
     . +(1.-XLM)*DLOG(XMU)                         )
C
C CONSTANTS FOR THE BOX DIAGRAMS
      BOXC1=DLOG(ZS/XM2)
      DZ=DATAN(XMG/(XM2-S))
      IF(DZ.LT.0.D0) DZ=DZ+PI
      BOXC2=4.*ALFA0/PI*XMG/(S-XM2)*DZ*(-QM)
      XL2E=DLOG(2.*EB)
C
C CONSTANTS FOR THE SOFT BREMSSTRAHLUNG CONTRIBUTION
      DSC= - PI**2/6.D0*(1.+QM1**2) + XLE/2. + XLM/2.*QM1**2
     .     - XLE**2/4. - XLM**2/4.*QM1**2
     .     + ( XLE + XLM*QM1**2 - 1. -QM1**2 )*DLOG(2.*EB*XK0)
      BI=2.*ALFA0/PI*(XLE-1.)
      Z=1.-XM2/S
      G=XMG/S
      B0=Z**2+G**2
      BK0=(XK0-Z)**2+G**2
      FI=DATAN((XK0-Z)/G)-DATAN(-Z/G)
      BREMF1=(B0/Z-1.)/2.*DLOG(BK0/B0)-G/Z*FI
      BREMF2=(B0-1.)/2.*DLOG(BK0/B0)+(B0*(Z-2.)+Z)/G*FI
      BREMF3=(Z-1.)/2.*DLOG(BK0/B0)-G*FI
C
C PRINT RESULTS SO FAR
C     PRINT 1,    PI,  ALFA,     E,   XME,
C    .           XMU,   XLE,   XLM,    CV,
C    .            CA,     S,   XM2,   XMG,
C    .            ZS,   ZSI,   ZSR,OVRALL,
C    .           W1Q,   W1I,   W1R,   W2I,
C    .           W2R,  DVCE,  DVCM, BOXC1,
C    .            DZ, BOXC2,  XL2E,   DSC,
C    .            BI,     Z,     G,    B0,
C    .           BK0,    FI,BREMF1,BREMF2,
C    .        BREMF3,    RA, ALFA0,    E0
    1 FORMAT(' SETUPS :',4D15.6)
C
      RETURN
      ENTRY SIGSOF(C)
C
C THE CROSS SECTION D(SIGMA)/D(OMEGA) INCLUDING
C BORN TERMS, FULL ELECTROWEAK VIRTUAL CORRECTIONS
C AND SOFT PHOTON BREMSSTRAHLUNG
C
C THE THREE BORN CONTRIBUTIONS
      C2P1=1.+C*C
      SIGQ=W1Q*C2P1
      SIGI=W1I*C2P1+W2I*C
      SIGR=W1R*C2P1+W2R*C
C
C SIGMA'S FOR POLARISED ELECTRON BEAM
C
C C2P1 = 1 + C**2
C C = COS
C
       SIGIP = T1I*C2P1 + T2I*C
       SIGRP = T1R*C2P1 + T2R*C
C
C
C SOME FUNCTIONS FOR BOX DIAGRAMS
      C2=.5*(1.+C)
      S2=1.-C2
      T=-S*S2
      U=-S*C2
      CNIL=0.D0
      C4=C2*C2
      S4=S2*S2
      XLC=.5*DLOG(C2)
      XLS=.5*DLOG(S2)
      XLT=XLS-XLC
      XLC2=XLC*XLC
      XLS2=XLS*XLS
      DQGG=2.*ALFA0/PI*(-QMM0)*(
     . - 4.*XLT*XL2E -2./C2P1*(
     . C*(XLC2+XLS2) - C2*XLS + S2*XLC     )  )
      V1= -8.*XLT*XL2E -C*(XLC2/S4+XLS2/C4)
     .    +XLS/C2 - XLC/S2
      V2= 2.*XLT - .5*C*(XLS/C4+XLC/S4) - C/(2.-C2P1)
      A1= -C*(XLS2/C4-XLC2/S4)+XLS/C2+XLC/S2
      A2= -.5*C*(XLS/C4-XLC/S4) + 1./(2.-C2P1)
C BREAK DIGG INTO SYMMETRIC AND ANTISYMMETRIC PART OF 2 PHOTON BOX
      DIGG1=ALFA0/2./PI*(-QMM0)*(
     .  V1 - XMG/(S-XM2)*2.*PI*V2)
      DIGG2 =ALFA0/2./PI*(-QMM0)*(A1- XMG/(S-XM2)*2.*PI*A2)
      DZGZ=2.*ALFA0/PI*(-QMM0)*(
     . -2.*XLT*BOXC1 + 2.*(XLC2-XLS2)
     . + DILOG(S2) - DILOG(C2)             )
      DIGZ=.5*DZGZ + BOXC2*XLT
C NEED TWO MORE CROSS SECTIONS TO MAKE POLARIZATION EASIER
      SIGI2=.5D0*W2I*C2P1+2.D0*W1I*C
      SIGIP2=.5D0*T2I*C2P1+2.D0*T1I*C
C
C
C CONSTANTS FOR THE NONRESONANT  PHOTON-Z BOX PART UNPOLARIZED
      FNRES=-ALFA**2*ALFA0/8./PI
      XSTAR=S/DCMPLX(S-XM2,-XMG)
      FGPLS= 2.*( CV*CV1 + CA*CA1)
      FZPLS= 2.*XSTAR*((CV**2+CA**2)*(CV1**2+CA1**2)+ 4.*CV*CV1*CA*CA1)
      FGMIN=-2.*( CV*CV1 - CA*CA1)
      FZMIN=-2.*XSTAR*((CV**2+CA**2)*(CV1**2+CA1**2)- 4.*CV*CV1*CA*CA1)
C
C
C THE NONRESONATING PART OF  PHOTON-Z BOX UNPOLARIZED
      FSTU=(U-T-XM2)/U**2*(
     . CDLOG(DCMPLX(XM2-S,XMG)/XM2)*DLOG(-T/S)
     . + DILOG(1.+T/XM2) - DILOG(1.-S/XM2)     )
     . + 1./U*( (XM2/S-1.)*CDLOG(1.-S/XM2+CNIL) + DLOG(-T/XM2) )
      FSUT=(T-U-XM2)/T**2*(
     . CDLOG(DCMPLX(XM2-S,XMG)/XM2)*DLOG(-U/S)
     . + DILOG(1.+U/XM2) - DILOG(1.-S/XM2)     )
     . + 1./T*( (XM2/S-1.)*CDLOG(1.-S/XM2+CNIL) + DLOG(-U/XM2) )
      FSYM= .5D0*(FSTU*(1.+C)**2+FSUT*(1.-C)**2)
      FANTI=.5D0*(FSTU*(1.+C)**2-FSUT*(1.-C)**2)
      FGSYM= FGPLS+FGMIN
      FGANTI=FGPLS-FGMIN
      FZSYM= FZPLS+FZMIN
      FZANTI=FZPLS-FZMIN
      SIGNR=FNRES*(-QMM0)**2*DREAL(FGSYM*FSYM +FGANTI*FANTI)
     .        +FNRES*(-QMM0)*DREAL(FZSYM*FSYM +FZANTI*FANTI)
C
C THE BOX DIAGRAM CONTRIBUTION TO UNPOLARIZED CROSS SECTION
C
      SIGAAA=SIGQ*(DQGG)
     .      +SIGI*DIGG1 +SIGI2*DIGG2
     .      +SIGI*DIGZ
     .      +SIGR*DZGZ
     .      +SIGNR
C
C  THE NONRESONANT  PHOTON-Z BOX PART POLARIZED
      FGPLSP= 2.*( CA*CV1 + CV*CA1)
      FZPLSP=2.*XSTAR*((CV**2+CA**2)*(2.D0*CV1*CA1)
     .                +(2.D0*CV*CA)*(CV1**2+CA1**2))
      FGMINP=-2.*( CA*CV1 - CV*CA1)
      FZMINP=-2.*XSTAR*((CV**2+CA**2)*(-2.D0*CV1*CA1)
     .                +(2.D0*CV*CA)*(CV1**2+CA1**2))
      FGSYMP= FGPLSP+FGMINP
      FGANTP= FGPLSP-FGMINP
      FZSYMP= FZPLSP+FZMINP
      FZANTP= FZPLSP-FZMINP

      SIGNRP=FNRES*(-QMM0)**2*DREAL(FGSYMP*FSYM +FGANTP*FANTI)
     .        +FNRES*(-QMM0)*DREAL(FZSYMP*FSYM +FZANTP*FANTI)
C
C
C THE BOX DIAGRAM CONTRIBUTION TO POLARIZATION CROSS SECTION
      SIGAAP=0.D0
     .      +SIGIP*DIGG1 +SIGIP2*DIGG2
     .      +SIGIP*DIGZ
     .      +SIGRP*DZGZ
     .      +SIGNRP
C THE TOTAL CROSS SECTION FROM BOX DIAGRAMS WITH AT LEAST ONE PHOTON
      SIGAAA=SIGAAA-XPOL*SIGAAP
      SIGAAA=SIGAAA*TEST
C
C THE VERTEX CORRECTION
      DVC=DVCE+DVCM*TEST
C
C
C THE SOFT BREMSSTRAHLUNG AND VERTEX CONTRIBUTIONS UNPOLARIZED
      DS=2.*ALFA0/PI*(
     . DSC + 4.*XLT*(XL2E+DLOG(XKK0))*(-QM1)
     . + (-QM1)*( 2.*(XLS2-XLC2) + DILOG(C2) - DILOG(S2)  ) )
      BINT=4.*ALFA0/PI*XLT*(-QM1)
      SIGBBB=SIGQ*(DS+DVC)
     .      +SIGI*(DS+DVC+(BI+BINT)*(BREMF1))
     .      +SIGR*(DS+DVC+BI*BREMF2+BINT*BREMF3)
C
C POLARIZED BREMSTRAHLUNG AND VERTEX CONTRIBUTIONS
C
      SIGBBP=0.0
     .      +SIGIP*(DS+DVC+(BI+BINT)*(BREMF1))
     .      +SIGRP*(DS+DVC+BI*BREMF2+BINT*BREMF3)
C
C THE SOFT BREM AND VERTEX CROSS SECTION WITH POLARIZATION XPOL
      SIGBBB=SIGBBB-XPOL*SIGBBP
C
C
C THE RESULT SO FAR: INCLUDES SOFT BREM,VERTEX AND BOX PHOTONIC
      SIGFOT=SIGAAA+SIGBBB
C
C ADD THE PURELY WEAK CORRECTION AND THE VACUUM POLARIZATION
C
      SIGELW=WKCORS(C)
C
C THE FINAL RESULT
      SIGSOF=SIGFOT+SIGELW
      SIGSOF=SIGSOF*3.8937D+08
      IF(SIGSOF.GT.0.D0) RETURN
      PRINT 2,SIGSOF,C
    2 FORMAT(' SIGSOF : WARNING, NEGATIVE VALUE ',D15.6,
     .       '  AT C=',F20.10)
      RETURN
      END
      SUBROUTINE SETUPM(AMZ,AGZ,GV,GA,XMM,QMM,GV1,GA1,RA)
C
C SETUP FOR CALCULATION OF THE RADIATIVE MUON AMPLITUDE
C SIN2W = SIN**2 OF THE WEAK MIXING ANGLE
C AMZ = MASS OF THE Z0 IN GEV
C AGZ = WIDTH OF THE Z0 IN GEV
C GV = VECTOR COUPLING CONSTANT BETWEEN E AND Z0
C GA = AXIAL COUPLING CONSTANT BETWEEN E AND Z0
C XMM = MASS OF PRODUCED FERMION F (GEV)
C QMM = ITS CHARGE QUANTUM NUMBER (MUON=-1)
C GV1 = VECTOR COUPLING CONSTANT BETWEEN F AND Z0
C GA1 = AXIAL COUPLING CONSTANT BETWEEN F AND Z0
C RA = RENORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-U),COMPLEX*16(V-Z)
      REAL*8 WM,XMM,XD1
      DIMENSION PP(4),PM(4),QP(4),QM(4),QK(4)
      DIMENSION A(5),ZC(5),ZM(12)
      COMMON/INDAT/RDATIN(45)
C
C THE PHOTON-CUM-Z0 PROPAGATORS
C
      ZPP(S)=(-E*E1/S+EGPP/DCMPLX(S-AM2Z,AMGZ))*ROOT8
      ZPM(S)=(-E*E1/S+EGPM/DCMPLX(S-AM2Z,AMGZ))*ROOT8
      ZMP(S)=(-E*E1/S+EGMP/DCMPLX(S-AM2Z,AMGZ))*ROOT8
      ZMM(S)=(-E*E1/S+EGMM/DCMPLX(S-AM2Z,AMGZ))*ROOT8
C
C THE DEFINITION OF THE SPINOR PRODUCT
      ZS(I,J)=ZC(I)*A(J)-ZC(J)*A(I)
C
C PUT IN PARAMETER TO TURN OFF FINAL STATE RADIATION
      TEST=RDATIN(24)
C CALCULATE THE VARIOUS CONSTANTS
      ROOT8=DSQRT(8.D0)
      E0=DSQRT(4.*3.1415926536D0/137.036D0)
      E=DSQRT(4.*3.1415926536D0/137.036D0*RA)
      E10=QMM*E0*TEST
      E1=QMM*E
      AM2Z=AMZ**2
      AMGZ=AMZ*AGZ
      EGPP=(GV-GA)*(GV1-GA1)
      EGPM=(GV-GA)*(GV1+GA1)
      EGMP=(GV+GA)*(GV1-GA1)
      EGMM=(GV+GA)*(GV1+GA1)
C
C PRINT THE RESULTS SO FAR
C     PRINT 1,   AMZ,   AGZ,     E,    GA,
C    .            GV,  AM2Z,  AMGZ,    E3,
C    .           EG1,   EG2,   EG3,    E0
    1 FORMAT(' SETUPM :',4D14.6)
C
      RETURN
C
      ENTRY AMPLIT(PP,PM,QP,QM,QK,PPK,PMK,QPK,QMK,POL,WM,RESULT)
C
C CALCULATION OF THE AMPLITUDES FOR MASSLESS MOMENTA
C PP = INCOMING POSITRON
C PM = INCOMING ELECTRON
C QP = OUTGOING POSITIVE MUON
C QM = OUTGOING NEGATIVE MUON
C QK = BREMSSTRAHLUNG PHOTON
C
      A(1)=DSQRT(PP(4)-PP(1))
      A(2)=DSQRT(PM(4)-PM(1))
      A(3)=DSQRT(QP(4)-QP(1))
      A(4)=DSQRT(QM(4)-QM(1))
      A(5)=DSQRT(QK(4)-QK(1))
      ZC(1)=DCMPLX(PP(2),PP(3))/A(1)
      ZC(2)=DCMPLX(PM(2),PM(3))/A(2)
      ZC(3)=DCMPLX(QP(2),QP(3))/A(3)
      ZC(4)=DCMPLX(QM(2),QM(3))/A(4)
      ZC(5)=DCMPLX(QK(2),QK(3))/A(5)
C
C DEFINE THE NECESSARY SPINOR PRODUCTS
      X51=ZS(5,1)
      X25=ZS(2,5)
      X54=ZS(5,4)
      X35=ZS(3,5)
      X13=ZS(1,3)
      X12=ZS(1,2)
      X43=ZS(4,3)
      X42=ZS(4,2)
      X14=ZS(1,4)
      X32=ZS(3,2)
C
C DEFINE THE VECTOR PRODUCTS TO GIVE TO THE APPROXIMANTS
      PPK=.5*CDABS(X51)**2
      PMK=.5*CDABS(X25)**2
      QPK=.5*CDABS(X35)**2
      QMK=.5*CDABS(X54)**2
C
C DEFINE THE COMPONENTS OF THE INFRARED FACTORS
      V3=-DCONJG(X43)/(X51*X25)
      V4=-DCONJG(X12)/(X54*X35)
      V7=-DCONJG(V3)
      V8=-DCONJG(V4)
C
C DEFINE THE WELL-KNOWN INVARIANT MASSES
      S0= CDABS(X12)**2
      S1= CDABS(X43)**2
      T0=-CDABS(X13)**2
      T1=-CDABS(X42)**2
      U0=-CDABS(X14)**2
      U1=-CDABS(X32)**2
C
C DEFINE THE BOSON PROPAGATORS
C
      ZPPS1=ZPP(S1)
      ZPMS1=ZPM(S1)
      ZMPS1=ZMP(S1)
      ZMMS1=ZMM(S1)
      ZPPS0=ZPP(S0)
      ZPMS0=ZPM(S0)
      ZMPS0=ZMP(S0)
      ZMMS0=ZMM(S0)
C
C THE EFFECTIVE LONGITUDINAL POLARIZATION
      R=1.+QK(4)**2/(PP(4)*(PP(4)-QK(4)))
      POLEFF=POL*(1.-R*(1.-WM))/WM
      II=10
      XD1=1.D0
C
C
      CALL HISTO1(II,II,-XD1,XD1,POLEFF,XD1)
C
C DEFINE THE EIGHT HELICITY AMPLITUDES
C FOR THE MOMENT NO CORRECT OVERALL COMPLEX PHASES!
      ZM(1)= U0 *( E0*ZPPS1*V3 - E10*ZPPS0*V4 )
      ZM(2)= U1 *( E0*ZPPS1*V7 - E10*ZPPS0*V8 )
      ZM(3)= T0 *( E0*ZPMS1*V3 - E10*ZPMS0*V4 )
      ZM(4)= T1 *( E0*ZPMS1*V7 - E10*ZPMS0*V8 )
      ZM(5)= T1 *( E0*ZMPS1*V3 - E10*ZMPS0*V4 )
      ZM(6)= T0 *( E0*ZMPS1*V7 - E10*ZMPS0*V8 )
      ZM(7)= U1 *( E0*ZMMS1*V3 - E10*ZMMS0*V4 )
      ZM(8)= U0 *( E0*ZMMS1*V7 - E10*ZMMS0*V8 )
C DEFINE THE RESULTING CROSS SECTION
      RESULR=0.
      DO 102 I=1,4
      RESULR=RESULR+CDABS(ZM(I))**2
  102 CONTINUE
      RESULL=0.
      DO 103 I=5,8
      RESULL=RESULL+CDABS(ZM(I))**2
  103 CONTINUE
      RESULT=((1.+POLEFF)*RESULR+(1.-POLEFF)*RESULL)/4.
C
      RETURN
      END
      SUBROUTINE SETUPW(E,XMZ,XGZ,GV,GA,QMM,GV1,GA1,RA)
C
C SETUP FOR CALCULATING THE APPROXIMATIONS TO THE RADIATIVE
C CROSS SECTION.
C E = BEAM ENERGY IN GEV;
C XMZ = Z0 MASS IN GEV;
C XGZ = Z0 TOTAL WIDTH IN GEV;
C GV(GA) = (AXIAL-) VECTOR COUPLING BETWEEN ELECTRON AND Z0.
C QM = CHARGE QUANTUM NO. OF THE PRODUCED FERMION F (MUON=-1)
C GV1(GA1) = (AXIAL-) VECTOR COUPLING BETWEEN F AND Z0.
C RA = RENORMALIZATION FACTOR FOR ALFA(QED)
C
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION QP(4),QM(4),QK(4)
C
C THE BREIT-WIGNER PROPAGATOR
      B(X)=(X-XM2)**2+XMG2
C
C CONSTANTS
      S=4.*E**2
      S2=S**2
      G=(GV**2+GA**2)*(GV1**2+GA1**2)+4.*DABS(GV*GA*GV1*GA1)
      E2=4.*3.1415926536D0/137.036D0*RA
      E20=4.*3.1415926536D0/137.036D0
      XM2=XMZ**2
      XMG2=XMZ**2*XGZ**2
C
C THE CONSTANT FACTORS OF THE FOUR APPROXIMANTS
      F1=E2**2*E20*QMM**2
      F2=E20*G*S/B(S)*QMM**2
      F3=E20*G
      F4=0.D0
      EBEA=E
C
C PRINT THE RESULTS SO FAR
C     PRINT 1,     E,   XMZ,   XGZ,    GV,
C    .            GA,     S,    S2,    E2,
C    .             G,   XM2,  XMG2,    F1,
C    .            F2,    F3,    F4,   E20
    1 FORMAT(' SETUPW :',4D14.6)
      RETURN
      ENTRY APROXS(QP,QM,QK,PPK,PMK,QPK,QMK,A1,A2,A3,A4)
C
C CALCULATE THE FOUR APPROXIMATE CROSS SECTIONS
C QP = MOMENTUM OF THE OUTGOING POSITRON
C QM = MOMENTUM OF THE OUTGOING ELECTRON
C QK = MOMENTUM OF THE BREMSSTRAHLUNG PHOTON
C THE INCOMING POSITRON IS ALONG THE POSITIVE Z-AXIS.
C A1 : INITIAL-STATE RADIATION IN THE PHOTON S-CHANNEL
C A2 : FINAL-STATE RADIATION IN THE Z0 S-CHANNEL
C A3 : INITIAL-STATE RADIATION IN THE Z0 S-CHANNEL
C A4 : RADIATION IN THE PHOTON T-CHANNEL
      S1=S*(1.-QK(4)/EBEA)
      T =-2.*EBEA*(QP(4)-QP(3))
      T1=-2.*EBEA*(QM(4)+QM(3))
      SFAC=S2+S1**2
      A1=F1*SFAC/(S1*PPK*PMK)
      A2=F2*SFAC/(QPK*QMK)
      A3=F3*SFAC*S1/(B(S1)*PPK*PMK)
      A4=0.D0
      RETURN
      END
      SUBROUTINE HISTO1(IH,IB,X0,X1,X,W)
      IMPLICIT REAL*8(A-H,O-Z)
      LOGICAL*1 REGEL,BLANK,STAR
      DIMENSION H(20,50),HX(20),IO(20),IU(20),II(20)
      DIMENSION REGEL(30),Y0(20),Y1(20),IC(20)
      DATA REGEL / 30*1H /,BLANK /1H /,STAR /1H*/
      DATA H/1000*0.D0/,HX/20*0.D0/,IO/20*0/,IU/20*0/,II/20*0/
      Y0(IH)=X0
      Y1(IH)=X1
      IC(IH)=IB
      IF(X.LT.X0) GOTO 11
      IF(X.GT.X1) GOTO 12
      IX=IDINT((X-X0)/(X1-X0)*DFLOAT(IB))+1
      H(IH,IX)=H(IH,IX)+W
      IF(H(IH,IX).GT.HX(IH)) HX(IH)=H(IH,IX)
      II(IH)=II(IH)+1
      RETURN
   11 IU(IH)=IU(IH)+1
      RETURN
   12 IO(IH)=IO(IH)+1
      RETURN
      ENTRY HISTO2(IH,IL)
      XX0=Y0(IH)
      XX1=Y1(IH)
      IBB=IC(IH)
      HX(IH)=HX(IH)*(1.D0+1.D-06)
      IF(IL.EQ.0) PRINT 21, IH,II(IH),IU(IH),IO(IH)
      IF(IL.EQ.1) PRINT 22, IH,II(IH),IU(IH),IO(IH)
   21 FORMAT('0NO.',I3,' LIN : INSIDE,UNDER,OVER ',3I6)
   22 FORMAT('0NO.',I3,' LOG : INSIDE,UNDER,OVER ',3I6)
      IF(II(IH).EQ.0) GOTO 28
      PRINT 23
   23 FORMAT(35(1H ),3(10H----+----I))
      DO 27 IV=1,IBB
      Z=DFLOAT(IV)/DFLOAT(IBB)*(XX1-XX0)+XX0
      IF(IL.EQ.1) GOTO 24
      IZ=IDINT(H(IH,IV)/HX(IH)*30.)+1
      GOTO 25
   24 IZ=-1
      IF(H(IH,IV).GT.0.D0)
     .IZ=IDINT(DLOG(H(IH,IV))/DLOG(HX(IH))*30.)+1
   25 IF(IZ.GT.0.AND.IZ.LE.30) REGEL(IZ)=STAR
      PRINT 26, Z,H(IH,IV),(REGEL(I),I=1,30)
   26 FORMAT(1H ,2G15.6,4H   I,30A1,1HI)
      IF(IZ.GT.0.AND.IZ.LE.30) REGEL(IZ)=BLANK
   27 CONTINUE
      PRINT 23
      RETURN
   28 PRINT 29
   29 FORMAT('0 NO ENTRIES INSIDE HISTOGRAM')
      RETURN
      ENTRY HISTO3(IH)
C CLEAR HISTOGRAM AND RELATED QUANTITIES
      DO 31 I=1,50
   31 H(IH,I)=0.D0
      HX(IH)=0.D0
      II(IH)=0
      IU(IH)=0
      IO(IH)=0
      RETURN
      ENTRY HISTO4(IH)
C RENORMALIZE HISTOGRAM CONTENTS TO HAVE SUM 1
      SUMH=0.
      HX(IH)=0.
      DO 41 I=1,50
   41 SUMH=SUMH+H(IH,I)
      DO 42 I=1,50
      H(IH,I)=H(IH,I)/SUMH
   42 IF(H(IH,I).GT.HX(IH)) HX(IH)=H(IH,I)
      RETURN
      ENTRY HISTCL
C CLEARS THE HISTOGRAM VARIABLES
      DO 1000 I=1,20
      DO 1010 J=1,50
      H(I,J)=0.0D0
 1010 CONTINUE
      HX(I)=0.0D0
      IO(I)=0
      IU(I)=0
      II(I)=0
 1000 CONTINUE
      END
      FUNCTION RN(XDMY)
      REAL*4 RAN11,XDMY
C     DATA I/65539/
C     DATA C/Z39200000/
C     XDMY=XDMY
C     I=I*69069
C     IF(I.LE.0) I=I + 2147483647 + 1
C     J=I/256
C     RN=C*FLOAT(256*J)
      RN=RNDM(0)
      RETURN
      ENTRY RNCLR
      I=65539
      RETURN
      END
      SUBROUTINE SETUPB(EB,MZRE)
C*******************************
C  THIS SUBROUTINE INITIALIZES THE PARAMETERS REQUIRED FOR THE
C  ELECTROWEAK SECTOR AND CALCULATES COUPLINGS FOR QED PART
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 EB,MZRE
      COMMON/INDAT/RDATIN
      REAL*8 RDATIN(45)
C RDATIN(16)       TOP QUARK MASS
C RDATIN(11),(12)  T3E, QE
C RDATIN(13),(14)  T3M, QM
C RDATIN(15)       HIGGS MASS
C RDATIN(16)       TOP QUARK MASS
C RDATIN(17)       INGOING FERMION BEAM POLARIZATION
C RDATIN(18)       NUMBER FINAL STATE COLOURS
C RDATIN(19)       OUTGOING FERMION MASS
C RDATIN(20)       NUMBER OF TREE DIAGRAMS
C RDATIN(21)       NUMBER ONE LOOP ELECTRO-WEAK DIAGRAMS
      COMMON/SETUPC/ZWDTH0,GV,GA,XMM,QF,GV1,GA1,COLNUM,RALFA
      REAL*8 ZWDTH0,GV,GA,XMM,QF,GV1,GA1,COLNUM,RALFA
      COMMON/GAUSPM/S,POLN,T3E,QE,T3M,QM,MSOUT,NCOL,NDIAG0,NDIAGA
      REAL*8 S,POLN,T3E,QE,T3M,QM,MSOUT
      COMMON/ALFASC/ALFAST
      REAL*8 ALFAST
      REAL*8 CW,CWSQ,E,ESQ,MHIGGS,MTOP,PI,SW,SWSQ
      REAL*8 E2STRE,S2STRE,ZWIDRE
      COMPLEX*16 ALFQCD
      PI=3.141592653589793238462643D0
      S=4.D0*EB*EB
C  DEFINE PARAMETERS OF THE INGOING MASSLESS FERMIONS
      T3E=RDATIN(11)
      QE=RDATIN(12)
      POLN=RDATIN(17)
C  DEFINE PARAMETERS OF THE OUTGOING FERMIONS
      T3M=RDATIN(13)
      QM=RDATIN(14)
      QF=QM
      COLNUM=RDATIN(18)
      NCOL=COLNUM
      XMM=RDATIN(19)
      MSOUT=XMM
C  STORE NUMBER OF LOWEST ORDER AND ONE-LOOP DIAGRAMS
      NDIAG0=RDATIN(20)
      NDIAGA=RDATIN(21)
C  DEFINE HIGGS AND TOP MASSES
      MHIGGS=RDATIN(15)
      MTOP=RDATIN(16)
      CALL MASET(MZRE,MHIGGS,MTOP)
C=================================
C  CALCULATE STARRED QUATITIES AT MOMENTUM VALUE
      SWSQ=S2STRE(S)
      CWSQ=1.D0-SWSQ
      SW=DSQRT(SWSQ)
      CW=DSQRT(CWSQ)
      E=DSQRT(E2STRE(S))
C  CALCULATE (AXIAL) VECTOR COUPLINGS, ETC. FOR QED PART
      GV=E/(2.D0*SW*CW)*(T3E-2.D0*SWSQ*QE)
      GA=E/(2.D0*SW*CW)*T3E
      GV1=E/(2.D0*SW*CW)*(T3M-2.D0*SWSQ*QM)
      GA1=E/(2.D0*SW*CW)*T3M
      ZWDTH0=ZWIDRE(S)
      RALFA=137.03602D0*E*E/(4.D0*PI)
C  THE STRONG COUPLING
      ALFAST=DREAL(ALFQCD(DCMPLX(-S)))/PI
      RETURN
      END
      FUNCTION WKCORS(CSCAT)
C***************************
C  THIS FUNCTION RETURNS THE BORN + ONE-LOOP
C  CROSS-SECTION IN GEV (NO PHOTONIC GRAPHS)
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 CSCAT,WKCORS
C     POLX CONTAINS POLARISATION INFO FOR USE BY WKCORS
      COMMON/POLX/XPOL
      REAL*8 XPOL
      COMMON/GAUSPM/S,POLN,T3E,QE,T3M,QM,MSOUT,NCOL,NDIAG0,NDIAGA
      REAL*8 S,POLN,T3E,QE,T3M,QM,MSOUT
      REAL*8 XSECL,XSECR
      POLN=XPOL
      CALL MATELM(S,CSCAT,T3E,QE,T3M,QM)
C=======================================
      CALL HELAMP(S,CSCAT)
C=========================
      CALL XSGEV(S,CSCAT,MSOUT,NDIAG0,NDIAGA,XSECL,XSECR)
C========================================================
      WKCORS=DFLOAT(NCOL)
     C      *0.5D0*((1.D0-POLN)*XSECL+(1.D0+POLN)*XSECR)
      RETURN
      END
C=====================================================================
C  ALFA=FINE STRUCTURE CONSTANT 1/137.03602
C  MW,MZ=W&Z BOSON MASSES RESPECTIVELY
C  MH=THE HIGGS MASS
C  XLPT CONTAINS LEPTON MASSES & CHARGES
C  XQRK CONTAINS QUARK MASSES & CHARGES
C  NQRK,NLPT=NUMBER OF QUARK&LEPTON FLAVOURS RESPECTIVELY
C  SW,CW=SINE&COSINE OF THE WEAK MIXING ANGLE RESPECTIVELY
C  S=SQUARE OF THE 4-MOMENTUM TRANSFER
C  QE,T3E=CHARGE&WEAK ISOSPIN OF THE IN-COMING FERMION
C  QM,T3M=CHARGE&WEAK ISOSPIN OF THE OUT-GOING FERMION
C  NCOL=NUMBER OF COLOURS OF OUT GOING FERMION
C  CSCAT=COSINE OF THE SCATTERING ANGLE
C  NDIAG0,NDIAGA=NUMBER OF LOWEST ORDER & FIRST ORDER DIAGRAMS TO BE
C                IN THE CALCULATION OF CROSS-SECTIONS. NORMALLY 2, 11.
C  POLN=INGOING FERMION BEAM POLARIZATION
C  MSOUT=MASS OF THE OUTGOING FERMION
C=======================================================================
      SUBROUTINE MASET(MZED,MHIGGS,MTOP)
C***************************************
C  INITIALIZES OR ALTERS MZ, MH, AND MTOP. MW IS ADJUSTED ACCORDINGLY
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 MZED,MHIGGS,MTOP
      COMMON/FERMAS/NLPT,NQRK,XLPT,XQRK
      REAL*8 XLPT(40,2),XQRK(40,2)
      COMMON/PRMGSW/ALFA,GMU,MW,MZ,MH
      REAL*8 ALFA,GMU,MW,MZ,MH
      REAL*8 QUP,QDOWN
      ALFA=1.D0/137.03602D0
      GMU=1.16632D-5
      MZ=MZED
      MH=MHIGGS
      NLPT=6
      NQRK=6
      QUP=2.D0/3.D0
      QDOWN=-1.D0/3.D0
C  ELECTRON NEUTRINO MASS AND CHARGE
      XLPT(1,1) = 0.D0
      XLPT(1,2) = 0.D0
C  ELECTRON MASS AND CHARGE
      XLPT(2,1) = 0.511D-03
      XLPT(2,2) = -1.D0
C  MUON NEUTRINO MASS AND CHARGE
      XLPT(3,1) = 0.D0
      XLPT(3,2) = 0.D0
C  MUON MASS AND CHARGE
      XLPT(4,1) = 0.105D0
      XLPT(4,2) = -1.D0
C  TAU NEUTRINO MASS AND CHARGE
      XLPT(5,1) = 0.D0
      XLPT(5,2) = 0.D0
C  TAU MASS AND CHARGE
      XLPT(6,1) = 1.78D0
      XLPT(6,2) = -1.D0
C  UP QUARK MASS AND CHARGE
      XQRK(1,1) = 0.3D0
      XQRK(1,2) = QUP
C  DOWN QUARK MASS AND CHARGE
      XQRK(2,1) = 0.3D0
      XQRK(2,2) = QDOWN
C  CHARMED QUARK MASS AND CHARGE
      XQRK(3,1) = 1.5D0
      XQRK(3,2) = QUP
C  STRANGE QUARK MASS AND CHARGE
      XQRK(4,1) = 0.7D0
      XQRK(4,2) = QDOWN
C  TOP QUARK MASS AND CHARGE
      XQRK(5,1) = MTOP
      XQRK(5,2) = QUP
C  BOTTOM QUARK MASS AND CHARGE
      XQRK(6,1) = 4.5D0
      XQRK(6,2) = QDOWN
      CALL WMASET
C================
      RETURN
      END
      SUBROUTINE WMASET
C**********************
C SETS W MASS TO A VALUE CONSISTENT WITH THE MEASURED MUON LIFETIME
      IMPLICIT LOGICAL (A-H,O-Z)
      COMMON/FERMAS/NLPT,NQRK,XLPT,XQRK
      REAL*8 XLPT(40,2),XQRK(40,2)
      COMMON/PRMGSW/ALFA,GMU,MW,MZ,MH
      REAL*8 ALFA,GMU,MW,MZ,MH
      REAL*8 A0SQ,CWSQ,ESQ,FC,GSU2SQ,GMURUN,
     C       MWSQ,MWSQ0,MZSQ,PI,PISQ,SWSQ,
     C       PIAAP,PIZAP,XSC
      REAL*8 E2STRE,GMSTRE,MPAARE,MPZARE,S2STRE
      MZSQ=MZ*MZ
      PI=3.141592653589793238462643D0
      PISQ=PI*PI
      A0SQ=ALFA*PI/(DSQRT(2.D0)*GMU)
C  CALCULATE LOWEST ORDER APPROXIMATION TO MW FROM MUON LIFE-TIME
      MWSQ=MZSQ*(1.D0+DSQRT(1.D0-4.D0*A0SQ/MZSQ))/2.D0
C  ITERATE TO FIND SELF CONSISTENT VALUE OF MW, SWSQ
10    MWSQ0=MWSQ
      MW=DSQRT(MWSQ)
      ESQ=E2STRE(MWSQ)
      SWSQ=S2STRE(MWSQ)
      CWSQ=1.D0-SWSQ
      GSU2SQ=ESQ/SWSQ
      GMURUN=GMSTRE(MWSQ)
      PIZAP=-MPZARE(MWSQ)
      PIAAP=-MPAARE(MWSQ)
      FC=-DSQRT(CWSQ/SWSQ)*PIAAP*PIZAP
      MWSQ=GSU2SQ/(4.D0*DSQRT(2.D0)*GMURUN)/(1+FC)
      IF(DABS(MWSQ/MWSQ0-1.D0).GT.1.D-13)GO TO 10
      MW=DSQRT(MWSQ)
      RETURN
      END
      SUBROUTINE MATELM(S,CSCAT,T3E,QE,T3M,QM)
C*********************************************
C  S = SQUARE OF MOMENTUM TRANSFER. CAN BE + OR - BUT BELOW 2 BOSON
C      PRODUCTION THRESHOLD. THIS RESTRICTION WILL DISAPPEAR EVENTUALLY
C  CSCAT = COSINE OF THE SCATTTERING ANGLE
C  T3E, QE = WEAK T3 AND CHARGE OF INCOMING PARTICLE
C  T3M, QM = WEAK T3 AND CHARGE OF OUTGOING PARTICLE
C  THIS SUBROUTINE CALCULATES THE MATRIX ELEMENTS FOR THE PROCESS
C  AND STORES THE "BORN" GRAPHS IN ARRAY COUP0 AND ONE-LOOP GRAPHS IN
C  IN ARRAY COUPA AS FOLLOWS.
C  COUP(N,1),COUP(N,2) = EFFECTIVE LEFT, RIGHT HELICITY FERMION
C                        COUPLING OF VERTEX FOR INCOMING PARTICLE
C                        IN UNITS OF ELECTRIC CHARGE
C  COUP(N,3),COUP(N,4) = EFFECTIVE LEFT, RIGHT HELICITY FERMION
C                        COUPLING OF VERTEX FOR OUTGOING  PARTICLE
C                        IN UNITS OF ELECTRIC CHARGE
C  COUP(N,5) = S*(EFFECTIVE PROPAGATOR CONTRIBUTION TO MATRIX ELEMENT)
C  WARNING!!!! THE SUBROUTINE ASSUMES THAT ONLY S,MZ,MH,MT & CSCAT
C              VARY INDEPENDENTLY E.G. MW CANNOT VARY ALONE WHILE ALL
C              ALL THESE STAY FIXED.
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S,CSCAT,T3E,QE,T3M,QM
      COMMON/FERMAS/NLPT,NQRK,XLPT,XQRK
      REAL*8 XLPT(40,2),XQRK(40,2)
      COMMON/PRMGSW/ALFA,GMU,MW,MZ,MH
      REAL*8 ALFA,GMU,MW,MZ,MH
      COMMON/COUP/COUP0,COUPA
      COMPLEX*16 COUP0(40,5),COUPA(40,5)
      REAL*8 ALESQ,ALMSQ,ARESQ,ARMSQ,BLE,BLM,BRE,BRM,
     C       CCNSTA,CCNSTZ,CSCAT0,CW,CWSQ,
     C       E,ESQ,FN,GAMMAZ,GMURUN,GPISQ,GSU2,GSU2SQ,
     C       MH0,MT0,MWSQ,MZSQ,MZ0,
     C       PI,PISQ,PISQ6,PIAAP,PIZAP,
     C       RHORUN,SW,SWSQ,S0,T,U,WCOUP,XSC
      COMPLEX*16 APROP,BV,BW,BZ,BZT,BZU,CLG,
     C           CW123,CW124,CZT124,CZU124,DW,DZT,DZU,
     C           RHOMW,RHOMZ,XLMW,
     C           X1,X2,ZAPROP,ZPROP
      COMPLEX*16 B0,CDLN,D0,RHO,SP,XLMDA
      REAL*8 E2STRE,GMSTRE,MPAARE,MPZARE,RHSTRE,S2STRE,ZWIDRE
      LOGICAL MOVE1,MOVE2
      DATA S0,CSCAT0,MZ0,MH0,MT0/0.D0,2.D0,3*-1.D0/
C  ZERO ARRAYS COUP0 AND COUPA IF FIRST CALL TO SUBROUTINE MATELM
      IF(CSCAT0.EQ.2.D0)THEN
        DO 10 I=1,40
          DO 10 J=1,5
            COUP0(I,J)=(0.D0,0.D0)
10          COUPA(I,J)=(0.D0,0.D0)
      END IF
      MOVE1=S.NE.S0.OR.
     C      MZ.NE.MZ0.OR.
     C      MH.NE.MH0.OR.
     C      XQRK(5,1).NE.MT0
      MOVE2=CSCAT.NE.CSCAT0
      IF(MOVE1)THEN
C==================
      S0=S
      MZ0=MZ
      MH0=MH
      MT0=XQRK(5,1)
C  SQUARE MASSES REQUIRED
      MWSQ=MW*MW
      MZSQ=MZ*MZ
C  DEFINE STARRED QUANTITIES AT CURRENT MOMENTUM VALUE
      SWSQ=S2STRE(S)
      CWSQ=1.D0-SWSQ
      SW=DSQRT(SWSQ)
      CW=DSQRT(CWSQ)
      ESQ=E2STRE(S)
      E=DSQRT(ESQ)
      GSU2SQ=ESQ/SWSQ
      GSU2=DSQRT(GSU2SQ)
      RHORUN=RHSTRE(S)
      GMURUN=GMSTRE(S)
      GAMMAZ=ZWIDRE(S)
      PIZAP=-MPZARE(S)
      PIAAP=-MPAARE(S)
C  CALCULATE LEFT AND RIGHT COUPLINGS TO Z FOR INGOING PARTICLE
      BLE=GSU2*(T3E-QE*(SWSQ+(0.D0,1.D0)*SW*CW*PIZAP))/CW
      BRE=GSU2*(-QE*(SWSQ+(0.D0,1.D0)*SW*CW*PIZAP))/CW
C  CALCULATE LEFT AND RIGHT COUPLINGS TO Z FOR OUTGOING PARTICLE
      BLM=GSU2*(T3M-QM*(SWSQ+(0.D0,1.D0)*SW*CW*PIZAP))/CW
      BRM=GSU2*(-QM*(SWSQ+(0.D0,1.D0)*SW*CW*PIZAP))/CW
C  CALCULATE EFFECTIVE Z AND A PROPAGATORS
      FN=PIZAP**2+(SWSQ-CWSQ)/(SW*CW)*PIZAP*PIAAP
      ZPROP=S/(S*(1.D0+FN)
     C             -(GSU2SQ/CWSQ)/(4.D0*DSQRT(2.D0)*GMURUN*RHORUN)
     C             +(0.D0,1.D0)*DSQRT(DABS(S))*GAMMAZ)
      APROP=S/(S*(1.D0+(0.D0,1.D0)*PIAAP))
C  ENTER COUPLING CONSTANTS FOR Z EXCHANGE
      COUP0(1,1)=BLE
      COUP0(1,2)=BRE
      COUP0(1,3)=BLM
      COUP0(1,4)=BRM
      COUP0(1,5)=ZPROP
C  ENTER COUPLING CONSTANTS FOR PHOTON EXCHANGE
      COUP0(2,1)=QE*E
      COUP0(2,2)=QE*E
      COUP0(2,3)=QM*E
      COUP0(2,4)=QM*E
      COUP0(2,5)=APROP
C  VERTEX CORRECTIONS
      PI=3.141592653589793238462643D0
      PISQ=PI*PI
      CCNSTA=E*GSU2SQ/(16.D0*PISQ)
      CCNSTZ=CCNSTA/SW
      RHOMZ=RHO(S,DCMPLX(MZSQ))
      RHOMW=RHO(S,DCMPLX(MWSQ))
      XLMW=XLMDA(S,DCMPLX(MWSQ))
C>>>>>>>NOTE; THE MOMENTUM ARGUEMENT OF B0 IS NEGATIVE FOR<<<<<<<<
C>>>>>>>      TIME-LIKE MOMENTA                           <<<<<<<<
      BV=B0(DCMPLX(-S),DCMPLX(MWSQ),DCMPLX(MWSQ),DCMPLX(MWSQ))
C  Z BOSON EXCHANGE WITH RENORMALIZED ELECTRON VERTEX
      COUPA(1,1)=CCNSTZ*(RHOMZ*((T3E-QE*SWSQ)/CW)**3
     C                  +RHOMW*(T3E-QE*SWSQ)/(2.D0*CW)
     C                  -(2.D0*BV+RHOMW+XLMW)*CW*T3E)
      COUPA(1,2)=CCNSTZ*RHOMZ*(-QE*SWSQ/CW)**3
      COUPA(1,3)=BLM
      COUPA(1,4)=BRM
      COUPA(1,5)=ZPROP
C  Z BOSON EXCHANGE WITH RENORMALIZED MUON VERTEX
      COUPA(2,1)=BLE
      COUPA(2,2)=BRE
      COUPA(2,3)=CCNSTZ*(RHOMZ*((T3M-QM*SWSQ)/CW)**3
     C                  +RHOMW*(T3M-QM*SWSQ)/(2.D0*CW)
     C                  -(2.D0*BV+RHOMW+XLMW)*CW*T3M)
      COUPA(2,4)=CCNSTZ*RHOMZ*(-QM*SWSQ/CW)**3
      COUPA(2,5)=ZPROP
C  PHOTON EXCHANGE WITH RENORMALIZED ELECTRON VERTEX
      COUPA(3,1)=CCNSTA*(RHOMZ*QE*((T3E-QE*SWSQ)/CW)**2
     C                  +RHOMW*QE/2.D0
     C                  -(2.D0*BV+RHOMW+XLMW)*T3E)
      COUPA(3,2)=CCNSTA*RHOMZ*QE*(QE*SWSQ/CW)**2
      COUPA(3,3)=QM*E
      COUPA(3,4)=QM*E
      COUPA(3,5)=APROP
C  PHOTON EXCHANGE WITH RENORMALIZED MUON VERTEX
      COUPA(4,1)=QE*E
      COUPA(4,2)=QE*E
      COUPA(4,3)=CCNSTA*(RHOMZ*QM*((T3M-QM*SWSQ)/CW)**2
     C                  +RHOMW*QM/2.D0
     C                  -(2.D0*BV+RHOMW+XLMW)*T3M)
      COUPA(4,4)=CCNSTA*RHOMZ*QM*(QM*SWSQ/CW)**2
      COUPA(4,5)=APROP
      END IF
C===========
      IF(MOVE1.OR.MOVE2)THEN
C===========================
      CSCAT0=CSCAT
C  BOX DIAGRAMS (VALID BELOW 2 BOSON PRODUCTION THRESHOLD)
      T=-0.5D0*S*(1.D0-CSCAT)
      U=-0.5D0*S*(1.D0+CSCAT)
      PI=3.141592653589793238462643D0
      PISQ=PI*PI
      PISQ6=PI*PI/6.D0
      XSC=MWSQ
C  W-BOX DIAGRAM
      WCOUP=GSU2SQ/(4.D0*PI)
      CALL QDRT(DCMPLX(S),-DCMPLX(S),DCMPLX(MWSQ),X1,X2)
C=======================================================
      CLG=CDLN(-X2,(1.D0,0.D0))-CDLN(X1,(1.D0,0.D0))
      BW=-CDLN(DCMPLX(-T/XSC),(-1.D0,0.D0))
     C   -B0(-DCMPLX(S),DCMPLX(MWSQ),DCMPLX(MWSQ),DCMPLX(XSC))
     C   +2.D0
      CW123=-CLG*CLG/S
      CW124=(SP(1.D0+DCMPLX(T/MWSQ),(1.D0,0.D0))-PISQ6)/T
      DW=D0(S,T,DCMPLX(MWSQ))
      COUPA(5,1)=WCOUP
      COUPA(5,2)=0.D0
      COUPA(5,3)=WCOUP
      COUPA(5,4)=0.D0
      COUPA(5,5)=-(0.5D0/T*BW
     C           +CW123
     C           -(1.D0+MWSQ/T)*CW124
     C           +0.5D0*(T+MWSQ)**2/T*DW)*S
C  Z-BOX DIAGRAMS
      GPISQ=GSU2SQ/(2.D0*PI)
      ALESQ=GPISQ*(T3E-SWSQ*QE)*(T3E-SWSQ*QE)/CWSQ
      ARESQ=GPISQ*(-SWSQ*QE)*(-SWSQ*QE)/CWSQ
      ALMSQ=GPISQ*(T3M-SWSQ*QM)*(T3M-SWSQ*QM)/CWSQ
      ARMSQ=GPISQ*(-SWSQ*QM)*(-SWSQ*QM)/CWSQ
      BZ=B0(-DCMPLX(S),DCMPLX(MZSQ),DCMPLX(MZSQ),DCMPLX(XSC))
      BZT=-CDLN(DCMPLX(-T/XSC),(-1.D0,0.D0))+2.D0-BZ
      CZT124=(SP(DCMPLX(1.D0+T/MZSQ),(1.D0,0.D0))-PISQ6)/T
      DZT=D0(S,T,DCMPLX(MZSQ))
      BZU=-CDLN(DCMPLX(-U/XSC),(-1.D0,0.D0))+2.D0-BZ
      CZU124=(SP(DCMPLX(1.D0+U/MZSQ),(1.D0,0.D0))-PISQ6)/U
      DZU=D0(S,U,DCMPLX(MZSQ))
      COUPA(6,1)=ALESQ
      COUPA(6,2)=0.D0
      COUPA(6,3)=ALMSQ
      COUPA(6,4)=0.D0
      COUPA(6,5)=-(-0.5D0*U*DZU
     C            +0.5D0/T*BZT
     C            -(1.D0+MZSQ/T)*CZT124
     C            +0.5D0*(T+MZSQ)**2/T*DZT)*S
      COUPA(7,1)=0.D0
      COUPA(7,2)=ARESQ
      COUPA(7,3)=0.D0
      COUPA(7,4)=ARMSQ
      COUPA(7,5)=COUPA(6,5)
      COUPA(8,1)=ALESQ
      COUPA(8,2)=0.D0
      COUPA(8,3)=0.D0
      COUPA(8,4)=ARMSQ
      COUPA(8,5)=-(0.5D0*T*DZT
     C            -0.5D0/U*BZU
     C            +(1.D0+MZSQ/U)*CZU124
     C            -0.5D0*(U+MZSQ)**2/U*DZU)*S
      COUPA(9,1)=0.D0
      COUPA(9,2)=ARESQ
      COUPA(9,3)=ALMSQ
      COUPA(9,4)=0.D0
      COUPA(9,5)=COUPA(8,5)
      END IF
C===========
      RETURN
      END
      SUBROUTINE HELAMP(S,CSCAT)
C*******************************
C  CONVERTS THE ARRAYS COUP0 AND COUPA INTO ARRAYS HAMP0 AND HAMPA
C  CONTAINING HELICITY AMPLITUDES
C  HELAMP(N,1,1) CONTAINS THE +,+ AMPLITUDE FOR THE N-TH DIAGRAM
C  HELAMP(N,1,2) CONTAINS THE +,- AMPLITUDE FOR THE N-TH DIAGRAM
C  HELAMP(N,2,1) CONTAINS THE -,+ AMPLITUDE FOR THE N-TH DIAGRAM
C  HELAMP(N,2,2) CONTAINS THE -,- AMPLITUDE FOR THE N-TH DIAGRAM
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S,CSCAT
      COMMON/COUP/COUP0,COUPA
      COMPLEX*16 COUP0(40,5),COUPA(40,5)
      COMMON/HAMP/HAMP0,HAMPA
      COMPLEX*16 HAMP0(40,2,2),HAMPA(40,2,2)
      REAL*8 FACPP,FACPM
      FACPP=CSCAT+1.D0
      FACPM=CSCAT-1.D0
      DO 10 I=1,40
      HAMP0(I,1,1)=FACPP*COUP0(I,2)*COUP0(I,4)*COUP0(I,5)/S
      HAMP0(I,1,2)=FACPM*COUP0(I,2)*COUP0(I,3)*COUP0(I,5)/S
      HAMP0(I,2,1)=FACPM*COUP0(I,1)*COUP0(I,4)*COUP0(I,5)/S
10    HAMP0(I,2,2)=FACPP*COUP0(I,1)*COUP0(I,3)*COUP0(I,5)/S
      DO 20 I=1,40
      HAMPA(I,1,1)=FACPP*COUPA(I,2)*COUPA(I,4)*COUPA(I,5)/S
      HAMPA(I,1,2)=FACPM*COUPA(I,2)*COUPA(I,3)*COUPA(I,5)/S
      HAMPA(I,2,1)=FACPM*COUPA(I,1)*COUPA(I,4)*COUPA(I,5)/S
20    HAMPA(I,2,2)=FACPP*COUPA(I,1)*COUPA(I,3)*COUPA(I,5)/S
      RETURN
      END
      SUBROUTINE XSGEV(S,CSCAT,MSOUT,NDIAG0,NDIAGA,XSECL,XSECR)
C**************************************************************
C  CALCULATES LEFT-HAND AND RIGHT-HAND POLARIZED CROSS-SECTIONS IN GEV
C  FROM HELICITY AMPLITUDES.
C  S = SQUARE OF MOMENTUM TRANSFER
C  CSCAT = COSINE OF SCATTERING ANGLE
C  MSOUT = MASS OF THE OUTGOING FERMION
C  NDIAG0, NDIAGA = NUMBER "BORN", ONE-LOOP DIAGRAMS TO BE INCLUDED
C  FOR 2, 11 ALL DIAGRAMS ARE INCLUDED
C      1, 0   "BORN" Z-EXCHANGE ONLY IS INCLUDED
C      2, 0   "BORN" GRAPHS ARE ONLY INCLUDED
C      2, 4   "BORN", WEAK PROPAGATOR AND VERTEX CORRECTIONS INCLUDED
C  THE QUATITIES MLL,MLR,MRL,MRR ARE THE MATRIX ELEMENTS THAT APPEAR
C  IN SLAC-PUB-3725 EXCEPT FOR A FACTOR:
C   (CSCAT+1)/S FOR MLL, MRR ;(CSCAT-1)/S FOR MLR, MRL
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S,CSCAT,MSOUT,XSECL,XSECR
      COMMON/PRMGSW/ALFA,GMU,MW,MZ,MH
      REAL*8 ALFA,GMU,MW,MZ,MH
      COMMON/HAMP/HAMP0,HAMPA
      COMPLEX*16 HAMP0(40,2,2),HAMPA(40,2,2)
      REAL*8 PI,PISQ,XSECLL,XSECLR,XSECRL,XSECRR
      COMPLEX*16 MRR0,MRL0,MLR0,MLL0,MRRA,MRLA,MLRA,MLLA
      PI=3.141592653589793238462643D0
      PISQ=PI*PI
C  CALCULATE SUMS OF LOWEST ORDER HELICITY AMPLITUDES
      MRR0=(0.D0,0.D0)
      MRL0=(0.D0,0.D0)
      MLR0=(0.D0,0.D0)
      MLL0=(0.D0,0.D0)
      DO 10 I=1,NDIAG0
        MRR0=MRR0+HAMP0(I,1,1)
        MRL0=MRL0+HAMP0(I,1,2)
        MLR0=MLR0+HAMP0(I,2,1)
10      MLL0=MLL0+HAMP0(I,2,2)
C  CALCULATE SUMS OF FIRST ORDER CORRECTIONS TO HELICITY AMPLITUDES
      MRRA=(0.D0,0.D0)
      MRLA=(0.D0,0.D0)
      MLRA=(0.D0,0.D0)
      MLLA=(0.D0,0.D0)
      DO 20 J=1,NDIAGA
        MRRA=MRRA+HAMPA(J,1,1)
        MRLA=MRLA+HAMPA(J,1,2)
        MLRA=MLRA+HAMPA(J,2,1)
20      MLLA=MLLA+HAMPA(J,2,2)
C  CALCULATE CROSS SECTIONS
C        XSECLL=CDABS(MLL0)**2+2.D0*DREAL(MLL0*DCONJG(MLLA))
C        XSECLR=CDABS(MLR0)**2+2.D0*DREAL(MLR0*DCONJG(MLRA))
C        XSECRL=CDABS(MRL0)**2+2.D0*DREAL(MRL0*DCONJG(MRLA))
C        XSECRR=CDABS(MRR0)**2+2.D0*DREAL(MRR0*DCONJG(MRRA))
        XSECLL=CDABS(MLL0+MLLA)**2
        XSECLR=CDABS(MLR0+MLRA)**2
        XSECRL=CDABS(MRL0+MRLA)**2
        XSECRR=CDABS(MRR0+MRRA)**2
        XSECL=XSECLL+XSECLR
        XSECR=XSECRL+XSECRR
C  NORMALIZE CROSS-SECTIONS TO GEV
      XSECL=XSECL*S/(128.D0*PISQ)
      XSECR=XSECR*S/(128.D0*PISQ)
      RETURN
      END
C=======================================================================
C=======================================================================
C
C THESE FUNCTIONS CALCULATE FORM FACTORS FOR BOX DIAGRAMS AND VERTICES
C      AS WELL AS ONE-PARTICLE-IRREDUCIBLE SELF ENERGIES FOR THE
C                  GLASHOW-SALAM-WEINBERG MODEL
C
C=======================================================================
      FUNCTION D0(S,T,MSQ)
C*************************
C  D0 FORM-FACTOR (ASSOCIATED WITH BOX DIAGRAMS) VALID BELOW THRESHOLD
C  S, T = USUAL MANDELSTAM VARIABLES
C  MSQ = SQUARED MASS OF INTERNAL HEAVY BOSONS
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S,T
      COMPLEX*16 D0
      COMPLEX*16 MSQ
      COMPLEX*16 THRES,X,Y
      COMPLEX*16 SP
      THRES=4.D0*MSQ/S
      X=CDSQRT(1.D0-THRES)
      Y=CDSQRT(1.D0-THRES*(1.D0+MSQ/T))
      D0=SP((Y+1.D0)/(Y-X),(1.D0,0.D0))
     C  -SP((Y-1.D0)/(Y-X),(1.D0,0.D0))
     C  +SP((Y+1.D0)/(Y+X),(1.D0,0.D0))
     C  -SP((Y-1.D0)/(Y+X),(1.D0,0.D0))
      D0=DREAL(-2.D0*D0/(S*T*Y))
      RETURN
      END
      FUNCTION RHO(S,MSQ)
C************************
C  RENORMALIZED MASSLESS FERMION VERTEX FORM FACTOR ASSOCIATED WITH
C  THE VERTEX GRAPH CONTAINING A SINGLE VIRTUAL HEAVY BOSON
C  S = SQUARE OF EXTERNAL BOSON MOMENTUM
C  MSQ = SQUARE OF MASS OF INTERNAL VIRTUAL BOSON
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S
      COMPLEX*16 MSQ,RHO
      COMPLEX*16 BETA,CLG,PISQ6
      COMPLEX*16 CDLN,SP
      PISQ6=(1.6449340668482264D0,0.D0)
      BETA=-MSQ/S
      CLG=CDLN(BETA,(1.D0,0.D0))
      RHO=CLG+0.5D0
     C   +(2.D0*BETA-4.D0)*(CLG+1.D0)
     C   -2.D0*(1.D0-BETA)**2*(PISQ6-SP(1.D0-1.D0/BETA,(1.D0,0.D0)))
      RETURN
      END
      FUNCTION XLMDA(S,MSQ)
C**************************
C  RENORMALIZED MASSLESS FERMION VERTEX FORM FACTOR ASSOCIATED WITH THE
C  VERTEX GRAPH CONTAINING 2 IDENTICAL HEAVY BOSONS
C  S = SQUARE OF EXTERNAL BOSON MOMENTUM
C  MSQ = SQUARE OF MASS OF INTERNAL VIRTUAL BOSONS
      IMPLICIT LOGICAL (A-H,O-Z)
      REAL*8 S
      COMPLEX*16 MSQ,XLMDA
      COMPLEX*16 BETA,CLG,X1,X2
      COMPLEX*16 CDLN,SP
      BETA=-MSQ/S
      CALL QDRT(DCMPLX(S),-DCMPLX(S),MSQ,X1,X2)
C==============================================
      CLG=CDLN(-X2,(1.D0,0.D0))-CDLN(X1,(1.D0,0.D0))
      XLMDA=(1.D0-2.D0*BETA)*(X1-X2)*CLG
     C     +(4.D0-2.D0*BETA)*BETA*CLG**2
     C     -2.D0*BETA-2.5D0
      RETURN
C=======================================================================
C=======================================================================
      END
C=======================================================================
C=======================================================================
C
C  COMPLEX FUNCTIONS THAT TAKE ACCOUNT OF THE I*EPSILON PRESCRIPTION
C              TO CALCULATE ANALYTIC STRUCTURE
C
C=======================================================================
      FUNCTION CDLN(X,A)
C***********************
C  COMPLEX LOGARITHM OF X+I*REAL(A) WHERE A IS AN INFINITESIMAL
      IMPLICIT LOGICAL (A-H,O-Z)
      COMPLEX*16 A,X,CDLN
      COMPLEX*16 PI
      PI=(3.141592653589793238462643D0,0.D0)
      IF(DIMAG(X).EQ.0.D0.AND.DREAL(X).LE.0.D0)THEN
        CDLN=CDLOG(-X)+(0.D0,1.D0)*PI*DSIGN(1.D0,DREAL(A))
      ELSE
        CDLN=CDLOG(X)
      END IF
      IF(DIMAG(CDLN).GT.DREAL(PI))CDLN=CDLN-(0.D0,1.D0)*PI
      IF(DIMAG(CDLN).LT.DREAL(-PI))CDLN=CDLN+(0.D0,1.D0)*PI
      RETURN
      END
      SUBROUTINE QDRT(A,B,C,R1,R2)
C*********************************
C  ROOTS OF THE QUADRATIC A*X**2+B*X+C=0 WITH REAL(R1)>REAL(R2)
      IMPLICIT LOGICAL (A-H,O-Z)
      COMPLEX*16 A,B,C,R1,R2
      COMPLEX*16 CNT,DIS
      CNT=-B/(2.D0*A)
      DIS=CDSQRT(CNT*CNT-C/A)
      DIS=DIS*DCMPLX(DSIGN(1.D0,DREAL(DIS)))
      R1=CNT+DIS
      R2=CNT-DIS
      RETURN
      END
      FUNCTION SP(Y,E)
C*********************
C  SPENCE FUNCTION OF Y+I*REAL(E) WHERE E IS AN INFINITESIMAL
      IMPLICIT LOGICAL (A-H,O-Z)
      COMPLEX*16 Y,E,SP
      REAL *8 B(9),FACT
      COMPLEX*16 A,CLN,PISQ6,PROD,TERM,X,Z,ZSQ
      COMPLEX*16 CDLN
      B(1)=1.D0/6.D0
      B(2)=-1.D0/30.D0
      B(3)=1.D0/42.D0
      B(4)=B(2)
      B(5)=5.D0/66.D0
      B(6)=-691.D0/2730.D0
      B(7)=7.D0/6.D0
      B(8)=-3617.D0/510.D0
      B(9)=43867.D0/798.D0
      PISQ6=(1.6449340668482264D0,0.D0)
      I1=0
      I2=0
      X=Y
      A=E
      IF(X.EQ.1.D0)THEN
        SP=PISQ6
        RETURN
      END IF
C  IF X LIES OUTSIDE THE UNIT CIRCLE THEN EVALUATE SP(1/X)
      IF(CDABS(X).GT.1.D0)THEN
        X=1.D0/X
        A=-A
        I1=1
      END IF
C  IF REAL(X)>1/2 THEN EVALUATE SP(1-X)
      IF(DREAL(X).GT.0.5D0)THEN
        X=1.D0-X
        A=-A
        I2=1
      END IF
C  EVALUATE SERIES FOR SP(X)
      Z=-CDLN(1.D0-X,-A)
      ZSQ=Z*Z
      SP=Z-ZSQ/4.D0
      PROD=Z
      FACT=1.D0
      DO 10 J=2,18,2
        FACT=FACT*DCMPLX(DBLE((J+1)*J))
        PROD=PROD*ZSQ
        TERM=B(J/2)/FACT*PROD
        SP=SP+TERM
        IF(CDABS(TERM/SP).LT.1.D-20)GO TO 20
10      CONTINUE
C  ADD APPROPRIATE LOGS TO OBTAIN SPENCE FUNCTION OF ORIGINAL ARGUEMENT
20    IF(I2.EQ.1)THEN
        SP=-SP+PISQ6-CDLN(X,A)*CDLN(1.D0-X,-A)
        X=1.D0-X
        A=-A
      END IF
      IF(I1.EQ.1)THEN
        CLN=CDLN(-X,-A)
        SP=-SP-PISQ6-CLN*CLN/2.D0
      END IF
      RETURN
C=======================================================================
C=======================================================================
      END
C*********** SSTAR PREPARED FOR INTEGRATION INTO BREMMUS *************

C   GLASHOW-SALAM-WEINBERG RENORMALIZATION SCHEME-INVARIANT PARAMETERS
C
C   CALCULATED BY B.W.LYNN AND D.C.KENNEDY
C   BASED ON RADIATIVE CORRECTIONS BY B.W.LYNN AND R.G.STUART
C   CODED BY D.C.KENNEDY 10/1/86
C
C   MAIN PROGRAM. INPUT AND DEFINITION OF FIXED PARAMETERS.
C   OUTPUTS SINE-STAR, E-STAR, GMU-STAR, RHO-STAR.  ALL MASSES
C   IN GEV.  N.B.: S=Q2=-MZSQ AT Z POLE!
C   BUFFER BLOCK: INTERFACE TO BREMMUS
      FUNCTION E2STRE(SR)
C  E2STAR CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 E2STRE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL E2STAR: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      E2STRE=DREAL(E2STAR(S))
      RETURN
      END
      FUNCTION S2STRE(SR)
C  S2STAR CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 S2STRE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL S2STAR: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      S2STRE=DREAL(S2STAR(S))
      RETURN
      END
      FUNCTION GMSTRE(SR)
C  GMUSTR CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 GMSTRE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL GMUSTR: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      GMSTRE=DREAL(GMUSTR(S))
      RETURN
      END
      FUNCTION RHSTRE(SR)
C  RHOSTR CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 RHSTRE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL RHOSTR: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      RHSTRE=DREAL(RHOSTR(S))
      RETURN
      END
      FUNCTION MPAARE(SR)
C  MPIAAP CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 MPAARE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL MPIAAP: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      MPAARE=DREAL(MPIAAP(S))
      RETURN
      END
      FUNCTION MPZARE(SR)
C  MPIZAP CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 MPZARE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL MPIZAP: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      MPZARE=DREAL(MPIZAP(S))
      RETURN
      END
      FUNCTION ZWIDRE(SR)
C  ZWIDTH CONVERTED TO REAL FUNCTION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      REAL*8 ZWIDRE,SR
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/PRMGSW/ALFAR,GMUR,MWR,MZR,MHR
      REAL*8 ALFAR,GMUR,MWR,MZR,MHR
      COMMON/FERMAS/NLPT,NQRK,XLPTR,XQRKR
      REAL*8 XLPTR(40,2),XQRKR(40,2)
C  EXTERNAL ENTRY: INITIALIZE
      RHOTRE=(1.D0,0.D0)
      XSC=(100.D0)**2
      PI=(3.141592653589793238462643D0,0.D0)
      NGEN=INT(NQRK/2)
      QCD=1
      DQQ=1
      D3Q=0
      MIX=0
C  EXTERNAL ENTRY: CONVERT PARAMETERS TO COMPLEX
      DO 10 I=1,NQRK
        XQRK(I,1)=DCMPLX(XQRKR(I,1)*XQRKR(I,1))
        IF(XQRKR(I,1).EQ.0.D0)XQRK(I,1)=(0.D0,0.D0)
        XQRK(I,2)=DCMPLX(XQRKR(I,2))
        IF(XQRKR(I,2).EQ.0.D0)XQRK(I,2)=(0.D0,0.D0)
   10 CONTINUE
      DO 20 I=1,NLPT
        XLPT(I,1)=DCMPLX(XLPTR(I,1)*XLPTR(I,1))
        IF(XLPTR(I,1).EQ.0.D0)XLPT(I,1)=(0.D0,0.D0)
        XLPT(I,2)=DCMPLX(XLPTR(I,2))
        IF(XLPTR(I,2).EQ.0.D0)XLPT(I,2)=(0.D0,0.D0)
   20 CONTINUE
      MWSQ=DCMPLX(MWR*MWR)
      MZSQ=DCMPLX(MZR*MZR)
      MHSQ=DCMPLX(MHR*MHR)
      ALFA=DCMPLX(ALFAR)
      GMU=DCMPLX(GMUR)
      CWSQ=MWSQ/MZSQ
      SWSQ=1.D0-CWSQ
C   COMPUTES NEW GMU = GMUSTAR(0) WITH NON-ABELIAN BOXES AND VERTICES
      DELVER=(ALFA/(2.D0*PI*SWSQ))
     C      *(3.D0-(CWSQ-3.D0*(CWSQ/SWSQ))*CDLOG(CWSQ))
      DELBOX=-(ALFA/(8.D0*PI))
     C      *(5.D0*(CWSQ/SWSQ)**2-3.D0)*CDLOG(CWSQ)
      GMU=GMU/(1.D0+DELVER+DELBOX)
C  CALL ZWIDTH: CONVERT TO REAL
      S=-DCMPLX(SR)
      IF(SR.EQ.0.D0)S=(0.D0,0.D0)
      ZWIDRE=DREAL(ZWIDTH(S))
      RETURN
      END
C   B BLOCK: DEFINES PRIMITIVE B FORM FACTORS
      FUNCTION B(N,S,M1SQ,M2SQ,XSC)
C  GENERATES -B0,B1,-B21 FOR N=1,2,3
C  M2SQ IS EXTERNALLY ARRANGED TO BE NON-ZERO USING IDENTITIES
C  FOR SWITCHING MASS ARGUEMENTS IN THE B'S
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      XN=DCMPLX(DFLOAT(N))
      IF(S.NE.0.D0)THEN
        RS=1.D0/S
        CALL QDRT(-S,S+M2SQ-M1SQ,M1SQ,X1,X2)
        B=(CDLN(-S/XSC,(-1.D0,0.D0))+FPLN(N,X1,-RS)+FPLN(N,X2,RS))/XN
        IF(DREAL(S).GE.-DREAL(CDSQRT(M1SQ)+CDSQRT(M2SQ))**2)B=DREAL(B)
        RETURN
      END IF
      B=CDLN(M2SQ/XSC,(-1.D0,0.D0))/XN
      IF(M1SQ.NE.M2SQ)THEN
        RMD=1.D0/(M1SQ-M2SQ)
        B=B+F(N,M1SQ*RMD,-RMD)/XN
      END IF
      B=DREAL(B)
      RETURN
      END
      FUNCTION FPLN(N,X,A)
C  EVALUATES F(N,X+I*REAL(A))+LOG(X+I*REAL(A)), WHERE A IS INFINI-
C  TESIMAL, TAKING ACCOUNT OF STRONG NUMERICAL CANCELLATION
C  NEAR X=1 AND X=0
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      PI=3.141592653589793238462643D0
      IF(CDABS(X-1.D0).GE.5.D-2.AND.CDABS(X).GE.5.D-2)THEN
        FPLN=CDLN(1.D0-X,-A)+F(N,X,A)
        RETURN
      END IF
      PROD=1.D0
      FPLN=-1.D0/DCMPLX(DFLOAT(N))
      DO 10 I=1,N-1
        PROD=PROD*X
10      FPLN=FPLN-PROD/DCMPLX(DFLOAT(N-I))
      IF(CDABS(X-1.D0).LT.1.D-20)THEN
        FPLN=FPLN-(0.D0,1.D0)*PI*DSIGN(1.D0,DREAL(A))
        RETURN
      ENDIF
      IF(CDABS(X).LT.1.D-20)RETURN
      XN=PROD*X
      FPLN=FPLN+(1.D0-XN)*CDLN(1.D0-X,-A)+XN*CDLN(-X,-A)
      RETURN
      END
      FUNCTION F(N,X,A)
C  EVALUATES THE FUNCTION F(N,X+i*REAL(A)) WHERE A IS AN INFINITESIMAL
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
C  IF ABS(X)<4, F IS EVALUATED DIRECTLY IN TERMS OF LOGARITHMS
C  OTHERWISE, F IS EVALUATED AS A SERIES
      IF(CDABS(X).LE.4.D0)THEN
        PROD=1.D0
        F=-1.D0/DCMPLX(DFLOAT(N))
        IF(CDABS(X).LT.1.D-08)RETURN
        DO 10 I=1,N-1
          PROD=PROD*X
10        F=F-PROD/DCMPLX(DFLOAT(N-I))
        F=F-PROD*X*CDLN(1.D0-1.D0/X,A)
      ELSE
        PROD=X
        M=N+1
        F=1.D0/(M*X)
20        PROD=PROD*X
          M=M+1.D0
          TERM=1.D0/(M*PROD)
          F=F+TERM
        IF(CDABS(TERM/F).GT.1.D-20)GO TO 20
      END IF
      RETURN
      END
      FUNCTION B0(S,M1SQ,M2SQ,XSC)
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      IF(M2SQ.NE.0.D0)THEN
        B0=-B(1,S,M1SQ,M2SQ,XSC)
      ELSE
        B0=-B(1,S,M2SQ,M1SQ,XSC)
      END IF
      RETURN
      END
      FUNCTION B1(S,M1SQ,M2SQ,XSC)
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      IF(M2SQ.NE.0.D0)THEN
        B1=B(2,S,M1SQ,M2SQ,XSC)
      ELSE
        B1=B(1,S,M2SQ,M1SQ,XSC)-B(2,S,M2SQ,M1SQ,XSC)
      END IF
      RETURN
      END
      FUNCTION B3(S,M1SQ,M2SQ,XSC)
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      IF(M2SQ.NE.0.D0)THEN
        B3=B(2,S,M1SQ,M2SQ,XSC)-B(3,S,M1SQ,M2SQ,XSC)
      ELSE
        B3=B(2,S,M2SQ,M1SQ,XSC)-B(3,S,M2SQ,M1SQ,XSC)
      END IF
      RETURN
      END
C   QCD BLOCK: DEFINES QCD CORRECTION FACTORS
      FUNCTION ALFQCD(S)
C  RS-INVARIANT RUNNING QCD COUPLING
C  REVIEW OF PARTICLE PROPERTIES, PHYS. LETT. 170B, APRIL 1986
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      COMPLEX*16 LAMBDA
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      IF(S.EQ.0.D0)THEN
        ALFQCD=0.D0
        RETURN
      ENDIF
      ABS=CDABS(S)
C  LAMBDA IS QCD SCALE PARAMETER, SET TO 300 MEV
      LAMBDA=(0.300D0)**2
C  USE THREE LIGHT QUARK FLAVORS; TEST FOR THRESHOLD OF HEAVY QUARKS
      NFLAV=3
      MCHRM2=XQRK(3,1)
      MTOP2=XQRK(5,1)
      MBTTM2=XQRK(6,1)
      IF(DREAL(S).LT.-4.D0*DREAL(MCHRM2))NFLAV=4
      IF(DREAL(S).LT.-4.D0*DREAL(MBTTM2))NFLAV=5
      IF(DREAL(S).LT.-4.D0*DREAL(MTOP2))NFLAV=6
      NFAC1=33-2*NFLAV
      NFAC2=6*(153-19*NFLAV)
      FACLOG=CDLOG(ABS/LAMBDA)
C  ALFAC1 IS SECOND-ORDER RUNNING COUPLING
      ALFAC1=(12.D0*PI)/(DCMPLX(DFLOAT(NFAC1))*FACLOG)
      TEMP1=DCMPLX(DFLOAT(NFAC2/NFAC1**2))
      TEMP2=CDLOG(FACLOG)/FACLOG
C  ALFAC2 CONVERTS ALFAC1 TO FOURTH-ORDER
      ALFAC2=1.D0-TEMP1*TEMP2
      ALFQCD=ALFAC1*ALFAC2
      RETURN
      END
C   PI BLOCK: DEFINES PROPER SELF-ENERGIES
      FUNCTION OPI33T(S)
C  ONE-PARTICLE IRREDUCIBLE 33 BOSON SELF-ENERGY: TRANSVERSE
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  BOSONIC CONTRIBUTIONS
      BOPI33=-0.25D0*(4.D0*B3(S,MZSQ,MHSQ,XSC)+B0(S,MZSQ,MHSQ,XSC))
     C      +(2.D0/3.D0)-9.D0*B3(S,MWSQ,MWSQ,XSC)
     C      +(7.D0/4.D0)*B0(S,MWSQ,MWSQ,XSC)
C  LEPTONIC CONTRIBUTIONS
      FOPI33=0.D0
      DO 10 I=1,2*NGEN
        DT3SQ=(1.D0/2.D0)**2
        MSQ=XLPT(I,1)
        QSQ=XLPT(I,2)*XLPT(I,2)
        IF(S.EQ.0.D0.AND.MSQ.EQ.0.D0)GO TO 10
        VEC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        AXI=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        FOPI33=FOPI33+2.D0*DT3SQ*
     C        (DREAL(2.D0*B3(S,MSQ,MSQ,XSC))
     C        +(0.D0,1.D0)*(VEC+AXI)*DIMAG(B3(S,MSQ,MSQ,XSC)))
10    CONTINUE
C  QUARK CONTRIBUTIONS
      QOPI33=0.D0
      DO 20 I=1,2*NGEN
        DT3SQ=(1.D0/2.D0)**2
        QSQ=XQRK(I,2)*XQRK(I,2)
        MSQ=XQRK(I,1)
        IF(S.EQ.0.D0.AND.MSQ.EQ.0.D0)GO TO 20
C  QCD CORRECTIONS TO VECTOR AND AXIAL COUPLINGS
        IF(QCD.EQ.1)THEN
          VEC=(1.D0+ALFQCD(S)/PI)*(1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI))
          AXI=(1.D0+ALFQCD(S)/PI)*(1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          VEC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
          AXI=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        QOPI33=QOPI33+2.D0*DT3SQ*
     C        (DREAL(2.D0*B3(S,MSQ,MSQ,XSC))
     C        +(0.D0,1.D0)*(VEC+AXI)*DIMAG(B3(S,MSQ,MSQ,XSC)))
20    CONTINUE
      OPI33T=(BOPI33+FOPI33+3.D0*QOPI33)/(16.D0*PI**2)
      RETURN
      END
      FUNCTION OPI33L(S)
C  ONE-PARTICLE IRREDUCIBLE 33 BOSON SELF-ENERGY: LONGITUDINAL
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  BOSONIC CONTRIBUTIONS
      BOPI33=MZSQ*B0(S,MZSQ,MHSQ,XSC)-2.D0*MWSQ*B0(S,MWSQ,MWSQ,XSC)
     C      +0.25D0*(MZSQ-MHSQ)*(2.D0*B1(S,MZSQ,MHSQ,XSC)
     C                          +B0(S,MZSQ,MHSQ,XSC))
C  LEPTONIC CONTRIBUTIONS
      FOPI33=0.D0
      DO 10 I=1,2*NGEN
        DT3SQ=(1.D0/2.D0)**2
        MSQ=XLPT(I,1)
        QSQ=XLPT(I,2)*XLPT(I,2)
        IF(S.EQ.0.D0.AND.MSQ.EQ.0.D0)GO TO 10
        AXI=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        FOPI33=FOPI33-2.D0*DT3SQ*MSQ*
     C        (DREAL(B0(S,MSQ,MSQ,XSC))
     C        +(0.D0,1.D0)*AXI*DIMAG(B0(S,MSQ,MSQ,XSC)))
10    CONTINUE
C  QUARK CONTRIBUTIONS
      QOPI33=0.D0
      DO 20 I=1,2*NGEN
        DT3SQ=(1.D0/2.D0)**2
        MSQ=XQRK(I,1)
        IF(S.EQ.0.D0.AND.MSQ.EQ.0.D0)GO TO 20
C  QCD CORRECTIONS TO VECTOR AND AXIAL COUPLINGS
        IF(QCD.EQ.1)THEN
          AXI=(1.D0+ALFQCD(S)/PI)*(1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          AXI=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        QOPI33=QOPI33-2.D0*DT3SQ*MSQ*
     C        (DREAL(B0(S,MSQ,MSQ,XSC))
     C        +(0.D0,1.D0)*AXI*DIMAG(B0(S,MSQ,MSQ,XSC)))
20    CONTINUE
      OPI33L=(BOPI33+FOPI33+3.D0*QOPI33)/(16.D0*PI**2)
      RETURN
      END
      FUNCTION OPI11T(S)
C  ONE-PARTICLE IRREDUCIBLE 11 BOSON SELF-ENERGY: TRANSVERSE
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      ZERO=0.D0
C  BOSONIC CONTRIBUTIONS
      BOPI11=-B3(S,MWSQ,MZSQ,XSC)-0.25D0*B0(S,MWSQ,MZSQ,XSC)
     C +SWSQ*(-8.D0*B3(S,MWSQ,ZERO,XSC)+2.D0*B0(S,MWSQ,ZERO,XSC))
     C +CWSQ*(-8.D0*B3(S,MWSQ,MZSQ,XSC)+2.D0*B0(S,MWSQ,MZSQ,XSC))
     C      -0.25D0*(4.D0*B3(S,MWSQ,MHSQ,XSC)+B0(S,MWSQ,MHSQ,XSC))
     C      +(2.D0/3.D0)
C  LEPTONIC CONTRIBUTIONS
      FOPI11=0.D0
      DO 10 I=1,2*NGEN-1,2
        M1SQ=XLPT(I,1)
        M2SQ=XLPT(I+1,1)
        Q1SQ=XLPT(I,2)*XLPT(I,2)
        Q2SQ=XLPT(I+1,2)*XLPT(I+1,2)
        IF(S.EQ.0.D0.AND.M1SQ.EQ.0.D0.AND.M2SQ.EQ.0.D0)GO TO 10
        QEDFAC=1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI)
        FOPI11=FOPI11+2.D0*
     C        (DREAL(B3(S,M1SQ,M2SQ,XSC))
     C        +(0.D0,1.D0)*QEDFAC*DIMAG(B3(S,M1SQ,M2SQ,XSC)))
10    CONTINUE
C  QUARK CONTRIBUTIONS
      QOPI11=0.D0
      DO 20 I=1,2*NGEN-1,2
        M1SQ=XQRK(I,1)
        M2SQ=XQRK(I+1,1)
        Q1SQ=XQRK(I,2)*XQRK(I,2)
        Q2SQ=XQRK(I+1,2)*XQRK(I+1,2)
        IF(S.EQ.0.D0.AND.M1SQ.EQ.0.D0.AND.M2SQ.EQ.0.D0)GO TO 20
C  CKM MIXING FOR FIRST THREE GENERATIONS INCLUDED
C  PERTURBATIVE QCD CORRECTIONS INCLUDED FOR LIGHT QUARKS
        IF(QCD.EQ.1)THEN
          QCDFAC=(1.D0+ALFQCD(S)/PI)*
     C          (1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          QCDFAC=1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        IF(I.LE.6.AND.MIX.EQ.1)THEN
          DO 15 J=1,3
            M1SQ=XQRK(I,1)
            M2SQ=XQRK(2*J,1)
            QOPI11=QOPI11
     C            +CKM(INT((I+1)/2),J)*QCDFAC*
     C             2.D0*B3(S,M1SQ,M2SQ,XSC)
15        CONTINUE
        ELSE
          QOPI11=QOPI11+2.D0*
     C          (DREAL(B3(S,M1SQ,M2SQ,XSC))
     C          +(0.D0,1.D0)*QCDFAC*DIMAG(B3(S,M1SQ,M2SQ,XSC)))
        ENDIF
20    CONTINUE
      OPI11T=(BOPI11+FOPI11+3.D0*QOPI11)/(16.D0*PI**2)
      RETURN
      END
      FUNCTION OPI11L(S)
C  ONE-PARTICLE IRREDUCIBLE 11 BOSON SELF-ENERGY: LONGITUDINAL
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      ZERO=0.D0
C  BOSONIC CONTRIBUTIONS
      BOPI11=0.25D0*(MWSQ-MHSQ)*(2.D0*B1(S,MWSQ,MHSQ,XSC)
     C                          +B0(S,MWSQ,MHSQ,XSC))
     C      +MWSQ*B0(S,MWSQ,MHSQ,XSC)
     C      +(MZSQ-3.D0*MWSQ)*B0(S,MWSQ,MZSQ,XSC)
     C +SWSQ*2.D0*MWSQ*(2.D0*B1(S,MWSQ,ZERO,XSC)+B0(S,MWSQ,ZERO,XSC))
     C -CWSQ*2.D0*MZSQ*SWSQ*(2.D0*B1(S,MWSQ,MZSQ,XSC)
     C                      +B0(S,MWSQ,MZSQ,XSC))
     C      -0.25D0*MZSQ*SWSQ*(2.D0*B1(S,MWSQ,MZSQ,XSC)
     C                        +B0(S,MWSQ,MZSQ,XSC))
C  LEPTONIC CONTRIBUTIONS
      FOPI11=0.D0
      DO 10 I=1,2*NGEN-1,2
        M1SQ=XLPT(I,1)
        M2SQ=XLPT(I+1,1)
        Q1SQ=XLPT(I,2)*XLPT(I,2)
        Q2SQ=XLPT(I+1,2)*XLPT(I+1,2)
        QEDFAC=1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI)
        IF(S.EQ.0.D0.AND.M1SQ.EQ.0.D0.AND.M2SQ.EQ.0.D0)GO TO 10
        FOPI11=FOPI11
     C        +M2SQ*(DREAL(B1(S,M1SQ,M2SQ,XSC))
     C              +(0.D0,1.D0)*QEDFAC*DIMAG(B1(S,M1SQ,M2SQ,XSC)))
     C        +M1SQ*(DREAL(B1(S,M2SQ,M1SQ,XSC))
     C              +(0.D0,1.D0)*QEDFAC*DIMAG(B1(S,M2SQ,M1SQ,XSC)))
10    CONTINUE
C  QUARK CONTRIBUTIONS
      QOPI11=0.D0
      DO 20 I=1,2*NGEN-1,2
        M1SQ=XQRK(I,1)
        M2SQ=XQRK(I+1,1)
        Q1SQ=XQRK(I,2)*XQRK(I,2)
        Q2SQ=XQRK(I+1,2)*XQRK(I+1,2)
        IF(S.EQ.0.D0.AND.M1SQ.EQ.0.D0.AND.M2SQ.EQ.0.D0)GO TO 20
C  CKM MIXING FOR FIRST THREE GENERATIONS INCLUDED
C  PERTURBATIVE QCD CORRECTIONS INCLUDED FOR LIGHT QUARKS
        IF(QCD.EQ.1)THEN
          QCDFAC=(1.D0+ALFQCD(S)/PI)*
     C           (1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          QCDFAC=1.D0+((Q1SQ+Q2SQ)/2.D0)*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        IF(I.LE.6.AND.MIX.EQ.1)THEN
          DO 15 J=1,3
            M1SQ=XQRK(I,1)
            M2SQ=XQRK(2*J,1)
            QOPI11=QOPI11
     C            +CKM(INT((I+1)/2),J)*QCDFAC*
     C             (M2SQ*B1(S,M1SQ,M2SQ,XSC)
     C             +M1SQ*B1(S,M2SQ,M1SQ,XSC))
15        CONTINUE
        ELSE
          QOPI11=QOPI11
     C          +M2SQ*(DREAL(B1(S,M1SQ,M2SQ,XSC))
     C                +(0.D0,1.D0)*QCDFAC*DIMAG(B1(S,M1SQ,M2SQ,XSC)))
     C          +M1SQ*(DREAL(B1(S,M2SQ,M1SQ,XSC))
     C                +(0.D0,1.D0)*QCDFAC*DIMAG(B1(S,M2SQ,M1SQ,XSC)))
        ENDIF
20    CONTINUE
      OPI11L=(BOPI11+FOPI11+3.D0*QOPI11)/(16.D0*PI**2)
      RETURN
      END
      FUNCTION OPIQQP(S)
C     ONE-PARTICLE IRREDUCIBLE QQ SELF-ENERGY: TRANSVERSE
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     .      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C     BOSONIC CONTRIBUTION
      BOPIQQ=-12.D0*B3(S,MWSQ,MWSQ,XSC)
     .      +B0(S,MWSQ,MWSQ,XSC)
     .      +(2.D0/3.D0)
C     WRITE(6,'('' in OPIQQP BOPIQQ='',1P,2D18.10)') BOPIQQ
C     LEPTONIC CONTRIBUTION
      FOPIQQ=0.D0
      DO 10 I=1,2*NGEN
        QSQ=XLPT(I,2)*XLPT(I,2)
        MSQ=XLPT(I,1)
        QEDFAC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        IF(QSQ.NE.0.D0)FOPIQQ=FOPIQQ+8.D0*QSQ*
     .                        (DREAL(B3(S,MSQ,MSQ,XSC))
     .                        +(0.D0,1.D0)*QEDFAC*
     .                        DIMAG(B3(S,MSQ,MSQ,XSC)))
  10  CONTINUE
C  QUARK CONTRIBUTION
      QOPIQQ=0.D0
      DO 20 I=1,2*NGEN
        Q=XQRK(I,2)
        QSQ=Q*Q
        MSQ=XQRK(I,1)
        IF(Q.EQ.0.D0)GO TO 20
C  HEAVY QUARK CONTIBUTIONS CALCULATED PERTURBATIVELY
C  PERTURBATIVE QCD CORRECTIONS INCLUDED
        IF(QCD.EQ.1)THEN
          QCDFAC=(1.D0+ALFQCD(S)/PI)*(1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          QCDFAC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        IF(I.EQ.5.OR.I.GT.6)THEN
          QOPIQQ=QOPIQQ+8.D0*QSQ*
     C          (DREAL(B3(S,MSQ,MSQ,XSC))
     C          +(0.D0,1.D0)*QCDFAC*DIMAG(B3(S,MSQ,MSQ,XSC)))
        ENDIF
20    CONTINUE
      OPIQQP=(BOPIQQ+FOPIQQ+3.D0*QOPIQQ)/(16.D0*PI**2)
C     ADD THE UDSCB QUARK CONTRIBUTION USING HADRQQ DISPERSION INTEGRAL
C  WARNING: THE SCALE DEPENDENCE (XSC) IS NOW ABSENT FOR THE LIGHT
C           QUARKS. IN PRACTICE THIS IS NO PROBLEM PROVIDED FINITE
C           QUANTITIES ARE CALCULATED THAT ARE FORMED THE DIFFERENCE
C           OF OPIQQP EVALUATED AT DIFFERENT SCALES.
      OPIQQP=OPIQQP+HADRQQ(S)
      END
      FUNCTION HADRQQ(S)
C     parametrize the real part of the photon self energy function
C     by  a + b ln(1+C*|S|) , as in my 1981 TASSO note but using
C     updated values, extended using RQCD up to 100 TeV
C               H.Burkhardt, August 1988
C     for details see:
C     H.Burkhardt, F.Jegerlehner, G.Penso and C.Verzegnassi
C     in CERN Yellow Report on "Polarization at LEP" 1988
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16 HADRQQ,S
C
      DATA A1,B1,C1/   0.0   ,   0.00835,  1.0   /
      DATA A2,B2,C2/   0.0   ,   0.00238,  3.927 /
      DATA A3,B3,C3/ 0.00165 ,   0.003  ,  1.0   /
      DATA A4,B4,C4/ 0.00221 ,   0.00293,  1.0   /
C
      DATA PI/3.141592653589793/,ALFAIN/137.03602D0/,INIT/0/
C
      IF(INIT.EQ.0) THEN
        INIT=1
        ALFA=1./ALFAIN
      ENDIF
      T=ABS(S)
      IF(T.LT.0.3**2) THEN
        REPIAA=A1+B1*LOG(1.+C1*T)
      ELSEIF(T.LT.3.**2) THEN
        REPIAA=A2+B2*LOG(1.+C2*T)
      ELSEIF(T.LT.100.**2) THEN
        REPIAA=A3+B3*LOG(1.+C3*T)
      ELSE
        REPIAA=A4+B4*LOG(1.+C4*T)
      ENDIF
C     as imaginary part take -i alfa/3 Rexp
      HADRQQ=REPIAA-(0.,1.)*ALFA/3.*REXP(-S)
      HADRQQ=HADRQQ/(4.D0*PI*ALFA)
C     WRITE(6,'('' my HADRQQ('',1P,2D18.10,'')='',2D18.10)') S,HADRQQ
      END

      FUNCTION REXP(S)
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16 S
C     continuum R = Ai+Bi W ,  this + resonances was used to calculate
C     the dispersion integral. Used in the imag part of HADRQQ
      PARAMETER (NDIM=18)
      DIMENSION WW(NDIM),RR(NDIM),AA(NDIM),BB(NDIM)
      DATA WW/1.,1.5,2.0,2.3,3.73,4.0,4.5,5.0,7.0,8.0,9.,10.55,
     .  12.,50.,100.,1000.,10 000.,100 000./
      DATA RR/0.,2.3,1.5,2.7,2.7,3.6,3.6,4.0,4.0,3.66,3.66,3.66,
     .   4.,3.87,3.84, 3.79, 3.76,    3.75/
      DATA INIT/0/
      IF(INIT.EQ.0) THEN
        INIT=1
C       calculate A,B from straight lines between R measurements
        BB(NDIM)=0.
        DO 4 I=1,NDIM
          IF(I.LT.NDIM) BB(I)=(RR(I)-RR(I+1))/(WW(I)-WW(I+1))
          AA(I)=RR(I)-BB(I)*WW(I)
    4   CONTINUE
      ENDIF
      REXP=0.D0
      W=REAL(SQRT(S))
      IF(W.GT.WW(1)) THEN
        DO 2 I=1,NDIM
C         find out between which points of the RR array W is
          K=I
          IF(I.LT.NDIM) THEN
            IF(W.LT.WW(I+1)) GOTO 3
          ENDIF
    2   CONTINUE
    3   CONTINUE
        REXP=AA(K)+BB(K)*W
C       WRITE(6,'('' K='',I2,'' AA='',F10.2,'' BB='',F10.3)')
C    .  K,AA(K),BB(K)
      ENDIF
C     WRITE(6,'('' my REXP  ('',1P,D18.10,'')='',1D18.10)') W,REXP
      END

      FUNCTION HADR3Q(S)
C  HADRONIC IRREDUCIBLE 3Q MIXING: TRANSVERSE
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      REAL*8 AB
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  DISPERSION RELATION: H. BURKHARDT, TASSO NOTE NO. 192, 1981
C  REVISED AUGUST 1988, RELATED TO QQ SELF-ENERGY
C  BY DALLAS C. KENNEDY, A LA LYNN, PENSO, VERZEGNASSI
      HADR3Q=0.5D0*HADRQQ(S)
C  CHARM AND BOTTOM QUARK CORRECTIONS
      QSQ=XQRK(3,2)*XQRK(3,2)
      MSQ=XQRK(3,1)
      CHRMQQ=8.D0*QSQ*B3(S,MSQ,MSQ,XSC)
      QSQ=XQRK(6,2)*XQRK(6,2)
      MSQ=XQRK(6,1)
      BTTMQQ=8.D0*QSQ*B3(S,MSQ,MSQ,XSC)
      CHRMQQ=CHRMQQ/(16.D0*PI**2)
      BTTMQQ=BTTMQQ/(16.D0*PI**2)
      HADR3Q=HADR3Q-0.125D0*CHRMQQ+0.25D0*BTTMQQ
      RETURN
      END
      FUNCTION OPI3QP(S)
C  ONE-PARTICLE IRREDUCIBLE 3Q MIXING: TRANSVERSE
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C      SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  BOSONIC CONTRIBUTION
      BOPI3Q=(2.D0/3.D0)+(3.D0/2.D0)*B0(S,MWSQ,MWSQ,XSC)
     C      -10.D0*B3(S,MWSQ,MWSQ,XSC)
C  LEPTONIC CONTRIBUTION
      FOPI3Q=0.D0
      DO 10 I=1,2*NGEN
        Q=XLPT(I,2)
        QSQ=Q*Q
        DT3=Q+(1.D0/2.D0)
        MSQ=XLPT(I,1)
        IF(Q.EQ.0.D0)GO TO 10
        QEDFAC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        FOPI3Q=FOPI3Q+4.D0*DT3*Q*
     C        (DREAL(B3(S,MSQ,MSQ,XSC))
     C        +(0.D0,1.D0)*QEDFAC*DIMAG(B3(S,MSQ,MSQ,XSC)))
10    CONTINUE
C  QUARK CONTRIBUTION
      P=S
C  IF S LESS THAN 79 GEV**2, USE TASSO DISPERSION RELATION
C  FOR LIGHT QUARKS
      IF(CDABS(S).LT.79.D0)P=79.D0
      QOPI3Q=0.D0
      DO 20 I=1,2*NGEN
        Q=XQRK(I,2)
        QSQ=Q*Q
        DT3=Q-(1.D0/6.D0)
        MSQ=XQRK(I,1)
        IF(Q.EQ.0.D0)GO TO 20
C  HEAVY QUARK CONTIBUTIONS CALCULATED PERTURBATIVELY
C  PERTURBATIVE QCD CORRECTIONS INCLUDED
        IF(QCD.EQ.1)THEN
          QCDFAC=(1.D0+ALFQCD(S)/PI)*(1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI))
        ELSE
          QCDFAC=1.D0+QSQ*(3.D0*ALFA)/(4.D0*PI)
        ENDIF
        IF(CDABS(S).LT.40.AND.I.NE.5.AND.I.LE.6.AND.NGEN.GE.3.AND.
     C    D3Q.EQ.1)THEN
          QOPI3Q=QOPI3Q+4.D0*DT3*Q*B3(P,MSQ,MSQ,XSC)
        ELSE
          QOPI3Q=QOPI3Q+4.D0*DT3*Q*
     C          (DREAL(B3(S,MSQ,MSQ,XSC))
     C          +(0.D0,1.D0)*QCDFAC*DIMAG(B3(S,MSQ,MSQ,XSC)))
        ENDIF
20    CONTINUE
      OPI3QP=(BOPI3Q+FOPI3Q+3.D0*QOPI3Q)/(16.D0*PI**2)
C  ADD CORRECTION FROM HADRON DATA
      IF(CDABS(S).LT.79.AND.NGEN.GE.3.AND.D3Q.EQ.1)
     C  OPI3QP=OPI3QP-HADR3Q(P)+HADR3Q(S)
      RETURN
      END
      FUNCTION OPI3QL(S)
C  ONE-PARTICLE IRREDUCIBLE 3Q MIXING: LONGITUDINAL
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  BOSONIC CONTRIBUTION
      BOPI3Q=-2.D0*MWSQ*B0(S,MWSQ,MWSQ,XSC)
      OPI3QL=BOPI3Q/(16.D0*PI**2)
      RETURN
      END
C   GAMMA BLOCK: DEFINES PROPER NON-ABELIAN VERTEX CORRECTIONS
      FUNCTION GAMMA3(S)
C  NEUTRAL CURRENT NON-ABELIAN VERTEX
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      GAMMA3=2.D0*B0(S,MWSQ,MWSQ,XSC)
      GAMMA3=GAMMA3/(16.D0*PI**2)
      RETURN
      END
      FUNCTION GAMMA1(S)
C  CHARGED CURRENT NON-ABELIAN VERTEX
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      ZERO=0.D0
      GAMMA1=2.D0*B0(S,MWSQ,MWSQ,XSC)
      GAMMA1=GAMMA1/(16.D0*PI**2)
      RETURN
      END
C   DELTA BLOCK: DEFINES FINITE RS-INVARIANT FUNCTIONS
      FUNCTION DELQ(S)
C  PROPERLY-SUBTRACTED VACUUM POLARIZATION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      DELQ=DREAL(OPIQQP(S)-OPIQQP((0.D0,0.D0)))
     C    +2.D0*DREAL(GAMMA3(S)-GAMMA3((0.D0,0.D0)))
      RETURN
      END
      FUNCTION DELRHO(S)
C  GLOBAL ISOPSIN BREAKING DELTA-RHO
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      DELRHO=DREAL(S*(OPI33T(S)-OPI11T(S)))
     C      +DREAL(OPI33L(S)-OPI11L(S))
      RETURN
      END
      FUNCTION DEL3(S)
C  PROPERLY-SUBTRACTED 33 BOSON SELF-ENERGY
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      DEL3=DREAL(S*(OPI33T(S)-OPI3QP(S)))
     C    +DREAL(OPI33L(S)-OPI33L((0.D0,0.D0)))
     C    -DREAL(OPI3QL(S)-OPI3QL((0.D0,0.D0)))
     C    +MWSQ*DREAL(GAMMA3(S)-GAMMA3((0.D0,0.D0)))
      RETURN
      END
      FUNCTION DEL1(S)
C  PROPERLY-SUBTRACTED 11 BOSON SELF-ENERGY
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      DEL1=DREAL(S*(OPI11T(S)-OPI3QP(S)))
     C    +DREAL(OPI11L(S)-OPI11L((0.D0,0.D0)))
     C    -DREAL(OPI3QL(S)-OPI3QL((0.D0,0.D0)))
     C    +MWSQ*DREAL(GAMMA3(S)-GAMMA3((0.D0,0.D0)))
      RETURN
      END
C   IMAG BLOCK: DEFINES RS-INVARIANT IMAGINARY PARTS
      FUNCTION MPIAAP(S)
C  RS-INVARIANT IMAGINARY VACUUM POLARIZATION
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      MPIAAP=E2STAR(S)*DIMAG(OPIQQP(S)+2.D0*GAMMA3(S))
      RETURN
      END
      FUNCTION MPIZAP(S)
C  RS-INVARIANT IMAGINARY Z-A MIXING
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      S2=S2STAR(S)
      C2=1.D0-S2
      MPIZAP=(E2STAR(S)/CDSQRT(S2*C2))*
     C       (DIMAG(OPI3QP(S)+2.D0*GAMMA3(S))
     C       -S2*DIMAG(OPIQQP(S)+2.D0*GAMMA3(S)))
      RETURN
      END
      FUNCTION MPIZZ(S)
C  RS-INVARIANT IMAGINARY Z-BOSON SELF-ENERGY
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      S2=S2STAR(S)
      C2=1.D0-S2
      MPIZZ=(E2STAR(S)/(S2*C2))*
     C      (S*DIMAG(OPI33T(S)-2.D0*S2*OPI3QP(S)+(S2**2)*OPIQQP(S))
     C      +DIMAG(OPI33L(S)+MWSQ*GAMMA3(S)))
      RETURN
      END
      FUNCTION MPIWW(S)
C  RS-INVARIANT IMAGINARY W-BOSON SELF-ENERGY
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      MPIWW=(E2STAR(S)/S2STAR(S))*(S*DIMAG(OPI11T(S))+DIMAG(OPI11L(S))
     C      +2.D0*(S+MWSQ)*DIMAG(GAMMA1(S)))
      RETURN
      END
      FUNCTION ZWIDTH(S)
C  RS-INVARIANT Z WIDTH IN BREIT-WIGNER FORM
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      ZWIDTH=(MPIZZ(S)+S*MPIAAP(S)*(MPIZAP(S))**2)/CDSQRT(-S)
      RETURN
      END
      FUNCTION WWIDTH(S,MWTRUE)
C  RS-INVARIANT W WIDTH IN BREIT-WIGNER FORM
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      WWIDTH=MPIWW(S)/CDSQRT(-S)
      RETURN
      END
C   STAR BLOCK: DEFINES RS-INVARIANT GWS PARAMETERS
      FUNCTION E2STAR(S)
C  RS-INVARIANT RUNNING EM COUPLING
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      E2STAR=(4.D0*PI*ALFA)/(1.D0-4.D0*PI*ALFA*DELQ(S))
      RETURN
      END
      FUNCTION GMUSTR(S)
C  RS-INVARIANT RUNNING FERMI CONSTANT
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      GMUSTR=GMU/(1.D0-4.D0*DSQRT(2.D0)*GMU*DEL1(S))
      RETURN
      END
      FUNCTION RHOSTR(S)
C  RS-INVARIANT RUNNING RHO PARAMETER
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
      RHOSTR=RHOTRE/(1.D0-RHOTRE*4.D0*DSQRT(2.D0)*GMUSTR(S)*DELRHO(S))
      RETURN
      END
      FUNCTION S2STAR(S)
C  RS-INVARIANT RUNNING SINE-WEAK-SQUARED
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      COMPLEX*16 LAMBDA
      INTEGER*4 QCD,DQQ,D3Q,MIX
      COMMON/GSWPRM/XQRK(40,2),XLPT(40,2),CKM(3,3),MWSQ,MZSQ,MHSQ,
     C       SWSQ,CWSQ,ALFA,GMU,RHOTRE,XSC,PI,NGEN,QCD,DQQ,D3Q,MIX
C  FIRST COMPUTE S2STAR AT S=-MZSQ
      Y=-E2STAR(-MZSQ)*DIMAG(OPI3QP(-MZSQ)+2.D0*GAMMA3(-MZSQ))
      LAMBDA=(Y**2+Y*MPIAAP(-MZSQ))/(1.D0+(MPIAAP(-MZSQ))**2)
      XISTAR=E2STAR(-MZSQ)/(4.D0*DSQRT(2.D0)*MZSQ
     C      *GMUSTR(-MZSQ)*RHOSTR(-MZSQ))
      BETAZ=(XISTAR/(1.D0+(MPIAAP(-MZSQ))**2))-LAMBDA
      S2STRZ=(0.5D0)*(1.D0-CDSQRT(1.D0-4.D0*BETAZ))
      E2STRZ=E2STAR(-MZSQ)
C  SECOND COMPUTE S2STAR AT S USING RG EQUATION
      S2TEMP=(1.D0+(MPIAAP(-MZSQ))**2)*(S2STRZ/E2STRZ)
      TEMP3Q=DREAL(OPI3QP(S)+2.D0*GAMMA3(S)
     C            -OPI3QP(-MZSQ)-2.D0*GAMMA3(-MZSQ))
      TEMPIM=MPIAAP(S)*
     C       DIMAG(OPI3QP(S)+2.D0*GAMMA3(S))
     C      -MPIAAP(-MZSQ)*
     C       DIMAG(OPI3QP(-MZSQ)+2.D0*GAMMA3(-MZSQ))
      S2STAR=E2STAR(S)*(S2TEMP-TEMP3Q+TEMPIM)/(1.D0+(MPIAAP(S))**2)
      RETURN
      END
      FUNCTION C2STAR(S)
C  RS-INVARIANT RUNNING COSINE-WEAK-SQUARED
      IMPLICIT COMPLEX*16 (A-H,M,O-Z)
      C2STAR=1.D0-S2STAR(S)
      RETURN
      END
      SUBROUTINE LUTAUD(IFL)
C======================================================================
C
C   Dummy version G. Bonneaud October 1988.
C   (see LUNMOD OLDLIB for official version)
C
C======================================================================
      IFL = 0
      WRITE(6,101)
 101  FORMAT(//,20X,'** WARNING - LUTAUD DUMMY VERSION **',/,
     &       17X,'* You are using the standard LUND library *',/,
     & 11X,'* with the standard decay modes and branching ratios *',//)
C======================================================================
      RETURN
      END
