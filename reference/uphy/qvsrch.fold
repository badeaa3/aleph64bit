      SUBROUTINE QVSRCH(BPOS,BSIZ,PVTX,EPVTX,DJET,
     > BTAG,SVTX,ESVTX,AVTX,CAVTX,JERR)
      DIMENSION BPOS(3),BSIZ(3)
      DIMENSION PVTX(3),EPVTX(3),DJET(3,2)
      DIMENSION BTAG(2),SVTX(3,2),ESVTX(3,2)
      DIMENSION AVTX(3,2),CAVTX(3,3,2)
C
C     FINDS PRIMARY VERTEX, ERRORS, 2 JET DIRECTIONS,
C     SECONDARY VERTICES, ERRORS, AND B-TAG VARIABLES
C     T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C     INPUTS:
C     BPOS() IS BEAM POSITION
C      BPOS(2) MUST BE AN ACCURATE BEAM Y COORDINATE,
C      I.E., QVYNOM OR OUTPUT FROM GET_BP)
C      BPOS(1),BPOS(3) ARE USED FOR X AND Z TRACK CUTS
C       AND AS ADDITIONAL CONSTRAINTS ON PRIMARY VERTEX
C     BSIZ() IS SIZE OF LUMINOUS REGION (1 SIGMA)
C      FIXED VALUES OF .0200, .0020, 2.0 WILL WORK OK
C      ANY NEGATIVE ELEMENT OF BSIZ WILL SUPPRESS INTERNAL PRIMARY FINDIG
C      IN WHICH CASE PVTX() AND EPVTX() BECOME INPUT VARIABLES
C     ALPHA 'NQVJ' CARD WILL SUPPRESS INTERNAL JET FINDING,
C      IN WHICH CASE DJET BECOMES AN INPUT VARIABLE
C     OUTPUTS:
C     PVTX() IS PRIMARY VERTEX IN ALEPH XYZ COORDINATES
C     EPVTX() IS ERROR (NOT VARIANCE) IN PVTX
C     DJET(3,2) IS TWO NORMALIZED XYZ DIRECTION VECTORS FOR TWO JETS
C     BTAG(2) IS THE B-TAGGING VARIABLE FOR THE TWO HEMISPHERES
C      IT IS BASICALLY THE HALF THE CHI-SQUARE DIFFERENCE BETWEEN THE
C      HYPOTHESIS THAT ALL TRACKS IN THE HEMISPHERE COME FROM PRIMARY,
C      OR THAT SOME TRACKS COME FROM THE SECONDARY AND SOME FROM PRIMARY
C      A CUT AT 10, OR AT 20 ON THE SUM, IS REASONABLE
C     SVTX(3,2) IS TWO SECONDARY VERTICES IN COORDINATE SYSTEMS
C      THAT ARE USED INTERNALLY, (ONE SYSTEM PER JET)
C      ORIGINS ARE AT PVTX(), AND ARE ORIENTED BY DJET(,)
C      THE THIRD COORDINATE IS THE DECAY LENGTH IN THE JET DIRECTION
C      THE FIRST COORDINATE IS R-PHI-LIKE, THE SECOND IS Z-LIKE
C     ESVTX(3,2) IS THE ERRORS ON SVTX() IN THE INTERNAL ROTATED SYSTEM
C      WHERE GEOMETRICAL CORRELATIONS ARE SMALL AND IGNORED
C      MAY BE NEGATIVE, INDICATING A PROBLEM, NOT NECESSARILY SEVERE,
C      IN FINDING THE VERTEX
C     AVTX(3,2) IS THE TWO SECONDARY VERTICES IN ALEPH XYZ COORDINATES
C     CAVTX(3,3,2) IS TWO COVARIANCE MATRICES FOR AVTX()
C     JERR IS ERROR FLAG
C      0 FOR OK
C      +1 FOR SECONDARY VERTEX 1 ERRORS QUESTIONABLE
C      +2 FOR SECONDARY VERTEX 2 ERRORS QUESTIONABLE
C      (+3 FOR QUESTIONABLE ERRORS ON BOTH SECONDARY VERTICES)
C      +4 FOR NO GOOD TRACKS IN JET 1
C      +8 FOR NO GOOD TRACKS IN JET 2
C      (+12 FOR NO GOOD TRACKS IN EITHER JET)
C      +16 FOR QUESTIONABLE PRIMARY VERTEX
C      +32 FOR NOT ENOUGH TRACKS FOR PRIMARY VERTEX
C      +64 FOR NO JETS FOUND
C
      JERR=0
C
C     CHECK FOR USER PRIMARY VERTEX
      IF (BSIZ(1) .GT. 0. .AND. BSIZ(2) .GT. 0.
     >                    .AND. BSIZ(3) .GT. 0.) THEN
C       FIND PRIMARY VERTEX
C       ZERO TRACK SMEARING GIVES SLIGHTLY WORSE B VERTEX RESOLUTION
C       BUT BETTER TAGGING, AND BETTER UDS PRIMARY VERTEX
        TSMR=.0000
        CALL QVSPVX(BPOS,BSIZ,TSMR,PVTX,EPVTX,IERR)
        JERR=16*IERR
      ENDIF
C
C     FIND JET DIRECTIONS
      CALL QVSJET(DJET,NJETS)
      IF (NJETS .LT. 2) THEN
        JERR=JERR+64
        RETURN
      ENDIF
C
C     FIND SECONDARY VERTICES
      CALL QVSVTX(PVTX,EPVTX,DJET,BTAG,SVTX,ESVTX,IERR)
C
      JERR=JERR+IERR
C
C     TRANSFORM VERTICES TO ALEPH COORDINATES
      CALL QVSAVX(PVTX,DJET(1,1),SVTX(1,1),ESVTX(1,1),
     > AVTX(1,1),CAVTX(1,1,1))
C
      CALL QVSAVX(PVTX,DJET(1,2),SVTX(1,2),ESVTX(1,2),
     > AVTX(1,2),CAVTX(1,1,2))
C
      RETURN
      END
      SUBROUTINE QVSTVA(ITK,PVTX,DJET,SVTX,JET,IVX)
      DIMENSION PVTX(3),DJET(3,2),SVTX(3,2)
C
C     TRACK-JET-VERTEX ASSOCIATION
C     T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C     INPUTS
C     ITK IS ALPHA TRACK NUMBER
C     PVTX() IS PRIMARY VERTEX IN ALEPH COORDINATES
C     DJET(,) IS TWO NORMALIZED JET DIRECTIONS IN ALEPH COORDINATES
C     SVTX(,) IS TWO SECONDARY VERTICES IN TRANSLATED-ROTATED COORDINATES
C      ORIGIN AT PVTX, 3D AXIS IN DJET DIRECTIONS
C     OUTPUTS
C     JET=1 OR 2 ACCORDING TO JET DIRECTION
C     IVX=1 FOR PRIMARY,
C     IVX=2 FOR SECONDARY (IN ABOVE JET)
C     IVX=0 FOR TRACK PASSING CUTS BUT NOT CLOSE TO EITHER VERTEX
C     IVX=-1 FOR TRACK FAILING CUTS
C
      DIMENSION EPVTX(3),ESVTX(3)
      LOGICAL QVSGTK2
C
C     CHECK WHICH JET
      CALL QVSTKJ(ITK,DJET,JET)
C
C     ASSUME IT FAILS CUTS
      IVX=-1
C
C     CHECK (LOOSE) TRACK CUTS
      DKL=ABS(SVTX(3,JET))
      IF (.NOT. QVSGTK2(ITK,PVTX,DKL)) RETURN
C
C     MAKE UP SOME NOMINAL VERTEX ERRORS
      EPVTX(1)=.0050
      EPVTX(2)=.0020
      EPVTX(3)=.0050
      ESVTX(1)=.0050
      ESVTX(2)=.0050
      ESVTX(3)=.0350
C
C     GET NORMALIZED AND SIGNED IMPACT PARAMETERS
C     RELATIVE TO BOTH VERTICES
      CALL QVSIMP(ITK,PVTX,DJET(1,JET),SVTX(1,JET),EPVTX,ESVTX,
     > DXP,DZP,DTP,DXS,DZS,DTS)
C
C     NORMALIZED DISTANCE CUT
      SIGCUT=3.0
C
C     WE WON'T USE SIGN INFORMATION
      DXP=ABS(DXP)
      DZP=ABS(DZP)
      DXS=ABS(DXS)
      DZS=ABS(DZS)
C
      IF (MIN(DXP,DZP,DXS,DZS) .GT. SIGCUT) THEN
C       TRACK IS FAR FROM EVERYTHING
        IVX=0
      ELSEIF (MIN(DZP,DZS) .GT. SIGCUT) THEN
C       FAR FROM BOTH IN Z, BUT X IS OK
        IF (DXS .LT. DXP) THEN
          IVX=2
        ELSE
          IVX=1
        ENDIF
      ELSEIF (MIN(DXP,DXS) .GT. SIGCUT) THEN
C       FAR FROM BOTH IN X, BUT Z IS OK
        IF (DZS .LT. DZP) THEN
          IVX=2
        ELSE
          IVX=1
        ENDIF
      ELSE
C       WITHIN SIGCUT IN BOTH X AND Z TO ONE VERTEX OR THE OTHER
C       (ALTHOUGH NOT NECESSARILY THE SAME ONE!)
C       THIS IS THE NORMAL (AND PREFERRED) PATH
C
C       CALCULATE CHI SQUARE TO BOTH VERTICES
        CHI2P=DXP**2+DZP**2
        CHI2S=DXS**2+DZS**2
C
C       ASSIGN ACCORDING TO CHI SQUARE
        IF (CHI2S .LT. CHI2P) THEN
          IVX=2
        ELSE
          IVX=1
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE QVSPVX(BPOS,BSIZ,TSMR,PVTX,EPVTX,IERR)
      DIMENSION BPOS(3),BSIZ(3),PVTX(3),EPVTX(3)
C
C     FINDS PRIMARY VERTEX AND 2 JET DIRECTIONS
C     IN PREPARATION FOR QVSVTX
C     T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C     INPUTS
C     BPOS() IS BEAM POSITION
C     (BPOS(2) MUST BE AN ACCURATE BEAM Y COORDINATE,
C      I.E., QVYNOM OR OUTPUT FROM GETBP)
C     (BPOS(1),BPOS(3) ARE ONLY USED FOR X AND Z TRACK CUTS)
C     BSIZ() IS SIZE OF LUMINOUS REGION (1 SIGMA)
C     TSMR IS ADDITIONAL SMEARING FOR TRACKS
C      .0100 CM (100 MICRONS) MAKES ERRORS FAIRLY HONEST ON B EVENTS
C      .0000 CM GIVES BETTER RESOLUTION IN UDS EVENTS
C     OUTPUTS:
C     PVTX() IS PRIMARY VERTEX IN ALEPH XYZ COORDINATES
C     EPVTX() IS ERROR (NOT VARIANCE) IN PVTX
C      MAY BE NEGATIVE, INDICATING A PROBLEM, NOT NECESSARILY SEVERE,
C      IN FINDING THE PRIMARY VERTEX
C      EPVTX(2) IS COPY OF BSIZ(2)
C     IERR IS ERROR FLAG WORD
C      0 FOR OK
C      1 FOR QUESTIONABLE PRIMARY VERTEX
C      2 FOR NOT ENOUGH TRACKS FOR PRIMARY VERTEX
C
C     LENGTH OF GOOD-TRACK LIST
      PARAMETER (MGTK=100)
      DIMENSION JGTK(MGTK)
C     NUMBER OF POINTS IN X SCAN
      PARAMETER (LBX=50)
C     NUMBER OF POINTS IN Z SCAN
      PARAMETER (LBZ=50)
C     SIZE NEEDED FOR TWO DIMENSIONAL LIKELIHOOD FUNCTION
C      PLUS SCRATCH SPACE
      PARAMETER (LVLF=LBX*LBZ+LBX+LBZ)
C
      INCLUDE '/aleph/phy/bcs.inc'
      COMMON /YVSWRK/ IPTR
C
      IERR=0
C
C     MAKE GOOD TRACK LIST FOR COARSE Z VERTEX
      CALL QVSGTL0(BPOS,MGTK,NGTK,JGTK)
C     BAIL OUT IF NO TRACKS
      IF (NGTK .LT. 1) THEN
        IERR=2
        RETURN
      ENDIF
C
C     GET SOME WORK SPACE
      IPTR=0
      LEN=LVLF
      CALL QVSWBK(LEN,'QVSP')
C
C     FIRST FIND COARSE Z POSITION OF EVENT
C     NUMBER OF POINTS
      NB=100
C     SCAN RANGE: BPOS +/- 3 SIGMA
      ZL=BPOS(3)-3.*BSIZ(3)
      ZH=BPOS(3)+3.*BSIZ(3)
C     IGNORE TRACKS BEYOND 3 SIGMA
      SGMX=3.
C     FIND COARSE Z VERTEX BY 1 DIMENSIONAL SCAN
      CALL YVSZVC(BPOS,NGTK,JGTK,SGMX,NB,ZL,ZH,RW(IPTR+1),ZVC,EZVC)
C
C     BAIL OUT IF IT FAILED
      IF (EZVC .LT. 0.) THEN
        IERR=2
        GOTO 999
      ENDIF
C
C     CENTER THINGS ON THE BEAM
      PVTX(1)=BPOS(1)
      PVTX(2)=BPOS(2)
C     AND THE COARSE Z FOUND ABOVE
      PVTX(3)=ZVC
C     MAKE NEW GOOD TRACK LIST
      CALL QVSGTL1(PVTX,MGTK,NGTK,JGTK)
C     BAIL OUT IF NO TRACKS
      IF (NGTK .LT. 1) THEN
        IERR=2
        GOTO 999
      ENDIF
C
C     CONTROL PARAMETERS FOR PRIMARY VERTEX SCAN
C     NUMBER OF POINTS IN X SCAN
      NBX=LBX
C     SCAN RANGE IN X: +/- 500 MICRONS
C     CENTERED ON BPOS
      XL=BPOS(1)-.0500
      XH=BPOS(1)+.0500
C     SCAN POINTS IN Z
      NBZ=LBZ
C     SCAN RANGE IN Z: +/- 500 MICRONS
C      OR 3 SIGMA OF COARSE VERTEX
      DZ=MAX(.0500,3.*EZVC)
C     CENTERED ON COARSE Z FOUND ABOVE
      ZL=ZVC-DZ
      ZH=ZVC+DZ
C     CUT OFF TRACKS AT 3 SIGMA
      SGMX=3.
C
C     FIND X AND Z OF PRIMARY VERTEX BY PROJECTING TRACKS TO BEAM PLANE
      CALL YVSXZB(BPOS,BSIZ,NGTK,JGTK,TSMR,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,RW(IPTR+1),
     > PVTX(1),EPVTX(1),PVTX(3),EPVTX(3),PKVL)
C
      IF (EPVTX(1) .LT. 0. .OR. EPVTX(3) .LT. 0.) THEN
        IERR=1
      ENDIF
C
C     NOMINAL ERROR (BEAM HEIGHT) IN Y
      EPVTX(2)=BSIZ(2)
C
  999 CONTINUE
C     DROP WORK BANK
      CALL WDROP(IW,IPTR)
C
      RETURN
      END
      SUBROUTINE QVSJET(DJET,NJETS)
      DIMENSION DJET(3,2)
C
C     FINDS 2 JET DIRECTIONS IN PREPARATION FOR QVSVTX
C     T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C     INPUTS
C     IF ALPHA CARDS CONTAIN 'NQVJ', SETS NJET=2 AND RETURNS
C     ELSE IF 'EFLJ' CARD, STARTS WITH PRE-CLUSTERED JETS
C     ELSE IF 'EFLW' CARD, USES JANOT ENERGY FLOW OBJECTS
C     ELSE USES CHARGED TRACKS AND PCPA CALORIMETER OBJECTS
C      UNLESS THERE IS A 'NOPC' CARD
C     OUTPUTS
C     DJET(3,2) IS NORMALIZED 3-VECTORS OF JET DIRECTIONS
C     JET 1 IS HIGHEST ENERGY JET
C     JET 2 IS ONE WITH LARGEST MASS RELATIVE TO FIRST JET
C     ALPHA JETS WITH NAME 'QVSJETS' ARE CREATED
C     NJETS IS TOTAL NUMBER OF JETS FOUND
C
      LOGICAL FIRST
      DATA FIRST/.TRUE./
      LOGICAL CHGONLY
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     EXAMINE BOS BANKS TO CHECK ALPHA CARDS
C
C     CHECK FOR NQVJ CARD
      INQVJ=IW(NAMIND('NQVJ'))
C     CHECK IF PRECLUSTERED JETS EXIST
      IEFLJ=IW(NAMIND('EFLJ'))
C     CHECK FOR MASK OPTION
      IEFLJ2=IW(IEFLJ+1)
C     CHECK IF ENERGY FLOW OBJECTS EXIST
      IEFLW=IW(NAMIND('EFLW'))
C     CHECK FOR MASK OPTION
      IEFLW2=IW(IEFLW+1)
C     CHECK IF PCPA OBJECTS EXIST
      INOPC=IW(NAMIND('NOPC'))
C
      CHGONLY=.FALSE.
C
C     SET JET FINDING OPTIONS
      IF     (INQVJ .NE. 0) THEN
        IF (FIRST) WRITE (6,*) ' QVSJET: USING YOUR JET DIRECTIONS'
C
      ELSEIF (IEFLJ .NE. 0) THEN
        IF (FIRST) WRITE (6,*) ' QVSJET: USING PRECLUSTERED JETS'
        IF (FIRST .AND. (IEFLJ2 .EQ. 2 .OR. IEFLW2 .EQ. 2) )
     >    WRITE (6,*) '         FROM MASK ENERGY FLOW'
        CALL QJOPTR('EJ','  ')
C
      ELSEIF (IEFLW2 .EQ. 2) THEN
        IF (FIRST) WRITE (6,*) ' QVSJET: USING MASK ENERGY FLOW'
        CALL QJOPTR('EF','  ')
C
      ELSEIF (IEFLW .NE. 0) THEN
        IF (FIRST) WRITE (6,*) ' QVSJET: USING JANOT ENERGY FLOW'
        CALL QJOPTR('EF','  ')
C
      ELSEIF (INOPC .EQ. 0) THEN
        IF (FIRST)
     >    WRITE (6,*) ' QVSJET: USING PCPA AND SELECTED CHARGED TRACKS'
        CALL QJOPTR('PC','  ')
C
      ELSE
        IF (FIRST) WRITE (6,*) ' QVSJET: USING CHARGED TRACKS ONLY'
        CALL QJOPTR('CH','  ')
        CHGONLY=.TRUE.
      ENDIF
      FIRST=.FALSE.
C
C     PUNT IF NQVJ CARD
      IF (INQVJ .NE. 0) THEN
        NJETS=2
        RETURN
      ENDIF
C
      IF (CHGONLY) THEN
C       USE VISIBLE ENERGY
        EVIS=0.
      ELSE
C       USE NOMINAL Z MASS
        EVIS=91.173
      ENDIF
C
C     QCD-TYPE YCUT (B PHYSICS OFTEN DONE WITH MUCH SMALLER YCUT)
C     BUT DAVE BROWN'S STUDIES SAY THIS GIVES BETTER ANGLE RESOLUTION
      YCUT=0.02
C
C     SCALED INVARIANT MASS CLUSTERING
      CALL QJMMCL(NJ,'QVSJETS',KRECO,YCUT,EVIS)
C
C     GET FIRST JET INDEX
      JF=KPDIR('QVSJETS',KRECO)
C
C     FIND HIGHEST ENERGY JET (AND COUNT JETS)
      EJ1=0.
      NJETS=0
      JET=JF
      IF (JET .NE. 0) THEN
  125   CONTINUE
        NJETS=NJETS+1
        IF (QE(JET) .GT. EJ1) THEN
          EJ1=QE(JET)
          J1=JET
        ENDIF
C       NEXT JET
        JET=KFOLLO(JET)
        IF (JET .NE. 0) GOTO 125
      ENDIF
C
C     PUNT IF NOT 2 OR MORE JETS
      IF (NJETS .LT. 2) RETURN
C
C     NOW FIND JET THAT GIVES LARGEST INVARIANT MASS
      WTMX=0.
      JET=JF
      IF (JET .NE. 0) THEN
  135   CONTINUE
C       DON'T USE THE SAME JET
        IF (JET .NE. J1) THEN
C         INVARIANT MASS
          WT=QDOT4(J1,JET)
          IF (WT .GT. WTMX) THEN
            J2=JET
            WTMX=WT
          ENDIF
        ENDIF
C       NEXT JET
        JET=KFOLLO(JET)
        IF (JET .NE. 0) GOTO 135
      ENDIF
C
C     SAVE THE JET DIRECTIONS (NORMALIZED MOMENTUM)
      RP=1.
      IF (QP(J1) .NE. 0.)  RP=1./QP(J1)
      DJET(1,1)=QX(J1)*RP
      DJET(2,1)=QY(J1)*RP
      DJET(3,1)=QZ(J1)*RP
      RP=1.
      IF (QP(J2) .NE. 0.)  RP=1./QP(J2)
      DJET(1,2)=QX(J2)*RP
      DJET(2,2)=QY(J2)*RP
      DJET(3,2)=QZ(J2)*RP
      RETURN
      END
      SUBROUTINE QVSVTX(PVTX,EPVTX,DJET,BTAG,SVTX,ESVTX,IERR)
      DIMENSION PVTX(3),EPVTX(3),DJET(3,2)
      DIMENSION BTAG(2),SVTX(3,2),ESVTX(3,2)
C
C     FINDS SECONDARY VERTICES, ERRORS, AND B-TAG VARIABLES, FOR 2 JETS
C     T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C     INPUTS:
C     PVTX() IS PRIMARY VERTEX IN ALEPH XYZ COORDINATES
C     EPVTX() IS ERROR (NOT VARIANCE) IN PVTX
C     DJET(3,2) IS TWO NORMALIZED XYZ DIRECTION VECTORS FOR TWO JETS
C     OUTPUTS:
C     BTAG(2) IS THE B-TAGGING VARIABLE FOR THE TWO HEMISPHERES
C      IT IS BASICALLY THE HALF THE CHI-SQUARE DIFFERENCE BETWEEN THE
C      HYPOTHESIS THAT ALL TRACKS IN THE HEMISPHERE COME FROM PRIMARY,
C      OR THAT SOME TRACKS COME FROM THE SECONDARY AND SOME FROM PRIMARY
C      A CUT AT 10, OR AT 20 ON THE SUM, IS REASONABLE
C     SVTX(3,2) IS TWO SECONDARY VERTICES IN COORDINATE SYSTEMS
C      THAT ARE USED INTERNALLY, (ONE SYSTEM PER JET)
C      ORIGINS ARE AT PVTX(), AND ARE ORIENTED BY DJET(,)
C      THE THIRD COORDINATE IS THE DECAY LENGTH IN THE JET DIRECTION
C      THE FIRST COORDINATE IS R-PHI-LIKE, THE SECOND IS Z-LIKE
C     ESVTX(3,2) IS THE ERRORS ON SVTX() IN THE INTERNAL ROTATED SYSTEM
C      WHERE GEOMETRICAL CORRELATIONS ARE SMALL AND IGNORED
C      MAY BE NEGATIVE, INDICATING A PROBLEM, NOT NECESSARILY SEVERE,
C      IN FINDING THE VERTEX
C     IERR IS ERROR FLAG
C      0 FOR OK
C      1 FOR SECONDARY VERTEX 1 ERRORS QUESTIONABLE
C      2 FOR SECONDARY VERTEX 2 ERRORS QUESTIONABLE
C      3 FOR QUESTIONABLE ERRORS ON BOTH SECONDARY VERTICES
C      4 FOR NO GOOD TRACKS IN JET 1
C      8 FOR NO GOOD TRACKS IN JET 2
C      12 FOR NO GOOD TRACKS AT ALL
C
C     LENGTH OF GOOD-TRACK LIST
      PARAMETER (MGTK=100)
      DIMENSION JGTK(MGTK)
C     NUMBER OF POINTS IN X SCAN
      PARAMETER (LBX=50)
C     NUMBER OF POINTS IN Z SCAN
      PARAMETER (LBZ=50)
C     NUMBER OF POINTS IN DECAY-LENGTH SCAN
      PARAMETER (LBT=100)
C     SIZE NEEDED FOR TWO DECAY-LENGTH PROJECTIONS
      PARAMETER (LVLF=(LBX+LBZ)*LBT)
C
      INCLUDE '/aleph/phy/bcs.inc'
      COMMON /YVSWRK/ IPTR
C
      IERR=0
C
C     MAKE GOOD TRACK LIST
      CALL QVSGTL1(PVTX,MGTK,NGTK,JGTK)
C     BAIL OUT IF NO TRACKS
      IF (NGTK .LT. 1) THEN
        IERR=12
        RETURN
      ENDIF
C
C     GET SOME WORK SPACE
      IPTR=0
      LEN=LVLF
      CALL QVSWBK(LEN,'QVSV')
C
C     JET VERTEX CONTROL PARAMETERS
C     BINS FOR ROTATED X
      NBX=LBX
C     RANGE FOR ROTATED X (+/- 500 MICRONS)
      XL=-.0500
      XH=+.0500
C     BINS FOR ROTATED Z
      NBZ=LBZ
C     RANGE FOR ROTATED Z (+/- 500 MICRONS)
      ZL=-.0500
      ZH=+.0500
C     BINS FOR DISTANCE ALONG JET DIRECTION
      NBT=LBT
C     RANGE ALONG JET DIRECTION (+/- 1 CM)
      TL=-1.
      TH=1.
C     JET ANGLE RESOLUTION (50 MILLIRADIANS)
      EJET=.050
C     CUT OFF TRACKS AT 3 SIGMA
      SGMX=3.
C
C     FIND SECONDARY VERTEX FOR FIRST JET
      CALL YVSXZJ(NGTK,JGTK,PVTX,EPVTX,DJET,1,EJET,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,NBT,TL,TH,RW(IPTR+1),
     > SVTX(1,1),ESVTX(1,1),SVTX(2,1),ESVTX(2,1),SVTX(3,1),ESVTX(3,1),
     > DLLX1,DLLZ1)
C
      IF (ESVTX(1,1) .EQ. -999.) THEN
C       MEAN THERE WERE NO TRACKS IN THE JET
        IERR=IERR+4
      ELSEIF (ESVTX(1,1) .LT. 0. .OR. ESVTX(2,1) .LT. 0.
     >                       .OR. ESVTX(3,1) .LT. 0. ) THEN
C       MEANS AN INTERPOLATION PROBLEM
        IERR=IERR+1
      ENDIF
C
C     AND SECOND JET
      CALL YVSXZJ(NGTK,JGTK,PVTX,EPVTX,DJET,2,EJET,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,NBT,TL,TH,RW(IPTR+1),
     > SVTX(1,2),ESVTX(1,2),SVTX(2,2),ESVTX(2,2),SVTX(3,2),ESVTX(3,2),
     > DLLX2,DLLZ2)
C
      IF (ESVTX(1,2) .EQ. -999.) THEN
C       MEAN THERE WERE NO TRACKS IN THE JET
        IERR=IERR+8
      ELSEIF (ESVTX(1,2) .LT. 0. .OR. ESVTX(2,2) .LT. 0.
     >                       .OR. ESVTX(3,2) .LT. 0. ) THEN
C       MEANS AN INTERPOLATION PROBLEM
        IERR=IERR+2
      ENDIF
C
C     TAG VARIABLES
      BTAG(1)=DLLX1+DLLZ1
      BTAG(2)=DLLX2+DLLZ2
C
  999 CONTINUE
C     DROP WORK BANK
      CALL WDROP(IW,IPTR)
C
      RETURN
      END
      SUBROUTINE QVSAVX(PVTX,DJET,SVTX,ESVTX,AVTX,CAVTX)
      DIMENSION PVTX(3),DJET(3),SVTX(3),ESVTX(3)
      DIMENSION AVTX(3),CAVTX(3,3)
C     CONVERTS SECONDARY VERTEX AND ERRORS FROM INTERNAL COORDINATES
C     TO ALEPH COORDINATES
C
C     TRANSFORM VERTEX TO ALEPH COORDINATES
      CALL YVSTRI(PVTX,DJET,SVTX,AVTX)
C
C     ZERO COVARIANCE MATRIX
      CALL UZERO(CAVTX,1,9)
C
C     LOAD DIAGONAL ERRORS
      CAVTX(1,1)=ESVTX(1)**2
      CAVTX(2,2)=ESVTX(2)**2
      CAVTX(3,3)=ESVTX(3)**2
C
C     ROTATE COVARIANCE MATRIX FROM JET COORDINATES TO ALEPH COORDINATES
      CALL YVSRMI(DJET,CAVTX,CAVTX)
C
      RETURN
      END
      SUBROUTINE QVSWBK(LEN,LBL)
      CHARACTER*(*) LBL
C     CREATES BOS WORK BANK
C     INPUTS
C     LEN IS NUMBER OF WORDS NEEDED
C     LBL IS STRING USED AS BANK LABEL
C     IND SHOULD BE IN LABELLED COMMON AND ZEROED AT START OF JOB
C     OUTPUT
C     IPTR IN /YVSWRK/ IS POINTER TO WORK BANK
C     RW(IPTR+1) IS WORK ARRAY
C     USER SHOULD CALL WDROP(IW,IPTR) WHEN DONE
C
      INCLUDE '/aleph/phy/bcs.inc'
      COMMON /YVSWRK/ IPTR
C
C     POINTER SHOULD HAVE BEEN ZEROED
      IF (IPTR .NE. 0) THEN
        WRITE (6,*) ' QVSBOS: NON-ZERO IPTR=',IPTR,' LEN=',LEN
      ENDIF
C
C     MAKE THE BANK
      CALL WBANK(IW,IPTR,LEN,*199)
C
C     PUT IN LABEL
      IW(IPTR-3)=INTCHA(LBL)
      RETURN
C
  199 CONTINUE
C     NOT ENOUGH SPACE
      WRITE (6,*) 'QVSBOS: NOT ENOUGH SPACE, IPTR=',IPTR,' LEN=',LEN
      WRITE (6,*) 'QVSBOS: CALLING BOSBK AND QMTERM'
C     DUMP THE BOS STATUS
      CALL BOSBK(IW)
C     GRACEFULLY TERMINATE THE JOB
      CALL QMTERM('QVSBOS')
      RETURN
      END
      LOGICAL FUNCTION QVSGTK(ITK,VTX,
     >  MNTP,CTMX,D0MX,Z0MX,RVMX,PMIN,CPDMX)
      DIMENSION VTX(3)
C     APPLIES TRACK CUTS
C     INCLUDING ALPHA LOCK FUNCTION
C     QVSGTK IS A FUNCTION NOT A SUBROUTINE
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     MNTP IS MINIMUM TPC HITS
C     CTMX IS MAXIMUM COS(THETA)
C     D0MX IS MAXIMUM D0 VALUE
C     Z0MX IS MAXIMUM Z0 VALUE
C      BOTH D0 AND Z0 ARE CORRECTED FROM ALEPH COORDINATES
C      TO COORDINATES CENTERED ON VTX()
C     RVMX IS MAXIMUM 3-D DISTANCE FROM TRACK TO VTX
C      IF CUT IS LESS THAN 3 TIMES Z0 ERROR TRANSVERSE TO TRACK,
C      THE CUT IS APPLIED TO THE 2D RADIAL (D0) DISTANCE TO VTX
C     VTX() IS PRIMARY VERTEX COORDINATES FOR CUTS
C     PMIN IS MINIMUM TOTAL MOMENTUM
C     CPDMX IS MAXIMUM CHISQUARE/DOF
C     OUTPUTS:
C     RETURNS QVSGTK=.TRUE. OR .FALSE.
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
      QVSGTK=.FALSE.
C
C     ALPHA LOCK
      IF (XLOCK(ITK)) RETURN
C
C     TPC HITS CUT
      IF (KFRTNT(ITK) .LT. MNTP) RETURN
C
C     COS-THETA CUT
      IF (ABS(QCT(ITK)) .GT. CTMX) RETURN
C
C     FIND DISTANCE FROM VERTEX
      CALL QVSMIS(ITK,VTX,D0V,Z0V,R3D)
C
C     D0 CUT (RELATIVE TO VTX)
      IF (ABS(D0V) .GT. D0MX) RETURN
C
C     Z0 CUT RELATIVE TO VERTEX
      IF (ABS(Z0V) .GT. Z0MX) RETURN
C
C     Z0 ERROR TRANSVERSE TO TRACK
      DZT=SQRT( ABS( QFRFEM(ITK,5,5)/(1.+QFRFTL(ITK)**2) ))
C
C     COMPARE 3D DISTANCE CUT TO Z ERROR
      IF (RVMX .LT. 3.*DZT) THEN
C       NOT SAFE TO USE 3D DISTANCE
C       USE D0 RELATIVE TO VERTEX
        RV=ABS(D0V)
      ELSE
C       USE 3D MISS DISTANCE
        RV=R3D
      ENDIF
C
C     3D (OR 2D) DISTANCE FROM VERTEX CUT
      IF (RV .GT. RVMX) RETURN
C
C     TOTAL MOMENTUM CUT
      P=QP(ITK)
      IF (P .LT. PMIN) RETURN
C
C     CHI SQUARE PER DEGREE OF FREEDOM
      IF (QFRFC2(ITK)/MAX(KFRFDF(ITK),1) .GT. CPDMX) RETURN
C
C     TRACK MUST BE OK
      QVSGTK=.TRUE.
C
      RETURN
      END
      SUBROUTINE QVSMIS(ITK,VTX,D0V,Z0V,R3D)
      DIMENSION VTX(3)
C     CALCULATES VERTEX MISS DISTANCE
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     VTX() IS VERTEX COORDINATES
C     OUTPUTS:
C     D0V IS D0 WITH RESPECT TO VERTEX
C     Z0V IS Z0 WITH RESPECT TO VERTEX
C     R3D IS 3D MISS DISTANCE
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     XY TRACK DIRECTION
      P0=QFRFP0(ITK)
      SP=SIN(P0)
      CP=COS(P0)
C
C     TRACK POSITION AT CLOSEST APPROACH TO ALEPH Z AXIS
      D0=QFRFD0(ITK)
      X0= D0*SP
      Y0=-D0*CP
      Z0=QFRFZ0(ITK)
C
C     ROTATE VERTEX TO SYSTEM WHERE TRACK PHI=0
      XV= CP*VTX(1)+SP*VTX(2)
      YV=-SP*VTX(1)+CP*VTX(2)
C
C     D0 WITH RESPECT TO VERTEX
      D0V=D0+YV
C
C     CURVATURE CORRECTION
      RINV=QFRFIR(ITK)
      D0V=D0V-.5*RINV*XV**2
C
C     Z0 AT POINT OF CLOSEST APPROACH TO XV,YV AXIS
      TL=QFRFTL(ITK)
      ZV=Z0+TL*XV
C
C     LONGITUDINAL VERTEX MISS
      Z0V=ZV-VTX(3)
C
C     ANGLE FROM BEAM DIRECTION
      STH=1./SQRT(1.+TL**2)
      CTH=TL*STH
C
C     TRACK DIRECTION AT CLOSEST APPROACH
      DX=CP*STH
      DY=SP*STH
      DZ=CTH
C
C     FIND 3D POINT OF CLOSEST APPROACH TO VERTEX
C     TRACK LINE IS X+S*D=(X0,Y0,X0)+S*(DX,DY,DZ)
C     VERTEX POINT IS V=VTX(1,2,3)
C     DIST**2=(X+S*D-V)**2
C     D/DS   = 2 (X+SMIN*D-V) DOT D = 0
C     SMIN   = ((V-X) DOT D) / (D DOT D) = (V-X) DOT D
C
      SMIN=(VTX(1)-X0)*DX + (VTX(2)-Y0)*DY + (VTX(3)-Z0)*DZ
C
C     SHORTEST VECTOR FROM TRACK TO VERTEX
      XC=X0+SMIN*DX-VTX(1)
      YC=Y0+SMIN*DY-VTX(2)
      ZC=Z0+SMIN*DZ-VTX(3)
C
C     3D DISTANCE FROM VERTEX
      R3D=SQRT(XC**2+YC**2+ZC**2)
C
      RETURN
      END
      LOGICAL FUNCTION QVSGTK0(ITK,VTX)
      DIMENSION VTX(3)
C     TRACK CUTS FOR COARSE Z VERTEX
C     QVSGTK0 IS A FUNCTION NOT A SUBROUTINE
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     VTX() IS PRIMARY VERTEX COORDINATES FOR CUTS
C     OUTPUTS:
C     RETURNS QVSGTK0=.TRUE. OR .FALSE.
C
      LOGICAL QVSGTK
C
C     MINIMUM TPC HITS
      MNTP=4
C     MAXIMUM COS-THETA
      CTMX=1.
C     MAXIMUM DISTANCE FROM VTX X-Y AXIS
      D0MX=.3
C     MAXIMUM DISTANCE FROM VTX Z COORDINATE
      Z0MX=5.
C     MAXIMUM 3D DISTANCE FROM VTX
      RVMX=10.
C     MINIMUM TOTAL MOMENTUM
      PMIN=0.
C     MAXIMUM CHI-SQUARE PER DEGREE OF FREEDOM
      CPDMX=4.
C
C     USE GENERIC TRACK CUT FUNCTION
      QVSGTK0=QVSGTK(ITK,VTX,MNTP,CTMX,D0MX,Z0MX,RVMX,PMIN,CPDMX)
C
      RETURN
      END
      LOGICAL FUNCTION QVSGTK1(ITK,VTX)
      DIMENSION VTX(3)
C     QVSGTK1 IS A FUNCTION NOT A SUBROUTINE
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     VTX() IS PRIMARY VERTEX COORDINATES FOR CUTS
C     OUTPUTS:
C     RETURNS QVSGTK1=.TRUE. OR .FALSE.
C
      LOGICAL QVSGTK
C
C     SET CUTS
C     MINIMUM TPC HITS
      MNTP=4
C     MAXIMUM COS-THETA
      CTMX=1.
C     MAXIMUM DISTANCE FROM VTX X-Y AXIS
      D0MX=.3
C     MAXIMUM DISTANCE FROM VTX Z COORDINATE
      Z0MX=1.
C     MAXIMUM 3D DISTANCE FROM VTX
C     (OR D0 IF CUT IS LESS THAN 3 TIMES Z0 ERROR)
      RVMX=.3
C     MINIMUM TOTAL MOMENTUM
      PMIN=0.
C     MAXIMUM CHI-SQUARE PER DEGREE OF FREEDOM
      CPDMX=4.
C
C     USE GENERIC TRACK CUT FUNCTION
      QVSGTK1=QVSGTK(ITK,VTX,MNTP,CTMX,D0MX,Z0MX,RVMX,PMIN,CPDMX)
C
      RETURN
      END
      LOGICAL FUNCTION QVSGTK2(ITK,VTX,DKL)
      DIMENSION VTX(3)
C     QVSGTK2 IS A FUNCTION NOT A SUBROUTINE
C     TRACK CUTS FOR TRACK-VERTEX-ASSOCIATION
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     VTX() IS PRIMARY VERTEX COORDINATES FOR CUTS
C     DKL IS DECAY DISTANCE (USED TO LOOSEN IMPACT PARAMETER CUTS)
C     OUTPUTS:
C     RETURNS QVSGTK2=.TRUE. OR .FALSE.
C
      LOGICAL GTK,QVSGTK
C
C     SET CUTS
C     MINIMUM TPC HITS
      MNTP=4
C     MAXIMUM COS-THETA
      CTMX=1.
C     MAXIMUM DISTANCE FROM VTX X-Y AXIS
      D0MX=1.
C     MAXIMUM DISTANCE FROM VTX Z COORDINATE
      Z0MX=1.
C     MAXIMUM 3D DISTANCE FROM VTX
C     (OR D0 IF CUT IS LESS THAN 3 TIMES Z0 ERROR)
      RVMX=999.
C     MINIMUM TOTAL MOMENTUM
      PMIN=0.
C     MAXIMUM CHI-SQUARE PER DEGREE OF FREEDOM
      CPDMX=4.
C
C     USE GENERIC TRACK CUT FUNCTION
      GTK=QVSGTK(ITK,VTX,MNTP,CTMX,D0MX,Z0MX,RVMX,PMIN,CPDMX)
C
C     ASSUME BAD TRACK
      QVSGTK2=.FALSE.
C
C     PUNT IF TRACK FAILS LOOSE CUTS
      IF (.NOT. GTK) RETURN
C
C     GET D0,Z0 WITH RESPECT TO PRIMARY VERTEX, AND 3D DISTANCE
      CALL QVSMIS(ITK,VTX,D0V,Z0V,R3D)
C
C     IMPACT PARAMETER CUT: 3MM OR DECAY LENGTH
      DCUT=MAX(0.3,ABS(DKL))
C
C     REQUIRE CLOSE IN AT LEAST ONE PROJECTION
      IF (ABS(D0V) .GT. DCUT .AND. ABS(Z0V) .GT. DCUT) RETURN
C
C     MUST BE OK
      QVSGTK2=.TRUE.
C
      RETURN
      END
      SUBROUTINE QVSGTL0(VTX,MGTK,NGTK,JGTK)
      DIMENSION VTX(3),JGTK(MGTK)
C     RETURNS LIST OF GOOD ALPHA TRACKS
C     FOR COARSE Z VERTEX
C
      LOGICAL QVSGTK0
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
      NGTK=0
C
C     LOOP OVER TRACKS
      DO 150 ITK=KFCHT,KLCHT
C       APPLY COARSE Z VERTEX TRACK CUTS
        IF (QVSGTK0(ITK,VTX)) THEN
C         SAVE TRACK NUMBER
          NGTK=MIN(NGTK+1,MGTK)
          JGTK(NGTK)=ITK
        ENDIF
  150 CONTINUE
      RETURN
      END
      SUBROUTINE QVSGTL1(VTX,MGTK,NGTK,JGTK)
      DIMENSION VTX(3),JGTK(MGTK)
C     RETURNS LIST OF GOOD ALPHA TRACKS
C     FOR QVSPVX PRIMARY VERTEX
C
      LOGICAL QVSGTK1
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
      NGTK=0
C
C     LOOP OVER TRACKS
      DO 150 ITK=KFCHT,KLCHT
C       APPLY PRIMARY VERTEX TRACK CUTS
        IF (QVSGTK1(ITK,VTX)) THEN
C         SAVE TRACK NUMBER
          NGTK=MIN(NGTK+1,MGTK)
          JGTK(NGTK)=ITK
        ENDIF
  150 CONTINUE
      RETURN
      END
      SUBROUTINE QVSTKJ(ITK,DJET,JET)
      DIMENSION DJET(3,2)
C     RETURNS WHICH JET A TRACK IS CLOSER TO
C     INPUTS:
C     ITK IS ALPHA TRACK NUMBER
C     DJET(3,2) IS TWO NORMALIZED JET DIRECTION VECTORS
C     OUTPUT: JET=1 OR 2
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     CHECK TRACK DIRECTION
      DOT1=QX(ITK)*DJET(1,1)+QY(ITK)*DJET(2,1)+QZ(ITK)*DJET(3,1)
      DOT2=QX(ITK)*DJET(1,2)+QY(ITK)*DJET(2,2)+QZ(ITK)*DJET(3,2)
      JET=1
      IF (DOT2 .GT. DOT1) JET=2
      RETURN
      END
      SUBROUTINE QVSTKP(ITK,PVTX,DJET,
     > XP,DXDT,D2XDT2,ZP,DZDT,D2ZDT2,VXP,VZP,VXZ)
      DIMENSION PVTX(3),DJET(3)
C     RETURNS POLYNOMIAL DESCRIBING ALPHA TRACK ITK
C     IN VERTEX-JET COORDINATE SYSTEM
C     INPUTS:
C     ITK IS ALPHA TRACK INDEX
C     PVTX() IS XYZ OF POINT (PRIMARY VERTEX) IN ALEPH SYSTEM
C     DJET() IS NORMALIZED JET DIRECTION VECTOR
C     OUTPUTS:
C     XP IS THE R-PHI-LIKE COORDINATE IN THE TRANSLATED, ROTATED SYSTEM
C      WHERE THE TRACK INTECEPTS THE PLANE THROUGH PVTX()
C      WITH NORMAL VECTOR DJET
C     DXDT IS THE SLOPE OF THE TRACK IN THE ROTATED X DIRECTION
C      (I.E., RELATIVE TO THE DJET DIRECTION)
C     D2XDT2 IS THE 2D DERIVATIVE (CURVATURE) OF THE TRACK
C      X(T) = XP + DXDT*T + .5*D2XDT2*T*T
C     ZP,DZDT ARE THE ANALOGS OF XP,DXDT FOR Z-LIKE COORDINATE
C     D2ZDT2 IS THE Z CURVATURE (NONZERO IF DJET(3) IS NONZERO)
C      Z(T) = ZP + DZDT*T + .5*D2ZDT2*T*T
C     VXP,VZP ARE THE VARIANCES (NOT ERRORS!) ON XP,ZP
C     VXZ IS THE COVARIANCE
C
      DIMENSION XYZA(3),DIRA(3),CRVA(3)
      DIMENSION XYZJ(3),DIRJ(3),CRVJ(3)
      DIMENSION XYZS(3),DIRS(3)
      DIMENSION WTMA(3,3),WTMJ(3,3)
C
C     GET VECTORS DESCRIBING TRACK IN ALEPH SYSTEM
      CALL QVSTKV(ITK,XYZA,DIRA,CRVA)
C
C     GET WEIGHT MATRIX IN ALEPH SYSTEM
      CALL QVSTKW(ITK,DIRA,WTMA)
C
C     TRANSLATE AND ROTATE POINT CLOSEST TO Z AXIS
      CALL YVSTRJ(PVTX,DJET,XYZA,XYZJ)
C     ROTATE TRACK DIRECTION
      CALL YVSRTJ(DJET,DIRA,DIRJ)
C     ROTATE TRACK CURVATURE
      CALL YVSRTJ(DJET,CRVA,CRVJ)
C
C     ROTATE WEIGHT MATRIX
      CALL YVSRMJ(DJET,WTMA,WTMJ)
C
C     CHECK TRACK ANGLE IN JET SYSTEM
      IF (ABS(DIRJ(3)) .LT. 0.1) THEN
C       TRACK IS NOT FAR FROM NORMAL TO JET DIRECTION
C
C       WE ONLY CARE ABOUT A FEW MM OF TRACK NEAR THE JET AXIS
C        AND WE CAN NEGLECT CURVATURE FOR THIS,
C       BUT THE POINT OF INTERSECTION WITH JET PLANE MAY BE FAR AWAY
C        AND CURVATURE IS A NUISANCE FOR THAT,
C       SINCE POINT XYZJ IS PROBABLY ONLY A FEW MM FROM (0,0,0
C        WE'RE BETTER OFF WITH A STRAIGHT LINE THAT IS LOCALLY GOOD
C
C       SET CURVATURE TO ZERO
        CRVJ(1)=0.
        CRVJ(2)=0.
        CRVJ(3)=0.
      ENDIF
C
C     FIND S0 = STEP IN SPACE THAT TAKES TRACK TO
C     THE PLANE THROUGH PVTX NORMAL TO JET
      CALL YVSTP0(XYZJ,DIRJ,CRVJ,S0,IERR0)
C
C     CHECK RESULT
      IF (IERR0 .EQ. 2) THEN
C       TRACK CURVED AWAY FROM THE PLANE
C       S0 WAS CALCULATED WITH ZERO CURVATURE
C       SET CURVATURE TO ZERO
        CRVJ(1)=0.
        CRVJ(2)=0.
        CRVJ(3)=0.
C
      ELSEIF (IERR0 .EQ. 1) THEN
C       CURVATURE AND SLOPE BOTH ZERO (THIRD COMPONENT, ANYWAY)
C       S0 WAS NOT CALCULATED
C       SET CURVATURE TO ZERO
        CRVJ(1)=0.
        CRVJ(2)=0.
        CRVJ(3)=0.
C       ADD SOME FAKE ANGLE
        DIRJ(3)=1.E-6
C       FIND INTERCEPT NEGLECTING CURVATURE
        S0=-XYZJ(3)/DIRJ(3)
      ENDIF
C
C     SWIM TRACK TO PLANE
      CALL YVSWIM(S0,XYZJ,DIRJ,CRVJ,XYZS,DIRS)
C
C     COORDINATES OF TRACK AT PLANE
      XP=XYZS(1)
      ZP=XYZS(2)
C
C     MOTION IN JET DIRECTION PER CM OF SPACE LENGTH
      DTDS=DIRS(3)
C     AVOID BLOWUPS
      IF (DTDS .EQ. 0.) DTDS=1.E-6
      DSDT=1./DTDS
C
C     CHANGES IN X,Z PER CM ALONG JET DIRECTION
      DXDT=DIRS(1)*DSDT
      DZDT=DIRS(2)*DSDT
      D2XDT2=CRVJ(1)*DSDT*DSDT
      D2ZDT2=CRVJ(2)*DSDT*DSDT
C
C     FIND TRACK ERROR**2 IN JET SYSTEM
      CALL YVSTKE(WTMJ,VXP,VZP,VXZ)
C
      RETURN
      END
      SUBROUTINE QVSTKV(ITK,XYZA,DIRA,CRVA)
      DIMENSION XYZA(3),DIRA(3),CRVA(3)
C     RETURNS 3-VECTORS FOR POSITION, DIRECTION, CURVATURE, ERROR
C     IN ALEPH COORDINATE SYSTEM FOR ALPHA TRACK ITK
C     INPUTS:
C     ITK IS ALPHA TRACK INDEX
C     OUTPUTS:
C     XYZA() IS COORDINATES OF CLOSEST APPROACH TO ALEPH Z AXIS
C     DIRA() IS NORMALIZED DIRECTION VECTOR AT THAT POINT
C     CRVA() IS ORTHOGONAL DIRECTION FOR CURVATURE
C     POSITION VS DISTANCE S IS THEN (FOR SMALL CRVA AND SMALL S)
C      XYZ() = XYZA() + DIRA()*S + .5*CRVA()*S*S
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     GET HELIX PARAMETERS
      RI=QFRFIR(ITK)
      TL=QFRFTL(ITK)
      P0=QFRFP0(ITK)
      D0=QFRFD0(ITK)
      Z0=QFRFZ0(ITK)
C
C     ANGLE FACTORS
      SP=SIN(P0)
      CP=COS(P0)
      ST=1./SQRT(1.+TL**2)
C     COORDINATES AT CLOSEST APPROACH TO Z AXIS
      XYZA(1)=D0*SP
      XYZA(2)=-D0*CP
      XYZA(3)=Z0
C     DIRECTION AT XYZA
      DIRA(1)=ST*CP
      DIRA(2)=ST*SP
      DIRA(3)=ST*TL
C     CURVATURE VECTOR
      CRV=RI*ST
      CRVA(1)=-DIRA(2)*CRV
      CRVA(2)=DIRA(1)*CRV
      CRVA(3)=0.
C
      RETURN
      END
      SUBROUTINE QVSTKW(ITK,DIRA,WTMA)
      DIMENSION DIRA(3),WTMA(3,3)
C     RETURNS TRACK WEIGHT MATRIX IN ALEPH SYSTEM
C     INPUTS:
C     ITK IS ALPHA TRACK INDEX
C     DIRA() IS NORMALIZED TRACK DIRECTION IN ALEPH SYSTEM
C      CAN BE OBTAINED BY QVSTKV
C     OUTPUTS:
C     WTMA(,) IS WEIGHT MATRIX IN ALEPH SYSTEM
C
C     THE CHI SQUARE DISTANCE
C     FROM POINT Y() ON THE TRACK TO POINT X() ANYWHERE ELSE IS
C     FOUND BY SUMMING OVER I,J = 1,3
C     (X(I)-Y(I)) * WTMA(I,J) * (X(J)-Y(J))
C
      REAL*8 T1,T2
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     GET HELIX PARAMETERS
      TL=QFRFTL(ITK)
      ST=1./SQRT(1.+TL**2)
C
C     MAKE COVARIANCE NORMAL TO TRACK DIRECTION
      C11=QFRFEM(ITK,4,4)
      C21=QFRFEM(ITK,5,4)*ST
      C22=QFRFEM(ITK,5,5)*ST*ST
C
C     CLEAR WEIGHT MATRIX
      CALL UZERO(WTMA,1,9)
C
C     DETERMINANT OF COVARIANCE
      T1=C11
      T1=T1*C22
      T2=C21
      T2=T2*C21
      DET=T1-T2
C
      IF (DET .LE. 0.) THEN
C       TRACK WEIGHT MATRIX IS NONSENSE
        WRITE (6,19) DET,ITK,KRUN,KEVT
   19   FORMAT (' QVSTKW: DET=',1PE10.3,
     >   ' ITK=',I3,' KRUN=',I6,' KEVT=',I6)
        COR=SQRT(ABS(C11*C22))
        IF (COR .NE. 0.) COR=C21/COR
        WRITE (6,29) C11,C22,COR
   29   FORMAT (' C11=',1PE10.3,' C22=',1PE10.3,' COR=',0PF10.6)
C       SET THE CORRELATION TO ZERO
        C21=0.
        WRITE (6,*) ' SETTING CORRELATION TO ZERO'
      ENDIF
C
C     FILL CORNER OF WEIGHT MATRIX
      WTMA(1,1)=C11
      WTMA(2,1)=C21
      WTMA(1,2)=WTMA(2,1)
      WTMA(2,2)=C22
C
C     INVERT THE SUBMATRIX
      CALL RSINV(2,WTMA,3,IFAIL)
C
C     CHECK THE RESULT
      IF (IFAIL .NE. 0) THEN
        WRITE (6,39) IFAIL,ITK,KRUN,KEVT
   39   FORMAT (' QVSTKW: IFAIL=',I3,
     >   ' ITK=',I3,' KRUN=',I6,' KEVT=',I6)
        WRITE (6,29) C11,C22,COR
C       FILL MATRIX WITH ZEROES
        CALL UZERO(WTMA,1,9)
C       AND QUIT
        RETURN
      ENDIF
C
C     ROTATE FROM TRACK SYSTEM TO ALEPH SYSTEM
      CALL YVSRMI(DIRA,WTMA,WTMA)
C
      RETURN
      END
      SUBROUTINE QVSZ0B(ITK,PVXY,ZB,VZB)
      DIMENSION PVXY(2)
C     GIVEN ALPHA TRACK INDEX ITK, AND BEAM AXIS PVXY(),
C     RETURNS ZB = Z AT DISTANCE OF CLOSEST APPROACH TO BEAM AXIS
C     AND VZB=VARIANCE (SIGMA-SQUARED)
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     GET HELIX PARAMETERS
      RI=QFRFIR(ITK)
      TL=QFRFTL(ITK)
      P0=QFRFP0(ITK)
      D0=QFRFD0(ITK)
      Z0=QFRFZ0(ITK)
C     FIND COORDINATES AT CLOSEST APPROACH TO ORIGIN (NOT BEAM)
      SP=SIN(P0)
      CP=COS(P0)
      X0=D0*SP
      Y0=-D0*CP
C     RESTATE RELATIVE TO BEAM
      XB=X0-PVXY(1)
      YB=Y0-PVXY(2)
C     ROTATE INTO TRACK DIRECTION
      XBR=XB*CP+YB*SP
      YBR=YB*CP-XB*SP
C     EXTRAPOLATE TO BEAM PLANE (IN ROTATED X DIRECTION)
      ZB=Z0-XBR*TL
C     GET VARIANCE ON Z0
      VZB=QFRFEM(ITK,5,5)
      RETURN
      END
      SUBROUTINE QVSXZB(ITK,TSMR,YB,XB,VXB,ZB,VZB)
C     FINDS TRACK IMPACT WITH BEAM PLANE
C     INPUTS:
C     ITK IS ALPHA TRACK INDEX
C     TSMR IS ADDITIONAL TRACK SMEARING
C     YB IS Y COORDINATE OF BEAM PLANE
C     OUTPUTS:
C     XB,ZB ARE TRACK IMPACTS ON HORIZONTAL PLANE OF BEAM
C     VXB,VZB ARE VARIANCES IN XB, ZB
C
      DIMENSION DJET(3),PVTX(3)
C
      INCLUDE '/aleph/phy/qcde.inc'
      INCLUDE '/aleph/phy/qmacro.inc'
C
C     CREATE VERTICAL JET
      DJET(1)=0.
      DJET(2)=1.
      DJET(3)=0.
C     AND VERTEX AT BEAM PLANE
      PVTX(1)=0.
      PVTX(2)=YB
      PVTX(3)=0.
C
C     CALCULATE TRACK IMPACT, ERRORS, ETC. AT BEAM PLANE
      CALL QVSTKP(ITK,PVTX,DJET,
     > XB,DXDT,D2XDT2,ZB,DZDT,D2ZDT2,VXB,VZB,VXZ)
C
C     Z IN ROTATED SYSTEM TURNS OUT TO BE -Z IN ALEPH SYSTEM
      ZB=-ZB
C
C     ADD THE SMEARING
      VXB=VXB+TSMR**2*(1.+DXDT**2)
      VZB=VZB+TSMR**2*(1.+DZDT**2)
C
      RETURN
      END
      SUBROUTINE QVSIMP(ITK,PVTX,DJET,SVTX,EPVTX,ESVTX,
     >   DXP,DZP,DTP,DXS,DZS,DTS)
      DIMENSION PVTX(3),DJET(3),SVTX(3)
      DIMENSION EPVTX(3),ESVTX(3)
C     RETURNS NORMALIZED SIGNED IMPACT PARAMETERS
C     RELATIVE TO PRIMARY, SECONDARY VERTICES, IN X,Z,T
C     X IS BASICALLY D0, Z IS BASICALLY Z0, T IS ALONG JET DIRECITON
C     INPUTS
C     ITK IS ALPHA TRACK NUMBER
C     PVTX() IS PRIMARY VERTEX IN ALEPH COORDINATES
C     DJET() IS NORMALIZED JET DIRECTION IN ALEPH COORDINATES
C     SVTX() IS SECONDARY VERTEX IN TRANSLATED-ROTATED COORDINATES
C      ORIGIN AT PVTX, 3D AXIS IN DJET DIRECTION
C     EPVTX() IS ERROR IN PRIMARY VERTEX
C     ESVTX() IS ERROR IN SECONDARY VERTEX
C*     ZERO ERROR IS OK (AND WORKS FAIRLY WELL)
C     OUTPUTS
C     DXP IS X NORMALIZED SIGNED IMPACT RELATIVE TO PRIMARY
C     DZP IS Z NORMALIZED SIGNED IMPACT RELATIVE TO PRIMARY
C     DTP IS COMBINATION OF X AND Z SIGNED IMPACT PARAMETERS AT PRIMARY,
C      AND ERRORS AND SLOPES CORRESPONDING TO
C      NORMALIZED DISTANCE ALONG JET DIRECTION
C     DXS IS X NORMALIZED SIGNED IMPACT RELATIVE TO SECONDARY
C     DZS IS Z NORMALIZED SIGNED IMPACT RELATIVE TO SECONDARY
C     DTS IS LIKE DTP BUT RELATIVE TO SECONDARY
C
C*    MODIFIED BY T. MATTISON 8 DEC 1992:
C*    PROTECT AGAINST NONSENSE ERRORS OR ZERO SLOPES
C
C     NULL-RESULT VALUES
      DXP=-999.
      DZP=-999.
      DTP=-999.
      DXS=-999.
      DZS=-999.
      DTS=-999.
C
C     FIND TRACK PARAMETERS IN VERTEX-JET COORDINATES
      CALL QVSTKP(ITK,PVTX,DJET,
     > XP,DXDT,D2XDT2,ZP,DZDT,D2ZDT2,VXP,VZP,VXZ)
C
C     PUNT IF NONSENSE ERRORS
      IF (VXP .LE. 0.) RETURN
      IF (VZP .LE. 0.) RETURN
C
C     FIND PRIMARY VERTEX ERRORS IN ROTATED SYSTEM
      CALL YVSPVE(EPVTX,DJET,EX,EZ,ET)
C
C     PRIMARY VERTEX ERRORS PROJECTED WITH TRACK SLOPES
      EPX2=EX**2+(DXDT*ET)**2
      EPZ2=EZ**2+(DZDT*ET)**2
C
C     NORMALIZED MISS DISTANCES FROM PRIMARY
      DXP=XP/SQRT(VXP+EPX2)
      DZP=ZP/SQRT(VZP+EPZ2)
C
C     DISTANCE ALONG JET AXIS FROM PRIMARY
      IF (DXDT .NE. 0. .OR. DZDT .NE. 0.) THEN
        WX=DXDT**2/(VXP+EPX2)
        WZ=DZDT**2/(VZP+EPZ2)
        DTP=(XP*DXDT/(VXP+EPX2)+ZP*DZDT/(VZP+EPZ2))/SQRT(WX+WZ)
      ENDIF
C
C     TRACK COORDINATES AT DISTANCE OF SECONDARY
      T=SVTX(3)
      XS=XP+DXDT*T+.5*D2XDT2*T**2
      ZS=ZP+DZDT*T+.5*D2ZDT2*T**2
C
C     SUBTRACT OFF SECONDARY
      XS=XS-SVTX(1)
      ZS=ZS-SVTX(2)
C
C     SECONDARY VERTEX ERRORS PROJECTED WITH TRACK SLOPES
      ESX2=ESVTX(1)**2+(DXDT*ESVTX(3))**2
      ESZ2=ESVTX(2)**2+(DZDT*ESVTX(3))**2
C
C     NORMALIZED MISS DISTANCES FROM SECONDARY
      DXS=XS/SQRT(VXP+ESX2)
      DZS=ZS/SQRT(VZP+ESZ2)
C
C     DISTANCE ALONG JET AXIS FROM SECONDARY
      IF (DXDT .NE. 0. .OR. DZDT .NE. 0.) THEN
        WX=DXDT**2/(VXP+ESX2)
        WZ=DZDT**2/(VZP+ESZ2)
        DTS=(XS*DXDT/(VXP+ESX2)+ZS*DZDT/(VZP+ESZ2))/SQRT(WX+WZ)
      ENDIF
C
C     DO THE SIGNS (EASY IN JET COORDINATE SYSTEM)
      DXP=SIGN(DXP,-DXDT*XP)
      DZP=SIGN(DZP,-DZDT*ZP)
      DTP=-DTP
      DXS=SIGN(DXS,-DXDT*XS)
      DZS=SIGN(DZS,-DZDT*ZS)
      DTS=-DTS
C
      RETURN
      END
      SUBROUTINE YVSWIM(S,XYZ,DIR,CRV,XYZS,DIRS)
      DIMENSION XYZ(3),DIR(3),CRV(3)
      DIMENSION XYZS(3),DIRS(3)
C     SWIMS TRACK DESCRIPTION VECTORS TO PATH-LENGTH S
C     INPUTS:
C     XYZ(3) IS TRACK POSITION  AT S=0
C     DIR(3) IS TRACK DIRECTION AT S=0
C     CRV(3) IS TRACK CURVATURE AT S=0
C      AT ANY S, XYZS(I) = XYZ(I) + DIR(I)*S + .5*CRV(I)*S*S
C     OYTPUTS:
C     XYZS(3) IS TRACK POSITION  AT S
C     DIRS(3) IS TRACK DIRECTION AT S
C
      SS=.5*S*S
      XYZS(1)=XYZ(1)+DIR(1)*S+CRV(1)*SS
      XYZS(2)=XYZ(2)+DIR(2)*S+CRV(2)*SS
      XYZS(3)=XYZ(3)+DIR(3)*S+CRV(3)*SS
      DIRS(1)=DIR(1)+CRV(1)*S
      DIRS(2)=DIR(2)+CRV(2)*S
      DIRS(3)=DIR(3)+CRV(3)*S
C
      RETURN
      END
      SUBROUTINE YVSTP0(XYZ,DIR,CRV,S0,IERR)
      DIMENSION XYZ(3),DIR(3),CRV(3)
C     FINDS PATH-LENGTH THAT STEPS TRACK VECTOR TO Z=0
C     INPUTS:
C     XYZ(3) IS TRACK POSITION  AT S=0
C     DIR(3) IS TRACK DIRECTION AT S=0
C     CRV(3) IS TRACK CURVATURE AT S=0
C      COMPONENTS 1,2 ARE IGNORED
C     OUTPUT:
C     S0 IS S VALUE THAT MAKES XYZS(3)=0
C     IERR IS ERROR FLAG
C      =0 FOR OK
C      =1 IF TRACK CURVES AWAY
C       (S0 IS CALCULATED WITH CRV(3)=0 IN THIS CASE)
C      =2 IF DIR(3)=CRV(3)=0
C
      REAL*8 B2,AC4,RAD
C
      A=.5*CRV(3)
      B=DIR(3)
      C=XYZ(3)
C     DO FIRST WITH NO CURVATURE AS BACKUP
      IF (B .NE. 0.) THEN
        S0=-C/B
        IERR=0
      ELSE
        IERR=2
      ENDIF
C     TRY WITH CURVATURE
      IF (A .NE. 0.) THEN
C       A LITTLE PRECISION GYMNASTICS
        B2=B
        B2=B2*B2
        AC4=A
        AC4=AC4*C*4.D0
        RAD=B2-AC4
        IF (RAD .GE. 0.) THEN
          IERR=0
          RAD=DSQRT(RAD)
C         CHOOSE SOLUTION WITH SMALLER PATH-LENGTH TO Z=0
          T1=-B+RAD
          T2=-B-RAD
          IF (ABS(T1) .LT. ABS(T2)) THEN
            S0=.5*T1/A
          ELSE
            S0=.5*T2/A
          ENDIF
        ELSE
C         CURVES AWAY FROM Z=0 PLANE
C         LEAVE THE NO-CURVATURE RESULT
          IERR=1
        ENDIF
      ENDIF
C
      RETURN
      END
      SUBROUTINE YVSRTJ(DJET,XYZ,XYZR)
      DIMENSION DJET(3),XYZ(3),XYZR(3)
C     ROTATES VECTOR XYZ INTO DJET DIRECTION
C     INPUTS:
C     DJET() IS NORMALIZED DIRECTION VECTOR
C     XYZ() IS VECTOR TO BE TRANSFORMED
C     OUTPUT:
C     XYZR() IS VECTOR IN NEW SYSTEM
C      XYZR(3) COMPONENT IS ALONG DJET DIRECTION
C      CAN BE SAME FORTRAN ARRAY AS XYZ
C
      DIMENSION ROT(3,3)
      REAL*8 T1,T2,T3
C
C     MAKE FORWARD ROTATION MATRIX
      CALL YVSROM(DJET,ROT)
C
C     COPY THE INPUT (IN CASE IT'S SAME AS OUTPUT)
      T1=XYZ(1)
      T2=XYZ(2)
      T3=XYZ(3)

C     ROTATE THE VECTOR
C     VECTOR ON RIGHT OF MATRIX
C     OUTPUT SUBSCRIPT SAME AS FIRST MATRIX SUBSCRIPT
      XYZR(1)=ROT(1,1)*T1+ROT(1,2)*T2+ROT(1,3)*T3
      XYZR(2)=ROT(2,1)*T1+ROT(2,2)*T2+ROT(2,3)*T3
      XYZR(3)=ROT(3,1)*T1+ROT(3,2)*T2+ROT(3,3)*T3
C
      RETURN
      END
      SUBROUTINE YVSRTI(DJET,XYZR,XYZ)
      DIMENSION DJET(3),XYZR(3),XYZ(3)
C     INVERSE-ROTATES VECTOR XYZ FROM DJET DIRECTION
C     INPUTS:
C     DJET() IS NORMALIZED DIRECTION VECTOR
C     XYZR() IS VECTOR TO BE TRANSFORMED
C      XYZR(3) COMPONENT IS ALONG DJET DIRECTION
C     OUTPUT:
C     XYZ() IS VECTOR IN NEW SYSTEM
C      CAN BE SAME FORTRAN ARRAY AS XYZR
C
      DIMENSION ROT(3,3)
      REAL*8 T1,T2,T3
C
C     MAKE FORWARD ROTATION MATRIX
      CALL YVSROM(DJET,ROT)
C
C     COPY THE INPUT (IN CASE IT'S SAME AS OUTPUT)
      T1=XYZR(1)
      T2=XYZR(2)
      T3=XYZR(3)

C     ROTATE THE VECTOR
C     TRANSPOSE MATRIX ON RIGHT
C     OUTPUT SUBSCRIPT SAME AS LAST MATRIX SUBSCRIPT
      XYZ(1)=T1*ROT(1,1)+T2*ROT(2,1)+T3*ROT(3,1)
      XYZ(2)=T1*ROT(1,2)+T2*ROT(2,2)+T3*ROT(3,2)
      XYZ(3)=T1*ROT(1,3)+T2*ROT(2,3)+T3*ROT(3,3)
C
      RETURN
      END
      SUBROUTINE YVSTRJ(PVTX,DJET,XYZ,XYZR)
      DIMENSION PVTX(3),DJET(3),XYZ(3),XYZR(3)
C     TRANFORMS POINT IN XYZ SYSTEM TO XYZR SYSTEM
C     (ORIGIN AT PVTX, ROTATED TO DJET DIRECTION)
C     INPUTS:
C     PVTX() IS ORIGIN OF NEW SYSTEM (PRIMARY VERTEX)
C     DJET() IS NORMALIZED DIRECTION VECTOR
C     XYZ() IS POINT TO BE TRANSFORMED
C     OUTPUT:
C     XYZR() IS POINT IN NEW SYSTEM
C      XYZR(3) COMPONENT IS ALONG DJET DIRECTION
C
C     FIRST DO TRANSLATION
      XYZR(1)=XYZ(1)-PVTX(1)
      XYZR(2)=XYZ(2)-PVTX(2)
      XYZR(3)=XYZ(3)-PVTX(3)
C
C     THEN ROTATION
      CALL YVSRTJ(DJET,XYZR,XYZR)
C
      RETURN
      END
      SUBROUTINE YVSTRI(PVTX,DJET,XYZR,XYZ)
      DIMENSION PVTX(3),DJET(3),XYZ(3),XYZR(3)
C     INVERSE-TRANFORMS POINT IN XYZR SYSTEM TO XYZ SYSTEM
C     (ORIGIN AT PVTX, ROTATED TO DJET DIRECTION)
C     INPUTS:
C     PVTX() IS ORIGIN OF NEW SYSTEM (PRIMARY VERTEX)
C     DJET() IS NORMALIZED DIRECTION VECTOR
C     XYZR() IS POINT TO BE TRANSFORMED
C      XYZR(3) COMPONENT IS ALONG DJET DIRECTION
C     OUTPUT:
C     XYZ() IS POINT IN ORIGINAL SYSTEM
C
C     FIRST UNDO ROTATION
      CALL YVSRTI(DJET,XYZR,XYZ)
C
C     THEN UNDO TRANSLATION
      XYZ(1)=XYZ(1)+PVTX(1)
      XYZ(2)=XYZ(2)+PVTX(2)
      XYZ(3)=XYZ(3)+PVTX(3)
C
      RETURN
      END
      SUBROUTINE YVSRMJ(DIR,A,B)
      DIMENSION DIR(3),A(3,3),B(3,3)
C     ROTATES COVARIANCE OR WEIGHT MATRIX
C     INPUTS:
C     DIR() IS NORMALIZED DIRECTION VECTOR
C     A(,) IS INPUT MATRIX
C     OUTPUT:
C     B(,) IS MATRIX IN COORDINATE SYSTEM WHERE DIR=(0,0,1)
C
      DIMENSION ROT(3,3),TMP(3,3)
      REAL*8 ARJM,SUM
C
C     MAKE (FORWARD) ROTATION MATRIX
      CALL YVSROM(DIR,ROT)
C
C     COPY INPUT (IN CASE IT IS SAME AS OUTPUT)
      CALL UCOPY(A,TMP,9)
C
C     MULTIPLY MATRICES
      DO 450 N=1,3
        DO 350 M=1,3
          SUM=0.
          DO 250 J=1,3
C           TRANSPOSE ON RIGHT
            ARJM=TMP(J,1)
            ARJM=ARJM*ROT(M,1)+TMP(J,2)*ROT(M,2)+TMP(J,3)*ROT(M,3)
C           FORWARD ON LEFT
            SUM=SUM+ROT(N,J)*ARJM
  250     CONTINUE
          B(M,N)=SUM
  350   CONTINUE
  450 CONTINUE
      RETURN
      END
      SUBROUTINE YVSROM(DIR,ROT)
      DIMENSION DIR(3),ROT(3,3)
C     MAKES FORWARD ROTATION MATRIX
C     INPUTS:
C     DIR() IS NORMALIZED DIRECTION VECTOR
C     OUTPUT:
C     ROT(,) IS MATRIX THAT ROTATES DIR() TO DIR'=(0,0,+1)
C      DIR'(I)= ROT(I,J)*DIR(J), SUMMED OVER J
C
      T=SQRT(DIR(1)**2+DIR(2)**2)
      IF (T .NE. 0.) THEN
        RT=1./T
        ROT(1,1)= DIR(2)*RT
        ROT(1,2)=-DIR(1)*RT
        ROT(1,3)=0.
        ROT(2,1)= DIR(1)*RT*DIR(3)
        ROT(2,2)= DIR(2)*RT*DIR(3)
        ROT(2,3)=-T
        ROT(3,1)= DIR(1)
        ROT(3,2)= DIR(2)
        ROT(3,3)= DIR(3)
      ELSE
        CALL UZERO(ROT,1,9)
        ROT(1,1)=1.
        ROT(2,2)=DIR(3)
        ROT(3,3)=DIR(3)
      ENDIF
      RETURN
      END
      SUBROUTINE YVSRMI(DIR,A,B)
      DIMENSION DIR(3),A(3,3),B(3,3)
C     INVERSE-ROTATES COVARIANCE OR WEIGHT MATRIX
C     INPUTS:
C     DIR() IS NORMALIZED DIRECTION VECTOR
C     A(,) IS MATRIX IN COORDINATE SYSTEM WHERE DIR=(0,0,1)
C     OUTPUT:
C     B(,) IS OUTPUT MATRIX
C
      DIMENSION ROT(3,3),TMP(3,3)
      REAL*8 ARJM,SUM
C
C     MAKE (FORWARD) ROTATION MATRIX
      CALL YVSROM(DIR,ROT)
C
C     COPY INPUT (IN CASE IT IS SAME AS OUTPUT)
      CALL UCOPY(A,TMP,9)
C
C     MULTIPLY MATRICES
      DO 450 N=1,3
        DO 350 M=1,3
          SUM=0.
          DO 250 J=1,3
C           FORWARD ON RIGHT
            ARJM=TMP(J,1)
            ARJM=ARJM*ROT(1,M)+TMP(J,2)*ROT(2,M)+TMP(J,3)*ROT(3,M)
C           TRANSPOSE ON LEFT
            SUM=SUM+ROT(J,N)*ARJM
  250     CONTINUE
          B(M,N)=SUM
  350   CONTINUE
  450 CONTINUE
      RETURN
      END
      SUBROUTINE YVSTKE(WTM,VXP,VZP,VXZ)
      DIMENSION WTM(3,3)
C     FINDS TRACK ERROR**2 IN JET COORDINATE SYSTEM
C     INPUTS
C     WTM(,) IS 3D TRACK WEIGHT MATRIX IN JET SYSTEM
C     OUTPUTS
C     VXP IS TRACK VARIANCE (SIGMA**2) IN D0-LIKE DIRECTION
C     VZP IS TRACK VARIANCE IN Z0-LIKE DIRECTION
C     VXZ IS COVARIANCE
C
      REAL*8 T1,T2
C
C     ASSUME BIG VARIANCES IN CASE OF FAILURE
      VXP=999.
      VZP=999.
      VXZ=0.
C
C     DETERMINANT OF SUBMATRIX
      T1=WTM(1,1)
      T1=T1*WTM(2,2)
      T2=WTM(2,1)
      T2=T2*WTM(1,2)
      DET=T1-T2
      W11=WTM(1,1)
      W22=WTM(2,2)
      COR=SQRT(ABS(W11*W22))
      IF (COR .NE. 0.) COR=WTM(1,2)/COR
C
      IF (DET .LE. 0.) THEN
C       TRACK WEIGHT MATRIX IS NONSENSE
CC      WRITE (6,19) DET
   19   FORMAT (' YVSTKE: DET=',1PE10.3)
CC      WRITE (6,29) W11,W22,COR
   29   FORMAT (' W11=',1PE10.3,' W22=',1PE10.3,' COR=',0PF10.6)
C       GIVE UP
        RETURN
      ELSE
C       INVERT THE SUBMATRIX
        CALL RSINV(2,WTM,3,IFAIL)
C       CHECK THE RESULT
        IF (IFAIL .NE. 0) THEN
          WRITE (6,39) IFAIL
   39     FORMAT (' YVSTKE: IFAIL=',I3)
          WRITE (6,29) W11,W22,COR
        ELSE
C         COPY THE RESULTS
          VXP=WTM(1,1)
          VZP=WTM(2,2)
          VXZ=WTM(1,2)
        ENDIF
      ENDIF
      RETURN
      END
      SUBROUTINE YVSXZJ(NGTK,JGTK,PVTX,EVTX,DJET,JET,EJET,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,NBT,TL,TH,VLF,
     > XV,EXV,ZV,EZV,TV,ETV,DLLX,DLLZ)
      DIMENSION JGTK(*),PVTX(3),EVTX(3),DJET(3,2)
      DIMENSION VLF(*)
C     FINDS X,Z,AND T OF SECONDARY VERTEX
C     IN VERTEX-JET COORDINATE SYSTEM (T MEANS ALONG JET DIRECTION)
C     USING SAMPLED MAXIMUM LIKELIHOOD FIT TO PROJECTIONS
C     INPUT:
C     JGTK IS ARRAY CONTAINING A LIST OF NGTK TRACKS
C     PVTX() IS COORDINATE OF PRIMARY VERTEX IN ALEPH COORDINATES
C     EVTX() IS ERROR IN PVTX
C     DJET() IS TWO NORMALIZED 3-VECTOR JET DIRECTIONS
C      MUST BE NORMALIZED TO 1 (NOT CHECKED HERE)
C     JET IS WHICH JET TO DO (1 OR 2)
C     EJET IS ERROR IN JET ANGLE
C     SGMX IS GAUSSIAN RANGE OF ERRORS (CONSIDERED FLAT BEYOND THIS)
C     NBX,XL,XH ARE BINS, LOW AND HIGH LIMITS FOR VERTEX X
C     NBZ,ZL,ZH ARE SAME FOR VERTEX Z
C     NBT,TL,TH ARE SAME FOR DECAY LENGTH IN DJET DIRECTION
C     VLF((NBX+NBZ)*NBT) IS SAMPLED LOG-LIKELIHOOD ARRAY
C     OUTPUT:
C     XV,ZV,EXV,EZV ARE X AND Z VERTEX AND ERROR NORMAL TO DJET(,JET)
C      IN THE ROTATED AND TRANSLATED COORDINATE SYSTEM
C     TV,ETV IS THE DECAY LENGTH AND ERROR
C      IN THE DJET(,JET) DIRECTION
C     VLF CONTAINS 2 2-DIMENSIONAL SAMPLED LOG-LIKELIHOOD FUNCTIONS:
C      VLFX(NBX,NBT),VLFZ(NBZ,NBT)
C     DLLX,DLLZ ARE VALUES OF LIKELIHOOD FUNCTIONS AT THE COMBINED PEAK
C      WHICH IS ALSO THE DIFFERENCE IN LOG-LIKELIHOOD BETWEEN
C      PRESENCE AND ABSENCE OF THE SECONDARY VERTEX
C      IN THE TWO PROJECTIONS
C
C     CLEAR LIKELIHOOD FUNCTION
      CALL UZERO(VLF,1,(NBX+NBZ)*NBT)
C
C     CALCULATE PRIMARY VERTEX ERRORS IN ROTATED SYSTEM
      CALL YVSPVE(EVTX,DJET(1,JET),EX,EZ,ET)
C
C     ENTER PRIMARY VERTEX AND JET ERRORS AS A PSEUDO-TRACK
C     ZERO INTERCEPT AND SLOPE, ERROR GROWS WITH DISTANCE
C     CUTOFF AT SGMX, ENTERED IN BOTH X AND Z PROJECTIONS
      CALL YVSVJE(EX,EJET,SGMX,NBX,XL,XH,NBT,TL,TH,VLF(1))
      CALL YVSVJE(EZ,EJET,SGMX,NBZ,ZL,ZH,NBT,TL,TH,VLF(NBX*NBT+1))
C
C     CLEAR LIKELIHOOD SUMS FOR HYPOTHESIS OF NO-SECONDARY
      VLFX=0.
      VLFZ=0.
C     FIND BIN WIDTHS
      BWX=(XH-XL)/NBX
      BWZ=(ZH-ZL)/NBZ
      BWT=(TH-TL)/NBT
      SGMX2=SGMX**2
C
C     LOOP OVER TRACKS
      DO 250 JTK=1,NGTK
        ITK=JGTK(JTK)
C
C       CHECK IF TRACK IS IN DESIRED JET
        CALL QVSTKJ(ITK,DJET,ITKJ)
        IF (ITKJ .EQ. JET) THEN
C
C         GET TRACK DESCRIPTION POLYNOMIAL, ERRORS
          CALL QVSTKP(ITK,PVTX,DJET(1,JET),
     >     XP,DXDT,D2XDT2,ZP,DZDT,D2ZDT2,VXP,VZP,VXZ)
C
C         ADD VERTEX ERRORS IN QUADRATURE
          VXP=VXP+EX**2+(ET*DXDT)**2
          VZP=VZP+EZ**2+(ET*DZDT)**2
C
C         LIMIT ERRORS TO BIN SIZES
          EXP=MAX(SQRT(VXP),ABS(BWX),ABS(BWT*DXDT))
          EZP=MAX(SQRT(VXP),ABS(BWZ),ABS(BWT*DZDT))
C
C         FIND HOW FAR TRACK IS FROM (0,0) AT T=0 (TRANSFORMED PRIMARY
          DX2=XP**2/EXP**2
          DZ2=ZP**2/EZP**2
C         ADD TO NULL-HYPOTHESIS SUMS
          VLFX=VLFX-.5*MIN(DX2,SGMX2)
          VLFZ=VLFZ-.5*MIN(DZ2,SGMX2)
C
C         ONLY LET TRACK CONTRIBUTE WHEN CLOSER TO
C         HYPOTHETICAL SECONDARY THAN TO PRIMARY VERTEX
C         USING 2-D MISS DISTANCE LETS VIEWS HELP EACH OTHER
C         BUT MAKES NEGATIVE DLL POSSIBLE
          SIGL=MIN(SQRT(DX2+DZ2),SGMX)
C
C         ADD TRACK TO LIKELIHOOD FUNCTIONS
C         X PROJECTION
          CALL YVSLFL(NBX,XL,XH,XP,EXP,SIGL,NBT,TL,TH,
     >      DXDT,D2XDT2,VLF(1))
C
C         Z PROJECTION
          CALL YVSLFL(NBZ,ZL,ZH,ZP,EZP,SIGL,NBT,TL,TH,
     >      DZDT,D2ZDT2,VLF(NBX*NBT+1))
C
        ENDIF
  250 CONTINUE
C
C     GIVE UP IF NO TRACKS IN THE HEMISPHERE
      IF (VLFX .EQ. 0.) THEN
        EXV=-999.
        EZV=-999.
        ETV=-999.
        DLLX=-999.
        DLLZ=-999.
        RETURN
      ENDIF
C
C     FIND CONSISTENT PEAK IN THE 2 LIKELIHOOD FUNCTIONS
      CALL YVSCM2(VLF(1),VLF(NBX*NBT+1),
     > NBX,NBT,NBZ,MBX,MBT,MBZ)
C
C     FIT PARABOLOIDS TO PEAKS TO INTERPOLATE AND GET ERRORS
      CALL YVSPR2(VLF(1),VLF(NBX*NBT+1),
     > NBX,NBT,NBZ,MBX,MBT,MBZ,
     > IERR,XV,EXV,TV,ETV,ZV,EZV,FXT,FZT)
C
C     CONVERT TO EXTERNAL UNITS
      XV=XL+(MBX-.5+XV)*BWX
      ZV=ZL+(MBZ-.5+ZV)*BWZ
      TV=TL+(MBT-.5+TV)*BWT
      EXV=EXV*ABS(BWX)
      EZV=EZV*ABS(BWZ)
      ETV=ETV*ABS(BWT)
C
C     FIND LIKELIHOOD CONTRIBUTION FROM PRIMARY+JET
      EX2=EX**2+(EJET*TV)**2
      PJX=.5*MIN(XV**2/EX2,SGMX2)
      EZ2=EZ**2+(EJET*TV)**2
      PJZ=.5*MIN(ZV**2/EZ2,SGMX2)
C
C     LIKELIHOOD DIFFERENCES FOR PROJECTIONS
      DLLX=FXT+PJX-VLFX
      DLLZ=FZT+PJZ-VLFZ
C
      RETURN
      END
      SUBROUTINE YVSPVE(EVTX,DJET,EX,EZ,ET)
      DIMENSION EVTX(3),DJET(3)
C     FINDS PROJECTED PRIMARY VERTEX ERRORS IN ROTATED SYSTEM
C
      DIMENSION CV(3,3)
C
C     CLEAR COVARIANCE
      CALL UZERO(CV,1,9)
C     LOAD DIAGONAL ELEMENTS
      CV(1,1)=EVTX(1)**2
      CV(2,2)=EVTX(2)**2
      CV(3,3)=EVTX(3)**2
C     ROTATE INTO JET SYSTEM
      CALL YVSRMJ(DJET,CV,CV)
C     UNLOAD X AND Z VERTEX ERRORS
      EX=SQRT(ABS(CV(1,1)))
      EZ=SQRT(ABS(CV(2,2)))
      ET=SQRT(ABS(CV(3,3)))
      RETURN
      END
      SUBROUTINE YVSVJE(EU,EDUDV,SGMX,NBU,UL,UH,NBV,VL,VH,VLF)
      DIMENSION VLF(*)
C     PUTS VERTEX AND JET ANGLE RESOLUTION INTO LIKELIHOOD FUNCTION
C     CENTERED AT U=0, DU/DV=0
C
C     FIND BIN WIDTHS
      BWU=(UH-UL)/NBU
      BWV=(VH-VL)/NBV
C     FIND CUTOFF
      GMN=-.5*SGMX**2
      IB=0
C     LOOP OVER V BINS
      DO 250 IV=1,NBV
C       FIND V VALUE
        V=VL+(IV-.5)*BWV
C       COMBINE VERTEX ERROR AND JET ANGLE ERROR
        ERR2=EU**2+(V*EDUDV)**2
        RSIG=1./SQRT(ERR2)
C       LOOP OVER U BINS
        DO 150 IU=1,NBU
C         FIND U VALUE
          U=UL+(IU-.5)*BWU
C         CALCULATE GAUSSIAN
          GSN=-.5*(U*RSIG)**2
C         INCREMENT FUNCTION
          IB=IB+1
          VLF(IB)=VLF(IB)+MAX(GSN,GMN)
  150   CONTINUE
  250 CONTINUE
      RETURN
      END
      SUBROUTINE YVSLFL(NBU,UL,UH,U,EU,EUMX,NBV,VL,VH,DUDV,D2UDV2,
     > VLF)
      DIMENSION VLF(*)
C     ADDS LINE (TRACK) TO 2-DIMENSION LOG-LIKELIHOOD DISTRIBUTION VLF.
C     INPUTS:
C     NBU,UL,UH ARE NUMBER OF BINS, LOW AND HIGH LIMITS
C      FOR DEPENDENT VARIABLE U
C     U,EU ARE VALUE AND SIGMA AT INDEPENDENT VARIABLE V=0
C     EUMX IS HOW MANY SIGMAS THE DISTRIBUTION REMAINS GAUSSIAN
C     NBV,VL,VH ARE NUMBER OF BINS, LOW AND HIGH LIMITS
C      FOR INDEPENDENT VARIABLE
C     DUDV,D2UDV2 ARE 1,2 DERIVATIVES OF U WITH RESPECT TO V
C      U(V)= U + DUDV*V + .5*D2UDV2*V*V
C     VLF(NBU*NBV) IS ARRAY CONTAINING LOG-LIKELIHOOD FUNCTION
C      STORED AS VLF(IU,IV)
C     OUTPUT:
C     ALTERS VLF()
C
C     FIND BIN WIDTHS
      BWU=(UH-UL)/NBU
      BWV=(VH-VL)/NBV
C     FIND LIMITING LOG-LIKELIHOOD VALUE
      UMX=-.5*EUMX**2
C     INVERSE ERROR**2
      REU=1./EU
C     CLEAR BIN COUNTER
      IB=0
C     LOOP OVER V BINS
      BCV=VL-.5*BWV
      DO 350 IBV=1,NBV
        BCV=BCV+BWV
C       FIND POSITION AT THIS V
        UV=U+DUDV*BCV+.5*D2UDV2*BCV**2
C       LOOP OVER U BINS
        BCU=UL-.5*BWU
C       QUANTITIES FOR FAST-PARABOLA CALCULATION
        T1=-.5*REU**2*BWU*(BWU-2.*UV)
        T2=-.5*REU**2*BWU*2.*BCU
        DT2=-.5*REU**2*BWU*2.*BWU
        FGSN=-.5*((UV-BCU)*REU)**2
        DO 250 IBU=1,NBU
C         FIND GAUSSIAN LOG-LIKELIHOOD
C         BCU=BCU+BWU
C         GSN=-.5*((UV-BCU)*REU)**2
C         FASTER EQUIVALENT
          FGSN=FGSN+T1+T2
          T2=T2+DT2
C         INCREMENT BIN COUNTER
          IB=IB+1
C         INCREMENT WITH LARGER OF V=0 AND PRESENT V BIN
          VLF(IB)=VLF(IB)+MAX(FGSN,UMX)
  250   CONTINUE
  350 CONTINUE
      RETURN
      END
      SUBROUTINE YVSCM2(F1,F2,NU1,NV,NU2,MU1,MV,MU2)
      DIMENSION F1(*),F2(*)
C     FINDS CONSISTENT PEAK IN 2 SAMPLED 2-D LIKELIHOOD FUNCTIONS
C     STAYS AWAY FROM EDGES IN ALL VARIABLES
C     INPUTS:
C     F1 IS FIRST FUNCTION, STORED AS IF DIMENSIONED F1(NU1,NV)
C     F2 IS SECOND, STORED AS F2(NU2,NV)
C     NU1,NV,NU2 ARE DIMENSIONS OF ARRAYS
C     OUTPUTS:
C     MU1,MV,MU2 DESCRIBE LOCATION OF MAXIMUM OF SUM OF 2 FUNCTIONS:
C      F1(MU1,MV)+F2(MU2,MV)
C
      FSUM=-999999.
C     LOOP OVER COMMON VARIABLE V
      DO 350 IV=2,NV-1
C       FIND LARGEST ELEMENT IN F1 AT THIS V
        IOF=(IV-1)*NU1
        F1M=-999999.
        DO 150 IU1=2,NU1-1
          IBIN=IOF+IU1
          IF (F1(IBIN) .GT. F1M) THEN
            JU1=IU1
            F1M=F1(IBIN)
          ENDIF
  150   CONTINUE
C       FIND LARGEST ELEMENT IN F2 AT THIS V
        IOF=(IV-1)*NU2
        F2M=-999999.
        DO 250 IU2=2,NU2-1
          IBIN=IOF+IU2
          IF (F2(IBIN) .GT. F2M) THEN
            JU2=IU2
            F2M=F2(IBIN)
          ENDIF
  250   CONTINUE
C       SAVE IF LARGEST YET
        IF (F1M+F2M .GT. FSUM) THEN
          MU1=JU1
          MU2=JU2
          MV=IV
          FSUM=F1M+F2M
        ENDIF
  350 CONTINUE
      RETURN
      END
      SUBROUTINE YVSPR2(F1,F2,NU1,NV,NU2,MU1,MV,MU2,
     > IERR,U1M,U1E,VM,VE,U2M,U2E,F1M,F2M)
      DIMENSION F1(*),F2(*)
C     FITS COMBINED PARABOLOID TO 2 2-D FUNCTIONS
C     INPUTS:
C     F1 IS FIRST FUNCTION, STORED AS IF DIMENSIONED F1(NU1,NV)
C     F2(NU2,NV) IS ANALOGOUS
C     NU1,NV,NU2 ARE THE DIMENSIONS
C     MU1,MV,MU2 ARE THE COORDINATES OF THE MAXIMUM
C      MUST BE >1, < DIMENSION
C     OUTPUTS:
C     IERR=0 FOR OK, 1 FOR MATRIX PROBLEM, 2 FOR MAXIMUM PROBLEMS
C     U1M IS THE FRACTION OF A BIN TO THE INTERPOLATED MAXIMUM
C       FOR THE U VARIABLE IN F1
C     U1E IS THE ERROR (HALF LOG-LIKELIHOOD UNIT) IN BIN UNITS
C     U1M,U2E ARE ANALOGOUS FOR THE U2 VARIABLE IN F2
C     VM,VE ARE ANALOGOUS FOR THE COMMON VARIABLE V
C     ERRORS CAN BE NEGATIVE IF IERR .NE. 0
C     F1M IS VALUE OF F1 AT THE MAXIMUM POINT, SIMILAR FOR F2M
C
      DIMENSION P1(6),P2(6)
      DIMENSION WM(3,3),RH(3),SL(3),ER(3),WK(3)

C     FIND PARABOLOID PARAMETERS FOR F1
      CALL YVSPAR(F1,NU1,MU1,MV,P1)
C     AND FOR F2
      CALL YVSPAR(F2,NU2,MU2,MV,P2)
C     FILL WEIGHT MATRIX FOR COMBINED FIT
C     ORDER IS U1,U2,V
      WM(1,1)=2.*P1(1)
      WM(2,2)=2.*P2(1)
      WM(3,3)=2.*(P1(4)+P2(4))
      WM(1,2)=0.
      WM(2,1)=0.
      WM(1,3)=P1(6)
      WM(3,1)=P1(6)
      WM(2,3)=P2(6)
      WM(3,2)=P2(6)
C     FILL RIGHT-HAND-SIDE VECTOR
      RH(1)=-P1(2)
      RH(2)=-P2(2)
      RH(3)=-(P1(5)+P2(5))
C     CHECK FOR PATHOLOGICAL MATRIX
      IERR=0
      DO 150 I=1,3
      IF (WM(I,I) .GE. 0.) THEN
C       CURVATURE IS WRONG SIGN!
        IERR=2
C       DON'T MOVE FROM CELL CENTER
        SL(I)=0.
        ER(I)=-1.
C       NEGATIVE ERROR, STILL DEPENDING ON CURVATURE
        IF (WM(I,I) .NE. 0.) ER(I)=-1./SQRT(WM(I,I))
      ELSE
C       SOLVE IGNORING CORRELATIONS
        SL(I)=RH(I)/WM(I,I)
        ER(I)=1./SQRT(-WM(I,I))
      ENDIF
  150 CONTINUE
      IF (IERR .EQ. 0) THEN
C       FIND DETERMINANT AND FACTOR MATRIX (BEFORE INVERTING)
        CALL RFACT(3,WM,3,WK,IFAIL,DET,JFAIL)
C       CHECK FOR TROUBLE
        IF (IFAIL .NE. 0) THEN
C         MATRIX IS SINGULAR
          IERR=1
        ELSE
C         FIND THE SOLUTION
          CALL RFEQN(3,WM,3,WK,1,RH)
C         FIND THE ERRORS
          CALL RFINV(3,WM,3,WK)
C         CHECK FOR NONSENSE ERRORS
          DO 250 I=1,3
            IF (WM(I,I) .GT. 0.) THEN
              IERR=1
C             NEGATIVE ERROR
              ER(I)=-SQRT(WM(I,I))
C             LEAVE THE OLD APPROXIMATE SOLUTION)
            ELSE
C             USE THE SOLUTION AND ERROR
              ER(I)=SQRT(-WM(I,I))
              SL(I)=RH(I)
            ENDIF
  250     CONTINUE
        ENDIF
      ENDIF
C     COPY SOLUTION AND ERRORS
      U1M=SL(1)
      U2M=SL(2)
      VM=SL(3)
      U1E=ER(1)
      U2E=ER(2)
      VE=ER(3)
C     CALCULATE FUNCTION VALUES
      F1M=P1(1)*U1M*U1M + P1(2)*U1M + P1(3) +
     >    P1(4)*VM*VM   + P1(5)*VM  + P1(6)*U1M*VM
      F2M=P2(1)*U2M*U2M + P2(2)*U2M + P2(3) +
     >    P2(4)*VM*VM   + P2(5)*VM  + P2(6)*U2M*VM
      RETURN
      END
      SUBROUTINE YVSZVC(PVXY,NGTK,JGTK,SGMX,NB,ZL,ZH,VLF,ZV,EZV)
      DIMENSION PVXY(2),JGTK(*),VLF(*)
C     FINDS COARSE Z VERTEX BY SAMPLED LIKELIHOOD FIT
C     TO TRACK IMPACT PARAMETERS WITH BEAM AXIS
C     INPUTS:
C     PVXY() IS X,Y COORDINATES OF BEAM AXIS
C     JGTK() CONTAINS LIST OF TRACK INDICES
C     NGTK IS NUMBER OF TRACKS
C     VLF() IS WORK ARRAY VLF, LENGTH AT LEAST NB
C     SGMX IS NUMBER OF SIGMAS AWAY FROM Z0 THAT ARE GAUSSIAN
C     (ASSUMED FLAT BEYOND THIS)
C     NB IS NUMBER OF BINS
C     ZL, ZH ARE LOW AND HIGH LIMITS OF SEARCH FOR VERTEX Z
C     OUTPUT:
C     ZV IS THE RESULT, EZV IS THE ERROR
C     VLF CONTAINS LOG-LIKELIHOOD FUNCTION
C
C     CLEAR LIKELIHOOD FUNCTION
      CALL UZERO(VLF,1,NB)
C     SET ERROR NEGATIVE (FAILURE FLAG)
      EZV=-1.
C     CHECK FOR TRACKS
      IF (NGTK .LT. 1) RETURN
C     BIN WIDTH
      BW=(ZH-ZL)/NB
C     LOOP OVER TRACKS
      DO 250 JTK=1,NGTK
        ITK=JGTK(JTK)
C       FIND ZB, THE Z AT CLOSEST APPROACH TO BEAM AXIS
C       AND VZB, THE VARIANCE (SIGMA-SQUARED)
        CALL QVSZ0B(ITK,PVXY,ZB,VZB)
C       ERROR IN ZB, COMBINED WITH BIN SIZE
        EZB=MAX(SQRT(VZB),ABS(BW))
C       ADD TRACK TO LIKELIHOOD FUNCTION
        CALL YVSLF1(NB,ZL,ZH,ZB,EZB,SGMX,VLF)
  250 CONTINUE
C     FIND MAXIMUM LIKELIHOOD Z VALUE
      CALL YVSML1(NB,ZL,ZH,VLF,ZV,EZV,VLFM)
      RETURN
      END
      SUBROUTINE YVSLF1(NB,UL,UH,U,EU,EUMX,VLF)
      DIMENSION VLF(*)
C     ADDS TRACK TO 1-DIMENSION LOG-LIKELIHOOD DISTRIBUTION VLF
C     INPUTS:
C     NB,UL,UH ARE NUMBER OF BINS, LOW AND HIGH LIMITS
C     U,EU ARE VALUE AND SIGMA
C     EUMX IS HOW MANY SIGMAS THE DISTRIBUTION REMAINS GAUSSIAN
C     VLF(NB) IS ARRAY CONTAINING LOG-LIKELIHOOD FUNCTION
C     OUTPUT:
C     ALTERS VLF()
C
C     FIND LIMITING LOG-LIKELIHOOD VALUE
      UMX=-.5*EUMX**2
C     INVERSE ERROR**2
      REU=1./EU
C     BIN WIDTH
      BW=(UH-UL)/NB
C     STARTING POINT FOR BIN CENTERS
      UC=UL-.5*BW
C     LOOP OVER BINS
      DO 150 IB=1,NB
C       UPDATE BIN CENTER
        UC=UC+BW
C       GAUSSIAN LOG-LIKELIHOOD
        GSN=-.5*((U-UC)*REU)**2
C       INCREMENT WITH LARGER OF THIS AND LIMIT
        VLF(IB)=VLF(IB)+MAX(GSN,UMX)
  150 CONTINUE
      RETURN
      END
      SUBROUTINE YVSML1(NB,UL,UH,VLF,UM,EUM,VLFM)
      DIMENSION VLF(*)
C     FINDS MAXIMUM OF 1-DIMENSIONAL LIKELHOOD FUNCTION
C     INPUTS:
C     NB,UL,UH ARE NUMBER OF BINS, LOWER AND UPPER LIMITS
C     VLF() IS ARRAY CONTAINING LIKELIHOOD FUNCTION
C     OUTPUTS:
C      (FROM LOCAL PARABOLA FIT TO 3 BINS AT PEAK)
C     UM IS LOCATION OF MAXIMUM
C     EUM IS ERROR (NEGATIVE IF NO REAL MAXIMUM FOUND)
C     VLFM IS VALUE AT MAXIMUM
C
C     FIND PEAK BIN (AVOID END BINS)
      WMAX=VLF(2)-1.
      DO 150 IB=2,NB-1
        IF (VLF(IB) .GT. WMAX) THEN
          IPEAK=IB
          WMAX=VLF(IB)
        ENDIF
  150 CONTINUE
C     FIND COEFFICIENTS OF LOCAL PARABOLA (BIN UNITS)
C     A*DU**2+B*DU+C
      C=VLF(IPEAK)
      B=.5*(VLF(IPEAK+1)-VLF(IPEAK-1))
      A=VLF(IPEAK+1)-B-C
C     FIND DISTANCE TO PARABOLA MAXIMUM
C     AND ERROR FROM CURVATURE (BOTH IN BIN UNITS)
      IF (A .NE. 0.) THEN
        DU=-.5*B/A
C       MAKE ERROR NEGATIVE IF REALLY A MINIMUM (CAN HAPPEN AT EDGES)
        EU=SIGN(SQRT(ABS(.5/A)),-A)
      ELSE
C       NO CURVATURE, DON'T MOVE
        DU=0.
C       SET ERROR TO FULL BIN SIZE
        EU=-1.
      ENDIF
C     VALUE AT PEAK
      VLFM=A*DU*DU+B*DU+C
C     CONVERT TO REAL UNITS
      BW=(UH-UL)/NB
C     PEAK POSITION
      UM=UL+(IPEAK-.5+DU)*BW
C     ERROR
      EUM=EU*ABS(BW)
      RETURN
      END
      SUBROUTINE YVSXZB(BPOS,BSIZ,NGTK,JGTK,TSMR,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,VLF,
     > XV,EXV,ZV,EZV,VLFM)
      DIMENSION BPOS(3),BSIZ(3)
      DIMENSION JGTK(*),VLF(*)
C     FINDS X-Z OF PRIMARY VERTEX
C     USING SAMPLED MAXIMUM LIKELIHOOD FIT TO X-Z PLANE
C     INPUT:
C     BPOS() IS BEAM POSITION X,Y,Z
C     (Y COORDINATE SHOULD BE HIGH QUALITY, I.E., QVYNOM, OR FROM GETBP)
C     BSIZ() IS LUMINOUS REGION SIZE (1 SIGMA)
C     JGTK IS ARRAY CONTAINING A LIST OF NGTK TRACKS
C     TSMR IS ADDITIONAL TRACK SMEARING
C     SGMX IS NUMBER OF SIGMA ALLOWED TO USE A TRACK
C     NBX,XL,XH ARE BINS, LOW AND HIGH LIMITS FOR VERTEX X
C     NBZ,ZL,ZH ARE SAME FOR VERTEX Z
C     VLF(NBX*NBZ) IS SAMPLED LOG-LIKELIHOOD ARRAY
C     OUTPUT:
C     XV,ZV,EXV,EZV ARE X AND Z VERTEX AND ERROR
C      (Y VERTEX IS IMPLICITLY THE Y BEAM POSITION)
C     VLF CONTAINS 2-DIMENSION LOG-LIKELIHOOD FUNCTION:
C     VLFM IS THE INTERPOLATED VALUE OF LIKELIHOOD FUNCTION
C      AT THE COMBINED PEAK
C
C     CLEAR LIKELIHOOD FUNCTION
      CALL UZERO(VLF,1,NBX*NBZ)
C
C     ENTER BEAM AS PSEUDO-TRACK
C     USE 10 SIGMA CUTOFF (BEAM DOES NOT HAVE TAILS)
      SIGB=10.
      CALL YVSLF2(NBX,XL,XH,BPOS(1),BSIZ(1),
     >            NBZ,ZL,ZH,BPOS(3),BSIZ(3),SIGB,VLF)
C
C     FIND BIN WIDTHS
      BWX=(XH-XL)/NBX
      BWZ=(ZH-ZL)/NBZ
C     LOOP OVER TRACKS
      DO 250 JTK=1,NGTK
        ITK=JGTK(JTK)
C       GET BEAM PLANE INTERCEPTS
        CALL QVSXZB(ITK,TSMR,BPOS(2),XB,VXB,ZB,VZB)
C
C       LIMIT ERRORS TO BIN SIZES
        ERX=MAX(SQRT(VXB),ABS(BWX))
        ERZ=MAX(SQRT(VZB),ABS(BWZ))
C
C       ADD TRACK IMPACT POINT TO LIKELIHOOD FUNCTION
        CALL YVSLF2(NBX,XL,XH,XB,ERX,
     >               NBZ,ZL,ZH,ZB,ERZ,SGMX,VLF)
  250 CONTINUE
C
C     FIND PEAK IN THE LIKELIHOOD FUNCTION
C     FIT PARABOLOID TO PEAK TO INTERPOLATE AND GET ERRORS
      CALL YVSML2(NBX,XL,XH,NBZ,ZL,ZH,VLF,
     > XV,EXV,ZV,EZV,XZCR,VLFM)
C
      RETURN
      END
      SUBROUTINE YVSLF2(NBU,UL,UH,U,EU,NBV,VL,VH,V,EV,SGMX,VLF)
      DIMENSION VLF(*)
C     ADDS TRACK (POINT) TO 2-DIMENSION LOG-LIKELIHOOD DISTRIBUTION VLF.
C     SPECIALIZED FOR PRIMARY VERTEX IN A PLANE
C     INPUTS:
C     NBU,UL,UH ARE NUMBER OF BINS, LOW AND HIGH LIMITS
C      FOR FIRST VARIABLE
C     NBV,VL,VH ARE SAME FOR SECOND VARIABLE
C     U,EU ARE VALUE AND SIGMA OF BEAM IMPACT POINT
C     V,EV ARE SAME IN SECOND VARIABLE
C     SGMX IS HOW MANY SIGMAS THE DISTRIBUTION REMAINS GAUSSIAN
C     VLF(NBU*NBV+NBU+NBV) IS ARRAY CONTAINING LOG-LIKELIHOOD FUNCTION
C     AND SOME SCRATCH SPACE AT THE END
C     OUTPUT:
C     ALTERS VLF()
C
C     FIND BIN WIDTHS
      BWU=(UH-UL)/NBU
      BWV=(VH-VL)/NBV
C     OFFSETS FOR SCRATCH ARRAYS
      IOFU=NBU*NBV
      IOFV=IOFU+NBU
C
C     FILL SCRATCH ARRAY WITH U LIKELIHOOD
C     INVERSE ERROR**2
      REU=1./EU
C     LOOP OVER U BINS
      BCU=UL-.5*BWU
      DO 150 IBU=1,NBU
        BCU=BCU+BWU
C       GAUSSIAN LOG-LIKELIHOOD
        GSN=-.5*((U-BCU)*REU)**2
        VLF(IOFU+IBU)=GSN
  150 CONTINUE
C     FILL SCRATCH ARRAY WITH V LIKELIHOOD
C     INVERSE ERROR**2
      REV=1./EV
C     LOOP OVER V BINS
      BCV=VL-.5*BWV
      DO 250 IBV=1,NBV
        BCV=BCV+BWV
C       GAUSSIAN LOG-LIKELIHOOD
        GSN=-.5*((V-BCV)*REV)**2
        VLF(IOFV+IBV)=GSN
  250 CONTINUE
C
C     FIND LIMITING LOG-LIKELIHOOD VALUE
      GMN=-.5*SGMX**2
C     CLEAR BIN COUNTER
      IB=0
C     LOOP OVER V BINS
      DO 450 IBV=1,NBV
C       LOOP OVER U BINS
        DO 350 IBU=1,NBU
C         INCREMENT BIN COUNTER
          IB=IB+1
C         INCREMENT WITH LARGER OF SCRATCH SUM AND LIMITING VALUE
          VLF(IB)=VLF(IB)+MAX(GMN,VLF(IOFU+IBU)+VLF(IOFV+IBV))
  350   CONTINUE
  450 CONTINUE
      RETURN
      END
      SUBROUTINE YVSML2(NBU,UL,UH,NBV,VL,VH,VLF,
     > UM,EUM,VM,EVM,UVCR,VLFM)
      DIMENSION VLF(*)
C     FINDS MAXIMUM OF 2-DIMENSIONAL LIKELHOOD FUNCTION
C     INPUTS:
C     NBU,UL,UH ARE NUMBER OF BINS, LOWER AND UPPER LIMITS
C      FOR FIRST VARIABLE
C     NBU,UL,UH ARE SAME FOR SECOND VARIABLE
C     VLF(NBU,NBV) IS ARRAY CONTAINING LIKELIHOOD FUNCTION
C     OUTPUTS:
C      (FROM LOCAL PARABOLA FIT TO 9 BINS AT PEAK)
C     UM IS LOCATION OF MAXIMUM IN FIRST VARIABLE
C     EUM IS ERROR (NEGATIVE IF NO REAL MAXIMUM FOUND)
C     VM,EVM ARE SAME FOR SECOND
C     UVCR IS NORMALIZED CORRELATION
C     VLFM IS VALUE AT MAXIMUM
C
      DIMENSION PAR(6)
C
C     FIND PEAK BIN
      WMAX=VLF(1)-1.
      IB=0
      DO 250 IBV=1,NBV
        DO 150 IBU=1,NBU
          IB=IB+1
          IF (VLF(IB) .GT. WMAX) THEN
            IPEAK=IB
            WMAX=VLF(IB)
          ENDIF
  150   CONTINUE
  250 CONTINUE
      MBV=(IPEAK-1)/NBU+1
      MBU=IPEAK-(MBV-1)*NBU
C
C     KEEP AWAY FROM EDGES FOR PARABOLOIDS
      MBU=MAX(2,MBU)
      MBU=MIN(NBU-1,MBU)
      MBV=MAX(2,MBV)
      MBV=MIN(NBV-1,MBV)
C     FIND LOCAL PARABOLOID
      CALL YVSPAR(VLF,NBU,MBU,MBV,PAR)
C     FIND PEAK OF PARABOLOID (STILL BIN UNITS)
      CALL YVSPRM(PAR,DU,EU,DV,EV,UVCR,VLFM)
C     FIND BIN WIDTHS
      BWU=(UH-UL)/NBU
      BWV=(VH-VL)/NBV
C     ADD OFFSETS, SCALE ERRORS
      UM=UL+(MBU-.5+DU)*BWU
      VM=VL+(MBV-.5+DV)*BWV
      EUM=EU*ABS(BWU)
      EVM=EV*ABS(BWV)
      RETURN
      END
      SUBROUTINE YVSPAR(VLF,NBU,MU,MV,PAR)
      DIMENSION VLF(*),PAR(6)
C     FINDS PARABOLOID PARAMETERS FOR 2-D SAMPLED DISTRIBUTION
C     VLF(MU+DU,MV+DV)
C      =  P1*DU**2+P2*DU+P3
C        +P4*DV**2+P5*DV+P6*DU*DV
C
C     CENTRAL BIN
      IBIN=MU+(MV-1)*NBU
C     FIRST DO U-ONLY TERMS
      P3=VLF(IBIN)
      P2=.5*(VLF(IBIN+1)-VLF(IBIN-1))
      P1=VLF(IBIN+1)-P2-P3
C     THEN V-ONLY
      P5=.5*(VLF(IBIN+NBU)-VLF(IBIN-NBU))
      P4=VLF(IBIN+NBU)-P3-P5
C     THEN CROSS TERM
      TPP=VLF(IBIN+NBU+1)-(P1+P2+P3+P4+P5)
      TMM=VLF(IBIN-NBU-1)-(P1-P2+P3+P4-P5)
      TPM=VLF(IBIN+NBU-1)-(P1-P2+P3+P4+P5)
      TMP=VLF(IBIN-NBU+1)-(P1+P2+P3+P4-P5)
      P6=.25*(TPP+TMM-TMP-TPM)
C
      PAR(1)=P1
      PAR(2)=P2
      PAR(3)=P3
      PAR(4)=P4
      PAR(5)=P5
      PAR(6)=P6
      RETURN
      END
      SUBROUTINE YVSPRM(PAR,DU,EU,DV,EV,UVCR,PMX)
      DIMENSION PAR(6)
C     FINDS MAXIMUM AND ERROR AT PEAK OF 6-PARAMETER PARABOLOID
C     REPRESENTING 2-D LIKELIHOOD PEAK
C     INPUTS:
C     F=PAR(1)*DU*DU + PAR(2)*DU + PAR(3) +
C       PAR(4)*DV*DV + PAR(5)*DV + PAR(6)*DU*DV
C     OUTPUTS:
C     DU,DV STEPS TO MAX IN BIN UNITS
C     EU,EV ARE ERROR IN BIN UNITS
C     UVCR IS NORMALIZED CORRELATION
C     PMX IS INTERPOLATED VALUE AT MAXIMUM
C     IF PROBLEMS LIKE NO MAX, NOT POS-DEFINITE,
C     EU AND/OR EV WILL BE NEGATIVE
C     DU AND/OR DV MAY BE ZERO
C
      A=PAR(1)
      B=PAR(2)
      C=PAR(3)
      D=PAR(4)
      E=PAR(5)
      F=PAR(6)
C     PATHOLOGICAL CASES FIRST
      IF (A .GE. 0. .AND. D .GE. 0.) THEN
C       TAKE BIN CENTER, NEGATIVE ERRORS
        DU=0.
        DV=0.
        EU=-1.
        EV=-1.
        UVCR=0.
      ELSEIF (A .GE. 0.) THEN
C       SOLVE IN V ONLY, NULL IN U
        DV=-.5*E/D
        EV=-SQRT(-.5/D)
        DU=0.
        EU=-1.
        UVCR=0.
      ELSEIF (D .GE. 0.) THEN
C       SOLVE IN U ONLY, NULL IN V
        DU=-.5*B/A
        EU=-SQRT(-.5/A)
        DV=0.
        EV=-1.
        UVCR=0.
      ELSE
C       FIND AND CHECK DETERMINANT
        DET=4.*A*D-F*F
        IF (DET .LE. 0.) THEN
C         TAKE HALF-STEP IN BOTH U AND V
          DU=-.25*B/A
          DV=-.25*E/D
C         USE NEGATIVE INDEPENDENT ERRORS
          EU=-SQRT(-.5/A)
          EV=-SQRT(-.5/D)
C         COMPLETELY CORRELATED
          UVCR=SIGN(.99,F)
        ELSE
C     THIS IS THE CASE WE HOPE FOR!
          IERR=0
          RDET=1./DET
C         FIND DISTANCE TO PARABOLA MAXIMUM
          DU=RDET*(-2.*B*D+E*F)
          DV=RDET*(-2.*A*E+B*F)
C         ERROR FROM CURVATURE
          EU=SQRT(-2.*D*RDET)
          EV=SQRT(-2.*A*RDET)
          UVCR=F/SQRT(4.*A*D)
        ENDIF
      ENDIF
C     VALUE AT PEAK
      PMX=A*DU*DU+B*DU+C+D*DV*DV+E*DV+F*DU*DV
      RETURN
      END
