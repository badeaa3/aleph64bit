head	1.3;
access;
symbols
	bos3489-1:1.3.0.2
	bos3589:1.3
	bos3489:1.3
	bos3389:1.3
	bos3289:1.3
	bos3189:1.3
	bos3089:1.3
	v3089:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.03.11.12.56.15;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	96.01.22.10.58.27;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.13.58.36;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.13.58.37;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@import new version made for cvs on alws.
add eprwnd.F to test the descriptor before calling CFREW. Should be included
into the EPIO next release.
 Added Files:
 	eprwnd.F
@
text
@      FUNCTION NSWAP(NAME1,NR1,NAME2,NR2)
*
*     IF BOTH BANKS EXIST: EXCHANGE NAME,NR AND RETURN INDEX OF
*        (NEW) BANK (NAME1,NR1)
*
*     IF ONLY ONE BANK EXISTS, CHANGE NAME,NR TO THE OTHER NAME AND
*        NR AND RETURN INDEX OF THIS BANK
*
*     IF BOTH BANKS DO NOT EXIST, RETURN 0
*
*
#include "boscom.h"
#include "param.h"
      INTEGER    JW(1000)
      EQUIVALENCE (IW(1),JW(1))
      CHARACTER*4 NAME1,NAME2
*     ...
      IF(JW(ICK).NE.12345) CALL BBNOT(JW,'NSWAP')
      JW(1)=0
      JW(2)=0
*     get INDI1 and INDJ1 for first bank
      NAMI1=NAMIND(NAME1)
      INDI1=NAMI1+1
   10 INDJ1=INDI1
      INDI1=JW(INDJ1-1)
      IF(INDI1.NE.0) THEN
         IF(JW(INDI1-2).LT.NR1) GOTO 10
         IF(JW(INDI1-2).GT.NR1) INDI1=0
      END IF
*     bridge index("dropping"), if bank existing
      IF(INDI1.NE.0) JW(INDJ1-1)=JW(INDI1-1)

*     get INDI2 and INDJ2 for second bank
      NAMI2=NAMIND(NAME2)
      INDI2=NAMI2+1
   20 INDJ2=INDI2
      INDI2=JW(INDJ2-1)
      IF(INDI2.NE.0) THEN
         IF(JW(INDI2-2).LT.NR2) GOTO 20
         IF(JW(INDI2-2).GT.NR2) INDI2=0
      END IF
*     bridge index("dropping"), if bank existing
      IF(INDI2.NE.0) JW(INDJ2-1)=JW(INDI2-1)

*     treat (previous) first bank
      IF(INDI1.NE.0) THEN
*        insert new bank name and number, ...
         JW(INDI1-3)=INTCHA(NAME2)
         JW(INDI1-2)=NR2
*        ... determine "from_index" INDJ2 again ...
         INDK2=NAMI2+1
   30    INDJ2=INDK2
         INDK2=JW(INDJ2-1)
         IF(INDK2.NE.0) THEN
            IF(JW(INDK2-2).LT.NR2) GOTO 30
         END IF
*        ... and connect at second place
         JW(INDI1-1)=JW(INDJ2-1)
         JW(INDJ2-1)=INDI1
      END IF

*     treat (previous) second bank
      IF(INDI2.NE.0) THEN
*        insert new bank name and number, ...
         JW(INDI2-3)=INTCHA(NAME1)
         JW(INDI2-2)=NR1
*        ... determine "from_index" INDJ1 again ...
         INDK1=NAMI1+1
   40    INDJ1=INDK1
         INDK1=JW(INDJ1-1)
         IF(INDK1.NE.0) THEN
            IF(JW(INDK1-2).LT.NR1) GOTO 40
         END IF
*        ... and connect at first place
         JW(INDI2-1)=JW(INDJ1-1)
         JW(INDJ1-1)=INDI2
      END IF

      IF(INDI2.NE.0) THEN
          NSWAP=INDI2
      ELSE
          NSWAP=INDI1
      END IF

C - Reset links

      JND = JW(IDL)+NAMI1-NSYST
      IF (JW(JND).GT.0) JW(JW(JND)) = 0
      JND = JW(IDL)+NAMI2-NSYST
      IF (JW(JND).GT.0) JW(JW(JND)) = 0

 100  RETURN
      END
@


1.2
log
@ Modified Files:
	nswap.F
@
text
@d1 11
a11 12
*DK nswap
      FUNCTION NSWAP(NAME1,NR1,NAME2,NR2)   
*   
*     IF BOTH BANKS EXIST: EXCHANGE NAME,NR AND RETURN INDEX OF 
*        (NEW) BANK (NAME1,NR1) 
*   
*     IF ONLY ONE BANK EXISTS, CHANGE NAME,NR TO THE OTHER NAME AND 
*        NR AND RETURN INDEX OF THIS BANK   
*   
*     IF BOTH BANKS DO NOT EXIST, RETURN 0  
*   
*   
d14 7
a20 7
      INTEGER    JW(1000)   
      EQUIVALENCE (IW(1),JW(1)) 
      CHARACTER*4 NAME1,NAME2   
*     ...   
      IF(JW(ICK).NE.12345) CALL BBNOT(JW,'NSWAP')   
      JW(1)=0   
      JW(2)=0   
d22 7
a28 7
      NAMI1=NAMIND(NAME1)   
      INDI1=NAMI1+1 
   10 INDJ1=INDI1   
      INDI1=JW(INDJ1-1) 
      IF(INDI1.NE.0) THEN   
         IF(JW(INDI1-2).LT.NR1) GOTO 10 
         IF(JW(INDI1-2).GT.NR1) INDI1=0 
d32 9
a40 9
    
*     get INDI2 and INDJ2 for second bank   
      NAMI2=NAMIND(NAME2)   
      INDI2=NAMI2+1 
   20 INDJ2=INDI2   
      INDI2=JW(INDJ2-1) 
      IF(INDI2.NE.0) THEN   
         IF(JW(INDI2-2).LT.NR2) GOTO 20 
         IF(JW(INDI2-2).GT.NR2) INDI2=0 
d44 5
a48 5
    
*     treat (previous) first bank   
      IF(INDI1.NE.0) THEN   
*        insert new bank name and number, ...   
         JW(INDI1-3)=INTCHA(NAME2)  
d50 2
a51 2
*        ... determine "from_index" INDJ2 again ... 
         INDK2=NAMI2+1  
d53 1
a53 1
         INDK2=JW(INDJ2-1)  
d55 2
a56 2
            IF(JW(INDK2-2).LT.NR2) GOTO 30  
         END IF 
d59 1
a59 1
         JW(INDJ2-1)=INDI1  
d61 5
a65 5
    
*     treat (previous) second bank  
      IF(INDI2.NE.0) THEN   
*        insert new bank name and number, ...   
         JW(INDI2-3)=INTCHA(NAME1)  
d67 2
a68 2
*        ... determine "from_index" INDJ1 again ... 
         INDK1=NAMI1+1  
d70 1
a70 1
         INDK1=JW(INDJ1-1)  
d72 3
a74 3
            IF(JW(INDK1-2).LT.NR1) GOTO 40  
         END IF 
*        ... and connect at first place 
d76 1
a76 1
         JW(INDJ1-1)=INDI2  
d78 5
a82 5
    
      IF(INDI2.NE.0) THEN   
          NSWAP=INDI2   
      ELSE  
          NSWAP=INDI1   
d84 8
a91 8
    
C - Reset links 
    
      JND = JW(IDL)+NAMI1-NSYST 
      IF (JW(JND).GT.0) JW(JW(JND)) = 0 
      JND = JW(IDL)+NAMI2-NSYST 
      IF (JW(JND).GT.0) JW(JW(JND)) = 0 
    
d93 1
a93 1
      END   
@


1.1
log
@Initial revision
@
text
@d2 11
a12 11
      FUNCTION NSWAP(NAME1,NR1,NAME2,NR2)
*
*     IF BOTH BANKS EXIST: EXCHANGE NAME,NR AND RETURN INDEX OF
*        (NEW) BANK (NAME1,NR1)
*
*     IF ONLY ONE BANK EXISTS, CHANGE NAME,NR TO THE OTHER NAME AND
*        NR AND RETURN INDEX OF THIS BANK
*
*     IF BOTH BANKS DO NOT EXIST, RETURN 0
*
*
d15 7
a21 7
      INTEGER    JW(1000)
      EQUIVALENCE (IW(1),JW(1))
      CHARACTER*4 NAME1,NAME2
*     ...
      IF(JW(ICK).NE.12345) CALL BBNOT(JW,'NSWAP')
      JW(1)=0
      JW(2)=0
d23 7
a29 7
      NAMI1=NAMIND(NAME1)
      INDI1=NAMI1+1
   10 INDJ1=INDI1
      INDI1=JW(INDJ1-1)
      IF(INDI1.NE.0) THEN
         IF(JW(INDI1-2).LT.NR1) GOTO 10
         IF(JW(INDI1-2).GT.NR1) INDI1=0
d33 9
a41 9

*     get INDI2 and INDJ2 for second bank
      NAMI2=NAMIND(NAME2)
      INDI2=NAMI2+1
   20 INDJ2=INDI2
      INDI2=JW(INDJ2-1)
      IF(INDI2.NE.0) THEN
         IF(JW(INDI2-2).LT.NR2) GOTO 20
         IF(JW(INDI2-2).GT.NR2) INDI2=0
d45 5
a49 5

*     treat (previous) first bank
      IF(INDI1.NE.0) THEN
*        insert new bank name and number, ...
         JW(INDI1-3)=INTCHA(NAME2)
d51 2
a52 2
*        ... determine "from_index" INDJ2 again ...
         INDK2=NAMI2+1
d54 1
a54 1
         INDK2=JW(INDJ2-1)
d56 2
a57 2
            IF(JW(INDK2-2).LT.NR2) GOTO 30
         END IF
d60 1
a60 1
         JW(INDJ2-1)=INDI1
d62 5
a66 5

*     treat (previous) second bank
      IF(INDI2.NE.0) THEN
*        insert new bank name and number, ...
         JW(INDI2-3)=INTCHA(NAME1)
d68 2
a69 2
*        ... determine "from_index" INDJ1 again ...
         INDK1=NAMI1+1
d71 1
a71 1
         INDK1=JW(INDJ1-1)
d73 3
a75 3
            IF(JW(INDK1-2).LT.NR1) GOTO 40
         END IF
*        ... and connect at first place
d77 1
a77 1
         JW(INDJ1-1)=INDI2
d79 5
a83 5

      IF(INDI2.NE.0) THEN
          NSWAP=INDI2
      ELSE
          NSWAP=INDI1
d85 8
a92 1

d94 1
a94 1
      END
@


1.1.1.1
log
@import bos77 3089
@
text
@@
