head	1.1;
branch	1.1.1;
access;
symbols
	mini202_9:1.1.1.1
	mini202_8:1.1.1.1
	mini202_7:1.1.1.1
	mini202_6:1.1.1.1
	mini202_5:1.1.1.1
	mini202_4:1.1.1.1
	mini202_2:1.1.1.1
	mini202_1:1.1.1.1
	mini202:1.1.1.1
	mini201_1:1.1.1.1
	mini104_1:1.1.1.1
	mini103_1:1.1.1.1
	mini102_7:1.1.1.1
	mini102_5:1.1.1.1
	mini102_4:1.1.1.1
	mini102_3:1.1.1.1
	mini102_2:1.1.1.1
	mini102_1:1.1.1.1
	mini102:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.08.15.11.09.37;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.15.11.09.38;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE MINEVT
C
CKEY MDST /INTERNAL
C-----------------------------------------------------------------------
C! Fill event information bank DEVT for Mini-DST.
C
C     Author: Stephen Haywood      08-Jan-93
C
C     Input  : LOLE, XTCN, VFHL, PECO, PRPW, PEWI, PHST banks
C     Output : DEVT bank
C
C     Called by MINDST
C-----------------------------------------------------------------------
C
#ifndef DOC
C
#include "bcs.h"
#include "alcons.h"
#include "minfac.h"
#include "lolejj.h"
#include "xtcnjj.h"
#include "pewijj.h"
#include "pecojj.h"
#include "prpwjj.h"
#include "phstjj.h"
#include "devtjj.h"
C
      PARAMETER (MXPEC=200)
      DIMENSION EWIRE(36),ERAW(MXPEC)
      SAVE EWMIN
      DATA EWMIN / 0.500 /
      DATA COSHC / 0.700 /
C
#include "bmacro.h"
C
C++   Create the DEVT bank.
C
      LEN = LMHLEN + LDEVTA
      CALL AUBOS('DEVT',0,LEN, KDEVT,IGARB)
      IF (IGARB.GE.2) THEN
         WRITE(IW(6),'('' MINEVT: Cannot create DEVT bank'')')
         RETURN
      ENDIF
      IW(KDEVT+LMHCOL) = LDEVTA
      IW(KDEVT+LMHROW) = 1
C
C++   Store LOLE error flag (used by XLUMOK).
C
      KLOLE = NLINK('LOLE',0)
      IF (KLOLE.GT.0) IW(KROW(KDEVT,1)+JDEVLE) = ITABL(KLOLE,1,JLOLER)
C
C++   Ecal wire t0 (energy weighted over modules).
C
      CALL VZERO(EWIRE,36)
      KPEWI = NLINK('PEWI',0)
      IF ( KPEWI.EQ.0) KPEWI = NLINK('PWEI',0)
      IF (KPEWI.GT.0) THEN
         NPEWI = LROWS(KPEWI)
         SUME = 0.
         SUMT = 0.
         DO 20 I=1,NPEWI
            KEV = 0
            DO 10 IPLAN=1,45
   10       KEV = KEV + ITABL(KPEWI,I,JPEWPD-1+IPLAN)
            EGEV = FLOAT(KEV) / 1000000.
            EWIRE(ITABL(KPEWI,I,JPEWMN)) = EGEV
            IF (EGEV.LT.EWMIN) GOTO 20
            IMODU = ITABL(KPEWI,I,JPEWMN)
            TIME = EMTZER( IMODU)
            SUME = SUME + EGEV
            SUMT = SUMT + EGEV * TIME
   20    CONTINUE
         TIME = 0.
         IF (SUME.GT.0.) TIME = SUMT / SUME
         IW(KROW(KDEVT,1)+JDEVWT) = NINT(TIME)
      ENDIF
C
C++   Store number of GBX counted since last trigger - can help in
C++   identifying Vdet noise.
C
      KXTCN = IW(NAMIND('XTCN'))
      IF (KXTCN.GT.0) IW(KROW(KDEVT,1)+JDEVNX) = ITABL(KXTCN,1,JXTCGC)
C
C++   Store number of Vdet hits - can help in identifying Vdet noise.
C
      NHIT = 0
      KVFHL = IW(NAMIND('VFHL'))
   30 IF (KVFHL.NE.0) THEN
         NHIT = NHIT + LROWS(KVFHL)
         KVFHL = IW(KVFHL-1)
         GOTO 30
      ENDIF
      IW(KROW(KDEVT,1)+JDEVNV) = NHIT
C
C++   Sum raw energies from Ecal wires (PEWI).
C++   'A' <-> endcap A; 'B' <-> endcap B; 'R' <-> barrel.
C
      PEWIA = VSUM(EWIRE( 1),12)
      PEWIR = VSUM(EWIRE(13),12)
      PEWIB = VSUM(EWIRE(25),12)
      IW(KROW(KDEVT,1)+JDEVWR) = NINT(EFACTM * PEWIR)
      IW(KROW(KDEVT,1)+JDEVWA) = NINT(EFACTM * PEWIA)
      IW(KROW(KDEVT,1)+JDEVWB) = NINT(EFACTM * PEWIB)
C
C++   Sum corrected energies from Ecal pads (PECO).
C++   Use PRPW to find fractions in different modules for each PECO.
C++   (Note raw energy in PECO and PRPW not same due to gas gain
C++   corrections applied only to PECO.)
C++   Do not consider Lcal or Sical here.
C
      KPRPW = NLINK('PRPW',0)
      KPECO = NLINK('PECO',0)
      IF (KPRPW.LE.0 .OR. KPECO.LE.0) GOTO 59
      NPRPW = LROWS(KPRPW)
C
      CALL VZERO(ERAW,MXPEC)
      DO 50 I=1,NPRPW
         IPECO = ITABL(KPRPW,I,JPRPPN)
         IF (IPECO.GT.MXPEC) GOTO 50
         ERAW(IPECO) = ERAW(IPECO) + RTABL(KPRPW,I,JPRPER)
   50 CONTINUE
C
      PECOR = 0.
      PECOA = 0.
      PECOB = 0.
      DO 55 I=1,NPRPW
         IPECO = ITABL(KPRPW,I,JPRPPN)
         KODE = ITABL(KPECO,IPECO,JPECKD)
         IF (KODE.EQ.192 .OR. KODE.EQ.256) GOTO 55
         IF (IPECO.LE.MXPEC) THEN
            FRACT = RTABL(KPRPW,I,JPRPER) / ERAW(IPECO)
         ELSE
            FRACT = RTABL(KPRPW,I,JPRPER) / RTABL(KPECO,IPECO,JPECER)
         ENDIF
         ECOR = FRACT * RTABL(KPECO,IPECO,JPECEC)
         MODUL = ITABL(KPRPW,I,JPRPMN)
         IF (MODUL.LE.12) THEN
            PECOA = PECOA + ECOR
         ELSE IF (MODUL.GE.25) THEN
            PECOB = PECOB + ECOR
         ELSE
            PECOR = PECOR + ECOR
         ENDIF
   55 CONTINUE
C
      IW(KROW(KDEVT,1)+JDEVPR) = NINT(EFACTM * PECOR)
      IW(KROW(KDEVT,1)+JDEVPA) = NINT(EFACTM * PECOA)
      IW(KROW(KDEVT,1)+JDEVPB) = NINT(EFACTM * PECOB)
   59 CONTINUE
C
C++   Sum corrected energies from Luminosity monitors (PECO).
C
      PECOA = 0.
      PECOB = 0.
      IF (KPECO.LE.0) GOTO 69
      DO 65 I=1,LROWS(KPECO)
         KODE = ITABL(KPECO,I,JPECKD)
         IF (KODE.NE.192 .AND. KODE.NE.256) GOTO 65
         ECOR = RTABL(KPECO,I,JPECEC)
         THETA = RTABL(KPECO,I,JPECTH)
         IF (THETA.LT.PIBY2) THEN
            PECOA = PECOA + ECOR
         ELSE
            PECOB = PECOB + ECOR
         ENDIF
   65 CONTINUE
C
      IW(KROW(KDEVT,1)+JDEVLA) = NINT(EFACTM * PECOA)
      IW(KROW(KDEVT,1)+JDEVLB) = NINT(EFACTM * PECOB)
   69 CONTINUE
C
C++   Sum corrected energies from Hcal pads (PHCO).
C++   Since the towers are summed online, the distinction between
C++   barrel and encaps must be made on the basis of angle and is less
C++   well defined than for the Ecal.
C
C     KPHCO = NLINK('PHCO',0)
C     IF (KPHCO.GT.0) THEN
C        NPHCO = LROWS(KPHCO)
C        PHCOR = 0.
C        PHCOA = 0.
C        PHCOB = 0.
C        DO 70 I=1,NPHCO
C           COST = COS(RTABL(KPHCO,I,JPHCTH))
C           ECOR = RTABL(KPHCO,I,JPHCEC)
C           IF (COST.GT. COSHC) THEN
C              PHCOA = PHCOA + ECOR
C           ELSE IF (COST.LT.-COSHC) THEN
C              PHCOB = PHCOB + ECOR
C           ELSE
C              PHCOR = PHCOR + ECOR
C           ENDIF
C  70    CONTINUE
C        IW(KROW(KDEVT,1)+JDEVHR) = NINT(EFACTM * PHCOR)
C        IW(KROW(KDEVT,1)+JDEVHA) = NINT(EFACTM * PHCOA)
C        IW(KROW(KDEVT,1)+JDEVHB) = NINT(EFACTM * PHCOB)
C     ENDIF
C
C++   Sum corrected energies from Hcal storeys (PHST).
C
      KPHST = NLINK('PHST',0)
      IF (KPHST.GT.0) THEN
         NPHST = LROWS(KPHST)
         PHSTR = 0.
         PHSTA = 0.
         PHSTB = 0.
         DO 70 I=1,NPHST
            ITHET = MOD(ITABL(KPHST,I,JPHSTI),128)
            ECOR = RTABL(KPHST,I,JPHSCE)
            IF (ITHET.LE.13) THEN
               PHSTA = PHSTA + ECOR
            ELSE IF (ITHET.GE.50) THEN
               PHSTB = PHSTB + ECOR
            ELSE
               PHSTR = PHSTR + ECOR
            ENDIF
   70    CONTINUE
         IW(KROW(KDEVT,1)+JDEVHR) = NINT(EFACTM * PHSTR)
         IW(KROW(KDEVT,1)+JDEVHA) = NINT(EFACTM * PHSTA)
         IW(KROW(KDEVT,1)+JDEVHB) = NINT(EFACTM * PHSTB)
      ENDIF
C
C++   Add the bank to the Mini list.
C
      CALL MINLIS('DEVT')
C
      RETURN
      END
#endif
@


1.1.1.1
log
@1st release of mini under cvs
@
text
@@
