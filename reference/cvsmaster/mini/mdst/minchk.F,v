head	1.1;
access;
symbols
	mini202_9:1.1
	mini202_8:1.1
	mini202_7:1.1
	mini202_6:1.1
	mini202_5:1.1
	mini202_4:1.1
	mini202_2:1.1
	mini202_1:1.1
	mini202:1.1;
locks; strict;
comment	@c @;


1.1
date	98.09.16.15.02.12;	author jachol;	state Exp;
branches;
next	;


desc
@@


1.1
log
@mini202 - 1st version for LEP1 and LEP2
@
text
@      SUBROUTINE MINCHK(MODE,LRUN,SUMRY)
C
CKEY MDST /INTERNAL
C-----------------------------------------------------------------------
C! Write run information in file.
C
C     Author: Stephen Haywood      08-May-90
C
C     Input  : MODE   = -1 for initialisation of job
C                     = +1 for run termination
C                     = +2 for run termination and job termination
C              LRUN   = last run number
C              SUMRY  = summary array
C-----------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
      INTEGER MODE, LRUN
      REAL SUMRY(*)
#include "bcs.h"
      CHARACTER*13 FLNAM
      LOGICAL PRESNT
      INTEGER IDATE,ITIME,NEV,IUNIT,IOS
      DATA IUNIT / 70 /
C ----------------------------------------------------------------------
C
C++   Initialisation.
C
      IF (MODE.EQ.-1) THEN
         FLNAM = 'EVMINI.OUTPUT'
         INQUIRE(FILE=FLNAM,EXIST=PRESNT,IOSTAT=IOS)
         IF (PRESNT) THEN
           OPEN (UNIT=IUNIT,FILE=FLNAM,STATUS='old')
         ELSE
           OPEN(unit=IUNIT,FILE=FLNAM,STATUS='new')
         ENDIF

      ELSE
C
         IF (LRUN.LE.0) RETURN
C
C++   Make entry in file.
C
         CALL DATIME(IDATE,ITIME)
         NEV = NINT(SUMRY(1))
         WRITE(IUNIT,'(I7,A,I8,I5,I19)') LRUN,'  7 Mini',
     &                                   IDATE,ITIME,NEV
C
C++   Termination.
C
         IF (MODE.EQ.+2) CLOSE (unit=IUNIT)
      ENDIF
C
      RETURN
      END
#endif


@
