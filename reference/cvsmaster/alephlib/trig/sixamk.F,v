head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.45.01;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.45.02;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE SIXAMK
C*********************************************************************
C                                                                    *
C   Author   :- Joe Boudreau          30-OCT-1991                    *
C                                                                    *
C! Build the SIXA bank for Sical trigger                             *
C                                                                    *
C   Inputs        :  SIFO bank                                       *
C   Outputs       :  SIXA bank                                       *
C                                                                    *
C*********************************************************************
#ifndef DOC
C
      SAVE
#include "bcs.h"
C
#include "x1namc.h"
#include "sitrco.h"
#include "sixajj.h"
#include "sifojj.h"
C
      PARAMETER ( IFUL = 4095)
      INTEGER KSIXA,KSIFO,ITRIP,KSIXB
      INTEGER JPNT,IADDR,I,IAND,MIN,ISHFT,IMD,IST,IPH,IRD,IRT
      INTEGER ISEG,IESEG,IPTY,IFE,KPNT
#include "bmacro.h"
      KSIFO = IW(NASIFO)
      IF (KSIFO.GT.0) THEN
C
C     Create the SIXA bank with fixed length , auxilliary bank SIXB
C
         LEN = LMHLEN + 16*LSIXAA
         CALL AUBOS('SIXA',0,LEN,KSIXA,IGARB)
         IF (KSIXA.LE.0) RETURN
         IW(KSIXA + LMHCOL) = LSIXAA
         IW(KSIXA + LMHROW) = 16
         LEN = LMHLEN + 32*LSIXAA
         CALL AUBOS('SIXB',0,LEN,KSIXB,IGARB)
         IF (KSIXB.LE.0) RETURN
         IW(KSIXB + LMHCOL) = LSIXAA*2
         IW(KSIXB + LMHROW) = 16
C
C   Loop over each row in the SIFO bank and each plane in the triplet
C   For each Amplex, find the two trigger segments which contain that
C   Amplex.Increment the energy in the SIXA bank by the amount of each
C   fast-or signal.
         DO 100 ITRIP = 1,LROWS(KSIFO)
            IADDR = ITABL(KSIFO,ITRIP,JSIFAD)
            DO 200 I = 1,3
                CALL SIDCOD(IADDR,I-1,IMD,IST,IPH,IRD)
                IF (IMD.LT.0.OR.IST.LT.0.OR.IPH.LT.0.OR.IRD.LT.0) RETURN
                IPTY = MOD(IST+1,2)+1
                DO 300 IRT = 1,2
                   ISEG=MOD((IPH-1)+2*(IRT-1),32)/4+8*(IMD-1)+1
                   JPNT = KROW(KSIXB,ISEG)+IRT+2*(IPTY-1)
                   IW(JPNT) = IW(JPNT)+ ITABL(KSIFO,ITRIP,JSIFA1+I-1)
 300            CONTINUE
 200        CONTINUE
 100     CONTINUE
C
C Now apply the conversion factor to the total signal  in both roads of
C each segment and fill SIXA in a compact format
         DO 400  ISEG = 1,16
         DO 400  IPTY = 1,2
         DO 400  IRT  = 1,2
            JPNT = KROW(KSIXB,ISEG)+IRT+2*(IPTY-1)
            IW(JPNT) = SIFOXA*IW(JPNT)
            IW(JPNT) = MIN(IW(JPNT),IFUL)
            KPNT = KROW(KSIXA,ISEG)+IPTY
            IESEG  = IW(JPNT)
            CALL MVBITS(IESEG,0,16,IW(KPNT),16*(IRT-1))
 400     CONTINUE
      ENDIF
C
      CALL BDROP(IW,'SIXB')
      RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
