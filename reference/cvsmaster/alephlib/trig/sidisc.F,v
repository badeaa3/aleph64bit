head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.45.00;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.45.01;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE SIDISC(IEND,IPTY,IPATT)
C***********************************************************************
C                                                                      *
C   Author   :- Joe Boudreau          30-OCT-1991                      *
C                                                                      *
C!  Discriminate the SIXA bank for endcap IEND odd or IEND even.       *
C!  PARITY=1  means odd , PARITY=2 means even                          *
C                                                                      *
C   Inputs        : INTEGER IEND   = 1 if endcap A, = 2 if endcap B    *
C                   INTEGER IPTY   = 1 if odd, = 2 if even             *
C   Outputs       : INTEGER IPATT  bit 0-3 pattern after discrimination*
C                                  against threshholds 1-4             *
C                                                                      *
C                                                                      *
C***********************************************************************
#ifndef DOC
C
#include "bcs.h"
C
#include "x1namc.h"
C
      LOGICAL BTEST
      INTEGER IEND,IPTY,IPATT
      INTEGER IROAD,ISECT,IBT,IADC,JPNTR,KSIXA,I
#include "sitrco.h"
#include "bmacro.h"
C
C  Loop over every sector and every road within this endcap and parity,
C  reading the energy deposit from the SIXA bank . If any sector has
C  an  energy deposit above threshold, then set a a bit in IPATT
C  corresponding to that threshold.
C
      IPATT = 0
      KSIXA = IW(NASIXA)
      IF (KSIXA.GT.0) THEN
        DO 200 IROAD = 1,2
          DO 300 ISECT= 1,8
            IBT = 16*(IROAD-1) + 8*(IEND-1) + ISECT -1
            IF (.NOT.BTEST(ISIDIS(IPTY),IBT)) THEN
              JPNTR=KROW(KSIXA,(IEND-1)*8+ISECT)+IPTY
              IADC = IBITS(IW(JPNTR),16*(IROAD-1),16)
              DO 400 I = 1,4
                IF (IADC.GT.ISITHR(I)) IPATT=IBSET(IPATT,I-1)
 400          CONTINUE
            ENDIF
 300      CONTINUE
 200    CONTINUE
      ENDIF
      RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
