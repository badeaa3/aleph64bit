head	1.2;
access;
symbols
	aleph316_2:1.2
	aleph316_1:1.2
	aleph316:1.2
	aleph315_7:1.2
	aleph315_6:1.2
	aleph315_5:1.2
	aleph315_4:1.2
	aleph315_3:1.2
	aleph315_2:1.2
	aleph315_1:1.2
	aleph315:1.2
	aleph314_2:1.2
	aleph314_1:1.2
	aleph314:1.2
	aleph313_1:1.2
	aleph313:1.2
	aleph312_1:1.2
	aleph312:1.2
	aleph311_1:1.2
	aleph311:1.2
	aleph310_3:1.2
	aleph310_2:1.2
	aleph310_1:1.2
	aleph310:1.2
	aleph309_1:1.2
	aleph309:1.2
	aleph308_3:1.2
	aleph308_2:1.2
	aleph308_1:1.2
	aleph308:1.2
	aleph307_6:1.2
	aleph307_5:1.2
	aleph307_4:1.2
	aleph307_2:1.2
	aleph307_1:1.2
	aleph307:1.2
	aleph306:1.2
	aleph305_4:1.2
	aleph305_3:1.2
	aleph305_2:1.2
	aleph305_1:1.2
	aleph305:1.2
	aleph304_5:1.2
	aleph304_4:1.2
	aleph304_3:1.2
	aleph304_2:1.2
	aleph304_1:1.2
	aleph304:1.2
	aleph303_3:1.2
	aleph303_2:1.2
	aleph303_1_mc1:1.2
	aleph303_1:1.2
	aleph303:1.2
	aleph302_9:1.2
	aleph302_8:1.2
	aleph302_7:1.2
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.2
	aleph302_2:1.2
	aleph302_1:1.2
	aleph302:1.2
	aleph216:1.2
	aleph215_3:1.2
	aleph215_2:1.2
	aleph215:1.2
	aleph214:1.2
	aleph213:1.2
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.04.30.12.35.21;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.02.07.11.41.14;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.41.15;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@replace #include "implicit.h" by "IMPLICIT NONE"
Modified Files:
	aire.F airsct.F avolum.F ealgmk.F ealign.F ealtmk.F ecplst.F
@
text
@      SUBROUTINE EMPACT(VV,NSC,PIN,POU)
C.----------------------------------------------------------------------
CKEY ECALDES NEUTRINO IMPACT / USER
C     H.Videau      Creation 03/04/87   Modification 30/01/88
C! Impacts of a neutrino.
C  This routine computes the NSC*2 intersections of a straight line
C  passing through the origin, having a direction defined by the
C  3-vector V with the envelope of the sensitive part of the
C  encountered modules.
C   Input :
C           V  direction
C   Output:
C           NSC  number of subcomponents touched <3
C           PIN(ECALLS-1,NSC) entrance point
C           POU(ECALLS-1,NSC) exit point
C   Calls: none
C   Called by USER.
C.----------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
      SAVE
#include "ecccom.h"
C   Input variables
      REAL VV(3)
C   Output variables
      REAL PIN(3,2),POU(3,2)
      INTEGER NSC
C   External
      INTEGER EFNDMD
      EXTERNAL EFNDMD
C   Locales variables
      INTEGER LSC(2),SC,MD,I,ILAM,J,K
      REAL PV(ECALNP),COSINF(ECALSC),COSSUP(ECALSC)
      REAL W,LAM(2),V(ECALLS-1)
C  Ceci est a changer pronto!!!
      DATA COSINF,COSSUP/.74,-.78,-.983,.983,.78,-.74/
C
C  Normalisons le vecteur d'entree dans V
      W=VV(1)**2+VV(2)**2+VV(3)**2
      IF(W.LE.0) GO TO 999
      W=1./SQRT(W)
      V(1) = VV(1)*W
      V(2) = VV(2)*W
      V(3) = VV(3)*W
      NSC=0
      DO 1 SC= 1,ECALSC
      IF(V(3).LT.COSINF(SC).OR.V(3).GT.COSSUP(SC)) GO TO 1
         MD=EFNDMD(SC,V)
         IF(MD.EQ.0) GO TO 999
      DO 2 I=1,ECALNP
      PV(I)=V(1)*EALILP(1,I,MD,SC)+V(2)*EALILP(2,I,MD,SC)+
     &      V(3)*EALILP(3,I,MD,SC)
 2    CONTINUE
      ILAM=0
C    Boucle sur les points d'intersection
      DO 3 I=1,ECALNP
      IF(ABS(PV(I)).LT.0.00001) GO TO 3
C   Boucle sur les plans pour tester la positivite
      DO 4 J=1,ECALNP
      IF(J.EQ.I) GO TO 4
      W=EALILP(4,J,MD,SC)-EALILP(4,I,MD,SC)*PV(J)/PV(I)
      IF(W.LT.0.) GO TO 3
 4    CONTINUE
      ILAM=ILAM+1
      LAM(ILAM)=-EALILP(4,I,MD,SC)/PV(I)
 3    CONTINUE
      IF(ILAM.EQ.0) GO TO 1
      NSC=NSC+1
      DO 5 K=1,3
      PIN(K,NSC)=AMIN1(LAM(1),LAM(2))*V(K)
      POU(K,NSC)=AMAX1(LAM(1),LAM(2))*V(K)
 5    CONTINUE
 1    CONTINUE
 999    CONTINUE
      END
#endif
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
#include "implicit.h"
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
