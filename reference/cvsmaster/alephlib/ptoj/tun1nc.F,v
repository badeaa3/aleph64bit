head	1.7;
access;
symbols
	aleph316_2:1.7
	aleph316_1:1.7
	aleph316:1.7
	aleph315_7:1.6
	aleph315_6:1.6
	aleph315_5:1.5
	aleph315_4:1.5
	aleph315_3:1.5
	aleph315_2:1.5
	aleph315_1:1.5
	aleph315:1.5
	aleph314_2:1.5
	aleph314_1:1.5
	aleph314:1.5
	aleph313_1:1.5
	aleph313:1.5
	aleph312_1:1.5
	aleph312:1.5
	aleph311_1:1.5
	aleph311:1.5
	aleph310_3:1.5
	aleph310_2:1.5
	aleph310_1:1.5
	aleph310:1.5
	aleph309_1:1.5
	aleph309:1.5
	aleph308_3:1.5
	aleph308_2:1.5
	aleph308_1:1.5
	aleph308:1.5
	aleph307_6:1.5
	aleph307_5:1.5
	aleph307_4:1.5
	aleph307_2:1.5
	aleph307_1:1.5
	aleph307:1.5
	aleph306:1.5
	aleph305_4:1.4
	aleph305_3:1.4
	aleph305_2:1.4
	aleph305_1:1.4
	aleph305:1.4
	aleph304_5:1.4
	aleph304_4:1.4
	aleph304_3:1.4
	aleph304_2:1.4
	aleph304_1:1.4
	aleph304:1.4
	aleph303_3:1.4
	aleph303_2:1.4
	aleph303_1_mc1:1.4
	aleph303_1:1.4
	aleph303:1.4
	aleph302_9:1.4
	aleph302_8:1.3
	aleph302_7:1.3
	aleph302_6:1.3
	aleph302_5:1.3
	aleph302_4:1.3
	aleph302_3:1.3
	aleph302_2:1.2
	aleph302_1:1.2
	aleph302:1.4
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.7
date	2000.11.20.09.41.21;	author cattanem;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.06.09.27.22;	author cattanem;	state Exp;
branches;
next	1.5;

1.5
date	97.11.05.17.09.12;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.04.25.06.39.23;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	97.03.26.14.36.19;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	97.03.06.11.59.36;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.02.07.11.43.27;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.43.28;	author flr;	state Exp;
branches;
next	;


desc
@@


1.7
log
@316
@
text
@      SUBROUTINE TUN1NC(IC,ITK,ITPCO,RTPCO,IER)
C---------------------------------------------------------------------
C! Unpack single coordinate from PTNC
C!
C!    Author:  R. Johnson    17-06-90
C!    Modified:D. Casper     07-06-96   Average in wire coordinates, unless
C!                                      a TNWZ card is present.  Also,
C!                                      automatically compute coordinate
C!                                      errors, and load in TPCO.
C!             D. Casper     23-04-97   Ignore the wires if a TOAL card
C!                                      is present, since they won't be
C!                                      right.
C!             W. Wiedenmann 17-03-00   add TPD pad-wire correction factor    
C!                                      for coordinates with wire information 
C!
C!    Input:  IC       /I         Coordinate number to unpack
C!            ITK      /I         Track number in FRFT
C!    Output: ITPCO(12)/I         Integer attributes of bank TPCO
C!            RTPCO(12)/R         Real attributes of bank TPCO
C!            IER      /I         Error return= nonzero if coordinate
C!                                cannot be found.
C!     Called by PTPCOJ
C!
C      changes:
C      - print statement in first call
C      - wire flag stored in jtpcit
C      - modify call to TCRTRA->TCRTRN
C      - correct bug 100000*IROWG+1000*ISLOT
C                               | was irow
C----------------------------------------------------------------------
C#ifndef DOC
      SAVE
C
#include "alcons.h"
#include "bcs.h"
#include "ptncjj.h"
#include "tpcojj.h"
#include "tpgpar.h"
#include "tpgeop.h"
#include "tpgeom.h"
#include "frftjj.h"
#include "ptunjj.h"
#include "pcoijj.h"
#include "twzzjj.h"
C
      DIMENSION ITPCO(*),RTPCO(*)
      DIMENSION S(2),PHIP(2),ZP(2)
      LOGICAL FIRST
      DATA FIRST/.TRUE./,MODE/1/
C
#include "bmacro.h"
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        if (iw(6).gt.0) then
           lprint=iw(6)
        else
           lprint=6
        endif
        NPTNC=NAMIND('PTNC')
        NPTUN=NAMIND('PTUN')
        NTWZZ=NAMIND('TWZZ')
        NPCOI=NAMIND('PCOI')
        NFRFT=NAMIND('FRFT')
        KTNWZ=IW(NAMIND('TNWZ'))
        KTOAL=IW(NAMIND('TOAL'))
        IF (KTNWZ.EQ.0 .AND. KTOAL.EQ.0) THEN
          CALL ALTELL(
     &     'TUN1NC - TPC wire coordinates will be used (if present)',
     &     0,'RETURN')
        ELSE
          CALL ALTELL(
     &      'TUN1NC - TPC wire coordinates disabled by user',
     &      0,'RETURN')
        ENDIF
      ENDIF
C
      KPTNC=IW(NPTNC)
      IF (KPTNC.EQ.0) THEN
        IER=1
        GO TO 999
      ENDIF
      KPTUN=IW(NPTUN)
      IF (KPTUN.EQ.0) THEN
        IER=2
        GO TO 999
      ENDIF
      KPTUN=KPTUN+LMHLEN
      IF (IC.LT.1 .OR. IC.GT.LROWS(KPTNC)) THEN
        IER=3
        GO TO 999
      ENDIF
      IROW=ITABL(KPTNC,IC,JPTNSR)
      ISLOT=ITABL(KPTNC,IC,JPTNSL)
      ISTYP=ITPTYP(ISLOT)
      IF (ISTYP.NE.1) THEN
        IROWG=IROW+NTPDRW(1)
      ELSE
        IROWG=IROW
      ENDIF
C
C++   The new procedure is to store raw sector coordinates on the
C++   POT, from which TPCO can be derived by applying all alignment
C++   and field corrections.
C
      RPHIS= FLOAT(ITABL(KPTNC,IC,JPTNRP))*RW(KPTUN+JPTURP)
      ZS=    FLOAT(ITABL(KPTNC,IC,JPTNZV))*RW(KPTUN+JPTUZS)
      RS=    TPPROW(IROWG)
C
C++   Get for each hit the pad-wire z correction factor due
C++   to timing differences in the TPDs
C
      Call Tpdzwc(islot,irow,rs,rphis,zs,
     +            itpd,ipream,ipdtpd,iwtpd,
     +            corpad,corwir,zshift)
C
C++   Transform the z coordinate according changes in drift velocity
C++   and t0
C
      CALL TCRZVD(IENDTP(ISLOT),ZS,ZCR)
      ZS = ZCR
C
C++   Transform the coordinate to the ALEPH frame of reference,
C++   including all necessary alignment corrections.
C
      CALL TCTGLB(ISLOT,RS,RPHIS,ZS,R,RPHI,Z)
C
C++   Correct coordinate z for time-of-flight
C
      CALL TCRTOF(ALFIEL(DUM),R,Z,ITK,'FRFT',ZCR)
      Z=ZCR
C
C++   Correct for drift field distortions
C
      PHI= RPHI/R
      CALL TLACOR(R,PHI,Z,RCR,PHICR,ZCR,MODE)
      R=RCR
      PHI=PHICR
      Z=ZCR
      CALL TCRTRN(ISLOT,R,PHI,Z,RG,PHIG,ZG)
C
C++   Correct for z distortions measured by VDET
C
      CALL TZCRVD(IENDTP(ISLOT),RG,ZG,ZCR)
      ZG=ZCR
C
C++   Correct for Rz sector alignment measured by VDET
C
      CALL TZCSVD(ISLOT,RG,PHIG,ZG,ZCR)
      ZG=ZCR
C
C++   Correct for Residual field distortions
C
      CALL TCORES(IENDTP(ISLOT),IROWG,RG,PHIG,ZG,RCR,PHICR,ZCR)
      RG  =RCR
      PHIG=PHICR
      ZG  =ZCR
      CALL TFICOR(IENDTP(ISLOT),IROWG,RG,PHIG,ZG,RCR,PHICR,ZCR)
      RG  =RCR
      PHIG=PHICR
      ZG  =ZCR
C
C++   Correct for timing shifts from TPDS
C
      zg = zg - (corpad+zshift)
C
C++   Load errors packed in PTNC
C
      SIGRPHI2 = (FLOAT(ITABL(KPTNC,IC,JPTNSP))*RW(KPTUN+JPTUSR))**2
      SIGZ2    = (FLOAT(ITABL(KPTNC,IC,JPTNSZ))*RW(KPTUN+JPTUSZ))**2
      ICOR     = 0
      iwflg    = 0
C
      KPCOI=IW(NPCOI)
      IF (ITK.LE.0 .OR. KPCOI.EQ.0) GOTO 998
C
C++   Check whether a wire coordinate is associated with this guy.
C
      ICOR = ITABL(KPCOI,IC,JPCOTF)/10
      IWCO = ICOR/100
      KTWZZ = IW(NTWZZ)
      IF (IWCO .GT. 0 .AND. KTWZZ.GT.0 .AND. KTNWZ.EQ.0
     &      .AND. KTOAL.EQ.0)THEN
        IF(IWCO.LE.LROWS(KTWZZ))THEN
C
C++   set wire flag
C
            iwflg = 1
C
            ITWZZ = KROW(KTWZZ,IWCO)
            SZW2 = RW(ITWZZ+JTWZSZ)
C
C++   Average the wire and pad coordinates
C
            WTP = 1./SIGZ2
            WTW = 1./SZW2
            ZSP = FLOAT(ITABL(KPTNC,IC,JPTNZV))*RW(KPTUN+JPTUZS)
            zsp = zsp
            zsw = RW(ITWZZ+JTWZDZ)  
            ZS = (WTP*ZSP + WTW*(ZSP+ZSW))/(WTP+WTW)
            SIGZ2 = 1./(WTW+WTP)
C
C++   Transform the combined z coordinate according changes in drift velocity
C++   and t0
C
            CALL TCRZVD(IENDTP(ISLOT),ZS,ZCR)
            ZS = ZCR
C
C++   Transform the combined coordinate to the ALEPH frame of reference,
C++   including all necessary alignment corrections.
C
            CALL TCTGLB(ISLOT,RS,RPHIS,ZS,R,RPHI,Z)
C
C++   Correct combined coordinate z for time-of-flight
C
            CALL TCRTOF(ALFIEL(DUM),R,Z,ITK,'FRFT',ZCR)
            Z=ZCR
C
C++   Correct for drift field distortions
C
            PHI= RPHI/R
            CALL TLACOR(R,PHI,Z,RCR,PHICR,ZCR,MODE)
            R=RCR
            PHI=PHICR
            Z=ZCR
            CALL TCRTRN(ISLOT,R,PHI,Z,RG,PHIG,ZG)
C
C++   Correct for z distortions measured by VDET
C
            CALL TZCRVD(IENDTP(ISLOT),RG,ZG,ZCR)
            ZG=ZCR
C
C++   Correct for Rz sector alignment measured by VDET
C
            CALL TZCSVD(ISLOT,RG,PHIG,ZG,ZCR)
            ZG=ZCR
C
C++   Correct for Residual field distortions
C
            CALL TCORES(IENDTP(ISLOT),IROWG,RG,PHIG,ZG,RCR,PHICR,ZCR)
            RG  =RCR
            PHIG=PHICR
            ZG  =ZCR
            CALL TFICOR(IENDTP(ISLOT),IROWG,RG,PHIG,ZG,RCR,PHICR,ZCR)
            RG  =RCR
            PHIG=PHICR
            ZG  =ZCR
C
C++   Correct for timing shifts from TPDS
C
            zg = zg - ((wtp*corpad+wtw*corwir)/(wtp+wtw)+zshift)
C
        ENDIF
      ENDIF
C
 998  CONTINUE
      ITPCO(JTPCIN)=100000*IROWG+1000*ISLOT
      RTPCO(JTPCRV)=RG
      RTPCO(JTPCPH)=PHIG
      RTPCO(JTPCZV)=ZG
      RTPCO(JTPCSR)=SIGRPHI2
      RTPCO(JTPCSZ)=SIGZ2
      ITPCO(JTPCOF)=ICOR*10
      ITPCO(JTPCTN)=0
      ITPCO(JTPCCN)=0
      ITPCO(JTPCIT)=iwflg
      RTPCO(JTPCRR)=RPHIS
      RTPCO(JTPCRZ)=ZS
      IER=0
C
  999 CONTINUE
      RETURN
      END
C#endif
@


1.6
log
@add tpd corrections stuff
@
text
@a59 2
        write (lprint,*) ' TUN1NC - TPD timing corrections ',
     +                   'will be applied -'
@


1.5
log
@Alephlib 306
@
text
@d13 2
d31 1
a31 1
#ifndef DOC
d55 7
d112 7
d165 4
d200 3
a202 1
            ZS = (WTP*ZSP + WTW*(ZSP+RW(ITWZZ+JTWZDZ)))/(WTP+WTW)
d250 5
d276 1
a276 1
#endif
@


1.4
log
@Bug fixes for Alephlib 302.9
@
text
@d116 1
a116 1
      CALL TCRTOF(ALFIEL(IROW),R,Z,ITK,'FRFT',ZCR)
d196 1
a196 1
            CALL TCRTOF(ALFIEL(IROW),R,Z,ITK,'FRFT',ZCR)
@


1.3
log
@aleph302_3 remove TERPAR from TUN1NC
@
text
@d10 3
d59 10
a85 5
      KPCOI=IW(NPCOI)
      IF (KPCOI.EQ.0)THEN
        IER=4
        GOTO 999
      ENDIF
d155 3
a157 1
      IF (ITK.LE.0) GOTO 998
d161 1
d164 2
a165 1
      IF (IWCO .GT. 0 .AND. KTWZZ.GT.0 .AND. KTNWZ.EQ.0)THEN
@


1.2
log
@1st test version aleph302
@
text
@d141 1
a141 1
C++   Load errors packed in PTNC in case something goes wrong
a147 38
C
C++   Get track parameters necessary to compute error
C--   Get intersection of track with radial position of hit
C
      KFRFT = IW(NFRFT)
      IF (KFRFT.LE.0 .OR. ITK.GT.LROWS(KFRFT)) GOTO 998
      IFRFT = KROW(KFRFT,ITK)
      CALL THLCIR(RW(IFRFT+JFRFIR),RG,S,PHIP,ZP,IER)
      IF (IER.NE.0) GO TO 998
C
C--   Get angle of track with radial direction (pad crossing angle)
C
      COSL=1./SQRT(1.+RW(IFRFT+JFRFTL)**2)
      SP=S(1)*COSL
      ALPHA=SP*RW(IFRFT+JFRFIR)
      THETA= ALPHA + RW(IFRFT+JFRFP0)
      IF (THETA.LT.0.) THEN
        THETA=THETA+TWOPI
      ELSEIF (THETA.GE.TWOPI) THEN
        THETA=THETA-TWOPI
      ENDIF
      PADCRO=THETA-PHIP(1)
      IF (PADCRO.LT.-PI) THEN
        PADCRO=PADCRO+TWOPI
      ELSEIF (PADCRO.GE.PI) THEN
        PADCRO=PADCRO-TWOPI
      ENDIF
C
C++  Get number of half pads and wire correction info
C
      NHALF=ITABL(KPCOI,IC,JPCONH)
      ICOR = ITABL(KPCOI,IC,JPCOTF)/10
C
C++  Calculate the errors on the pad coordinate
C
      CALL TERPAR(PADCRO,ZG,RW(IFRFT+JFRFTL),NHALF,ICOR,SRPHI,SIGZ)
      SIGRPHI2 = SRPHI**2
      SIGZ2    = SIGZ**2
@


1.1
log
@Initial revision
@
text
@a1 1
C
d6 4
d13 2
a14 2
C!    Output: ITPCO(6) /I         Integer attributes of bank TPCO
C!            RTPCO(6) /R         Real attributes of bank TPCO
d19 6
d36 1
d38 2
d42 1
d52 4
d57 1
d73 5
d117 2
a118 2
      ZG=ZCR
      CALL TCRTRA(IENDTP(ISLOT),R,PHI,ZG,RG,PHIG)
d141 117
d262 3
a264 3
      RTPCO(JTPCSR)=(FLOAT(ITABL(KPTNC,IC,JPTNSP))*RW(KPTUN+JPTUSR))**2
      RTPCO(JTPCSZ)=(FLOAT(ITABL(KPTNC,IC,JPTNSZ))*RW(KPTUN+JPTUSZ))**2
      ITPCO(JTPCOF)=0
d267 1
a267 1
      ITPCO(JTPCIT)=0
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
