head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.43.51;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.43.52;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE VGCMTR (TE1,TE2,TECM)
C----------------------------------------------------------------------
CKEY VDETDES ALIGN / INTERNAL
C!  Combine two transformation structures
C - Francesco Forti, 17 August 1990
C
C   Combines two transformation structures to give a single
C   transformation.  TE1 is applied FIRST and TE2 is applied
C   afterwards.  Calling A the rotation matrix and T the translation
C   vector, the first transformation is XP = A*X + T. The second is
C   XPP = B*XP + S where TE1=(A,T) and TE2=(B,S).  The complete
C   transformation will be XPP = B*(A*X+T) + S = B*A*X + (B*T + S),
C   i.e., TECM = (B*A,B*T+S).
C
C - Input:
C   TE1(33)  / R  First transformation structure
C   TE2(33)  / R  Second transformation structure
C
C - Output:
C   TECM(33) / R  Output transformation structure
C
C   Libraries required: CERNLIBS
C ----------------------------------------------------------------------
#ifndef DOC
C     IMPLICIT NONE
#include "vglobl.h"
#include "vgpaal.h"
      REAL TE1(*), TE2(*), TECM(*)
      REAL DUMMY
#include "vgvmcr.h"
#include "vgmacr.h"
C ----------------------------------------------------------------------
C
C     Initialize TECM = TE2:
C
      CALL UCOPY(TE2, TECM, LVTEXP)
C
C     Matrix multiplication (see CERNLIB F004):
C
      CALL RMMLT( 3,3,3,
     &  TE2(KVINDX(1,1)),TE2(KVINDX(1,2)),TE2(KVINDX(2,1)),
     &  TE1(KVINDX(1,1)),TE1(KVINDX(1,2)),TE1(KVINDX(2,1)),
     &  TECM(KVINDX(1,1)),TECM(KVINDX(1,2)),TECM(KVINDX(2,1)),
     &  DUMMY)
C
C     Calculate the new translation vector.
C     The translation vector in TECM is currently .EQ. S
C
      CALL RMMPA( 3,3,
     &  TE2(KVINDX(1,1)),TE2(KVINDX(1,2)),TE2(KVINDX(2,1)),
     &  TE1(JVTETR), TE1(JVTETR+1),
     &  TECM(JVTETR), TECM(JVTETR+1)  )
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
