head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.44.13;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.44.14;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      INTEGER FUNCTION VDGDMP ()
C ----------------------------------------------------------------------
CKEY VDETDES PRINT DUMP / USER
C!  Dump VDET geometry commons
C - Steve Wasserbaech, January 1994
C
C - Input:
C   (none)
C
C - Output:
C   VDGDMP / I   = VDOK if successful
C                = VDERR if an error occurred
C ----------------------------------------------------------------------
#ifndef DOC
C     IMPLICIT NONE
#include "vglobl.h"
#include "vsltco.h"
#include "vdlaco.h"
#include "vzpwco.h"
#include "vwgeco.h"
#include "vrdoco.h"
#include "vgindx.h"
#include "vdetge.h"
#include "bcs.h"
C
C     Local variables
      INTEGER LOUT, JLAY, JFAC, JMOD, JWAF, IWFF
C
C ----------------------------------------------------------------------
C
      VDGDMP = VDERR
      LOUT = IW(6)
C
      IF (IVSTUP .LE. 0) THEN
        WRITE (LOUT,'(1X,A)')
     >          '+++VDGDMP+++  VDET geometry commons are not filled.'
        GO TO 1000
      ENDIF
C
      WRITE (LOUT,'(/1X,A)')
     >          '+++VDGDMP+++  Dump of VDET geometry commons'
      WRITE (LOUT,'(1X,A,I3)') '+++VDGDMP+++  Setup', IVSTUP
C
C ----------------------------------------------------------------------
C
C     Parameters:
C
      WRITE (LOUT,'(/1X,A)') 'Parameters:'
      WRITE (LOUT,'((1X,4(A,I4,5X)))')
     >         'VDERR  =', VDERR,  'VDOK   =', VDOK,
     >         'VVIEWZ =', VVIEWZ, 'VVIEWP =', VVIEWP,
     >         'NVLAYR =', NVLAYR, 'NVMODF =', NVMODF,
     >         'NVVIEW =', NVVIEW, 'NPROMM =', NPROMM,
     >         'IROMAX =', IROMAX, 'NVWMMX =', NVWMMX,
     >         'NVWFMX =', NVWFMX, 'NVFLMX =', NVFLMX,
     >         'NVFMAX =', NVFMAX, 'NVMMAX =', NVMMAX,
     >         'NVWMAX =', NVWMAX, 'NVZRMX =', NVZRMX,
     >         'NVPRMX =', NVPRMX
C
C ----------------------------------------------------------------------
C
C     VSLTCO:
C
      WRITE (LOUT,'(/1X,A)') 'VSLTCO common:'
      WRITE (LOUT,'(1X,A,I4)') 'NSLOTS =', NSLOTS
      WRITE (LOUT,'(1X,A)') ' JFAC    JJLAYF    PHIOFF    ISSFLG'
      DO JFAC=1,NSLOTS
        WRITE (LOUT,'(I6,I10,F10.5,I10)') JFAC, JJLAYF(JFAC),
     >                                 PHIOFF(JFAC), ISSFLG(JFAC)
      ENDDO
C
C ----------------------------------------------------------------------
C
C     VDLACO:
C
      WRITE (LOUT,'(/1X,A)') 'VDLACO common:'
      WRITE (LOUT,'(1X,A)') ' JLAY    RWVDLA    WATILT    IORIEN'
      DO JLAY=1,NVLAYR
        WRITE (LOUT,'(I6,F10.5,F10.6,I10)') JLAY, RWVDLA(JLAY),
     >                                 WATILT(JLAY), IORIEN(JLAY)
      ENDDO
C
C ----------------------------------------------------------------------
C
C     VZPWCO:
C
      WRITE (LOUT,'(/1X,A)') 'VZPWCO common:'
      WRITE (LOUT,'(1X,A,I4)') 'NWAFEF =', NWAFEF
      WRITE (LOUT,'(1X,A)') ' IWFF    WAFERZ'
      DO IWFF=1,NWAFEF
        WRITE (LOUT,'(I6,F10.5)') IWFF, WAFERZ(IWFF)
      ENDDO
C
C ----------------------------------------------------------------------
C
C     VWGECO:
C
      WRITE (LOUT,'(/1X,A)') 'VWGECO common:'
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'WSIZEA =', WSIZEA, 'WSIZEB =', WSIZEB
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NZSTRP =', NZSTRP, 'NPSTRP =', NPSTRP
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'STPITZ =', STPITZ, 'STPITP =', STPITP
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'STLENZ =', STLENZ, 'STLENP =', STLENP
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'AMNSRZ =', AMNSRZ, 'AMNSRP =', AMNSRP
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'BMNSRZ =', BMNSRZ, 'BMNSRP =', BMNSRP
      WRITE (LOUT,'(1X,A,F10.5)')
     >            'WTHICK =', WTHICK
C
C ----------------------------------------------------------------------
C
C     VRDOCO:
C
      WRITE (LOUT,'(/1X,A)') 'VRDOCO common:'
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NRDSTZ =', NRDSTZ, 'NRDSTP =', NRDSTP
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NREFRZ =', NREFRZ, 'NREFRP =', NREFRP
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NOFRDZ =', NOFRDZ, 'NOFRDP =', NOFRDP
      WRITE (LOUT,'(1X,A,I10)')
     >            'NZRSSC =', NZRSSC
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'IECORZ =', IECORZ, 'IECORP =', IECORP
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NZEROM =', NZEROM, 'NPEROM =', NPEROM
      WRITE (LOUT,'(1X,A,I10)')
     >            'NWFBIT =', NWFBIT
C
C ----------------------------------------------------------------------
C
C     VGINDX:
C
      WRITE (LOUT,'(/1X,A)') 'VGINDX common:'
      WRITE (LOUT,'(1X,A,I4,2X,2(3X,A,I1,A,I3))') 'IVSTUP =', IVSTUP,
     >         ('NFACEL(', JLAY, ') =', NFACEL(JLAY), JLAY=1,NVLAYR)
      WRITE (LOUT,'(1X,3(A,I4,5X))')
     >         'NMODUL =', NMODUL, 'NWAFEM =', NWAFEM,
     >         'NWAFER =', NWAFER
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JJFACM:', (JJFACM(JMOD), JMOD=1,NMODUL)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JJMODW:', (JJMODW(JWAF), JWAF=1,NWAFER)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JIFACF:', (JIFACF(JFAC), JFAC=1,NSLOTS)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JIMODM:', (JIMODM(JMOD), JMOD=1,NMODUL)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JIWAFW:', (JIWAFW(JWAF), JWAF=1,NWAFER)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))') 'IJFACE:', IJFACE
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))') 'IJMODU:', IJMODU
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))') 'IJWAFR:', IJWAFR
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))')
     >         'JIWFFW:', (JIWFFW(JWAF), JWAF=1,NWAFER)
      WRITE (LOUT,'(1X,A,12I4/(8X,12I4))') 'IJWFFR:', IJWFFR
      WRITE (LOUT,'(1X,A,12(1X,A4)/(8X,12(1X,A4)))') 'TXMODU:', TXMODU
C
C ----------------------------------------------------------------------
C
C     VDETGE:
C
      WRITE (LOUT,'(/1X,A)') 'VDETGE common:'
      WRITE (LOUT,'(1X,3(A,F10.5,4X))') 'RVDMIN =', RVDMIN, 'RVDMAX =',
     >                 RVDMAX, 'ZVDMAX =', ZVDMAX
      WRITE (LOUT,'(1X,A)') ' JWAF    WAXCEN    WAYCEN    WAZCEN'
      DO JWAF=1,NWAFER
        WRITE (LOUT,'(I6,3F10.5)') JWAF, WAXCEN(JWAF), WAYCEN(JWAF),
     >                            WAZCEN(JWAF)
      ENDDO
      WRITE (LOUT,'(1X,A)')
     >               ' JFAC    WARHOC    WAPHIC    CPHIOF    SPHIOF'
      DO JFAC=1,NSLOTS
        WRITE (LOUT,'(I6,4F10.5)') JFAC, WARHOC(JFAC), WAPHIC(JFAC),
     >                            CPHIOF(JFAC), SPHIOF(JFAC)
      ENDDO
      WRITE (LOUT,'(1X,A,2F10.6)') 'TNWTLT:', TNWTLT
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'AMXSRZ =', AMXSRZ, 'AMXSRP =', AMXSRP
      WRITE (LOUT,'(1X,2(A,F10.5,4X))')
     >            'BMXSRZ =', BMXSRZ, 'BMXSRP =', BMXSRP
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NZSROM =', NZSROM, 'NPSROM =', NPSROM
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NZSMOD =', NZSMOD, 'NPSMOD =', NPSMOD
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'NPRSSC =', NPRSSC, 'NZROMM =', NZROMM
      WRITE (LOUT,'(1X,A,L10)')
     >            'LZMULT =', LZMULT
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'MSVWAF =', MSVWAF, 'MSVNST =', MSVNST
      WRITE (LOUT,'(1X,2(A,I10,4X))')
     >            'ISSLAY =', ISSLAY, 'ISSNST =', ISSNST
C
C ----------------------------------------------------------------------
C
C     Finished!
C
      VDGDMP = VDOK
C
 1000 CONTINUE
      RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
