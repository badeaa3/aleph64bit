head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.42.12;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.42.13;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@               SUBROUTINE HDEADM
C-------------------------------------------------------------------
CKEY HCALDES HCAL DEAD TUBE  / INTERNAL
C
C!   Create and fill Look_up Tables for Hcal dead Tubes
C!
C!                            Author:G.Catanesi 1/08/89
C!                            Modify:L.Silvestris 07/07/90
C!
C - Banks : read HTXD
C         : read HRDT
C-------------------------------------------------------------------
#ifndef DOC
#include "bcs.h"
#include "hcgeom.h"
#include "hjjpar.h"
#include "hcdetu.h"
C
#include "bmacro.h"
C? Set to zero the Barrel table
      DO 1 I=1,LPHCBM
         DO 2 J=1,LHCNL
            MH8FDB(I,J)=0
            LSH8DB(I,J)=0
 2       CONTINUE
 1    CONTINUE
C
C  Set to zero the EndCap table
C
      DO 3 K=1,LPHCES*2
         DO 4 N1= 1,LHCNL-1
            DO 5 N2=1,2
               MH8FDE(K,N1,N2) = 0
               LSH8DE(K,N1,N2) = 0
 5          CONTINUE
 4       CONTINUE
 3    CONTINUE
C
C     Look the unrecoverable dead tubes
C
      JHTXD = IW(NAMIND( 'HTXD'))
      IF(JHTXD.EQ.0) GOTO 90
C
      NHTXD = LROWS(JHTXD)
      IF(NHTXD.EQ.0)GOTO 90
C
C? Loop on bank HTDX
      DO 6 K=1,NHTXD
C
         IADR  =  ITABL(JHTXD,K,JHTXEA)
C
C? Decode the Adress: IADR ==> ITUB, ILAY, IMOD, IPOR
#include "htdadd.h"
C
C? Fill the Look_up Table
      IF(IPOR.EQ.LPBAR)THEN
C?     Barrel Case
         IF(ITUB.GT.NEITHC(ILAY))THEN
C           even module
            ITUB = 2*NEITHC(ILAY)+1 - ITUB
            IMOD = IMOD*2
         ELSE
C           odd module
            IMOD = IMOD*2 -1
         ENDIF
         MH8FDB(IMOD,ILAY) = MH8FDB(IMOD,ILAY)+2**ITUB
      ELSE
C?     EndCap
         IF(IPOR.EQ.LPECB)IMOD = IMOD + LPHCES
         IF(MOD(ITUB,2).EQ.0)THEN
            ITUB = ITUB/2
            IDTU = 2
         ELSE
            ITUB = ITUB/2 + 1
            IDTU = 1
         ENDIF
         MH8FDE(IMOD,ILAY,IDTU) = MH8FDE(IMOD,ILAY,IDTU) + 2**ITUB
      ENDIF
C
 6    CONTINUE
C
90    CONTINUE
C
C     Look the recoverable dead tubes
C
      JHRDT = IW(NAMIND( 'HRDT'))
      IF(JHRDT.EQ.0) GOTO 99
C
      NHRDT = LROWS(JHRDT)
      IF(NHRDT.EQ.0)GOTO 99
C
C? Loop on bank HRDT
      DO 16 K=1,NHRDT
C
         IADR  =  ITABL(JHRDT,K,JHRDEA)
C
C? Decode the Adress: IADR ==> ITUB, ILAY, IMOD, IPOR
#include "htdadd.h"
C
C? Fill the Look_up Table
      IF(IPOR.EQ.LPBAR)THEN
C?     Barrel Case
         IF(ITUB.GT.NEITHC(ILAY))THEN
C           even module
            ITUB = 2*NEITHC(ILAY)+1 - ITUB
            IMOD = IMOD*2
         ELSE
C           odd module
            IMOD = IMOD*2 -1
         ENDIF
         LSH8DB(IMOD,ILAY) = LSH8DB(IMOD,ILAY)+2**ITUB
      ELSE
C?     EndCap
         IF(IPOR.EQ.LPECB)IMOD = IMOD + LPHCES
         IF(MOD(ITUB,2).EQ.0)THEN
            ITUB = ITUB/2
            IDTU = 2
         ELSE
            ITUB = ITUB/2 + 1
            IDTU = 1
         ENDIF
         LSH8DE(IMOD,ILAY,IDTU) = LSH8DE(IMOD,ILAY,IDTU) + 2**ITUB
      ENDIF
C
16    CONTINUE
C
99    CONTINUE
      RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
