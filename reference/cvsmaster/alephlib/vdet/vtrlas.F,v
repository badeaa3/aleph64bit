head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.44.50;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.44.51;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      LOGICAL FUNCTION VTRLAS (DUM)
C----------------------------------------------------------------------
C!  - .TRUE. If VDET Laser Trigger
CKEY VDET LASER TRIGGER / USER
C!   Author   :- E. Lancon             30-JUN-1993
C!   modified : A.Wagner and F.Ranjard 12-APR-1995
C?
C!======================================================================
#ifndef DOC
#include "bcs.h"
#include "xtbnjj.h"
      CHARACTER*4 MNM1,MNM2,CHAINT
      INTEGER AGETDB, ALTRIG, ALFIND
      SAVE INUM
      DATA NAXTBN, IRLAST /2*0/
C
#include "bmacro.h"
C---------------------------------------------------------------
C
      VTRLAS = .FALSE.
      IF (NAXTBN.EQ.0) NAXTBN = NAMIND('XTBN')
      CALL ABRUEV (IRUNRC,IEV)
C
C - new run ====================================
C
      IF (IRUNRC .NE. IRLAST) THEN
C      reset INUM to wrong value
         INUM = -1
         IRLAST = IRUNRC
C      IF XTBN is not on the run header list  OR
C         is not there THEN get it from DB
         IXTBN = ALFIND('C','XTBN')
         KXTBN  = IW(NAXTBN)
         IF (IXTBN.EQ.0 .OR. KXTBN.EQ.0) THEN
            IDUMM = AGETDB('XTBN',IRUNRC)
            KXTBN = IW(NAXTBN)
         ENDIF
         IF (KXTBN.NE.0) THEN
            DO I=1,LROWS(KXTBN)
C
C            is this trigger bit enabled?
C            exclude bit # 31
C
               IDEF=ITABL(KXTBN,I,JXTBTN)
               INUM=ITABL(KXTBN,I,JXTBTB)
C
C            For some of the early runs XTBN was corrupted
C
               IF(INUM.LT.0.OR.INUM.GT.31) GOTO 888
C
C            get mnemonic
C
               IF(IDEF.NE.0)THEN
                 MNM1=CHAINT(ITABL(KXTBN,I,JXTBBM))
                 MNM2=CHAINT(ITABL(KXTBN,I,JXTBBM+1))
                 IF(MNM1(1:4).EQ.'VDET'.AND.MNM2(1:4).EQ.'_LSR')GOTO 100
               ENDIF
            ENDDO
            GOTO 888
         ENDIF
C
      ENDIF
C
C - same run ==========================================
C
  100 CONTINUE

C?    IF trigger bit number and trigger bit pattern are OK
C     THEN compare trigger bit pattern with trigger bit number
C
      IF( INUM .GT. -1) THEN
        IF (ALTRIG(JLVL1,JLVL2,JLVL3).GT.0) VTRLAS = BTEST(JLVL3,INUM)
      ENDIF
C
C =====================================================
C
  888 RETURN
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
