head	1.3;
access;
symbols
	aleph316_2:1.3
	aleph316_1:1.3
	aleph316:1.3
	aleph315_7:1.3
	aleph315_6:1.3
	aleph315_5:1.3
	aleph315_4:1.3
	aleph315_3:1.3
	aleph315_2:1.3
	aleph315_1:1.3
	aleph315:1.3
	aleph314_2:1.3
	aleph314_1:1.3
	aleph314:1.3
	aleph313_1:1.3
	aleph313:1.3
	aleph312_1:1.3
	aleph312:1.3
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.3
date	99.09.03.09.04.45;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	99.07.30.08.51.12;	author cattanem;	state Exp;
branches;
next	1.1;

1.1
date	96.02.07.11.40.54;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.40.55;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@write obsolescence warning once only
@
text
@      SUBROUTINE TXDEDX(BG,SBG,Q,RSIG,SMPL,DEDX,SDEDX,IER)
C----------------------------------------------------------------------
C! Routine for backward compatibility only. Call TXPDDX directly instead
C
C  M.Cattaneo 1999-07-29
C----------------------------------------------------------------------
#ifndef DOC
C
      LOGICAL FIRST /.TRUE./
#include "bcs.h"
      IF( FIRST ) THEN
        WRITE(IW(6),*)
     &   'Routine TXDEDX is obsolete. Please use TXPDDX instead'
        FIRST = .FALSE.
      ENDIF
C
      CALL TXPDDX('WIRE',BG,SBG,Q,RSIG,SMPL,DEDX,SDEDX,IER)
C
      RETURN
      END
#endif
@


1.2
log
@Alephlib 312 test
@
text
@d9 1
d11 2
a12 1
      WRITE(IW(6),*)
d14 2
@


1.1
log
@Initial revision
@
text
@d2 2
d5 2
a6 26
C-----------------------------------------------------------------------
C! Expected dE/dx of relativistic particle
CKEY DEDX PARTICLE
C!    Author:  R. Johnson    17-06-87
C!    Modified: Z. Feng      26-11-92 modify the power term to general purpose
C!
C!    Input:  BG      /R     beta*gamma of the particle
C!            SBG     /R     Uncertainty in BG
C!            Q       /R     Particle charge
C!            RSIG    /R     Relative uncertainty of trunc mean, as
C!                           given by the routine TMDEDX
C!    Output: DEDX    /R     Energy loss relative to minimum ionizing
C!            SDEDX   /R     Estimate of uncertainty in DEDX
C!            IER     /I     Error return=0 for success
C!                               4= cannot find calibration bank TC3X
C!                               5= TBTBLK returns a negative value,
C!                                  TBTBLK is set to zero.
C!    Description
C!    -----------
C!    This routine returns the most probable value of the
C!    dE/dx distribution expected for a TPC track of
C!    velocity beta, where beta*gamma= beta/SQRT(1-beta**2).
C!    Also returned is the 1-sigma uncertainty  on this most
C!    probable value.
C!
C!----------------------------------------------------------------------
d8 1
d10 2
a11 41
#include "tc4xjj.h"
C
C
      PARAMETER (ALG10=2.30258509, EPS=0.005, RNORM=1.000)
C
C - set necessary data for GTDBBK
      INTEGER ALGTDB, GTSTUP
      CHARACTER DET*2, LIST*4
      PARAMETER (DET='TP', LIST='TC4X')
      DATA IROLD/0/
      DATA NTC4X/0/
C
#include "bmacro.h"
C ------------------------------------------------------------------
      IF (NTC4X.EQ.0) THEN
        NTC4X=NAMIND('TC4X')
      ENDIF
C
C++   Look for the calibration constants
#include "gtdbbk.h"
      KTC4X=IW(NTC4X)
      IF (KTC4X.EQ.0) THEN
        IER=4
        GO TO 999
      ENDIF
C
C++   Get expected dE/dx as function of log10(beta*gamma)
C++   Also estimate the derivative (which need not be precise)
C
      BGLOG=ALOG10(BG)
      DEDX= TBTBLK(BGLOG,Q,SMPL,IER)*RNORM
      DEDXP= TBTBLK(BGLOG+EPS,Q,SMPL,IER)*RNORM
      DIDBG= (DEDXP-DEDX)/EPS
C
C++   Use the length, number of measurements, and DEDX itself to
C++   estimate the uncertainty on DEDX
C
      PPOW5=RTABL(KTC4X,1,JTC4RP+5)
      SDEDX= (DEDX**(1.0-PPOW5))*RSIG
C
C++   Fold in the contribution from the momentum uncertainty
d13 1
a13 2
      SBGLG= SBG/BG/ALG10
      SDEDX= SQRT(SDEDX**2 + (DIDBG*SBGLG)**2)
a14 1
  999 CONTINUE
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
