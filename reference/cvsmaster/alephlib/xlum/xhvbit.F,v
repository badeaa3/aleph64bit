head	1.2;
access;
symbols
	aleph316_2:1.2
	aleph316_1:1.2
	aleph316:1.2
	aleph315_7:1.2
	aleph315_6:1.2
	aleph315_5:1.2
	aleph315_4:1.2
	aleph315_3:1.2
	aleph315_2:1.2
	aleph315_1:1.2
	aleph315:1.2
	aleph314_2:1.2
	aleph314_1:1.2
	aleph314:1.2
	aleph313_1:1.2
	aleph313:1.2
	aleph312_1:1.2
	aleph312:1.2
	aleph311_1:1.2
	aleph311:1.2
	aleph310_3:1.2
	aleph310_2:1.2
	aleph310_1:1.2
	aleph310:1.2
	aleph309_1:1.2
	aleph309:1.2
	aleph308_3:1.2
	aleph308_2:1.2
	aleph308_1:1.2
	aleph308:1.2
	aleph307_6:1.2
	aleph307_5:1.2
	aleph307_4:1.2
	aleph307_2:1.2
	aleph307_1:1.2
	aleph307:1.2;
locks; strict;
comment	@c @;


1.2
date	97.12.05.10.10.48;	author cattanem;	state Exp;
branches;
next	1.1;

1.1
date	97.12.02.16.51.50;	author cattanem;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Alephlib 307 second test
@
text
@      INTEGER FUNCTION XHVBIT(jhvst)
CKEY XLUMOK TRIG /INTERNAL
C----------------------------------------------------------------------
C!   Returns raw HV status bits, without run/detector specific repairs.
C!   Not to be used for MonteCarlo
C!
C!   Called from XHVSTA, VDHVOK
C!
C!   Author   :   M.Cattaneo         2-Dec-1997
C!   (Code extracted from B.Bloch adaptation of QHVSTA from Alpha)
C!
C!   Inputs:           None
C!   Outputs:          Integer JHVST = HV status bits word
C!
C!   Return value:     Flags which bank was used to get HV bit:
C!                     0 - No bank found
C!                     1 - XTCN
C!                     2 - X1RG
C!                     3 - REVH
C!                     4 - LUPA
C!                     5 - SILH
C!
C!   Description:
C!     To be used within any ALEPH program
C!     Returns the High Voltage status of ALEPH according to
C!     the bit mapping of X1RG or XTCN ( when reading Raw Data),
C!     REVH, word 1 (POT).
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
#include "bcs.h"
#include "x1rgjj.h"
#include "xtcnjj.h"
#include "revhjj.h"
#include "lupajj.h"
#include "silhjj.h"
      INTEGER jhvst
      INTEGER kX1RG,kXTCN,kREVH,kLUPA,kSILH
      INTEGER naX1RG,naXTCN,naREVH,naLUPA,naSILH
      LOGICAL first / .TRUE. /
      SAVE first,naLUPA,naSILH,naREVH,naXTCN,naX1RG
      INTEGER  NAMIND
      EXTERNAL NAMIND
#include "bmacrod.h"
#include "bmacro.h"
C----------------------------------------------------------------------
C Save the name indices
      IF( first ) THEN
        naX1RG = NAMIND('X1RG')
        naXTCN = NAMIND('XTCN')
        naREVH = NAMIND('REVH')
        naLUPA = NAMIND('LUPA')
        naSILH = NAMIND('SILH')
        first = .FALSE.
      ENDIF
C
      kX1RG = IW(naX1RG)
      kXTCN = IW(naXTCN)
      kREVH = IW(naREVH)
      kLUPA = IW(naLUPA)
      kSILH = IW(naSILH)
C
C  Detector HV status X1RG or XTCN bank or in word 1 of REVH 
C  or LUPA/SILH for Luminosity events on POT's 
C  If all banks missing, the event is bad, declare detector's off.
C  The order of the checks is important when reading Raw Data during
C  Julia processing : XTCN and REVH may be booked but not yet filled
C  at the time the info is needed, so try first Raw data bank X1RG 
C
      IF (kX1RG.GT.0) THEN
C! TSR is in row 2
        jhvst  = ITABL(kX1RG,2,JX1RCO+2)
        xhvbit = 2
      ELSEIF (kXTCN.GT.0) THEN
        jhvst  = ITABL(kXTCN,1,JXTCTR)
        xhvbit = 1
      ELSEIF (kREVH.GT.0) THEN
        jhvst  = ITABL(kREVH,1,JREVDS)
        xhvbit = 3
      ELSEIF (kLUPA.GT.0) THEN
        jhvst  = ITABL(kLUPA,1,JLUPHV)
        xhvbit = 4
      ELSEIF (kSILH.NE.0) THEN
        jhvst  = ITABL(kSILH,1,JSILHV)
        xhvbit = 5
      ELSE
        jhvst  = 0
        xhvbit = 0
      ENDIF

  999 CONTINUE
      END
#endif
@


1.1
log
@Add xlum package
@
text
@d1 1
a1 1
      SUBROUTINE XHVBIT(jhvst)
d15 8
a38 1
      INTEGER irow
d43 2
a44 3
      INTEGER     NAMIND
      CHARACTER*4 CHAINT
      EXTERNAL NAMIND, CHAINT
d72 3
a74 7
        DO 2 IROW=1,LROWS(kX1RG)
          IF(CHAINT(ITABL(kX1RG,IROW,JX1RNA)).EQ.'TSR ') THEN
            jhvst = ITABL(kX1RG,IROW,JX1RCO+2)
            GOTO 3
          ENDIF
    2   CONTINUE
    3   CONTINUE
d76 2
a77 1
        jhvst = ITABL(kXTCN,1,JXTCTR)
d79 2
a80 1
        jhvst = ITABL(kREVH,1,JREVDS)
d82 2
a83 1
        jhvst = ITABL(kLUPA,1,JLUPHV)
d85 2
a86 1
        jhvst = ITABL(kSILH,1,JSILHV)
d88 2
a89 1
        jhvst = 0
@
