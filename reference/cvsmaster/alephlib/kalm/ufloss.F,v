head	1.4;
access;
symbols
	aleph316_2:1.4
	aleph316_1:1.4
	aleph316:1.4
	aleph315_7:1.4
	aleph315_6:1.4
	aleph315_5:1.4
	aleph315_4:1.4
	aleph315_3:1.4
	aleph315_2:1.4
	aleph315_1:1.4
	aleph315:1.4
	aleph314_2:1.4
	aleph314_1:1.4
	aleph314:1.4
	aleph313_1:1.4
	aleph313:1.4
	aleph312_1:1.3
	aleph312:1.3
	aleph311_1:1.3
	aleph311:1.3
	aleph310_3:1.3
	aleph310_2:1.3
	aleph310_1:1.3
	aleph310:1.3
	aleph309_1:1.3
	aleph309:1.3
	aleph308_3:1.3
	aleph308_2:1.3
	aleph308_1:1.3
	aleph308:1.3
	aleph307_6:1.3
	aleph307_5:1.3
	aleph307_4:1.3
	aleph307_2:1.3
	aleph307_1:1.3
	aleph307:1.3
	aleph306:1.3
	aleph305_4:1.3
	aleph305_3:1.3
	aleph305_2:1.3
	aleph305_1:1.3
	aleph305:1.3
	aleph304_5:1.3
	aleph304_4:1.3
	aleph304_3:1.3
	aleph304_2:1.3
	aleph304_1:1.3
	aleph304:1.3
	aleph303_3:1.3
	aleph303_2:1.3
	aleph303_1_mc1:1.3
	aleph303_1:1.3
	aleph303:1.3
	aleph302_9:1.2
	aleph302_8:1.2
	aleph302_7:1.2
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.2
	aleph302_2:1.2
	aleph302_1:1.2
	aleph302:1.3;
locks; strict;
comment	@c @;


1.4
date	99.10.26.09.32.28;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	97.05.05.09.50.05;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	97.03.07.08.09.17;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.16.00.33;	author flr;	state Exp;
branches;
next	;


desc
@@


1.4
log
@for Alephlib 313
@
text
@      SUBROUTINE UFLOSS(STATE, JACO, MASS, DE)
C! Integrate continuous energy loss in a thick layer and apply to state
C
C  Modified: D. Casper  990502  To add sanity check on energy loss
C  Modified: D.Smith    991025  Double precision fixes for Linux
C!
C

#ifndef DOC
      DOUBLE PRECISION STATE(5), JACO(5,5), MASS, DE

      DOUBLE PRECISION P_OLD, E_OLD, E_NEW, P_NEW, OMEGA_NEW
      DOUBLE PRECISION D_OMEGA
#include "uftcom.h"

      IF (DE .EQ. 0.D0) RETURN

C  Calculate change in curvature resulting from this change in energy.

      P_OLD = DABS(1.D0/(DBLE(ROVERP) * STATE(5) * DCOS(STATE(4))))
      E_OLD = DSQRT(P_OLD**2 + MASS**2)
      IF (ABS(DE) .GT. 0.05D0 * E_OLD) DE = 0.D0
      E_NEW = E_OLD + DE
      P_NEW = DSQRT(E_NEW**2 - MASS**2)
      OMEGA_NEW = 1.D0/(DCOS(STATE(4))*DBLE(ROVERP)*P_NEW)
C       D_OMEGA = OMEGA_NEW - DABS(STATE(5))
      D_OMEGA = DSIGN(OMEGA_NEW - DABS(STATE(5)),STATE(5))
      STATE(5) = DSIGN(OMEGA_NEW,STATE(5))

C  Now calculate the change in each of the other components of the state vector

      STATE(1) = STATE(1) + 0.5D0 * JACO(1,5) * D_OMEGA
      STATE(2) = STATE(2) + 0.5D0 * JACO(2,5) * D_OMEGA
      STATE(3) = STATE(3) + 0.5D0 * JACO(3,5) * D_OMEGA

      RETURN
      END
#endif
@


1.3
log
@Kalman filter protections
@
text
@d4 3
a6 2
C   D. Casper
C               Modified May 2, 1997 to add sanity check on energy loss
d22 1
a22 1
      IF (ABS(DE) .GT. 0.05 * E_OLD) DE = 0.D0
@


1.2
log
@4th test version of aleph302
@
text
@d3 5
d21 1
@


1.1
log
@3rd test version of aleph302
@
text
@d6 1
a6 1
      DOUBLE PRECISION P_OLD, E_OLD, E_NEW, P_NEW, OMEGA_NEW, SAVE(5)
a13 1
      CALL UMOVEX(STATE,SAVE)
@
