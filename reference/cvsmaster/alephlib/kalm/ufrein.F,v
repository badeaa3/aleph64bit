head	1.3;
access;
symbols
	aleph316_2:1.3
	aleph316_1:1.3
	aleph316:1.3
	aleph315_7:1.3
	aleph315_6:1.3
	aleph315_5:1.3
	aleph315_4:1.3
	aleph315_3:1.3
	aleph315_2:1.3
	aleph315_1:1.3
	aleph315:1.3
	aleph314_2:1.3
	aleph314_1:1.3
	aleph314:1.3
	aleph313_1:1.3
	aleph313:1.3
	aleph312_1:1.3
	aleph312:1.3
	aleph311_1:1.3
	aleph311:1.3
	aleph310_3:1.3
	aleph310_2:1.3
	aleph310_1:1.3
	aleph310:1.3
	aleph309_1:1.3
	aleph309:1.3
	aleph308_3:1.3
	aleph308_2:1.3
	aleph308_1:1.3
	aleph308:1.3
	aleph307_6:1.3
	aleph307_5:1.3
	aleph307_4:1.3
	aleph307_2:1.3
	aleph307_1:1.3
	aleph307:1.3
	aleph306:1.3
	aleph305_4:1.3
	aleph305_3:1.3
	aleph305_2:1.3
	aleph305_1:1.3
	aleph305:1.3
	aleph304_5:1.3
	aleph304_4:1.3
	aleph304_3:1.3
	aleph304_2:1.3
	aleph304_1:1.3
	aleph304:1.3
	aleph303_3:1.3
	aleph303_2:1.3
	aleph303_1_mc1:1.3
	aleph303_1:1.3
	aleph303:1.3
	aleph302_9:1.3
	aleph302_8:1.3
	aleph302_7:1.3
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.2
	aleph302_2:1.2
	aleph302_1:1.2
	aleph302:1.3;
locks; strict;
comment	@c @;


1.3
date	97.04.16.08.17.57;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	97.03.06.14.29.22;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.11.59.20;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@aleph302_7 : corr in kalm
@
text
@      SUBROUTINE UFREIN
C!  Read the UFG2 bank for the double Gaussian parameters and initialize
C!  If no UFG2 bank or card, do a single Gaussian, no energy loss or
C!  filtering
C!
C!  ENTRY UF2SCA(CF,CW,TW,IE)    sets scattering parameters to user-defined
C!                               values
C!  Parameters:  CF(R*4)         Fraction of scatters in the core Gaussian
C!               CW(R*4)         Width of the core Gaussian,
C!                               normalized to default = 1
C!               TW(R*4)         Width of the tail Gaussian
C!               IE(I*4)         If 0, No energy loss, if 1, energy loss by
C!                               particle,
C!
C!  ENTRY UFTFIL sets the filtering probability to a user defined value
C!  *and returns the old value*
C!  Input:       FP(R*4)         Probability cut to filter (remove) a
C!                               coordinate (MODIFIED BY CALL)
C   Returns:     FP(R*4)         Old probability cut
C!
#ifndef DOC
#include "uftcom.h"
      LOGICAL INIT/.TRUE./
C ---------------------------------------------------------------------
C
C Read UFG2 from Dbase, cards, or return default values - once only!
      IF (INIT) THEN
        CALL UFG2GT(CF,CW,TW,IE,FP)
        INIT = .FALSE.
      ENDIF

      GOTO 100

      ENTRY UF2SCA(CFU,CWU,TWU,IEU)

      IF (INIT) THEN
        CALL UFG2GT(CF,CW,TW,IE,FP)
        INIT = .FALSE.
      ENDIF
      CF = MIN(MAX(CFU,0.),1.)
      CW = MAX(CWU,0.01)
      TW = MAX(TWU,0.01)
      IE = MIN(MAX(IEU,0),1)

      GOTO 100

      ENTRY UFTFIL(FPU)

      IF (INIT) THEN
        CALL UFG2GT(CF,CW,TW,IE,FP)
        INIT = .FALSE.
      ENDIF
      FPTEMP = FP
      FP = MIN(MAX(0.,FPU),1.)
      FPU = FPTEMP

      GOTO 200

C! Set up internal (REAL*8) variables after full initialization or new
C! scattering parameters

 100  CONTINUE
      CORE_FRACT = DBLE(CF)
      TAIL_FRACT = 1.D0 - CORE_FRACT
      CORE_WIDTH = DBLE(CW)**2
      TAIL_WIDTH = DBLE(TW)**2
      DO_ELOSS = IE
C
C ---------------------------------------------------------------------

C!  Initialize coord filtering prob and chi^2 cuts
 200  CONTINUE
      FILTER_PROB = DBLE(FP)
      IF ( FILTER_PROB .LT. 0. ) FILTER_PROB = 0.
      IF ( FILTER_PROB .GT. 1. ) FILTER_PROB = 1.
      CH2_1D = 1.E30
      CH2_2D = 1.E30
      IF ( FILTER_PROB .GT. 0. )  THEN
        CH2_1D = CHISIN(1.-FILTER_PROB,1)
        CH2_2D = -2.*ALOG(FILTER_PROB)
      ENDIF

      RETURN
      END
#endif
@


1.2
log
@2nd test version of aleph302
@
text
@d2 8
a9 3
C!  Read the UFG2 bank for the double Gaussian parameters
C!  Parameters:  <corefract>     Fraction of scatters in the core Gaussian
C!               <corewid>       Width of the core Gaussian,
d11 2
a12 4
C!               <tailwid>       Width of the tail Gaussian
C!               <filtprob>      Probability cut to filter (remove) a
C!                               coordinate
C!               <do_eloss>      If 0, No energy loss, if 1, energy loss by
d14 7
a20 1
C!  If no UFG2 card, do a single Gaussian, no energy loss or filtering
a21 1
#include "ufg2jj.h"
d23 1
a23 3
#include "bcs.h"
      DATA NAUFG2/0/
#include "bmacro.h"
d26 4
a29 3
      IF (NAUFG2.EQ.0) THEN
         NAUFG2 = NAMIND('UFG2')
         FILTER_PROB = 0.
d31 8
a38 18
C
      ISTAT = MDARD (IW,JUNIDB(),'UFG2',0)
      IF(ISTAT .EQ. 0)THEN
        CALL ALTELL('UFUFG2 - UFG2 not found; using single Gaussian',
     &      1,'RETURN')
        CORE_FRACT = DBLE(1.0)
        TAIL_FRACT = DBLE(0.000)
        CORE_WIDTH = DBLE(1.**2)
        TAIL_WIDTH = DBLE(2.**2)
        DO_ELOSS = 0
      ELSE
        KUFG2 = IW(NAUFG2)
        CORE_FRACT = DBLE(RTABL(KUFG2,1,JUFGCF))
        CORE_WIDTH = DBLE(RTABL(KUFG2,1,JUFGCW)**2)
        TAIL_WIDTH = DBLE(RTABL(KUFG2,1,JUFGTW)**2)
        TAIL_FRACT = 1.D0 - CORE_FRACT
        FILTER_PROB = RTABL(KUFG2,1,JUFGFP)
        DO_ELOSS = ITABL(KUFG2,1,JUFGDE)
d40 12
a51 4
      IF(CORE_FRACT .GT. 0.999D0)THEN
        CORE_FRACT = 1.D0
        TAIL_FRACT = 0.D0
        TAIL_WIDTH = CORE_WIDTH
d53 15
a67 1
      IF(DO_ELOSS .LT.0  .OR. DO_ELOSS.GT.1) DO_ELOSS = 0
d72 2
a73 1
 100  CONTINUE
a83 13
C
C -------------------------------------------------------------------
C
      ENTRY UFTFIL(PR)
C! reset filer probability
      PR_NEW = PR
      PR = FILTER_PROB
      FILTER_PROB = PR_NEW
      KUFG2 = IW(NAUFG2)
      IF (KUFG2.GT.0) THEN
         RW(KUFG2+LMHLEN+JUFGFP) = FILTER_PROB
      ENDIF
      GOTO 100
a85 6






@


1.1
log
@1st test version aleph302
@
text
@d14 1
a14 1
#include "ufcom.h"
@
