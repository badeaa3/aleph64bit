head	1.3;
access;
symbols
	aleph316_2:1.3
	aleph316_1:1.3
	aleph316:1.3
	aleph315_7:1.3
	aleph315_6:1.3
	aleph315_5:1.3
	aleph315_4:1.3
	aleph315_3:1.3
	aleph315_2:1.3
	aleph315_1:1.3
	aleph315:1.3
	aleph314_2:1.3
	aleph314_1:1.3
	aleph314:1.3
	aleph313_1:1.3
	aleph313:1.3
	aleph312_1:1.2
	aleph312:1.2
	aleph311_1:1.2
	aleph311:1.2
	aleph310_3:1.2
	aleph310_2:1.2
	aleph310_1:1.2
	aleph310:1.2
	aleph309_1:1.2
	aleph309:1.2
	aleph308_3:1.2
	aleph308_2:1.2
	aleph308_1:1.2
	aleph308:1.2
	aleph307_6:1.2
	aleph307_5:1.2
	aleph307_4:1.2
	aleph307_2:1.2
	aleph307_1:1.2
	aleph307:1.2
	aleph306:1.2
	aleph305_4:1.2
	aleph305_3:1.2
	aleph305_2:1.2
	aleph305_1:1.2
	aleph305:1.2
	aleph304_5:1.2
	aleph304_4:1.2
	aleph304_3:1.2
	aleph304_2:1.2
	aleph304_1:1.2
	aleph304:1.2
	aleph303_3:1.2
	aleph303_2:1.2
	aleph303_1_mc1:1.2
	aleph303_1:1.2
	aleph303:1.2
	aleph302_9:1.2
	aleph302_8:1.2
	aleph302_7:1.2
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.1
	aleph302_2:1.1
	aleph302_1:1.1
	aleph302:1.2;
locks; strict;
comment	@c @;


1.3
date	99.10.26.09.32.32;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	97.04.02.08.56.04;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.11.59.26;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@for Alephlib 313
@
text
@      INTEGER FUNCTION UTPROC(R_OLD,R_NEW,STATE,T)
C!  Calculate change in process time from one radius to another
C!
C! Modified: D.Smith 991025 Double precision fixes for Linux
C!
#ifndef DOC
      DOUBLE PRECISION R_OLD,R_NEW,STATE(*),T,TOLD

      DOUBLE PRECISION RHO, DELTA_PHI, DELTA_R2
      DOUBLE PRECISION A,B,C,DISCR
      DOUBLE PRECISION COST, SINT

      DELTA_R2 = R_NEW**2 - R_OLD**2
      DELTA_PHI = STATE(3) - STATE(1)/R_OLD
      RHO = (1.D0/STATE(5) - R_OLD*DSIN(DELTA_PHI))
      A = DELTA_R2-2.D0*RHO/STATE(5)
      B = 2.D0*RHO/STATE(5)
      C = 2.D0*R_OLD*DCOS(DELTA_PHI)/STATE(5)

      DISCR = C**2 + B**2 - A**2
      IF (DISCR .LT. 0.D0)THEN
        UTPROC = 2
        RETURN
      ELSE
        DISCR = DSQRT(DISCR)
        IF (STATE(5).GT.0D0)THEN
            T = 2.D0*DATAN((C-DISCR)/(A-B))
        ELSE
            T = 2.D0*DATAN((C+DISCR)/(A-B))
        ENDIF
c        IF (STATE(5)*(R_OLD-R_NEW) .GT. 0.D0)THEN
c          COST = (-A*B + C * DISCR)!/(B**2 + C**2)
c          SINT = (-A*C - B * DISCR)!/(B**2 + C**2)
c          TOLD = -DATAN2(SINT,COST)
c          IF (TOLD*STATE(5)*(R_OLD-R_NEW).GT.0.D0)THEN
c            COST = (-A*B - C * DISCR)!/(B**2 + C**2)
c            SINT = (-A*C + B * DISCR)!/(B**2 + C**2)
c            TOLD = -DATAN2(SINT,COST)
C            TYPE *,'IF 1'
c          ENDIF
c        ELSE
c          COST = (-A*B - C * DISCR)!/(B**2 + C**2)
c          SINT = (-A*C + B * DISCR)!/(B**2 + C**2)
c          TOLD = -DATAN2(SINT,COST)
c          IF (TOLD*STATE(5)*(R_OLD-R_NEW).GT.0.D0)THEN
c            COST = (-A*B + C * DISCR)!/(B**2 + C**2)
c            SINT = (-A*C - B * DISCR)!/(B**2 + C**2)
c            TOLD = -DATAN2(SINT,COST)
C            TYPE *,'IF 2'
c          ENDIF
c        ENDIF
c        IF (ABS(T-TOLD).GT.1.D-06)THEN
c            TYPE *,SNGL(R_NEW-R_OLD),SNGL(STATE(5)),
c     &          SNGL(DTAN(STATE(4))),SNGL(TOLD), SNGL(T)
c        ENDIF
      ENDIF
      UTPROC = 0
      RETURN
      END
#endif
@


1.2
log
@alephlib 302 corr.file no 4
@
text
@d3 3
d26 1
a26 1
        IF (STATE(5).GT.0.)THEN
@


1.1
log
@1st test version aleph302
@
text
@d4 1
a4 1
      DOUBLE PRECISION R_OLD,R_NEW,STATE(1),T,TOLD
@
