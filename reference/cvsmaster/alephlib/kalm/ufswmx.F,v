head	1.3;
access;
symbols
	aleph316_2:1.3
	aleph316_1:1.3
	aleph316:1.3
	aleph315_7:1.3
	aleph315_6:1.3
	aleph315_5:1.3
	aleph315_4:1.3
	aleph315_3:1.3
	aleph315_2:1.3
	aleph315_1:1.3
	aleph315:1.3
	aleph314_2:1.3
	aleph314_1:1.3
	aleph314:1.3
	aleph313_1:1.3
	aleph313:1.3
	aleph312_1:1.3
	aleph312:1.3
	aleph311_1:1.3
	aleph311:1.3
	aleph310_3:1.3
	aleph310_2:1.3
	aleph310_1:1.3
	aleph310:1.3
	aleph309_1:1.3
	aleph309:1.3
	aleph308_3:1.3
	aleph308_2:1.3
	aleph308_1:1.3
	aleph308:1.3
	aleph307_6:1.3
	aleph307_5:1.3
	aleph307_4:1.3
	aleph307_2:1.3
	aleph307_1:1.3
	aleph307:1.3
	aleph306:1.3
	aleph305_4:1.3
	aleph305_3:1.3
	aleph305_2:1.3
	aleph305_1:1.3
	aleph305:1.3
	aleph304_5:1.3
	aleph304_4:1.3
	aleph304_3:1.3
	aleph304_2:1.3
	aleph304_1:1.3
	aleph304:1.3
	aleph303_3:1.3
	aleph303_2:1.3
	aleph303_1_mc1:1.3
	aleph303_1:1.3
	aleph303:1.3
	aleph302_9:1.3
	aleph302_8:1.3
	aleph302_7:1.3
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.1
	aleph302_2:1.1
	aleph302_1:1.1
	aleph302:1.3;
locks; strict;
comment	@c @;


1.3
date	97.04.16.08.17.59;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	97.04.02.08.55.59;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.11.59.22;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@aleph302_7 : corr in kalm
@
text
@      SUBROUTINE UFSWMX(RADIUS,STATE_OLD,T_PROC,STATE_NEW)
C! Swim state vector through time T and convert to global coords
#ifndef DOC
      DOUBLE PRECISION RADIUS, STATE_OLD(*), T_PROC, STATE_NEW(*)
      DOUBLE PRECISION PHI_NEW, D0_TRK, T_CHECK

#include "uftcom.h"

      PHI_NEW = STATE_OLD(3) + T_PROC
      CALL UBA2PI(PHI_NEW)
      D0_TRK = RADIUS*DSIN(PHI_NEW-STATE_OLD(1)/RADIUS) +
     +       2.D0/STATE_OLD(5)*(DSIN(0.5D0*T_PROC))**2

      IF ( ABS(D0_TRK) .GT. RADIUS ) THEN
        IF ( T_PROC .GT. 0.D0 ) THEN
          T_PROC = T_PROC - ONE_PI
        ELSE
          T_PROC = T_PROC + ONE_PI
        ENDIF
        PHI_NEW = STATE_OLD(3) + T_PROC
        CALL UBA2PI(PHI_NEW)
        D0_TRK  = RADIUS*DSIN(PHI_NEW-STATE_OLD(1)/RADIUS) +
     +          2.D0/STATE_OLD(5)*(DSIN(T_PROC/2.D0))**2
      ENDIF

      STATE_NEW(1) = STATE_OLD(5)
      STATE_NEW(2) = DTAN( STATE_OLD(4) )
      STATE_NEW(3) = PHI_NEW
      STATE_NEW(4) = D0_TRK
      STATE_NEW(5) = STATE_OLD(2) +
     +          T_PROC/STATE_OLD(5)*DTAN(STATE_OLD(4))
      RETURN
      END
#endif
@


1.2
log
@alephlib 302 corr.file no 4
@
text
@d16 1
a16 1
          T_PROC = T_PROC - PI
d18 1
a18 1
          T_PROC = T_PROC + PI
@


1.1
log
@1st test version aleph302
@
text
@d4 1
a4 1
      DOUBLE PRECISION RADIUS, STATE_OLD(1), T_PROC, STATE_NEW(1)
@
