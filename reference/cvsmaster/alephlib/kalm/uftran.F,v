head	1.2;
access;
symbols
	aleph316_2:1.2
	aleph316_1:1.2
	aleph316:1.2
	aleph315_7:1.2
	aleph315_6:1.2
	aleph315_5:1.2
	aleph315_4:1.2
	aleph315_3:1.2
	aleph315_2:1.2
	aleph315_1:1.2
	aleph315:1.2
	aleph314_2:1.2
	aleph314_1:1.2
	aleph314:1.2
	aleph313_1:1.2
	aleph313:1.2
	aleph312_1:1.2
	aleph312:1.2
	aleph311_1:1.2
	aleph311:1.2
	aleph310_3:1.2
	aleph310_2:1.2
	aleph310_1:1.2
	aleph310:1.2
	aleph309_1:1.2
	aleph309:1.2
	aleph308_3:1.2
	aleph308_2:1.2
	aleph308_1:1.2
	aleph308:1.2
	aleph307_6:1.2
	aleph307_5:1.2
	aleph307_4:1.2
	aleph307_2:1.2
	aleph307_1:1.2
	aleph307:1.2
	aleph306:1.2
	aleph305_4:1.2
	aleph305_3:1.2
	aleph305_2:1.2
	aleph305_1:1.2
	aleph305:1.2
	aleph304_5:1.2
	aleph304_4:1.2
	aleph304_3:1.2
	aleph304_2:1.2
	aleph304_1:1.2
	aleph304:1.2
	aleph303_3:1.2
	aleph303_2:1.2
	aleph303_1_mc1:1.2
	aleph303_1:1.2
	aleph303:1.2
	aleph302_9:1.2
	aleph302_8:1.2
	aleph302_7:1.2
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.2
	aleph302_3:1.1
	aleph302_2:1.1
	aleph302_1:1.1
	aleph302:1.2;
locks; strict;
comment	@c @;


1.2
date	97.04.02.08.56.02;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.11.59.23;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@alephlib 302 corr.file no 4
@
text
@      INTEGER FUNCTION UFTRAN(R_OLD, R_NEW, STATE_OLD, T, STATE_NEW)
C! Transport a state vector to a new radius
C! Returns process time and new state vector
#ifndef DOC
      DOUBLE PRECISION R_OLD, R_NEW, PHI_NEW, STATE_OLD(*),
     &  STATE_NEW(*), T

      DOUBLE PRECISION EPS
      PARAMETER (EPS = 1.0D-15)
      DOUBLE PRECISION DELTA_PHI, DELTA_R, DELTA_R2, NUMER, DENOM,
     &  PHI_TRY

#include "uftcom.h"

      INTEGER UTPROC

C  Get the advance in process time from old radius to new

      UFTRAN = UTPROC(R_OLD, R_NEW, STATE_OLD, T)
      IF(UFTRAN.NE.0)RETURN

C  Do transport of state vector

      NUMER = ( R_OLD*DSIN(STATE_OLD(1)/R_OLD) +
     +          (DCOS(STATE_OLD(3))-DCOS(STATE_OLD(3) + T))
     +          /STATE_OLD(5)) /
     +          R_NEW
      DENOM = ( R_OLD*DCOS(STATE_OLD(1)/R_OLD) -
     +           (DSIN(STATE_OLD(3))-DSIN(STATE_OLD(3) + T))
     +           /STATE_OLD(5)) /
     +           R_NEW

      IF ( DABS(NUMER) .GT. DABS(DENOM) ) THEN
        PHI_TRY = 2.D0*DATAN2(1.D0-DENOM,NUMER)
      ELSE
        PHI_TRY = 2.D0*DATAN2(1.D0+NUMER,DENOM) - HALF_PI
      ENDIF
      CALL UBA2PI(PHI_TRY)

      STATE_NEW(1) = PHI_TRY * R_NEW
      STATE_NEW(2) = STATE_OLD(2) +
     +          T*DTAN(STATE_OLD(4))/STATE_OLD(5)
      STATE_NEW(3) = STATE_OLD(3) + T
      CALL UBA2PI(STATE_NEW(3))
      STATE_NEW(4) = STATE_OLD(4)
      STATE_NEW(5) = STATE_OLD(5)

      UFTRAN = 0
      RETURN
      END
#endif
@


1.1
log
@1st test version aleph302
@
text
@d5 2
a6 2
      DOUBLE PRECISION R_OLD, R_NEW, PHI_NEW, STATE_OLD(1),
     &  STATE_NEW(1), T
@
