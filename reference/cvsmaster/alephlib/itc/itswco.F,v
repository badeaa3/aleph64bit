head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.42.23;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.42.24;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE ITSWCO(IL,IWIRE,IZDIG,RSW,PHSW,ZSW,SIGZ)
C-----------------------------------------------------------------------
C! Get sense wire coord (+sag).
C!
CKEY IPREDATA ITC /INTERNAL
C!    Author     :- J. Sedgbeer
C!    Modified   :- J. Sedgbeer   90/01/04 Check use of Z and tidy
C!                                                    Z resolution.
C!    Modified   :- J. Sedgbeer   92/02/07 Use Z non-linearity from
C!                                              /IZNLCC/
C!
C!    Input:
C!      IL     /I  : layer number
C!      IWIRE  /I  : wire number                      [1,960]
C!      IZDIG  /I  : Z TDC value
C!      need commons /IZFECC/  Z front-end parameters
C!                   /IZNLCC/  Z non-linearity params.
C!                   /ITWICC/  ITC sense wire geom.
C!                   /ISWPHI/  ITC sense wire coords.
C!                   /IZRSCC/  for sigma z
C!                   ALCONS
C!
C!    Output:
C!      RSW    /R  : Radius of sense wire (cm.)
C!      PHSW   /R  : Phi of sense wire    (radians.)
C!      ZSW    /R  : Z position           (cm.)
C!      SIGZ   /R  : Sigma Z
C!                   > 0   if all O.K.
C!                  set to large value if IZDIG out of range (ZSW = 0.0)
C!
C!    calls     : none
C!
C!    Libraries required : none
C!
C? Get hit wire coord from wire number
C? calculate z coord from Z scalar value
C? calculate wire sag at this Z
C? Correct wire coord. due to sag.
C-----------------------------------------------------------------------
#ifndef DOC
      SAVE
C I/O commons etc.
#include "alcons.h"
#include "itwicc.h"
#include "izfecc.h"
#include "iznlcc.h"
#include "iswphi.h"
#include "izrscc.h"
C-----------------------------------------------------------------------
C Get sense wire coord. unsagged in ITC frame.
C Set default Z (zero) and error (about 10 times length of chamber).
C
      RSW   = RWIRIT(IL)
      PHSW  = PHSWIS(IWIRE)
      SIGZ  = 2000.
      ZSW   = 0.0
C
C Check Z TDC data O.K.  and check IZDIG value
C
      IF(.NOT.FZCOIZ) GOTO 900
      IF(IZDIG.LE.ITLOIZ(IL)) GOTO 900
C
C Calculate Z coord. and Z error. Z error set to value for track
C finding and fitting (true z resol. only used in special applications).
C If S-bend correction flag, IBNDIZ, is zero then do s-bend correction.
C
      SIGZ0 = ZRTRIZ(IL)
      EFACT = (RSW/RWIRIT(JWIRIT))/EXP8IZ
      TDIFF = (FLOAT(IBN0IZ-IZDIG))*BWIDIZ*EFACT
      Z0    = 0.5*CLGHT*TDIFF
      AA    = TWOPI/CZNLIZ(3)
      IF(IBNDIZ.EQ.0) THEN
        Z0 = Z0 + OFSLIZ(IL)
        ZSW = CZNLIZ(1)*Z0 + CZNLIZ(2)*SIN(AA*Z0)
      ELSE
        ZSW = Z0
      ENDIF
      SIGZ  = SIGZ0
CCC      SIGZ  = SIGZ0*(1. + AA*CZNLIZ(2)*COS(AA*Z0))
C
C Check ZSW in range.  If outside range increase error.
C
      IF(ABS(ZSW).GT.WZMXIT) THEN
         ZSW = WZMXIT*(ABS(ZSW)/ZSW)
         SIGZ  = SIGZ + (ABS(ZSW)-WZMXIT)*3.0
      ENDIF
C
C Calculate the sag at ZSW (assume a parabola)
C
  900 CONTINUE
      SAG = SGMXIT*(1.0 - (ZSW/WZMXIT)**2)
C
C Calculate change in RSW and PHSW due to sag
C
      DELR = SAG*SIN(PHSW)
      RSW  = RSW - DELR
      DPHI = SAG*COS(PHSW)/RSW
      PHSW   = PHSW - DPHI
C
C Angles to be in range 0 - 2pi
C
      IF(PHSW.LT.0.0)   PHSW = PHSW + TWOPI
      IF(PHSW.GE.TWOPI) PHSW = PHSW - TWOPI
C
  999 CONTINUE
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
