head	1.1;
branch	1.1.1;
access;
symbols
	aleph316_2:1.1.1.1
	aleph316_1:1.1.1.1
	aleph316:1.1.1.1
	aleph315_7:1.1.1.1
	aleph315_6:1.1.1.1
	aleph315_5:1.1.1.1
	aleph315_4:1.1.1.1
	aleph315_3:1.1.1.1
	aleph315_2:1.1.1.1
	aleph315_1:1.1.1.1
	aleph315:1.1.1.1
	aleph314_2:1.1.1.1
	aleph314_1:1.1.1.1
	aleph314:1.1.1.1
	aleph313_1:1.1.1.1
	aleph313:1.1.1.1
	aleph312_1:1.1.1.1
	aleph312:1.1.1.1
	aleph311_1:1.1.1.1
	aleph311:1.1.1.1
	aleph310_3:1.1.1.1
	aleph310_2:1.1.1.1
	aleph310_1:1.1.1.1
	aleph310:1.1.1.1
	aleph309_1:1.1.1.1
	aleph309:1.1.1.1
	aleph308_3:1.1.1.1
	aleph308_2:1.1.1.1
	aleph308_1:1.1.1.1
	aleph308:1.1.1.1
	aleph307_6:1.1.1.1
	aleph307_5:1.1.1.1
	aleph307_4:1.1.1.1
	aleph307_2:1.1.1.1
	aleph307_1:1.1.1.1
	aleph307:1.1.1.1
	aleph306:1.1.1.1
	aleph305_4:1.1.1.1
	aleph305_3:1.1.1.1
	aleph305_2:1.1.1.1
	aleph305_1:1.1.1.1
	aleph305:1.1.1.1
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.02.07.11.42.23;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.42.24;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE IUDOCA (X1,T1,X2,T2,DCA,DX1,DX2)
C----------------------------------------------------------------------
CKEY ITC
C! Calculates dist. of closest approach for two straight lines.
C
C UDOCA
C  If the lines are parallel, the doca is calcuated, but DX1 and DX2
C  are returned zero.
C
C ARGUMENTS:
C ----------
C   X1(3)               Point on first line
C   X2(3)               point on second line
C   T1(3)             Direction cosines for first line
C   T2(3)             direction cosines for second line
C   DCA                 distance of closest approach
C   DX1                 distance along line 1 from X1 to DOCA vector
C   DX2                 distance along line 2 from X2 to DACA vector
C
C
C Written by WBA 2-79, mocified by CCY 2-83 to take care of nearly
C parallel lines.
C
C----------------------------------------------------------------------
#ifndef DOC
      SAVE
      REAL X1(*), T1(*), X2(*), T2(*), DCA, DX1, DX2
C INTERNAL VARIABLES
C    UNIT VECTOR ALONG DOCA VECTOR
C     VECTOR: X1-X2
C     NORMALIZED U CROSS T1
      REAL  V(3),  U(3),  W(3),  VNORM, VSQ, TT, XNORM, UT1, UT2
      INTEGER I, IER
C
C**********************************************************************
      TT=0.
      DCA=0.
      DX1=0.
      DX2=0.
      UT1 = 0.0
      UT2 = 0.0
      DO 21 I=1,3
         TT=TT+T1(I)*T2(I)
         U(I)=X1(I)-X2(I)
   21 CONTINUE
C
C Lines are parallel
      CALL IUVCRS(T1, T2, V, IER)
      IF (IER.EQ.2) THEN
         CALL IUVCRS(U,T1,W,IER)
         CALL IUVCRS(W,T1,V,IER)
      ENDIF
      VSQ=V(1)**2+V(2)**2+V(3)**2
      IF (VSQ .EQ. 0.0) THEN
         VNORM = 0.0
C   Doca is always zero if V is zero
      ELSE
         VNORM=1./SQRT(VSQ)
      END IF
      DO 31 I = 1,3
         V(I)=V(I)*VNORM
         DCA=DCA+U(I)*V(I)
         UT1=UT1+U(I)*T1(I)
         UT2=UT2+U(I)*T2(I)
   31 CONTINUE
C
      IF ((ABS(TT).LT.1.)) THEN
         XNORM=1./((1.-TT)*(1.+TT))
C More accurate form of (1-tt**2)
      ELSE
         XNORM = 0.0
      ENDIF
      DX1 = (TT*UT2 - UT1)*XNORM
C Symmetry of solution is obvious
      DX2 = -(TT*UT1 - UT2)*XNORM
C
      END
#endif
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
