head	1.3;
access;
symbols
	aleph316_2:1.3
	aleph316_1:1.3
	aleph316:1.3
	aleph315_7:1.3
	aleph315_6:1.3
	aleph315_5:1.3
	aleph315_4:1.3
	aleph315_3:1.3
	aleph315_2:1.3
	aleph315_1:1.3
	aleph315:1.3
	aleph314_2:1.3
	aleph314_1:1.3
	aleph314:1.3
	aleph313_1:1.3
	aleph313:1.3
	aleph312_1:1.3
	aleph312:1.3
	aleph311_1:1.3
	aleph311:1.3
	aleph310_3:1.3
	aleph310_2:1.3
	aleph310_1:1.3
	aleph310:1.3
	aleph309_1:1.3
	aleph309:1.3
	aleph308_3:1.3
	aleph308_2:1.3
	aleph308_1:1.3
	aleph308:1.3
	aleph307_6:1.3
	aleph307_5:1.3
	aleph307_4:1.3
	aleph307_2:1.3
	aleph307_1:1.3
	aleph307:1.3
	aleph306:1.3
	aleph305_4:1.3
	aleph305_3:1.3
	aleph305_2:1.3
	aleph305_1:1.3
	aleph305:1.3
	aleph304_5:1.1.1.1
	aleph304_4:1.1.1.1
	aleph304_3:1.1.1.1
	aleph304_2:1.1.1.1
	aleph304_1:1.1.1.1
	aleph304:1.1.1.1
	aleph303_3:1.1.1.1
	aleph303_2:1.1.1.1
	aleph303_1_mc1:1.1.1.1
	aleph303_1:1.1.1.1
	aleph303:1.1.1.1
	aleph302_9:1.1.1.1
	aleph302_8:1.1.1.1
	aleph302_7:1.1.1.1
	aleph302_6:1.1.1.1
	aleph302_5:1.1.1.1
	aleph302_4:1.1.1.1
	aleph302_3:1.1.1.1
	aleph302_2:1.1.1.1
	aleph302_1:1.1.1.1
	aleph302:1.1.1.1
	aleph216:1.1.1.1
	aleph215_3:1.1.1.1
	aleph215_2:1.1.1.1
	aleph215:1.1.1.1
	aleph214:1.1.1.1
	aleph213:1.1.1.1
	aleph212:1.1.1.1
	ALEPH212:1.1.1;
locks; strict;
comment	@c @;


1.3
date	97.08.20.14.58.23;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	97.08.20.14.42.17;	author cattanem;	state Exp;
branches;
next	1.1;

1.1
date	96.02.07.11.42.27;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.02.07.11.42.28;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@flr modif to kbpart
@
text
@      INTEGER FUNCTION KBPART (IGEA,NAME,ITRTP,ZMAS,ZCHA,TLIF)
C -----------------------------------------------------------
C - J.Boucrot - B.Bloch - F.Ranjard - 870424
C
C! Complete the PART bank with new particles
CKEY KINE KINGAL FILL BANK /   INTERNAL
C  first Get the necessary name-indices and the NOtracking marker word
C        from the KRUN bank
C  then  IF it is a new particle  THEN
C           fill a new row of the PART bank
C        ELSE IF it is a particle already known by GEANT THEN
C           modify the content of the corresponding row
C        END IF
C  then  Return the particle row #
C
C - structure : INTEGER FUNCTION subprogram
C               User Entry Name: KBPART
C               External References: AUBOS/LOCTAB(ALEPHLIB), NAMIND(BOS77
C               Comdeck References: BCS, KIPARA, BMACRO
C
C - usage : IPART  = KBPART (IGEA,NAME,ITRTP,ZMAS,ZCHA,TLIF)
C - input : IGEA   = Geant#
C           NAME   = particle name (at most 12 char.)
C           ITRTP  = Geant tracking type
C           ZMAS   = particle mass
C           ZCHA   = particle charge
C           TLIF   = particle time life (if TLIF>1000. then TLIF=1.E+15)
C - output: KBPART = Aleph particle#
C                    0 means no PART bank
C                    - N means : PART is full with N particles
#ifndef DOC
      SAVE
#include "bcs.h"
#include "kipara.h"
      EXTERNAL NAMIND
      CHARACTER*(*) NAME
      PARAMETER (TLMAX=1000., TSTAB=1.E+15)
      DATA NAPAR /0/
#include "bmacro.h"
      NUPART(JBOS,NGEAN) = LOCTAB (IW(JBOS+LMHLEN+1),LCOLS(JBOS),
     &                             LROWS(JBOS),1,NGEAN)
C ---------------------------------------------------------
      KBPART = 0
C
C - The 1st time get NOtracking marker word
C
      IF (NAPAR .EQ.0 ) THEN
         NAPAR = NAMIND ('PART')
         JKRUN = IW(NAMIND ('KRUN'))
         IF (JKRUN.NE.0) THEN
            NOTRK = ITABL(JKRUN,1,2)
         ELSE
            NOTRK = 0
         ENDIF
      ENDIF
C
C - Get PART bank, return if does not exist
      JPART = IW(NAPAR)
      IF (JPART.EQ.0) GOTO 999
      LPART = IW(JPART+LMHCOL)
C
C - Normal entry
C   is it a particle already known: check if the Geant#
C   is .NE. NOTRK and already there
C
      NPART = 0
      IF (IGEA .NE. NOTRK) NPART = NUPART(JPART,IGEA)
      IF (NPART.GT.0) THEN
C     the particle is already there, update the content
         KPART = KROW (JPART,NPART)
      ELSE
C     Add the new particle at the end of the PART bank
         IF (LFRROW(JPART).LT.1) THEN
            CALL AUBOS ('PART',0,IW(JPART)+LPART*LRPART,JPART,IGARB)
            IF (JPART.EQ.0) THEN
               KBPART = -NPART
               GOTO 999
            ENDIF
         ENDIF
         NPART = LROWS(JPART)+1
         KPART = KNEXT(JPART)
         IW(JPART+LMHROW) = NPART
      ENDIF
C
C - Fill the row# NPART at the index KPART
      IW(KPART+1) = IGEA
      DO 101 L=1,3
         LL = 4*(L-1)+1
         IW(KPART+1+L) = INTCHA (NAME(LL:LL+3))
 101  CONTINUE
      IW(KPART+5) = ITRTP
      RW(KPART+6) = ZMAS
      RW(KPART+7) = ZCHA
      IF (TLIF .GT. TLMAX) TLIF = TSTAB
      RW(KPART+8) = TLIF
C
      KBPART = NPART
C
 999  CONTINUE
      END
#endif
@


1.2
log
@flr modif to kbpart
@
text
@a97 2
      write (6,*) ' KBPART igea npart kpart jpart= ',
     &                     igea,npart,kpart,jpart
@


1.1
log
@Initial revision
@
text
@d40 2
a41 2
      NUPART(JBOS,NGEAN) = LOCTAB (IW(JPART+LMHLEN+1),LCOLS(JPART),
     &                             LROWS(JPART),1,NGEAN)
a60 1
      NPART = IW(JPART+LMHROW)
d66 3
a68 3
      NUP = 0
      IF (IGEA .NE. NOTRK) NUP = NUPART(JPART,IGEA)
      IF (NUP.GT.0) THEN
d70 1
a70 1
         KPART = KROW (JPART,NUP)
d80 1
a80 1
         NPART = NPART + 1
d82 1
a96 2
      IW(JPART+LMHROW) = NPART
C
d98 2
@


1.1.1.1
log
@import aleph212 from alws
@
text
@@
