head	1.6;
access;
symbols
	aleph316_2:1.6
	aleph316_1:1.6
	aleph316:1.6
	aleph315_7:1.6
	aleph315_6:1.6
	aleph315_5:1.6
	aleph315_4:1.6
	aleph315_3:1.6
	aleph315_2:1.6
	aleph315_1:1.6
	aleph315:1.6
	aleph314_2:1.6
	aleph314_1:1.6
	aleph314:1.6
	aleph313_1:1.6
	aleph313:1.6
	aleph312_1:1.6
	aleph312:1.6
	aleph311_1:1.6
	aleph311:1.6
	aleph310_3:1.6
	aleph310_2:1.6
	aleph310_1:1.6
	aleph310:1.6
	aleph309_1:1.6
	aleph309:1.6
	aleph308_3:1.6
	aleph308_2:1.6
	aleph308_1:1.6
	aleph308:1.6
	aleph307_6:1.6
	aleph307_5:1.6
	aleph307_4:1.6
	aleph307_2:1.6
	aleph307_1:1.6
	aleph307:1.6
	aleph306:1.6
	aleph305_4:1.4
	aleph305_3:1.4
	aleph305_2:1.4
	aleph305_1:1.4
	aleph305:1.4
	aleph304_5:1.3
	aleph304_4:1.3
	aleph304_3:1.3
	aleph304_2:1.3
	aleph304_1:1.3
	aleph304:1.3
	aleph303_3:1.3
	aleph303_2:1.3
	aleph303_1_mc1:1.3
	aleph303_1:1.3
	aleph303:1.3
	aleph302_9:1.3
	aleph302_8:1.3
	aleph302_7:1.2
	aleph302_6:1.2
	aleph302_5:1.2
	aleph302_4:1.1
	aleph302_3:1.1
	aleph302_2:1.1
	aleph302_1:1.1
	aleph302:1.3;
locks; strict;
comment	@c @;


1.6
date	97.11.06.07.25.33;	author cattanem;	state Exp;
branches;
next	1.5;

1.5
date	97.11.05.17.09.30;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.08.20.07.13.14;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	97.04.17.07.28.28;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	97.04.04.12.13.16;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	97.03.06.11.59.48;	author flr;	state Exp;
branches;
next	;


desc
@@


1.6
log
@NAMIND declared twice in ysvrtx
@
text
@      SUBROUTINE YSVRTX(IER)
C-----------------------------------------
C!  Steering for secondary vertex search
C   Builds vertices, applies cuts on material regions,
C   creates an association list vertex->track, and
C   fills banks YNVH and YNLI with results.
C
C   Temporary fix: YSIN card disables the flagging of
C                  incoming tracks, to avoid crashing Dali.
C
C   IER = 0 if successful
C
C   Author   :- D. Casper 30-jun-1996
C   Modified :- D. Casper 30-sep-1997
C               Remove cut on max number of FRFT tracks
C
C   Input banks:  FRFT  Track fits
C                 YSCT  Vertex fitting parameters from Dbase
C                 PYER  Primary vertex (needed by routines called)
C
C   Output banks: YNLI  List of vertices found
C                 YNVH  Tracks identified with a vertex
C                 YSMO  Momentum and other information about secondaries
C
C=========================================
#ifndef DOC
C +
C Declarations.
C -

#include "frftjj.h"
#include "frtljj.h"
#include "ynvhjj.h"
#include "ynlijj.h"
#include "ysctjj.h"
#include "ysvxjj.h"
#include "ysvtjj.h"
#include "ysmojj.h"
#include "ysvcut.h"
#include "bcs.h"
#include "bosext.h"
      INTEGER  ALGTDB
      EXTERNAL ALGTDB
      SAVE NFRFT, NPYER, NYSCT, NYSVX, NYSVT, NYNVH, NFRTL, NYSIN
      DATA LRUN/0/, NYSCT/0/
      
#include "bmacro.h"


C + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +
C Entry Point.
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      IF (NYSCT.EQ.0) THEN
        NFRFT = NAMIND('FRFT')
        NPYER = NAMIND('PYER')
        NYSCT = NAMIND('YSCT')
        NYSVX = NAMIND('YSVX')
        NYSVT = NAMIND('YSVT')
        NYNVH = NAMIND('YNVH')
        NFRTL = NAMIND('FRTL')
        NYSIN = NAMIND('YSIN')
        NYNLI = NAMIND('YNLI')
      ENDIF

C Drop output banks if they exist

      CALL BDROP(IW,'YNVHYNLIYSMO')

C Check input banks

      KFRFT = IW(NFRFT)
      KFRTL = IW(NFRTL)
      KPYER = IW(NPYER)
      IF (KFRFT.EQ.0 .OR. KFRTL.EQ.0 .OR. KPYER.EQ.0) THEN
        IER = 1
        GO TO 999
      ENDIF

C+ check constants

      CALL ABRUEV(KRUN,KEVT)
      IF (KRUN.NE.LRUN) THEN
        ISTAT = ALGTDB(JUNIDB(0),'YSCT',KRUN)
        IF (ISTAT .EQ. 0) THEN
            IER = 2
            GOTO 999
        ENDIF
        LRUN = KRUN
      ENDIF
      KYSCT = IW(NYSCT)
      IF (IW(KFRFT-2).EQ.2) THEN
          IYSCT = KROW(KYSCT,1)
      ELSE
          IYSCT = KROW(KYSCT,2)
      ENDIF
      YSCTPV = 10.**(RW(IYSCT+JYSCPV))
      YSCTSM = RW(IYSCT+JYSCSM)
      YSCTC2 = 10.**(RW(IYSCT+JYSCC2))
      YSCTRL = RW(IYSCT+JYSCRL)**2
      YSCTRH = RW(IYSCT+JYSCRH)**2
      YSCTDR = RW(IYSCT+JYSCDR)
      YSCTCF = 10.**(RW(IYSCT+JYSCCF))
      YSCTRM = RW(IYSCT+JYSCRM)
      YSCTCR = RW(IYSCT+JYSCS1)

C Check there are any charged tracks

      IF (LROWS(KFRFT).EQ.0) THEN
        IER = 4
        GO TO 999
      ENDIF

C Identify the vertices in this event

      CALL YSVBLD(IER)
      IF (IER.NE.0) GOTO 999

C Veto vertices which are not in material, if appropriate

      IF (IW(KFRFT-2).EQ.0) CALL YSVMAT

C Make the vertex->track association bank

      CALL YSVTBK(NVX,NTK)

C  Create the terse output banks

      CALL AUBOS('YNVH',0,LMHLEN + NTK*LYNVHA,KYNVH,IGARB)
      IF (IGARB.EQ.2) THEN
        IER = 5
        GO TO 999
      ENDIF
      CALL BLIST(IW,'E+','YNVH')
      IW(KYNVH + LMHCOL) = LYNVHA
      IW(KYNVH + LMHROW) = 0

      CALL AUBOS('YNLI',0,LMHLEN+NVX*LYNLIA,KYNLI,IGARB)
      IF (IGARB.EQ.1) THEN
        KYNVH = IW(NYNVH)
      ELSE IF (IGARB.EQ.2) THEN
        IER = 6
        GO TO 999
      ENDIF
      CALL BLIST(IW,'E+','YNLI')
      IW(KYNLI + LMHCOL) = LYNLIA
      IW(KYNLI + LMHROW) = 0
C
C+  Fill the output banks
C
      KYSVX = IW(NYSVX)
      DO WHILE (KYSVX .NE. 0 .AND. IW(KYSVX-2).LE.-2)
        DO I = 1, LROWS(KYSVX)
            IYNLI = KNEXT(KYNLI)
            CALL UCOPY(RW(KROW(KYSVX,I)+JYSVVX),RW(IYNLI+JYNLXP),3)
            RW(IYNLI+JYNLCH) = RTABL(KYSVX,I,JYSVC2)
            IW(KYNLI+LMHROW) = IW(KYNLI+LMHROW) + 1
        ENDDO
        KYSVX = IW(KYSVX-1)
      ENDDO
      KYSVT = IW(NYSVT)
      IVTX = 1
      CALL BLIST(IW,'E+','YSMO')
      DO WHILE (KYSVT .NE. 0 .AND. IW(KYSVT-2).LE.-2)
        NR = IABS(IW(KYSVT-2))
C+ Book the required number of new YSMO banks
        NBOOK = LROWS(KYSVT)/NR
        DO IBOOK = IVTX, IVTX+NBOOK-1
            CALL AUBOS('YSMO',IBOOK,LMHLEN+LYSMOA*NR,KYSMO,IGARB)
            IF (IGARB.EQ.2) THEN
                IER = 7
                RETURN
            ELSE IF (IGARB.EQ.1) THEN
                KYSVT = NLINK('YSVT',-ABS(NR))
                KYNVH = IW(NYNVH)
                KYNLI = IW(NYNLI)
            ENDIF
            IW(KYSMO+LMHCOL) = LYSMOA
            IW(KYSMO+LMHROW) = 0
        ENDDO
        KYSMO = NLINK('YSMO',IVTX)
        DO I = 1, LROWS(KYSVT)
C+ Fill YNVH
          IYNVH = KNEXT(KYNVH)
          ITRK = ITABL(KYSVT,I,JYSVTN)
C+ See if this track as identified as incoming or outgoing
          IW(IYNVH+JYNVVN) = IVTX
          IF(ITABL(KYSVT,I,JYSVIO).LT.0) IW(IYNVH+JYNVVN) = -IVTX
          IW(IYNVH+JYNVTN) = ITRK
          IW(KYNVH+LMHROW) = IW(KYNVH+LMHROW) + 1
C+ Fill YSMO
          IYSMO = KNEXT(KYSMO)
          CALL UCOPY(IW(KROW(KYSVT,I)+JYSVTN),IW(IYSMO+JYSMTN),LYSMOA)
          IW(KYSMO+LMHROW) = IW(KYSMO+LMHROW)+1
          IF (MOD(I,NR).EQ.0) THEN
            IVTX = IVTX + 1
            KYSMO = NLINK('YSMO',IVTX)
          ENDIF
        ENDDO
        KYSVT = IW(KYSVT-1)
      ENDDO
      IF (NVX .NE. LROWS(KYNLI) .OR. NTK.NE.LROWS(KYNVH)) THEN
        IER = 8
        GOTO 999
      ENDIF
      IER = 0
 999  CONTINUE

      CALL AUBPRS('YNVHYNLIYSMO')

      RETURN
      END
#endif
@


1.5
log
@Alephlib 306
@
text
@d42 2
a43 2
      INTEGER  ALGTDB, NAMIND
      EXTERNAL ALGTDB, NAMIND
@


1.4
log
@Alephlib 305
@
text
@d9 1
a9 2
C                  incoming tracks, to avoid crashing
C                  Dali.
d14 2
d42 2
a43 4
C Maximum number of FRFT tracks
      PARAMETER(MAXTRACKS=150)
C
      INTEGER ALGTDB
d84 1
a84 1
        ISTAT = ALGTDB(JUNIDB(),'YSCT',KRUN)
a105 7

C Check there aren't too many charged tracks to deal with.

      IF (LROWS(KFRFT).GT.MAXTRACKS) THEN
        IER = 3
        GO TO 999
      ENDIF
@


1.3
log
@aleph302_8 corr. in uftkal and trddaf
@
text
@d22 1
d37 1
d64 1
d69 1
a69 1
      CALL BDROP(IW,'YNVHYNLI')
d171 1
d174 16
d191 1
d196 1
a196 4
          IF (ITRK.GT.10000) THEN
            ITRK = ITRK - 10000
            IF (IW(NYSIN).EQ.0) IW(IYNVH+JYNVVN) = -IVTX
          ENDIF
d199 8
a206 1
          IF (MOD(I,NR).EQ.0) IVTX = IVTX + 1
d211 1
a211 1
        IER = 7
d217 1
a217 1
      CALL AUBPRS('YNVHYNLI')
@


1.2
log
@aleph302_5 update ysvrtx
@
text
@d43 1
d45 1
a45 2
      SAVE INIT, LRUN, NYSCT

a47 1
      DATA INIT/.TRUE./
d81 1
a81 1
      IF (LRUN.EQ.0 .OR. KRUN.NE.LRUN) THEN
@


1.1
log
@1st test version aleph302
@
text
@d4 10
d15 7
a21 7
C   Output   : IER    / I = error code
C                          -1 no vertex found in YSVX0L
C                           1 not enough space to book a bank
C                           2 too many tracks in FRFT
C                           3 missing YSCT d.b. bank
C                           4 missing input bank FRFT or FRTL or no track
C                           5 error in filling YNLI and YNVH
d25 170
@
