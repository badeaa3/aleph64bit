head	1.9;
access;
symbols
	alio83:1.9
	alio82:1.8
	alio81:1.8
	alio80:1.8
	alio74:1.8
	alio73:1.8
	alio72:1.8
	alio71:1.8
	alio70:1.7
	alio68:1.7
	alio69:1.7
	alio67:1.6
	alio66:1.5
	alio65:1.5
	alio64:1.5
	alio63:1.4
	alio62:1.4
	alio61:1.4
	alio60:1.4
	alephio53:1.3
	v4:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.9
date	2001.02.05.09.38.49;	author flr;	state Exp;
branches;
next	1.8;

1.8
date	97.11.02.13.35.36;	author flr;	state Exp;
branches;
next	1.7;

1.7
date	97.01.16.13.55.20;	author flr;	state Exp;
branches;
next	1.6;

1.6
date	96.10.21.07.38.20;	author flr;	state Exp;
branches;
next	1.5;

1.5
date	96.07.19.07.05.17;	author flr;	state Exp;
branches;
next	1.4;

1.4
date	96.05.03.14.40.36;	author flr;	state Exp;
branches;
next	1.3;

1.3
date	96.03.13.15.00.32;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	96.01.18.13.49.15;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.13.52.38;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.13.52.39;	author flr;	state Exp;
branches;
next	;


desc
@@


1.9
log
@v8r2 - introduce Z tape number for CASTOR
@
text
@      SUBROUTINE ASTAGE(LUNIT,CHDEF,IER)
C----------------------------------------------------------------------
CKEY ALREAD DROP STAGE / INTERNAL
C   Author: T. Wildish (IBM code)   June 1989
C   modified by F.Ranjard           May 1992 , February 1993
C   modified by U.Schafer           March 1994
C
C!  Purpose   : drop all staged data disks and submit tape
C!              writing for output datasets automatically
C!  Cray      : Also calls ADSPOS to dispose of any disk files
C   Inputs    : LUNIT    <0  -unit no. to be staged in
C                        =0  end of job  : stageput on CRAY
C                        >   unit no. to be staged out
C               CHDEF / A stageout parameters on UNIX
C
C   Outputs   : IER      0 if all OK, 1 if STAGE DROP failed
C
C----------------------------------------------------------------------
#ifndef DOC
      SAVE  LSTAGE, STGMSG
#include "bcs.h"
      CHARACTER*(*) CHDEF
      PARAMETER (MSTAGE=20)
      INTEGER LSTAGE(MSTAGE), NSTAGE, SYSTEM
      EXTERNAL SYSTEM
      CHARACTER  MSG*120, SUBR*8 , TF*1
      CHARACTER*120 STGMSG(MSTAGE)
      LOGICAL STAGE
      DATA STAGE /.FALSE./
      DATA NSTAGE /0/
C ------------------------------------------------------------------
      IER = 0
      SUBR = ' ASTAGE '
C
      IF ( LUNIT.GT.0) THEN
         STAGE = .TRUE.
#if defined(UNIX) || defined(ALEPH_DEC)
C      register stageout parameters
         IF (NSTAGE.LT.MSTAGE) THEN
            NSTAGE = NSTAGE+1
            STGMSG(NSTAGE) = CHDEF
         ENDIF
#endif
C
      ELSEIF (LUNIT.LT.0) THEN
C     at least one tape is staged in
         STAGE  = .TRUE.
C
      ELSE
C     end of job
#if defined(IBM)
         IF (STAGE) CALL VMCMS ('EXEC STAGE DROP',IER)
#endif
#if defined(UNIX)
C      stageout all tapes registered
         DO I=1,NSTAGE
#if defined(ALEPH_OUTSIDE)
            MSG = 'alstageout -F F '//
     &            STGMSG(I)(1:LNBLNK(STGMSG(I)))
#else
            jx=icfila('/',stgmsg(I),1,lnblnk(stgmsg(I)))
            tf=stgmsg(I)(jx+1:jx+1)
            call cltou(tf)
            if (tf.eq.'Z') then
               MSG = 'alstageout -C C '//STGMSG(I)(1:LNBLNK(STGMSG(I)))
            else
               MSG = 'stageput '// STGMSG(I)(1:LNBLNK(STGMSG(I)))
            endif
#endif
#include "prmsg.h"
            IST = SYSTEM (MSG(1:LNBLNK(MSG))) / 256
            IF (IST.NE.0) IER=1
         ENDDO
C      dispose of any disk files
         CALL ADSPOS(0,' ',' ',' ',IER)
#else
#if defined(ALEPH_DEC)
C      stageout all tapes registered
         DO I=1,NSTAGE
            MSG = 'alstageout -F F '//
     &            STGMSG(I)(1:LNBLNK(STGMSG(I)))
#include "prmsg.h"
            STATUS = LIB$SPAWN (MSG,,,,,,IST)
C            IF (IST.NE.1) IER=1
         ENDDO
#endif
#endif
      ENDIF
C
      END
#endif
@


1.8
log
@alephio7.1 mods for redwood and corr in bkrhab
@
text
@d26 1
a26 1
      CHARACTER  MSG*120, SUBR*8
d61 8
a68 1
            MSG = 'stageput '// STGMSG(I)(1:LNBLNK(STGMSG(I)))
@


1.7
log
@alephio68 introduce ALEPH_LINUX flag
@
text
@d59 1
a59 1
     &            STGMSG(I)(1:LNBLNK(STGMSG))
d61 1
a61 1
            MSG = 'stageput '// STGMSG(I)(1:LNBLNK(STGMSG))
d74 1
a74 1
     &            STGMSG(I)(1:LNBLNK(STGMSG))
@


1.6
log
@alephio 6.7 introduce new stager on HP
@
text
@d25 1
@


1.5
log
@replace Call SYSTEM with IST=SYSTEM
@
text
@d56 1
a56 1
#if defined(ALEPH_HP)
@


1.4
log
@replace flag ${VENDOR} with ALEPH_${VENDOR}
Modified Files:
 	ainqui.F algtenv.F aopen.F aopenw.F aoperd.F aoptap.F astage.F
 	awrtap.F
@
text
@d24 1
a24 1
      INTEGER LSTAGE(MSTAGE), NSTAGE
d63 2
a64 1
            CALL SYSTEM (MSG(1:LNBLNK(MSG)))
@


1.3
log
@import alephio 52 from historian. Modify aclose.F to NOT call brwnd twice
for the same file. update version.h to 5.3
@
text
@d36 1
a36 1
#if defined(UNIX) || defined(DEC)
d56 1
a56 1
#if defined(HP)
d68 1
a68 1
#if defined(DEC)
@


1.2
log
@ Modified Files:
	acdarg.F afilin.F afilou.F ainqui.F amount.F aoptap.F astage.F
	awrtap.F
@
text
@a0 1
*DK astage
d36 1
a36 1
#if defined(UNIX) || defined(VAX)
d67 2
a68 2
#endif
#if defined(VAX)
d77 1
@


1.1
log
@Initial revision
@
text
@d57 1
d60 3
@


1.1.1.1
log
@import alephio 4
@
text
@@
