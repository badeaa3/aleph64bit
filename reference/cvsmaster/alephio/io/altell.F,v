head	1.3;
access;
symbols
	alio83:1.3
	alio82:1.3
	alio81:1.3
	alio80:1.3
	alio74:1.3
	alio73:1.3
	alio72:1.3
	alio71:1.3
	alio70:1.3
	alio68:1.3
	alio69:1.3
	alio67:1.3
	alio66:1.3
	alio65:1.3
	alio64:1.3
	alio63:1.3
	alio62:1.3
	alio61:1.3
	alio60:1.3
	alephio53:1.3
	v4:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.03.13.15.01.25;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	96.01.18.13.51.01;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.13.52.30;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.13.52.31;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@import alephio 52 from historian. Modify aclose.F to NOT call brwnd twice
for the same file. update version.h to 5.3
@
text
@      SUBROUTINE ALTELL (TEXT,IERR,TAXION)
C ------------------------------------------------------------------
CKEY IO / USER
C - F.Ranjard - 870105
C! Print text and take action
C - print text 'TEXT' if not blank
C - increment error counter# IERR if in the range [1,LERR]
C   if IERR=0 : no error set
C - take action 'TAXION':
C      TAXION = RETURN  : continue
C               NEXT    : go to end of event, then next event
C               STOP    : stop the program without run summary
C               END     : end of job
C               FATAL   : fatal error , trace back , end of job
C               INIT    : 1st call to initialize /JOBERR/
C -----------------------------------------------------------------
#ifndef DOC
#include "bcs.h"
#include "joberr.h"
      CHARACTER*(*) TEXT,TAXION
C ------------------------------------------------------------------
C - initialize /JOBERR/ at 1st entry
      IF (TAXION.EQ.'INIT') THEN
         TACTJO = 'RETURN'
         DO 1 I=1,LERR
 1       NERRJO(I) = 0
         ITELJO = 0
         KERRJO = 0
         RETURN
      ENDIF
C
C - check that the routine is not called a 2nd times after 'STOP' or
C   'END' or 'FATAL'
      IF (ITELJO .EQ. 1) CALL EXIT
      IF (TAXION.EQ.'STOP' .OR. TAXION.EQ.'END' .OR. TAXION.EQ.'FATAL')
     &    ITELJO = 1
C
C - print text
      LUN =  IW(6)
      IF (LUN .LE. 0) THEN
         TAXION = 'FATAL'
      ELSE
         IF (TEXT .NE. ' ') WRITE (LUN,800) TEXT,IERR,TAXION
 800     FORMAT (1X,'+++ALTELL+++ ',1X,A,2X,'error # ',I3,3X,
     &              'action taken ',1X,A)
      ENDIF
C
C - increment error counter
      IF (IERR .GT. 0) THEN
         JERR = MIN (IERR,LERR)
         NERRJO(JERR) = NERRJO(JERR) + 1
      ENDIF
C
C - take action TAXION
      TACTJO = TAXION
      IF (TAXION .EQ. 'RETURN') THEN
         RETURN
      ELSEIF (TAXION.EQ.'NEXT' .OR. TAXION.EQ.'END') THEN
#ifndef FORTRAN
         CALL QNEXTE
#else
         WRITE (LUN,'(3X,''QNEXTE is not implemented : call EXIT'')')
         CALL EXIT
#endif
      ELSEIF (TAXION.EQ.'STOP') THEN
         STOP
      ELSEIF (TAXION.EQ.'FATAL') THEN
#include "tracbck.h"
      ENDIF
C
      END
#endif
@


1.2
log
@ Modified Files:
	acdarg.F afilin.F afilou.F ainqui.F amount.F aoptap.F astage.F
	awrtap.F
 Modified Files:
	cmphost.h ctolow.h gtchdecl.h version.h
 Removed Files:
	albitw.h
 Modified Files:
 	altell.F babend.F jalrec.F noibm.F opensq.F sdrsx.F sibsdr.F
	sxsdr.F
@
text
@a0 1
*DK altell
@


1.1
log
@Initial revision
@
text
@d17 1
@


1.1.1.1
log
@import alephio 4
@
text
@@
