head	1.2;
access;
symbols
	uphy1-0:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	98.06.13.16.52.12;	author janot;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.13.38.16;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.16.13.38.17;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update
@
text
@      SUBROUTINE QUHNEU(ITK,INL,VNH,ITD,IER)
C-----------------------------------------------------------------------
C! Neutral hadron-like particle in Hcal
C  Input  ITK : ALPHA track number
C         INL : 1 for no-links, 0 for good links
C  Output VNH : particle 4-momentum
C         ITD : Is the particle over the threshold 0 if yes
C         IER : error flag ( 0 if ok )
C
C  G.Ganis  21 Mar 1991
C
C  Modifications : P. Janot 12 Mar 1994 -- Implement the possibility
C                  of NO separate HCAL, and of NO endcaps.
C 
C  Modification : M. Kado March 1998 -- New parametrization of 
C                 Neutral hadronic calibration and resolution
C-----------------------------------------------------------------------
#include "qcde.h"
#include "qhac.h"
#include "resolu.h"
#include "fkclstr.h"
#include "calib.h"
#include "parcut.h"
      REAL VNH(4)
#include "ftrig.h"
#include "qmacro.h"
      DATA IFI /0/
      DATA EPS /.0000001/
C
C -- Difference between proton(neutron) and anti-proton(neutron)
C     showers
C     
      ITD= 0
      IER= 0
      CALL vzero(vnh(1),4) 
      EHAD= QE(ITK)
      
      
      IF(XPEQU(ITK,'p').OR.XPEQU(ITK,'n')) THEN
        EHAD= EHAD-QM(ITK)
      ELSE IF(XPEQU(ITK,'p#').OR.XPEQU(ITK,'n#')) THEN
        EHAD= EHAD+QM(ITK)
      END IF
      
      IF(EHAD.LT.EPS) THEN
        ier = 1
        GOTO 999
      ENDIF
      
      
      IF (ehad .le. .5) THEN
        ITD = 1
         goto 999
       ENDIF
      
       IF (ehad .le. 6.) THEN
         crtn = 1./(1.3-.05*ehad)
       ELSE
         crtn = 1.
       ENDIF
       
       IF (ehad .le. 5. .and. ehad .ge. 3.) THEN
         crtnc = .03*(ehad-3.)
       ELSEIF (ehad .gt. 5. .and. ehad .le. 7.) THEN
         crtnc =  .06-.03*(ehad-5.)
       ELSE
         crtnc = 0.
       ENDIF
       resol = 0. 
       calib = 1.
       
       POL = (180./qqpi)*acos(qct(itk))
       
C     
C     First check if there is some deposited energy
C     
       IF (POL .GT. 46 .AND. POL .LT. 134) THEN
         pnocl = pnoclb
       ELSEIF (POL .LE. 36 .OR. POL .GE. 144) THEN
         pnocl = pnocle
       ELSE
         pnocl = pnoclo
       ENDIF
       pout = (1.+exp(-5.))*exp(-(qe(itk)-.5))-exp(-5.)
       pexp = rndm(0.)
       IF (pexp .lt. pout*pnocl) THEN
         ITD = 1
         GOTO 999
       ENDIF
       
C     
C     For the Barrel region ...
C     
       IF (INL .eq. 0) THEN
         IF (POL .GT. 46 .AND. POL .LT. 134) THEN
 201       f2 = rndm(0.)
           IF (ehad.lt.7.) THEN
             egs = .019+.0028*ehad
           ELSE
             egs = .0316+.0014*ehad
           ENDIF
           IF (f2.ge.egs) THEN
             call rannor(rg1,rg2)
             IF (ehad.lt.2.) THEN
               calib = (1.-.4)-.6/ehad
             ELSEIF (ehad.lt.6.) THEN
               calib = (1.-.0625)-1.125/ehad
             ELSEIF (ehad.lt.10.) THEN
               calib = (1.-.1875)+0.9375/ehad
             ELSE
               calib = (1.-.078)-.97/ehad
             ENDIF
             resol = calib*calibnbf+calibnb+crtnc+
     .            crtn*(.52*sqrt(ehad)+.0834*ehad)
     .            *flucha*rg1/ehad
             IF (resol*ehad.lt..35) goto 201
             
           ELSE
             call rannor(rg1,rg2)
             IF (ehad.lt.15) THEN
               calib = (1.8-.05*ehad)
             ELSE
               calib = (1.19)
             ENDIF
             resol = calib*calibnbf+calibnb+
     .            flucha*(.39+.002*ehad)*rg2
             IF (resol*ehad.lt..35) goto 201
           ENDIF
           
C     
C     For the Endcaps ...
C     
         ELSEIF (POL .LE. 36 .OR. POL .GE. 144) THEN
 202       f3 = rndm(0.)
           IF (ehad.lt.25.) THEN
             egs = .0017*ehad
           ELSE
             egs = .02+.0025*ehad
           ENDIF
           IF (f3.ge.egs) THEN
             call rannor(rg1,rg2)
             IF (ehad.lt.2.) THEN
               calib = (1.-.75)
             ELSEIF (ehad.lt.6.) THEN
               calib = (1.-.16)-1.18/ehad
             ELSE
               calib = (1.-.1)-1.54/ehad
             ENDIF
             resol = calib*calibnef+calibne+flucha*crtn*
     .            (.5*sqrt(ehad)+.1*ehad+.7)*rg1/ehad
             IF (resol*ehad.lt..35) goto 202
             
           ELSE 
             call rannor(rg1,rg2)
             IF (ehad.lt.15.) THEN
               calib = (1.4-.086*ehad)
             ELSE
               calib = 1.1
             ENDIF
             resol = calib*calibnef+calibne+flucha*
     .            (.2+.001*ehad)*rg2
             IF (resol*ehad.lt..35) goto 202
             
           ENDIF
C     
C     For the Overlap ...
C     
         ELSE
 203       f4 = rndm(0.)
           IF (ehad.lt.15.) THEN
             egs = .024+.00079*ehad
           ELSE
             egs = .00285+.0022*ehad
           ENDIF
           IF (f4.ge.egs) THEN
             call rannor(rg1,rg2)
             IF (ehad.lt.2.) THEN
               calib=(1.-.85)
             ELSEIF (ehad.lt.6.) THEN
               calib = (1.-.45)-.8/ehad
             ELSE
               calib = (1.-.2)-2.3/ehad
             ENDIF
             resol = calib*calibnof+calibno+crtnc+
     .            flucha*crtn*(.45/sqrt(ehad)+
     .            .14*ehad+.8)*rg1/ehad
             IF (resol*ehad.le..35) goto 203
             
           ELSE
             call rannor(rg1,rg2)
             IF (ehad.lt.15) THEN
               calib = (2.-.06*ehad)
             ELSE
               calib = (1.1)
             ENDIF
             resol = calib*calibnof+calibno+
     .            flucha*(.2+.001*ehad)*rg2
             IF (resol*ehad.le..35) goto 203
             
           ENDIF
         ENDIF
         
       ELSE
C     
C     For the no links ...
C     
 11      call rannor(rg1,rg2)
         calib = (1.-.2)-2.1/ehad
         resol = calib*calibnnlf+calibnnl+
     .        (.49/sqrt(ehad)+.23*ehad+.21)
     .        *flucha*rg1/ehad
         IF (resol*ehad.lt..35) goto 11
         
       ENDIF
       
       
C     -- No Endcaps !
       reduc = 1.
       IF ( inoen .GT. 0 ) THEN
         polrad = ACOS(QCT(itk))
         poltan = ABS(TAN(polrad))
         IF     ( poltan .GE. rdime(11)/zdime(11) ) THEN
           reduc = 1./SIN(polrad)
         ELSEIF ( poltan .GE. rdime( 8)/zdime( 8) ) THEN
           reduc = (zdime(8)*poltan - rdime(8))/SIN(polrad)
     .          / (rdime(11) - rdime(8))
         ELSE
           pol = ACOS(qct(itk))*180./qqpi
           IF ( pol .GT. 90. ) pol= 180. - pol
           IF ( pol .GE. polcor(3) ) reduc = 0.
           IF ( pol .LE. ecaacc    ) reduc = 0.
         ENDIF
       ENDIF
       
       
       xnucl = -ALOG(RNDM(xnucl)) ! 1st inter. at XNUCL Int. lengths
C     
C     FTRIG : fraction of energy in ECAL
C     
       call fmodule(acos(qct(itk))*QQRADP,qph(itk)*QQRADP,M_ECAL,M_HCAL)
       if ( xnucl .GE. LambdaECAL )  then !  do no interact in ECAL
         if ( abs(qch(itk)) .gt. 0. )
     &        E_ECAL(M_ECAL) = E_ECAL(M_ECAL) + 1. ! 1 GeV for MIPS
       else
         E_ECAL(M_ECAL) = E_ECAL(M_ECAL) +
     &        EHAD*resol*(1.-exp(xnucl-LambdaECAL))
       endif
       
C -- No separate HCAL
       fracmes = 1.0
       IF ( inohc .GT. 0 ) THEN
         yinter = xinter * reduc ! Total depth
         zinter = yinter - xnucl ! Depth after 1st interaction
         IF ( xnucl .GE. yinter ) THEN
           IF ( qch(itk) .NE. 0. ) THEN
             fracmes = xminio*reduc/ehad ! MIP
           ELSE
             fracmes = 0.       ! Neutral, non-interacting
           ENDIF
         ELSEIF ( ktpcod(itk) .EQ. 5 .OR. ktpcod(itk) .EQ. 6 ) THEN
           fracmes = xminio*reduc/ehad ! Muon
         ELSE
           fracmes = (1.-EXP(-zinter)) / xepira
           CALL hfill(100,fracmes,0.,1.)
         ENDIF
       ENDIF
C -- Too few energy left
       facmul = resol*fracmes
       IF(EHAD*facmul .LT. HCACUT) THEN
         IER= 1
         GOTO 999
       END IF
       
C -- Fill VNH
       VNH(1)= QX(ITK)*EHAD/QP(ITK)*facmul
       VNH(2)= QY(ITK)*EHAD/QP(ITK)*facmul
       VNH(3)= QZ(ITK)*EHAD/QP(ITK)*facmul
       VNH(4)= EHAD                *facmul
C     
 999   RETURN
       END
      
      
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
      SUBROUTINE QUHNEU(ITK,VNH,IER)
d5 1
d7 1
d14 3
d21 2
d31 3
a33 1
C    showers
d35 1
a35 1
      CALL vzero(vnh(1),4)
d37 6
a42 4
      IF(XPEQU(ITK,'P').OR.XPEQU(ITK,'N')) THEN
       EHAD= EHAD-QM(ITK)
      ELSE IF(XPEQU(ITK,'P#').OR.XPEQU(ITK,'N#')) THEN
       EHAD= EHAD+QM(ITK)
d44 1
a44 1
C
d49 177
a225 15
C -- Gaussian fluctuation
      CALL RANNOR(ALEA,eloss)
C -- Resolution does not depend on POL and AZI
      resol = 1.+flucha*alea/SQRT(ehad)
C Undetected energy fraction: HBLIND
      resol = resol / (1. + hblind*(1.+0.5*eloss) )
C -- No Endcaps !
      reduc = 1.
      IF ( inoen .GT. 0 ) THEN
        polrad = ACOS(QCT(itk))
        poltan = ABS(TAN(polrad))
        IF     ( poltan .GE. rdime(11)/zdime(11) ) THEN
          reduc = 1./SIN(polrad)
        ELSEIF ( poltan .GE. rdime( 8)/zdime( 8) ) THEN
          reduc = (zdime(8)*poltan - rdime(8))/SIN(polrad)
d227 22
a248 22
        ELSE
          pol = ACOS(qct(itk))*180./qqpi
          IF ( pol .GT. 90. ) pol= 180. - pol
          IF ( pol .GE. polcor(3) ) reduc = 0.
          IF ( pol .LE. ecaacc    ) reduc = 0.
        ENDIF
      ENDIF


      xnucl = -ALOG(RNDM(xnucl)) ! 1st inter. at XNUCL Int. lengths
C
C FTRIG : fraction of energy in ECAL
C
      call fmodule(acos(qct(itk))*QQRADP,qph(itk)*QQRADP,M_ECAL,M_HCAL)
      if ( xnucl .GE. LambdaECAL )  then      !  do no interact in ECAL
        if ( abs(qch(itk)) .gt. 0. )
     &    E_ECAL(M_ECAL) = E_ECAL(M_ECAL) + 1.  ! 1 GeV for MIPS
      else
        E_ECAL(M_ECAL) = E_ECAL(M_ECAL) +
     &    EHAD*resol*(1.-exp(xnucl-LambdaECAL))
      endif

d250 17
a266 17
      fracmes = 1.0
      IF ( inohc .GT. 0 ) THEN
        yinter = xinter * reduc    ! Total depth
        zinter = yinter - xnucl    ! Depth after 1st interaction
        IF ( xnucl .GE. yinter ) THEN
          IF ( qch(itk) .NE. 0. ) THEN
            fracmes = xminio*reduc/ehad    ! MIP
          ELSE
            fracmes = 0.                   ! Neutral, non-interacting
          ENDIF
        ELSEIF ( ktpcod(itk) .EQ. 5 .OR. ktpcod(itk) .EQ. 6 ) THEN
          fracmes = xminio*reduc/ehad      ! Muon
        ELSE
          fracmes = (1.-EXP(-zinter)) / xepira
          CALL hfill(100,fracmes,0.,1.)
        ENDIF
      ENDIF
d268 6
a273 6
      facmul = resol*fracmes
      IF(EHAD*facmul .LT. HCACUT) THEN
       IER= 1
       GOTO 999
      END IF
      hadtot= hadtot+ehad*facmul
d275 9
a283 7
      VNH(1)= QX(ITK)*EHAD/QP(ITK)*facmul
      VNH(2)= QY(ITK)*EHAD/QP(ITK)*facmul
      VNH(3)= QZ(ITK)*EHAD/QP(ITK)*facmul
      VNH(4)= EHAD                *facmul
C
 999  RETURN
      END
@


1.1.1.1
log
@2nd try to import uphy
@
text
@@
