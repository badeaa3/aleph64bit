head	1.2;
access;
symbols
	bcalinfo_1:1.1.1.1
	OSF1:1.1.1;
locks; strict;
comment	@# @;


1.2
date	98.09.08.18.26.00;	author merino;	state Exp;
branches;
next	1.1;

1.1
date	98.02.23.11.51.20;	author merino;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.23.11.51.20;	author merino;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update
@
text
@Dear Colleages!

	We are happy to inform you that we have now a tool for access to
the BCAL++ information from ALPHA. (From now on, we will simply call BCAL++
as BCAL)

-------------
Introduction:
-------------

	For data, BCALINFO first looks for BCAL related banks which
contain PMT, APD and silicon pads ADC information of each module. This
information is used to calculate the energy deposit and the centroid. Finally,
this information is traced back through the quadrupole and the 4-momentum
at the IP of the detected e- (e+) is computed.

	For MC, since BCAL is not currently simulated inside the official
GALEPH, we make a loop over all the stable MC particle and pass them
through a fast BCAL simulation program including the quadrupole
simulation. The 4-momenta of a reconstructed BCAL object are obtained by
assuming that it is the scattered beam e- (e+). 

------
Usage:
------

	When compiling your ALPHA job, you have to link with the obj file
currently inside /aleph/uphy area (libbcalinfo.a). And, add the include path
"/al/reference/cvs/uphy/bcalinfo" in order to include the "bcalinfo.h" file.

	Inside QUEVNT, just call BCALINFO(dummy). Once it is called, the
following COMMON variables are filled. This COMMON is the first one contained in 
the "bcalinfo.h" file in /al/reference/cvs/uphy/bcalinfo.

KNBCR	- Number of fully reconstructed BCAL objects (Maximum 4 currently)
KFBCR	- First BCAL object
KLBCR	- Last BCAL object

	You can access physical information via, QE,QP,QCT,QPH,QX,QY,QZ,
etc..  just like any ALPHA track.  Some ALPHA variables like QDB, QZB, and
error matrix are not available. 

	For MC truth, you can access the information in the same way by using
KNBCT, KFBCT, KLBCT. When running over MC, you should include in your ALPHA cards 
file a "BCAL" card with the year's geometry you are interested in (97 or 98) (as
probably you know, the BCAL modules where moved closer to the beam axis on 1998).

	At this moment, we do not assign any track class to these BCAL
objects, i.e., neither KMONTE nor KRECO, in order not to affect on any
user's routine having some loops on the track class. 

	Here is an example of an ALPHA program to access BCAL infomation, 

      SUBROUTINE QUEVNT(QT,KT,QV,KV)
C-------------------------------------------------------------------------
C	quevnt
C-------------------------------------------------------------------------
      include '/aleph/phy/qcde.inc'
      COMMON /BCINFO/ KNBCR,KFBCR,KLBCR,KNBCT,KFBCT,KLBCT
      include '/aleph/phy/qmacro.inc'
*
*	calling BCAL stuffs
*
      CALL BCALINFO(dummy)
*
*     	loop on BCAL object to see Q^2 of gamma-gamma scatering
*
      NTAG=0
      DO ITK=KFBCR,KLBCR
        IF (QE(ITK).ge.40.0) THEN	! scattered electron tag
          NTAG=NTAG+1
          Etag=QE(ITK)
          Ctag=QCT(ITK)
        ENDIF
      ENDDO
      IF (NTAG.EQ.1) THEN
        WRITE(*,*)' Single tag event'      
        Q2=2.0*(QELEP/2.0)*Etag*(1.0-Ctag)
      ENDIF
*
*	user routines
*
      RETURN
      END

*

----------
Utilities:
----------

 Once after the call BCALINFO, one can also use the following functions.
But remember to declare them EXTERNAL.

XBCA(itk)       .TRUE. if the following BCAL reconstruction information 
                is available for itk object:
 QBCAER(itk)	Raw energy (i.e. without leakage correction, etc) as determined by the APD
 QBCAPM(itk)	Raw energy as determined by the PMT
 QBCARC(itk)	Radial position (cm) of the reconstructed centroid
 QBCAPC(itk)	Phi (degrees) of the reconstructed centroid 

KBCALTAG(itk)	Checks if a MC particle reaches a BCAL module.
		Returns the module number. If 0, the particle does not reach
		any BCAL module.

where itk is the ALPHA track number.

 From 1998, the energy deposited in the 4 BCAL++ modules is available 
for EVERY Aleph event. Since the position information is not available, 
these are RAW energy depositions with no correction at all:

QBCHER(imod)    Raw Energy in BCAL++ module # imod (As determined by the APD)   
QBCHPM(imod)    Raw Energy in BCAL++ module # imod (As determined by the PMT)   

where imod=1,2,3,4 is the BCAL++ module number. Just for your information, the 
BCAL modules numbering is the following:

                        LEP ring center

                            X ^
          __                  |                  __
         |__| #3              |                 |__| #1
                     e- --->  |  <--- e+
       -----------------------.---------------------------> Z
          __                                     __
         |__| #4                                |__| #2
     
*
*
*
*

Any comment and question can be addressed to

merino@@ifae.es	

Gonzalo Merino
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
the BCAL++ information from ALPHA. (Afterward, we will simply call BCAL++
d12 4
a15 2
contain PMT, APD and silicon pad ADC information of each module. This
information is used to calculate the energy deposit and the centroid. 
d28 2
a29 2
currently inside /aleph/uphy area (libbcalinfo.a). And, add include path
"/al/reference/cvs/uphy/bcalinfo" in order to include "bcalinfo.h" file.
d32 2
a33 2
following COMMON variables are filled. COMMON can be taken from
"bcalinfo.h" file in /al/reference/cvs/uphy/bcalinfo.
d35 1
a35 1
KNBCR	- Number of BCAL object	reconstructed (Maximum 4 currently)
d41 6
a46 2
error matrix are not available. For MC truth, you can access equally by
KNBCT, KFBCT, KLBCT. 
d52 1
a52 1
	Here is an example to show how you access BCAL infomation, 
d92 2
a93 13
Once after the call BCALINFO, one can also use the following functions.
But besure to declare EXTERNAL.

XBCA(i)		.TRUE. if BCAL reconstruction info. is available
QBCAER(i)	Raw energy (Currently determined by APD)
QBCARC(i)	Radial position of the reconstructed centroid
QBCAPC(i)	Phi (degree) of the reconstructed centroid

KBCALTAG(i)	check a MC particle whether it passes a BCAL module region.
		return the module number, if 0 the particle can not reach
		to the BCAL.

where i is the ALPHA track number.
d95 33
a132 1

d135 1
a135 2
icpark@@aloha.cern.ch	(software related problem)
merino@@ifae.es		(BCAL++ and Fast simulation related problem)
d137 1
a137 2
Hope to have many funs with BCALINFO.
Inkyu PARK and Gonzalo Merino
@


1.1.1.1
log
@import 
@
text
@@
