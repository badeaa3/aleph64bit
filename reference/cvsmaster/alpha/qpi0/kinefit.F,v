head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.46;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.47;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE KINEFIT(PGAM1,PGAM2,PPI0,CHISQ,PROBP0,IFAIL)
CKEY QPI0DO / INTERNAL
C-----------------------------------------------------------------------
C! Kinematic fitting of the pi0 mass
C    Author   :- Marcello Maggi        27-Jan-1992
C    Called from QPI0DO
C
C    Inputs:
C         - PGAM1         : 4 momentum of first photon
C         - PGAM2         : 4 momentum of second photon
C
C    Outputs:
C         - PROBP0  /R    : probability to form a pi0
C         - IFAIL   /I    : return code (0 means OK!)
C         - PPI0    /R    : Refitted pi0 momentum
C    Description
C    ===========
C
C  This set of routines perform a kinematical fit to the pi0 mass.
C  The chisquare is defined as:
C    ((E1measured-E1fitted)/Sigma1Eresolution))**2 +
C    ((E2measured-E2fitted)/Sigma2Eresolution))**2 +
C    ( ((cos(angle between photon)-(1-pimass**2/2/E1fitted/e2fitted))/
C                                    SigmacoshtetaResolution) **2
C   and it is minimized by a Newtonian iterative procedure, getting
C   E1fitted and E2fitted as the result of the fit.
C   The resolutions are taken from the nominal resolution of ECAL and
C   depend on the Energy fitted.
C   The Probability is then computed for 1 d.o.f.
C-----------------------------------------------------------------------
#ifndef DOC
#include "bcs.h"
      DIMENSION PGAM1(4), PGAM2(4),PG1FIT(4),PG2FIT(4),PPI0(4)
      DOUBLE PRECISION E1REC,E2REC,T1REC,T2REC,P1REC,P2REC
      DOUBLE PRECISION COSP0
      DOUBLE PRECISION ERIS,TRISA,TRISB
      DOUBLE PRECISION DE1,DE2,DA1,DA2,DELTACOS
      DOUBLE PRECISION EFIT(2),EFIN(2),SHES(2,2),GED(2),CHI2,CHI2N
C.. ERIS: energy resolution            SIGMA=ERIS/SQRT(E)
C.. TRISA,TRISB angular resolution     SIGMA=TRISA+TRISB/SQRT(E)
C.. NITER maximum number of iterations
      PARAMETER (ERIS=0.18D0 , TRISA=0.00032D0 , TRISB=0.002816D0)
      PARAMETER (PIMASS=0.1349739)
      PARAMETER (NITER=50)
C-----------------------------------------------------------------------
      E1REC = DBLE(PGAM1(4))
      E2REC = DBLE(PGAM2(4))
      THET1 = ACOS(PGAM1(3)/PGAM1(4))
      PHI1  = ATAN2(PGAM1(2),PGAM1(1))
      THET2 = ACOS(PGAM2(3)/PGAM2(4))
      PHI2  = ATAN2(PGAM2(2),PGAM2(1))
      CST12 = VDOTN(PGAM1,PGAM2,3)
C
      COSP0 = DBLE(CST12)
C
      T1REC = DBLE(THET1)
      T2REC = DBLE(THET2)
      P1REC = DBLE(PHI1)
      P2REC = DBLE(PHI2)
*
* compute the resolutions
*
      DE1 = DSQRT(E1REC)*ERIS
      DE2 = DSQRT(E2REC)*ERIS
      DA1 = TRISA + TRISB/DSQRT(E1REC)
      DA2 = TRISA + TRISB/DSQRT(E2REC)
      CALL DECOS(T1REC,P1REC,T2REC,P2REC,DA1,DA2,DELTACOS)
*
* let's start the fit
*
      EFIT(1)=E1REC
      EFIT(2)=E2REC
      CALL CHISCOM(EFIT,E1REC,E2REC,COSP0,DE1,DE2,DELTACOS,CHI2)
      CHI2N=9999.D0
      NVOLTE=0
      DO NVOLTE=1,NITER
        CALL HESSE(EFIT,COSP0,DE1,DE2,DELTACOS,SHES,IFAIL)
        IF(IFAIL.NE.0) THEN
          WRITE (IW(6),*)' ## KINEFIT ## : I CANNOT FIT'
          GOTO 70
        ENDIF
        CALL DERIV(EFIT,E1REC,E2REC,COSP0,DE1,DE2,DELTACOS,GED)
        CALL NEWTONIT(EFIT,GED,SHES,EFIN)
        DE1=DSQRT(EFIN(1))*ERIS
        DE2=DSQRT(EFIN(2))*ERIS
        DA1 = TRISA + TRISB/DSQRT(EFIN(1))
        DA2 = TRISA + TRISB/DSQRT(EFIN(2))
        CALL DECOS(T1REC,P1REC,T2REC,P2REC,DA1,DA2,DELTACOS)
        CALL CHISCOM(EFIN,E1REC,E2REC,COSP0,DE1,DE2,DELTACOS,CHI2N)
        IF(DABS(CHI2N-CHI2).GT.0.0001) THEN
          CHI2=CHI2N
          EFIT(1)=EFIN(1)
          EFIT(2)=EFIN(2)
        ELSE
          GO TO 70
        ENDIF
      ENDDO
   70 CONTINUE
C
      E1FIT=SNGL(EFIN(1))
      SCAL1 = E1FIT/PGAM1(4)
      CALL VSCALE(PGAM1,SCAL1,PG1FIT,3)
      E2FIT=SNGL(EFIN(2))
      SCAL2 = E2FIT/PGAM2(4)
      CALL VSCALE(PGAM2,SCAL2,PG2FIT,3)
C
C.. Find the direction of refitted pi0
      CALL VADD(PG1FIT,PG2FIT,PPI0,3)
      PMOM2 = VDOT(PPI0,PPI0,3)
C
C.. Angular correction now
      EPI0 = E1FIT+E2FIT
      PFIT2= EPI0**2-PIMASS**2
      SCALE = SQRT(PFIT2/PMOM2)
      CALL VSCALE(PPI0,SCALE,PPI0,3)
      PPI0(4) = EPI0
      IF(E1FIT.LE.0.2) E1FIT=0.2
      IF(E2FIT.LE.0.2) E2FIT=0.2
      COFITTED=1.-PIMASS*PIMASS/2./E1FIT/E2FIT
      CHISQ = SNGL(CHI2N)
      PROBP0=PROB(SNGL(CHI2N),1)
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
