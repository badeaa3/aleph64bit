head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.11;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.12;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QDEDXK(IRUN,P,Q,RMASS,DX,NSMP,DEDX,EDEDX,SIGMA)
CKEY DEDX MONTE /INTERNAL
C----------------------------------------------------------------------
C! Fast, simple dE/dx simulation of a single track.
C
C  R. Johnson   5-02-90
C  Input:    IRUN       /I       Run number for calibration constants
C            P          /R       Track momentum
C            Q          /R       Particle charge
C            RMASS      /R       Particle mass
C            DX         /R       Average sample length
C            NSMP       /I       Number of dE/dx samples
C  Output:   DEDX       /R       Simulated dE/dx
C            EDEDX      /R       Expected mean dE/dx
C            SIGMA      /R       dE/dx resolution
C----------------------------------------------------------------------
#ifndef DOC
      SAVE FIRST,LASRN,KUPRNT
#include "bcs.h"
#include "tc4xjj.h"
C
      LOGICAL FIRST
      DATA LASRN/-1/,FIRST/.TRUE./,KUPRNT/6/
C
#include "bmacro.h"
C----------------------------------------------------------------------
C++   Get new calibration constants if the run number has changed
C
      IF (IRUN.NE.LASRN) THEN
        LASRN=IRUN
C
C++     Read the calibration bank from the database
C
        NNR=NDANR(JUNIDB(0),'TC4X','LE',IRUN)
        IF (NNR.EQ.0) THEN
          CALL QMTERM('_QDEDXM_ Cannot find TC4X on database.')
        ENDIF
        KTC4X=MDARD(IW,JUNIDB(0),'TC4X',NNR)
        IF (KTC4X.EQ.0) THEN
          CALL QMTERM('_QDEDXM_ Insufficient space for bank TC4X.')
        ENDIF
C
        IF (NNR.LT.2001 .AND. FIRST) THEN
          WRITE(KUPRNT,98) IRUN,IRUN,NNR,NNR
   98     FORMAT(//' QDEDXK:  error in accessing dE/dx constants from',/
     &    ' the database.  QDEDXM specified that constants for run ',
     &    I6,/' be used in the parameterization of the resolution',/
     &    ' (bank TC4X), but the largest NR in the database less than',/
     &    ' or equal to ',I6,' is ',I4,', which is a Monte Carlo run.',/
     &    ' QDEDXM must have the constants fit to the DATA that are',/
     &    ' to be simulated.  Maybe you need to explicitely specify',/
     &    ' that the 89/90 database be selected, using the FDBA card.',/
     &    ' I will continue now, using the constants from NR=',I4,/)
          FIRST=.FALSE.
        ENDIF
C
C++     Save the appropriate calibration constants
C
        IB=1
        PCUT= RTABL(KTC4X,IB,JTC4RP)
        A1= RTABL(KTC4X,IB,JTC4RP+3)
        B1= RTABL(KTC4X,IB,JTC4RP+4)
        A2= RTABL(KTC4X,IB,JTC4RP+1)
        B2= RTABL(KTC4X,IB,JTC4RP+2)
        FLG=RTABL(KTC4X,IB,JTC4RP+6)
C
C++     Drop the bank which was read in
C
        KTC4X=NDROP('TC4X',NNR)
      ENDIF
C
      IF (P.GT.PCUT) THEN
        AA=A1
        BB=B1
      ELSE
        AA=A2
        BB=B2
      ENDIF
C
      BG=P/RMASS
C
      EDEDX=QKBLOK(IRUN,BG,Q)
      IF (FLG.EQ.0.) THEN
        ARG=(AA/FLOAT(NSMP))+BB
        SIGMA= SQRT(ARG)
      ELSE
        SIGMA=PCUT*(DX**B2)*((FLOAT(NSMP))**A2)
      ENDIF
C
      CALL RANNOR(RNDNM,YDUM)
      DEDX= EDEDX*(1. + SIGMA*RNDNM)
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
