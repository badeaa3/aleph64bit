head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.13;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.14;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QGMDCL(ALPHA,DELTA,ETA,EVIST)
CKEY JETS /INTERNAL
C----------------------------------------------------------------------
C   Author   : P. Perez       28-MAR-1989
C
C   Description
C   ===========
C!   Evaluate jet multiplicities based on the scaled min. distance
C!   method (suggested by Hagiwara)
C    from momentum vectors stored in QCTBUF.INC
C
C   Distance between particles i and j is defined by :
C                                   2. * (Ei*Ej)**alpha * (1-cos(i,j))
C
C  input   : ALPHA           weight
C            DELTA           half opening angle (degrees)
C            ETA             energy cut-off for jets (in un. of Evis)
C            EVIST           visible energy
C                            (if EVIST=0., it is computed from the
C                             input particle energies)
C            KTBI            # of particles           (from QCTBUF)
C            QTBIX,Y,Z,E(i)  four momentum (i=1,KTBI) ( "     "   )
C  output  :
C            QTBOX,Y,Z,E(j)  four  momentum of jet j (j=1,NJET)
C            KTBOF(i)        jet # of particle i     (i=1,KTBI)
C            KTBO        -1  input  error (KTBI/EVIST) (in   QCTBUF)
C                        -2  error from individ. track
C                        -3  too many jets
C                       NJET # of jets (normal return)
C======================================================================
#ifndef DOC
#include "qctbuf.h"
C
      DIMENSION  PP(5,KTBIMX)
      REAL MASS , MINMAS
C
C------------------------------------------------------------------
C   set initial values
C------------------------------------------------------------------
      EVIS=EVIST
      IF(KTBI.GT.KTBIMX) THEN
C        WRITE(LOUTIO,*) ' ***MDCLUS ntk=',KTBI,'>ktbimx'
        IRET = -1
        GOTO 999
      ENDIF
C
      IRET = 1
      DO 10 I = 1, KTBOMX
      QTBOX(I) = 0.
      QTBOY(I) = 0.
      QTBOZ(I) = 0.
      QTBOE(I) = 0.
   10 CONTINUE
      DO 11 I = 1, KTBIMX
      KTBOF(I) = 0
   11 CONTINUE
      EVISI = 0.
      DO 1 I = 1, KTBI
        KTBOF(I) = 0
        PP(1,I)  = QTBIX(I)
        PP(2,I)  = QTBIY(I)
        PP(3,I)  = QTBIZ(I)
        PP(4,I)  = QTBIE(I)
        PP(5,I)  = SQRT(PP(1,I)**2+PP(2,I)**2+PP(3,I)**2)
        EVISI    = EVISI + QTBIE(I)
    1 CONTINUE
C
      IF(EVIS.EQ.0.) EVIS = EVISI
      EVIS2 = EVIS**2
C
      ACUT = 2. * (1. - COS(DELTA * 3.1415927 / 90.) )
      ECUT = 2. * ETA * EVIS
C
  100 MINMAS = 5.E8
C
      DO 2000 I = 1, KTBI-1
C
C skip if particle is already merged in a jet
        IF(PP(4,I) .LE. 0.) GO TO 2000
        PI = PP(5,I)
C
        DO 2100 J = I+1, KTBI
C skip if particle is already merged in a jet
          IF(PP(4,J) .LE. 0.) GO TO 2100
C
          PJ = PP(5,J)
          IF (PI .LE. 0. .OR. PJ .LE. 0.) THEN
C            WRITE(LOUTIO,*) ' ***MDCLUS  : momentum is 0'
            IRET = -2
            GO TO 2100
          ENDIF
          COSANG = (PP(1,I)*PP(1,J)+PP(2,I)*PP(2,J)+PP(3,I)*PP(3,J))
          COSANG = COSANG / (PI*PJ)
C
          ACOSAN = ABS(COSANG)
          IF(ACOSAN .GT. 1.0001) THEN
C            WRITE(LOUTIO,*) '***MDCLUS cosang= ',COSANG
            IRET = -2
            GOTO 999
          ELSEIF(ACOSAN.GT.1..AND.ACOSAN.LE.1.0001) THEN
            COSANG = SIGN(1.,COSANG)
          ENDIF
C
          MASS = 2. * (PP(4,I)*PP(4,J))**ALPHA * (1.-COSANG)
C
          IF(MASS.LT.MINMAS) THEN
            MINMAS = MASS
            MINPA1 = I
            MINPA2 = J
          ENDIF
C
 2100   CONTINUE
 2000 CONTINUE
C
      AMIN = MINMAS / EVIS2**ALPHA
      IF(AMIN .GT. ACUT) THEN
C no more jets, fill QTBOX,Y,Z,E and KTBOF arrays
        NJET = 0
        DO 3000 I = 1, KTBI
          IF(PP(4,I).GT.ECUT) THEN
            NJET = NJET + 1
            IF(NJET.GT.KTBOMX) THEN
              IRET = -3
              GOTO 999
            ENDIF
            QTBOX(NJET) = PP(1,I)
            QTBOY(NJET) = PP(2,I)
            QTBOZ(NJET) = PP(3,I)
            QTBOE(NJET) = PP(4,I)
C KTBOF(ipart) = associated jet #, (even when only 1 part. in "jet")
            KTBOF(I) = NJET
            DO 3002 J = 1, KTBI
              IF(KTBOF(J).EQ.I) KTBOF(J) = NJET
 3002       CONTINUE
          ENDIF
 3000   CONTINUE
C
        GOTO 999
C
      ELSE
C update pairing,
C merge particles of the pair and "zero" the 2nd part. of the pair
        KTBOF(MINPA1) = MINPA1
        KTBOF(MINPA2) = MINPA1
        DO 5000 I = 1, KTBI
          IF(KTBOF(I).EQ.MINPA2) KTBOF(I) = MINPA1
 5000   CONTINUE
C
        PP(1,MINPA1) = PP(1,MINPA1) + PP(1,MINPA2)
        PP(2,MINPA1) = PP(2,MINPA1) + PP(2,MINPA2)
        PP(3,MINPA1) = PP(3,MINPA1) + PP(3,MINPA2)
        PP(4,MINPA1) = PP(4,MINPA1) + PP(4,MINPA2)
        PP(5,MINPA1) = SQRT(PP(1,MINPA1)**2+PP(2,MINPA1)**2+
     &                      PP(3,MINPA1)**2)
C
        PP(1,MINPA2) = -1.
        PP(2,MINPA2) = -1.
        PP(3,MINPA2) = -1.
        PP(4,MINPA2) = -1.
        PP(5,MINPA2) = -1.
      ENDIF
      GOTO 100
C
  999 KTBO = IRET
      IF(IRET.GE.0) KTBO = NJET
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
