head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.13;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.14;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QGSPHE
CKEY SHAPE /INTERNAL
C----------------------------------------------------------------------
C   Author   : E. Blucher     27-FEB-1989
C
C   Libraries required: CERNLIB (VSCALE,EIGRS1,SORTZV)
C
C   Description
C   ===========
C!  Calculate sphericity
C   from momentum vectors stored in QCTBUF.INC.
C
C   QTBOX,Y,Z(1) = major axis (sphericity axis)
C   QTBOX,Y,Z(2) = semi-major axis
C   QTBOX,Y,Z(3) = minor axis
C   QTBOR(1,2,3) = eigenvalues in decending order
C         sphericity = 1.5*(1-qtbor(1))
C         aplanarity = 1.5*qtbor(3)
C         planarity = qtbor(3)/qtbor(2)
C======================================================================
#ifndef DOC
#include "qctbuf.h"
      DIMENSION P(3),EVAL(3),EVEC(3,3),WK(14),TT(3,3),IND(3)
C----------------------------------------------------------------------
      IF(KTBI.LT.3)THEN
        IF(KTBI.EQ.2)GOTO 1000
        IF (KTBI .EQ. 1)  THEN
          PINOM=SQRT(QTBIX(1)**2 + QTBIY(1)**2 + QTBIZ(1)**2)
          INOM = 1
          GO TO 1010
        ENDIF
        QTBOX(1)=0.
        QTBOY(1)=0.
        QTBOZ(1)=0.
        QTBOE(1)=0.
        GO TO 1020
      ENDIF
C
C---Compute momentum tensor.
C
      DO 10 I=1,3
        DO 9 J=1,3
          TT(I,J)=0.
    9   CONTINUE
   10 CONTINUE
      DO 501 J=1,KTBI
        P(1)=QTBIX(J)
        P(2)=QTBIY(J)
        P(3)=QTBIZ(J)
        DO 502 I=1,3
          DO 503 K=1,I
              TT(I,K)=TT(I,K)+P(I)*P(K)
  503     CONTINUE
  502   CONTINUE
  501 CONTINUE
      TT(1,2)=TT(2,1)
      TT(1,3)=TT(3,1)
      TT(2,3)=TT(3,2)
C
      CALL VSCALE(TT,1./(TT(1,1)+TT(2,2)+TT(3,3)),TT,9)
      CALL EISRS1(3,3,TT,EVAL,EVEC,IER,WK)
      CALL SORTZV(EVAL,IND,3,1,1,0)
C
      IF(IER.NE.0)THEN
        GO TO 9999
      ENDIF
C--- Store major axis (sphericity axis), semi-major axis, minor axis,
C--- and eigenvalues in decending order.
      DO 20 I=1,3
        QTBOX(I)=EVEC(1,IND(I))
        QTBOY(I)=EVEC(2,IND(I))
        QTBOZ(I)=EVEC(3,IND(I))
        QTBOE(I)=1.
        QTBOR(I)=EVAL(IND(I))
   20 CONTINUE
      GO TO 9999
C
C---SPECIAL CASE -- ONLY TWO TRACKS
 1000 P1=SQRT(QTBIX(1)**2 + QTBIY(1)**2 + QTBIZ(1)**2)
      P2=SQRT(QTBIX(2)**2 + QTBIY(2)**2 + QTBIZ(2)**2)
      INOM=1
      PINOM=P1
      IF(P2.GE.P1)THEN
        INOM=2
        PINOM=P2
      ENDIF
 1010 QTBOX(1)=QTBIX(INOM)/PINOM
      QTBOY(1)=QTBIY(INOM)/PINOM
      QTBOZ(1)=QTBIZ(INOM)/PINOM
      QTBOE(1)=1.
 1020 QTBOR(1)=1.
      DO 504 I=2,3
        QTBOX(I)=0.
        QTBOY(I)=0.
        QTBOZ(I)=0.
        QTBOR(I)=0.
        QTBOE(I)=0.
  504 CONTINUE
 9999 CONTINUE
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
