head	1.3;
access;
symbols
	alpha126_22:1.3
	alpha126_21:1.3
	alpha126_20:1.3
	alpha126_19:1.3
	alpha126_18:1.3
	alpha126_17:1.3
	alpha126_16:1.3
	alpha126_15:1.3
	alpha126_14:1.3
	alpha126_13:1.3
	alpha126_12:1.3
	alpha126_11:1.3
	alpha126_10:1.3
	alpha126_09:1.3
	alpha126_08:1.3
	alpha126_07:1.3
	alpha126_06:1.3
	alpha126_05:1.3
	alpha126_04:1.3
	alpha126_03:1.3
	alpha126_02:1.3
	alpha126_1:1.3
	alpha125_17:1.3
	alpha125_16:1.3
	alpha125_15:1.3
	alpha125_14:1.3
	alpha125_13:1.3
	alpha125_12:1.3
	alpha125_11:1.3
	alpha125_10:1.3
	alpha125_09:1.3
	alpha125_08:1.3
	alpha125_07:1.3
	alpha125_06:1.3
	alpha125_05:1.3
	alpha125_04:1.3
	alpha125_03:1.3
	alpha125_02:1.2
	alpha125_01:1.2
	alpha124_19:1.2
	alpha125:1.2
	alpha124_18:1.2
	alpha124_17:1.2
	alpha124_16:1.2
	alpha124_15:1.2
	alpha124_14:1.2
	alpha124_13:1.2
	alpha124_12:1.2
	alpha124_11:1.2
	alpha124_10:1.2
	alpha124_09:1.2
	alpha124_08:1.2
	alpha124_07:1.2
	alpha124_7:1.2
	alpha124_06:1.2
	alpha124_05:1.2
	alpha124_04:1.2
	alpha124_03:1.2
	alpha124_02:1.2
	alpha124_01:1.2
	alpha124:1.2
	alpha123_12:1.2
	alpha123_11:1.2
	alpha123_10:1.2
	alpha123_9:1.2
	alpha123_8:1.2
	alpha123_7:1.2
	alpha123_6:1.2
	alpha123_5:1.2
	alpha123_4:1.2
	alpha123_3:1.2
	alpha123_2:1.2
	alpha123:1.2
	alpha122_48:1.2
	alpha122_47:1.2
	alpha122_46:1.2
	alpha122_45:1.2
	alpha122_44:1.2
	alpha122_43:1.2
	alpha122_42:1.2
	alpha122_41:1.2
	alpha122_40:1.2
	alpha122_39:1.2
	alpha122_38:1.2
	alpha122_37:1.2
	alpha122_36:1.2
	alpha122_35:1.2
	alpha122_34:1.2
	alpha122_33:1.2
	alpha122_32:1.2
	alpha122_31:1.2
	alpha122_30:1.2
	alpha122_29:1.2
	alpha122_28:1.2
	alpha122_27:1.2
	alpha122_26:1.2
	alpha122_25:1.2
	alpha122_24:1.2
	alpha122_23:1.2
	alpha122_22:1.2
	alpha122_21:1.2
	alpha122_20:1.2
	alpha122_19:1.2
	alpha122_18:1.2
	alpha122_17:1.2
	alpha122_16:1.2
	alpha122_15:1.2
	alpha122_14:1.2
	alpha122_13:1.2
	alpha122_12:1.2
	alpha122_11:1.2
	alpha122_10:1.2
	alpha122_9:1.2
	alpha122_8:1.2
	alpha122_6:1.2
	alpha122_5:1.2
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.3
date	2000.03.07.07.22.06;	author boucrot;	state Exp;
branches;
next	1.2;

1.2
date	96.06.27.10.50.06;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.42.13;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.14;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@      SUBROUTINE QGTHRU
C-----------------------------------------------------------------------
CKEY SHAPE /INTERNAL
C!   topological event analysis: thrust
C                                                   H. Albrecht. feb 82
C-----------------------------------------------------------------------
#ifndef DOC
#include "qctbuf.h"
C-----------------------------------------------------------------------
      IF (KTBI .LE. 2)  GO TO 60
C
      VMAX = 0.
      DO 30 I=1,KTBI-1
        DO 20 J=I+1,KTBI
          VCX = QTBIY(I) * QTBIZ(J) - QTBIY(J) * QTBIZ(I)
          VCY = QTBIZ(I) * QTBIX(J) - QTBIZ(J) * QTBIX(I)
          VCZ = QTBIX(I) * QTBIY(J) - QTBIX(J) * QTBIY(I)
          VLX = 0.
          VLY = 0.
          VLZ = 0.
C
          DO 10 L=1,KTBI
            IF (L .EQ. I .OR. L .EQ. J)  GO TO 10
            IF (QTBIX(L) * VCX + QTBIY(L) * VCY +
     &          QTBIZ(L) * VCZ .GE. 0.)  THEN
              VLX = VLX + QTBIX(L)
              VLY = VLY + QTBIY(L)
              VLZ = VLZ + QTBIZ(L)
            ELSE
              VLX = VLX - QTBIX(L)
              VLY = VLY - QTBIY(L)
              VLZ = VLZ - QTBIZ(L)
            ENDIF
   10     CONTINUE
C
C --- make all four sign-combinations for I,J
C
          VNX = VLX + QTBIX(J) + QTBIX(I)
          VNY = VLY + QTBIY(J) + QTBIY(I)
          VNZ = VLZ + QTBIZ(J) + QTBIZ(I)
          VNEW = VNX*VNX + VNY*VNY + VNZ*VNZ
          IF (VNEW .GT. VMAX)  THEN
            VMAX = VNEW
            VMX = VNX
            VMY = VNY
            VMZ = VNZ
          ENDIF
C
          VNX = VLX + QTBIX(J) - QTBIX(I)
          VNY = VLY + QTBIY(J) - QTBIY(I)
          VNZ = VLZ + QTBIZ(J) - QTBIZ(I)
          VNEW = VNX*VNX + VNY*VNY + VNZ*VNZ
          IF (VNEW .GT. VMAX)  THEN
            VMAX = VNEW
            VMX = VNX
            VMY = VNY
            VMZ = VNZ
          ENDIF
C
          VNX = VLX - QTBIX(J) + QTBIX(I)
          VNY = VLY - QTBIY(J) + QTBIY(I)
          VNZ = VLZ - QTBIZ(J) + QTBIZ(I)
          VNEW = VNX*VNX + VNY*VNY + VNZ*VNZ
          IF (VNEW .GT. VMAX)  THEN
            VMAX = VNEW
            VMX = VNX
            VMY = VNY
            VMZ = VNZ
          ENDIF
C
          VNX = VLX - QTBIX(J) - QTBIX(I)
          VNY = VLY - QTBIY(J) - QTBIY(I)
          VNZ = VLZ - QTBIZ(J) - QTBIZ(I)
          VNEW = VNX*VNX + VNY*VNY + VNZ*VNZ
          IF (VNEW .GT. VMAX)  THEN
            VMAX = VNEW
            VMX = VNX
            VMY = VNY
            VMZ = VNZ
          ENDIF
   20   CONTINUE
   30 CONTINUE
C
      IF(VMZ. LT. 0.) THEN
        VMX = -VMX
        VMY = -VMY
        VMZ = -VMZ
      ENDIF
C -- sum momenta of all particles and iterate
C
      DO 50 ITER=1,4
        QTBOX(1) = 0.
        QTBOY(1) = 0.
        QTBOZ(1) = 0.
        DO 40  I=1,KTBI
          IF (VMX * QTBIX(I) + VMY * QTBIY(I) +
     +        VMZ * QTBIZ(I) .GE. 0.)  THEN
            QTBOX(1) = QTBOX(1) + QTBIX(I)
            QTBOY(1) = QTBOY(1) + QTBIY(I)
            QTBOZ(1) = QTBOZ(1) + QTBIZ(I)
          ELSE
            QTBOX(1) = QTBOX(1) - QTBIX(I)
            QTBOY(1) = QTBOY(1) - QTBIY(I)
            QTBOZ(1) = QTBOZ(1) - QTBIZ(I)
          ENDIF
   40   CONTINUE
        VNEW = QTBOX(1)**2 + QTBOY(1)**2 + QTBOZ(1)**2
        IF (VNEW .EQ. VMAX)  GO TO 70
        VMAX = VNEW
        VMX = QTBOX(1)
        VMY = QTBOY(1)
        VMZ = QTBOZ(1)
   50 CONTINUE
C
C --- 2 tracks or less
C
   60 IF (KTBI .EQ. 2)  THEN
        IF (QTBIX(1) * QTBIX(2) + QTBIY(1) * QTBIY(2) +
     &      QTBIZ(1) * QTBIZ(2) .GE. 0)  THEN
          QTBOX(1) = QTBIX(1) + QTBIX(2)
          QTBOY(1) = QTBIY(1) + QTBIY(2)
          QTBOZ(1) = QTBIZ(1) + QTBIZ(2)
        ELSE
          QTBOX(1) = QTBIX(1) - QTBIX(2)
          QTBOY(1) = QTBIY(1) - QTBIY(2)
          QTBOZ(1) = QTBIZ(1) - QTBIZ(2)
        ENDIF
      ELSE IF (KTBI .EQ. 1)  THEN
        QTBOX(1) = QTBIX(1)
        QTBOY(1) = QTBIY(1)
        QTBOZ(1) = QTBIZ(1)
      ELSE IF (KTBI .EQ. 0)  THEN
        QTBOX(1) = 0.
        QTBOY(1) = 0.
        QTBOZ(1) = 0.
        QTBOE(1) = 0.
        QTBOR(1) = 0.
        KTBO = 0
        GO TO 90
      ENDIF
      VNEW = QTBOX(1)**2 + QTBOY(1)**2 + QTBOZ(1)**2
C
C --- normalize thrust -division by total momentum-
C
   70 VSUM = 0.
      DO 80 I=1,KTBI
        KTBOF(I) = 1
   80   VSUM = VSUM + SQRT (QTBIX(I)**2 + QTBIY(I)**2 + QTBIZ(I)**2)
      QTBOR(1) = SQRT (VNEW) / VSUM
      QTBOE(1) = SQRT (QTBOX(1)**2 + QTBOY(1)**2 + QTBOZ(1)**2)
      KTBO = 1
C
   90 END
#endif
@


1.2
log
@alpha122_5 taken from alws
@
text
@d132 1
a132 1
      ELSE
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
          VNEW = VNX**2 + VNY**2 + VNZ**2
d52 1
a52 1
          VNEW = VNX**2 + VNY**2 + VNZ**2
d63 1
a63 1
          VNEW = VNX**2 + VNY**2 + VNZ**2
d74 1
a74 1
          VNEW = VNX**2 + VNY**2 + VNZ**2
d84 5
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
