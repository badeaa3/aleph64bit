head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.12;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.13;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QGFOXW
CKEY SHAPE /INTERNAL
C----------------------------------------------------------------------
C   Author   : E. Blucher     1-MAR-1989
C
C   Description
C   ===========
C!  Calculate Fox-Wolfrom moments H0 -- H4.
C
C        QTBOR(1), ..., QTBOR(5) = H0, ..., H4
C======================================================================
#ifndef DOC
#include "qcde.h"
#include "qctbuf.h"
C
C---Legendre polynomials as statement functions (from DLK).
C
      PLEG2(X)=(3.*X**2-1.)/2.
      PLEG3(X)=(5.*X**3-3.*X)/2.
      PLEG4(X)=(35.*X**4-30.*X**2+3.)/8.
C-----------------------------------------------------------------------
      IERR=0
      DO 10 I=1,5
        QTBOR(I)=0.
   10 CONTINUE
      IF (QELEP.LT.1.)THEN
        IERR=1
        GOTO 999
      ENDIF
      IF(KTBI.LT.2)THEN
        IERR=2
        GOTO 999
      ENDIF
      H0=0.
      H1=0.
      H2=0.
      H3=0.
      H4=0.
      SSS=QELEP**2
      DO 101 I=1,KTBI
        PPARI=QTBIX(I)**2 + QTBIY(I)**2 + QTBIZ(I)**2
        DO 102 J=I,KTBI
          IF(J .NE. I)THEN
            PPARJ=QTBIX(J)**2 + QTBIY(J)**2 + QTBIZ(J)**2
            CXANG=(QTBIX(I)*QTBIX(J) + QTBIY(I)*QTBIY(J)
     1             + QTBIZ(I)*QTBIZ(J))/SQRT(PPARI*PPARJ)
C----------Factor of 2 for i,j and j,i combinations.
            DELH0=2.*SQRT(PPARI*PPARJ)
            H0=H0+DELH0
            H1=H1+DELH0*CXANG
            H2=H2+DELH0*PLEG2(CXANG)
            H3=H3+DELH0*PLEG3(CXANG)
            H4=H4+DELH0*PLEG4(CXANG)
          ELSE
            DELH0 = PPARI
            H0 = H0 + DELH0
            H1 = H1 + DELH0
            H2 = H2 + DELH0
            H3 = H3 + DELH0
            H4 = H4 + DELH0
          ENDIF
  102   CONTINUE
  101 CONTINUE
C---normalize and store result.
      QTBOR(1)=H0/SSS
      QTBOR(2)=H1/SSS
      QTBOR(3)=H2/SSS
      QTBOR(4)=H3/SSS
      QTBOR(5)=H4/SSS
  999 CONTINUE
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
