head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.22;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.23;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QVDHIT(ITRK, IVHIT)
CKEY VDET /USER
C-----------------------------------------------------------------------
C! Provide array of number of Vdet hits per layer for given track.
C
C S. Haywood     13-03-92
C Input:      ITRK      /I     Alpha track number
C Output:     IVHIT(1)  /I     Num Vdet hits in r-phi on inner layer
C             IVHIT(2)  /I     Num Vdet hits in r-phi on outer layer
C             IVHIT(3)  /I     Num Vdet hits in z     on inner layer
C             IVHIT(4)  /I     Num Vdet hits in z     on outer layer
C Note: r-phi = U and z = W in Vdet scheme.
C-----------------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
      PARAMETER (MXPAT=200)
      DIMENSION IPAT(MXPAT),IVHIT(4)
      SAVE LRUN,LEVT,JVI,IPAT
      DATA LRUN,LEVT / -999,-999 /
#include "qmacro.h"
C----------------------------------------------------------------------
      CALL VZERO(IVHIT,4)
      IF (ITRK.LT.KFCHT .OR. ITRK.GT.KLCHT) RETURN
C
C++   If we have a new event:
C++   for Mini, check existance of Vdet information and
C++   for DST, call VDHITS.
C
      IF (KEVT.NE.LEVT .OR. KRUN.NE.LRUN) THEN
         LEVT = KEVT
         LRUN = KRUN
         JVI = 0
         IF (XMINI) THEN
            MVER = MINGTV(DUM)
            IF (MVER.GE.70) JVI = 34
            IF (MVER.GE.90) JVI = 27
         ELSE
            IF (KNCHT.GT.MXPAT)
     &         CALL QWMESE('0QVDHIT: too many tracks - increase MXPAT')
            CALL VDHITS(IPAT,MXPAT)
         ENDIF
      ENDIF
C
C++   Return if Mini but no Vdet information.
C
      IF (XMINI .AND. JVI.EQ.0) RETURN
C
C++   Obtain hit pattern.
C
      IFRFT = ITRK - KFCHT + 1
      IF (XMINI) THEN
         KDTRA = IW(NADTRA)
         IPAT1 = ITABL(KDTRA,IFRFT,JVI)
      ELSE
         IPAT1 = IPAT(IFRFT)
      ENDIF
      IVHIT(1) = IAND(IPAT1,  3)
      IVHIT(2) = IAND(IPAT1, 12)/ 4
      IVHIT(3) = IAND(IPAT1, 48)/16
      IVHIT(4) = IAND(IPAT1,192)/64
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
