head	1.3;
access;
symbols
	alpha126_22:1.3
	alpha126_21:1.3
	alpha126_20:1.3
	alpha126_19:1.3
	alpha126_18:1.3
	alpha126_17:1.3
	alpha126_16:1.3
	alpha126_15:1.3
	alpha126_14:1.3
	alpha126_13:1.3
	alpha126_12:1.3
	alpha126_11:1.3
	alpha126_10:1.3
	alpha126_09:1.3
	alpha126_08:1.3
	alpha126_07:1.3
	alpha126_06:1.3
	alpha126_05:1.3
	alpha126_04:1.3
	alpha126_03:1.3
	alpha126_02:1.3
	alpha126_1:1.3
	alpha125_17:1.3
	alpha125_16:1.3
	alpha125_15:1.3
	alpha125_14:1.3
	alpha125_13:1.3
	alpha125_12:1.3
	alpha125_11:1.3
	alpha125_10:1.3
	alpha125_09:1.3
	alpha125_08:1.3
	alpha125_07:1.3
	alpha125_06:1.3
	alpha125_05:1.3
	alpha125_04:1.3
	alpha125_03:1.3
	alpha125_02:1.3
	alpha125_01:1.3
	alpha124_19:1.3
	alpha125:1.3
	alpha124_18:1.3
	alpha124_17:1.3
	alpha124_16:1.3
	alpha124_15:1.3
	alpha124_14:1.3
	alpha124_13:1.3
	alpha124_12:1.3
	alpha124_11:1.3
	alpha124_10:1.3
	alpha124_09:1.3
	alpha124_08:1.3
	alpha124_07:1.3
	alpha124_7:1.3
	alpha124_06:1.3
	alpha124_05:1.3
	alpha124_04:1.3
	alpha124_03:1.3
	alpha124_02:1.3
	alpha124_01:1.3
	alpha124:1.3
	alpha123_12:1.3
	alpha123_11:1.3
	alpha123_10:1.3
	alpha123_9:1.3
	alpha123_8:1.3
	alpha123_7:1.3
	alpha123_6:1.3
	alpha123_5:1.3
	alpha123_4:1.3
	alpha123_3:1.3
	alpha123_2:1.3
	alpha123:1.3
	alpha122_48:1.3
	alpha122_47:1.3
	alpha122_46:1.3
	alpha122_45:1.3
	alpha122_44:1.3
	alpha122_43:1.3
	alpha122_42:1.3
	alpha122_41:1.3
	alpha122_40:1.3
	alpha122_39:1.3
	alpha122_38:1.3
	alpha122_37:1.3
	alpha122_36:1.3
	alpha122_35:1.3
	alpha122_34:1.3
	alpha122_33:1.3
	alpha122_32:1.3
	alpha122_31:1.3
	alpha122_30:1.3
	alpha122_29:1.3
	alpha122_28:1.3
	alpha122_27:1.3
	alpha122_26:1.3
	alpha122_25:1.3
	alpha122_24:1.3
	alpha122_23:1.3
	alpha122_22:1.3
	alpha122_21:1.3
	alpha122_20:1.3
	alpha122_19:1.3
	alpha122_18:1.3
	alpha122_17:1.3
	alpha122_16:1.3
	alpha122_15:1.3
	alpha122_14:1.3
	alpha122_13:1.3
	alpha122_12:1.3
	alpha122_11:1.3
	alpha122_10:1.3
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.08.28.14.00.33;	author boucrot;	state Exp;
branches;
next	1.2;

1.2
date	96.08.27.14.48.13;	author boucrot;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.42.10;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.11;	author flr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@      SUBROUTINE MCMATCH(IMCTRK,IALTRK,IFLAG)
CKEY MATCHING / USER
C-------------------------------------------------------------------------------
C! Match a MC truth with reconstructed, and classify the track.
C  Author  Dave Brown, 7-6--94
C
C  Good tracks are classified according to the origin of the true track
C
C  Input argument :
C   IMCTRK = Input ALPHA track number
C  Output arguments :
C   IALTRK = Associated ALPHA MC true track if there's a reasonable match
C          = 0 otherwise
C   IFLAG = -3    No Match (lost track)
C           -2    Track decays before making hits
C           -1    No well matching track
C            0     mc track double counted
C            1     Normal good match from primary vertex
C            2     Normal good match from secondary vertex
C            3     Normal good match from V0 decay
C            4     Kink fit as 2 tracks
C            5     Kink fit as a single track
C            6     Normal good match from material interaction
C-------------------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
C
C  alpha variables
C
#include "qdecl.h"
#include "qcde.h"
C
C  IO variables
C
      INTEGER IALTRK,IFLAG,IMCTRK
C
C  Local variables
C
      INTEGER JALTRK,JMCTRK,JFLAG
      INTEGER NDAU
      INTEGER NMATCH,IMATCH
C
C  Functions
C
      INTEGER NAMIND
C
C  Inline functions
C
#include "qmacro.h"
C-------------------------------------------------------------------------------
C  Initialize variables
C
      IALTRK = 0
C
C  Get the MC true ITC/TPC hit matching
C
      NMATCH = KNMTCH(IMCTRK)
      IF (NMATCH.EQ.0) THEN
C
C  Lost track; Check if the particle decays
C
        NDAU = KNDAU(IMCTRK)
        IF (NDAU.GT.0) THEN
          IFLAG = -2
        ELSE
          IFLAG = -3
        END IF
        GOTO 999
      END IF
C
C  Look at the matches, and take the best one
C
      IFLAG = -1
      DO IMATCH=1,NMATCH
        JALTRK = KMTCH(IMCTRK,IMATCH)
        CALL JULMATCH(JALTRK,JMCTRK,JFLAG)
        IF (JMCTRK.EQ.IMCTRK) THEN
C
C  Check the history code and classify
C
          IF (JFLAG.GE.0) THEN
C
C  Good match; check that it hasn't already been matched
C
            IALTRK = JALTRK
            IF (IFLAG.GE.0) THEN
              IFLAG = 0
            ELSE
              IFLAG = JFLAG
            END IF
          END IF
        END IF
      END DO
 999  CONTINUE
C
      RETURN
      END
#endif
@


1.2
log
@*** empty log message ***
@
text
@d98 1
a98 1
#endif@


1.1
log
@Initial revision
@
text
@d25 1
d98 1
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
