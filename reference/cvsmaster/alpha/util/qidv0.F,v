head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.12;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.13;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QIDV0 (ITKV0, CNAM1, CNAM2)
CKEY PART /USER
C----------------------------------------------------------------------
C! Calculate mass for particle pointing to V0
C                                                    H.Albrecht 6.11.89
C----------------------------------------------------------------------
#ifndef DOC
#include "qcdesh.h"
      CHARACTER *(*) CNAM1, CNAM2
      DIMENSION ITK(2)
C-----------------------------------------------------------------------
      JR(J) = KOQVEC + ITKV0  * KCQVEC + J
      J1(J) = KOQVEC + ITK(1) * KCQVEC + J
      J2(J) = KOQVEC + ITK(2) * KCQVEC + J
      PX(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEQX)
      PY(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEQY)
      PZ(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEQZ)
      SXX(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM  )
      SXY(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM+1)
      SYY(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM+2)
      SXZ(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM+3)
      SYZ(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM+4)
      SZZ(I) = RW(KOQVEC + ITK(I) * KCQVEC + JQVEEM+5)
C-----------------------------------------------------------------------
C       daughter particles
C
      IF (IW(JR(JQVEND)) .NE. 2)  THEN
        IERR = IERR + 1
        IF (IERR .LE. 10)  CALL QWMESE
     &    ('_QIDV0_ Particle does not decay into 2 particles')
        GO TO 90
      ENDIF
      ITK(1) = IW(KOQLIN+1+IW(JR(JQVEDL)))
      ITK(2) = IW(KOQLIN+2+IW(JR(JQVEDL)))
C
C       basic track attributes :
C
      RW(JR(JQVEQX)) = PX(1) + PX(2)
      RW(JR(JQVEQY)) = PY(1) + PY(2)
      RW(JR(JQVEQZ)) = PZ(1) + PZ(2)
      RW(JR(JQVEQP)) = SQRT (RW(JR(JQVEQX))**2 + RW(JR(JQVEQY))**2 +
     &   RW(JR(JQVEQZ))**2)
      E1 = SQRT (RW(J1(JQVEQP))**2 +
     &  RW(KOQPAR+KPART(CNAM1)*KCQPAR+JQPAMA)**2)
      E2 = SQRT (RW(J2(JQVEQP))**2 +
     &  RW(KOQPAR+KPART(CNAM2)*KCQPAR+JQPAMA)**2)
      RW(JR(JQVEQE)) = AMAX1 (E1 + E2, RW(JR(JQVEQP)))
      RW(JR(JQVEQM)) = SQRT ((RW(JR(JQVEQE)) + RW(JR(JQVEQP))) *
     &  (RW(JR(JQVEQE)) - RW(JR(JQVEQP))))
      RW(JR(JQVECH)) = RW(J1(JQVECH)) + RW(J2(JQVECH))
C
C       error matrix :
C
      IF (RW(J1(JQVEEM)) .GT. 0. .AND. RW(J2(JQVEEM)) .GT. 0.)  THEN
        RW(JR(JQVEEM  )) = SXX(1) + SXX(2)
        RW(JR(JQVEEM+1)) = SXY(1) + SXY(2)
        RW(JR(JQVEEM+2)) = SYY(1) + SYY(2)
        RW(JR(JQVEEM+3)) = SXZ(1) + SXZ(2)
        RW(JR(JQVEEM+4)) = SYZ(1) + SYZ(2)
        RW(JR(JQVEEM+5)) = SZZ(1) + SZZ(2)
        RW(JR(JQVEEM+6)) =
     &    (PX(1) * SXX(1) + PY(1) * SXY(1) + PZ(1) * SXZ(1)) / E1 +
     &    (PX(2) * SXX(2) + PY(2) * SXY(2) + PZ(2) * SXZ(2)) / E2
        RW(JR(JQVEEM+7)) =
     &    (PX(1) * SXY(1) + PY(1) * SYY(1) + PZ(1) * SYZ(1)) / E1 +
     &    (PX(2) * SXY(2) + PY(2) * SYY(2) + PZ(2) * SYZ(2)) / E2
        RW(JR(JQVEEM+8)) =
     &    (PX(1) * SXZ(1) + PY(1) * SYZ(1) + PZ(1) * SZZ(1)) / E1 +
     &    (PX(2) * SXZ(2) + PY(2) * SYZ(2) + PZ(2) * SZZ(2)) / E2
        RW(JR(JQVEEM+9)) =
     &   (PX(1)**2 * SXX(1) + PY(1)**2 * SYY(1) + PZ(1)**2 * SZZ(1) +
     &   2. * (PX(1) * (PY(1) * SXY(1) + PZ(1) * SXZ(1)) +
     &   PY(1) * PZ(1) * SYZ(1))) / E1**2 +
     &   (PX(2)**2 * SXX(2) + PY(2)**2 * SYY(2) + PZ(2)**2 * SZZ(2) +
     &   2. * (PX(2) * (PY(2) * SXY(2) + PZ(2) * SXZ(2)) +
     &   PY(2) * PZ(2) * SYZ(2))) / E2**2
      ELSE
        RW(JR(JQVEEM)) = -1.
      ENDIF
      RW(JR(JQVECF)) = -1.
C
 90   END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
