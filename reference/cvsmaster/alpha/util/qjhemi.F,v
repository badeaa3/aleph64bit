head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.14;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.15;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QJHEMI (CSAM,COPP,ICLASS,ITKAXI,CUTCOS)
CKEY SHAPE /USER
C----------------------------------------------------------------------
C! Divide the event into 2 hemispheres
C                                                    H.Albrecht 22.2.89
C----------------------------------------------------------------------
#ifndef DOC
      CHARACTER *(*) CSAM,COPP
#include "qcde.h"
#include "qctbuf.h"
#include "qmacro.h"
C-----------------------------------------------------------------------
      CALL QJSET0 (ICLASS)
C
      QTBOX(1) = 0.
      QTBOY(1) = 0.
      QTBOZ(1) = 0.
      QTBOE(1) = 0.
      QTBOX(2) = 0.
      QTBOY(2) = 0.
      QTBOZ(2) = 0.
      QTBOE(2) = 0.
C
      PX = QX(ITKAXI)
      PY = QY(ITKAXI)
      PZ = QZ(ITKAXI)
      P  = QP(ITKAXI)
C
      DO 10 I=1,KTBI
        IF (PX * QX(KTBIT(I)) + PY * QY(KTBIT(I)) +
     &      PZ * QZ(KTBIT(I)) .GT. CUTCOS * P * QP(KTBIT(I)))  THEN
          QTBOX(1) = QTBOX(1) + QX(KTBIT(I))
          QTBOY(1) = QTBOY(1) + QY(KTBIT(I))
          QTBOZ(1) = QTBOZ(1) + QZ(KTBIT(I))
          QTBOE(1) = QTBOE(1) + QE(KTBIT(I))
          KTBOF(I) = 1
        ELSE
          QTBOX(2) = QTBOX(2) + QX(KTBIT(I))
          QTBOY(2) = QTBOY(2) + QY(KTBIT(I))
          QTBOZ(2) = QTBOZ(2) + QZ(KTBIT(I))
          QTBOE(2) = QTBOE(2) + QE(KTBIT(I))
          KTBOF(I) = 2
        ENDIF
   10 CONTINUE
C
      IF (CSAM .NE. ' ')  CALL QJSAVE (CSAM,1,ICLASS,0,0,1)
      IF (COPP .NE. ' ')  CALL QJSAVE (COPP,2,ICLASS,0,0,1)
C
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
