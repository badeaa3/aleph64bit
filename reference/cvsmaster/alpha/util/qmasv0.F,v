head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.21;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.22;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      FUNCTION QMASV0(I,CINP)
CKEY V0 KINEMATICS /USER
C----------------------------------------------------------------------
C! Calculate V0 invariant mass from r and b parameters (see ALEPH 88-46)
C  For gamma conversions, calculate invariant mass of daughters.
C
C   Author   : E. Blucher            19-APR-1989
C
C   Inputs:
C     I =  ALPHA V0 track number
C     CINP = V0 particle name:
C            GAMMA OR GA
C            K0s or K0
C            LAM0 or LA
C            LAM#0 or AL
C!======================================================================
#ifndef DOC
      SAVE INIT,AMASPI,AMASEL,AMASPR
#include "qcde.h"
      DATA INIT /0/
      CHARACTER *(*) CINP
      CHARACTER CNAM * 6, CTAB * 6, SPACES * 6
      DATA CNAM /' '/
#include "qmacro.h"
C----------------------------------------------------------------------
      IF (INIT .EQ. 0)  THEN
        INIT = 1
        N = KPCOMP ('PI+')
        AMASPI = RW(KOQPAR+N*KCQPAR+JQPAMA)
        N = KPCOMP ('E+')
        AMASEL = RW(KOQPAR+N*KCQPAR+JQPAMA)
        N = KPCOMP ('P')
        AMASPR = RW(KOQPAR+N*KCQPAR+JQPAMA)
      ENDIF
      CNAM = SPACES (CINP,0)
      CALL CLTOU (CNAM)
      IF(CNAM.EQ.'GAMMA '.OR.CNAM.EQ.'GA    ')THEN
        CALL QVSETM(KDAU(I,1),AMASEL)
        CALL QVSETM(KDAU(I,2),AMASEL)
        QMASV0=QM2(KDAU(I,1),KDAU(I,2))
        CALL QVSETM(KDAU(I,1),AMASPI)
        CALL QVSETM(KDAU(I,2),AMASPI)
        GOTO 999
      ELSEIF(CNAM.EQ.'K0S   '.OR.CNAM.EQ.'K0    ')THEN
        AM1=AMASPI
        AM2=AMASPI
      ELSEIF(CNAM.EQ.'LAM0  '.OR.CNAM.EQ.'LA    ')THEN
        IF(QCH(KDAU(I,1)).GT.0.)THEN
          AM1=AMASPR
          AM2=AMASPI
        ELSE
          AM1=AMASPI
          AM2=AMASPR
        ENDIF
      ELSEIF(CNAM.EQ.'LAM#0  '.OR.CNAM.EQ.'AL    ')THEN
        IF(QCH(KDAU(I,1)).GT.0.)THEN
          AM1=AMASPI
          AM2=AMASPR
        ELSE
          AM1=AMASPR
          AM2=AMASPI
        ENDIF
      ELSE
        CALL QWMESS('_QMASV0_ Incorrect particle name for V0')
        GOTO 999
      ENDIF
      PT=(QP(I)**2)/4.
      R=QYV0X1(I)
      B=QYV0X2(I)
      QMASV0=2.*SQRT((PT*(1.+R)**2 + B**2 + AM1**2)*
     & (PT*(1.-R)**2+ B**2 + AM2**2)) - 2.*(PT*(1-R**2) - B**2)
     & + AM1**2 + AM2**2
      QMASV0=QSQT(QMASV0)
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
