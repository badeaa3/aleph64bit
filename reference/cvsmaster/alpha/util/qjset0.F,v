head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.16;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.17;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QJSET0 (ICLASS)
CKEY JETS SHAPE /INTERNAL
C----------------------------------------------------------------------
C! Standard set-up for QJ routines : Get numbers
C                                          Author: H.Albrecht 22.2.89
C                                        Modified: E.Blucher  22.6.89
C                                        Modified: E.Blucher  28.9.91
C                                        Modified: E.Blucher  01.2.92
C  Completely rewritten to avoid ASSIGN statements J.Boucrot  24.9.93
C----------------------------------------------------------------------
#ifndef DOC
      SAVE IERR
      LOGICAL LOCKN, LOCK
#include "qcde.h"
#include "qctbuf.h"
      DATA IERR /0/
#include "qmacro.h"
C-----------------------------------------------------------------------
C  Local statement functions :
      NCLASS(I) = IW(KOQVEC+I*KCQVEC+JQVECL)
      NFOLLO(I) = IW(KOQVEC+I*KCQVEC+JQVENP)
      NBMASK(I,N) = IW(KOQVEC+I*KCQVEC+N+JQVEBM-1)
      LOCKN(I,N)=IAND(NBMASK(I,N),KLOCK0(N,KCLARM(NCLASS(I)))).NE.0
      LOCK(I)  = IW(KOQVEC+I*KCQVEC+JQVELK).NE.0.OR.LOCKN(I,1).OR.
     & LOCKN(I,2) .OR. LOCKN(I,3) .OR. LOCKN(I,4) .OR. LOCKN(I,5) .OR.
     & LOCKN(I,6) .OR. LOCKN(I,7) .OR. LOCKN(I,8) .OR. LOCKN(I,9) .OR.
     & LOCKN(I,10).OR.LOCKN(I,11).OR.LOCKN(I,12).OR.LOCKN(I,13).OR.
     & LOCKN(I,14)
C-----------------------------------------------------------------------
      KTBI = 0
      ICL = KSCOLD (ICLASS)
      IF (ICL .EQ. 0)  THEN
        IERR = IERR + 1
        IF (IERR .LT. 10)
     &    CALL QWMESE ('_QJSET0_ Track class does not exist')
        GO TO 900
      ENDIF
C
      IRM = KCLARM(ICL)
      IF (IRM .EQ. 1)  THEN
C
C         reco
C
        IJMP = 3
        GO TO (10,20,30,300,50,60,70,80), KJOPTN(1,1)
   10   N1 = KFCHT
        N2 = KLCHT
        GO TO 200
   20   N1 = KFCOT
        N2 = KLCOT
        GO TO 200
   30   N1 = KFRET
        N2 = KLRET
        GO TO 200
   50   N1 = KFRET
        N2 = KLDCT
        GO TO 200
C---Energy flow with cal objects plus tracks
   60   N1 = KFEFT
        N2 = KLEFT
        GO TO 200
   70   N1 = KFCHT
        N2 = KLCHT
        IF(KNCHT.NE.0.AND.
     &  (KFRIQF(KFCHT).LT.1.OR.KFRIQF(KFCHT).GT.4))CALL QMTERM
     &  ('_QJSET0_ JULIA Version too old to use PCPA')
        GOTO 200
   80   N1 = KFJET
        N2 = KLJET
        GO TO 200
      ELSE IF (IRM .EQ. 2)  THEN
C
C         MC
C
        GO TO (110,120,130,300), KJOPTN(2,1)
  110   N1 = KFMCT
        N2 = KLMCT
        IJMP = 1
        GO TO 200
  120   N1 = KFMCT
        N2 = KLMCT
        IJMP = 2
        GO TO 200
  130   N1 = KFMCT
        N2 = KLMCT
        IJMP = 3
        GO TO 200
      ELSE
        IERR = IERR + 1
        IF (IERR .LT. 10)
     &  CALL QWMESE ('_QJSET0_ Unknown origin (RECO or MC)')
        GO TO 900
      ENDIF
C
 200  CALL QJSET1 (IRM,N1,N2,ICL,IJMP)
C
  300 IF (KJOPTN(IRM,2) .EQ. 0)  GO TO 900
      IFP = IW(KOQPLI+KJOPTN(IRM,2))
      IF (IFP .EQ. 0)  GO TO 900
      ITK = IW(KOQFPA+IFP*KCQFPA+ICL)
C
  310 IF (ITK .EQ. 0)  GO TO 900
      IF (LOCK(ITK))  GO TO 320
      KTBI = KTBI + 1
      IF (KTBI .GT. KTBIMX)  CALL QMTERM
     &    ('_QJSET0_ Maximum number of particles exceeded')
      KTBIT(KTBI) = ITK
  320 ITK = NFOLLO (ITK)
      GO TO 310
C
  900 END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
