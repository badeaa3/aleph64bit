head	1.6;
access;
symbols
	alpha126_22:1.6
	alpha126_21:1.6
	alpha126_20:1.6
	alpha126_19:1.6
	alpha126_18:1.6
	alpha126_17:1.6
	alpha126_16:1.6
	alpha126_15:1.6
	alpha126_14:1.6
	alpha126_13:1.6
	alpha126_12:1.6
	alpha126_11:1.6
	alpha126_10:1.6
	alpha126_09:1.6
	alpha126_08:1.6
	alpha126_07:1.6
	alpha126_06:1.6
	alpha126_05:1.6
	alpha126_04:1.6
	alpha126_03:1.6
	alpha126_02:1.6
	alpha126_1:1.6
	alpha125_17:1.6
	alpha125_16:1.6
	alpha125_15:1.6
	alpha125_14:1.6
	alpha125_13:1.6
	alpha125_12:1.6
	alpha125_11:1.6
	alpha125_10:1.6
	alpha125_09:1.6
	alpha125_08:1.6
	alpha125_07:1.6
	alpha125_06:1.6
	alpha125_05:1.6
	alpha125_04:1.6
	alpha125_03:1.6
	alpha125_02:1.6
	alpha125_01:1.6
	alpha124_19:1.6
	alpha125:1.6
	alpha124_18:1.6
	alpha124_17:1.6
	alpha124_16:1.6
	alpha124_15:1.6
	alpha124_14:1.6
	alpha124_13:1.6
	alpha124_12:1.6
	alpha124_11:1.6
	alpha124_10:1.6
	alpha124_09:1.6
	alpha124_08:1.6
	alpha124_07:1.6
	alpha124_7:1.6
	alpha124_06:1.6
	alpha124_05:1.6
	alpha124_04:1.6
	alpha124_03:1.6
	alpha124_02:1.6
	alpha124_01:1.6
	alpha124:1.6
	alpha123_12:1.6
	alpha123_11:1.6
	alpha123_10:1.6
	alpha123_9:1.6
	alpha123_8:1.6
	alpha123_7:1.6
	alpha123_6:1.6
	alpha123_5:1.6
	alpha123_4:1.6
	alpha123_3:1.6
	alpha123_2:1.6
	alpha123:1.6
	alpha122_48:1.6
	alpha122_47:1.6
	alpha122_46:1.6
	alpha122_45:1.6
	alpha122_44:1.6
	alpha122_43:1.6
	alpha122_42:1.6
	alpha122_41:1.6
	alpha122_40:1.6
	alpha122_39:1.6
	alpha122_38:1.6
	alpha122_37:1.6
	alpha122_36:1.6
	alpha122_35:1.6
	alpha122_34:1.6
	alpha122_33:1.6
	alpha122_32:1.5
	alpha122_31:1.4
	alpha122_30:1.4
	alpha122_29:1.4
	alpha122_28:1.4
	alpha122_27:1.4
	alpha122_26:1.4
	alpha122_25:1.4
	alpha122_24:1.4
	alpha122_23:1.4
	alpha122_22:1.4
	alpha122_21:1.4
	alpha122_20:1.4
	alpha122_19:1.4
	alpha122_18:1.4
	alpha122_17:1.4
	alpha122_16:1.3
	alpha122_15:1.3
	alpha122_14:1.3
	alpha122_13:1.3
	alpha122_12:1.2
	alpha122_11:1.2
	alpha122_10:1.2
	alpha122_9:1.2
	alpha122_8:1.2
	alpha122_6:1.2
	alpha122_5:1.2
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.6
date	97.08.05.08.44.13;	author boucrot;	state Exp;
branches;
next	1.5;

1.5
date	97.06.24.11.10.41;	author boucrot;	state Exp;
branches;
next	1.4;

1.4
date	96.11.18.13.05.48;	author flr;	state Exp;
branches;
next	1.3;

1.3
date	96.10.23.14.18.41;	author boucrot;	state Exp;
branches;
next	1.2;

1.2
date	96.06.25.14.10.54;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.41.17;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.18;	author flr;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@      SUBROUTINE FIXGAEN
C ---------------------------------------------------------------------
C - Author: M.N Minard   940121   modified 970805
C!    Fix Gampek photon
C     Called from QFILL
C-    For all processing JULIA before ALEPHLIB 156
C-    uses Gain correction either from ECMC or Bank file
C-    for processing of minis before alephlib 156 , db 187
C-    uses correction routine to photon energy  CORAOLD/CORANEW
C-    The correction is done on the ALPHA GAT section
C ---------------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
#include "rhahjj.h"
      EXTERNAL CHAINT
      CHARACTER*4 CHAINT
      CHARACTER*4 NAMJUL
      CHARACTER*8 PRNAM
      COMMON / ECCMF / ECCM(36) ,NRMIN,NRMAX
      DATA ILVERMX / 157 /
      DATA IDBVERX / 187 /
      DATA ILVER2X / 203 /
      DATA IDBVE2X / 194 /
      DATA ALVERC, ICVERC /2*0/
#include "qmacro.h"
      JR(I) = KOQVEC + ILGAT * KCQVEC + I
      JQDET(I,N) = KOQDET + (KFFRD+I-1) * KCQDET + N
C ---------------------------------------------------------------------
C-    Check database , alephlib version
C
      KRHAH = IW(NARHAH)
      NRHAH=LROWS(KRHAH)
      IMINI = 0
      IJULI = 0
      DO 10 IRHAH = 1, NRHAH
        PRNAM(1:4) = CHAINT(ITABL(KRHAH,IRHAH,JRHAPN))
        PRNAM(5:8) = CHAINT(ITABL(KRHAH,IRHAH,JRHAPN+1))
        IF (PRNAM.EQ.'MINI ') THEN
          IMINI = 1
          IDVER = ITABL(KRHAH,IRHAH,JRHADV)
          ILVER = ITABL(KRHAH,IRHAH,JRHAAV)
        ENDIF
        IF(PRNAM.EQ.'JULIA') THEN
          IJULI = 1
          IDVER = ITABL(KRHAH,IRHAH,JRHADV)
          ILVER = ITABL(KRHAH,IRHAH,JRHAAV)
        ENDIF
 10   CONTINUE
      IF (IMINI.EQ.0) THEN
C
C-    REPG card only active on POT 
C
        IF(IW(NAMIND('REPG')).NE.0.OR.IW(NAMIND('REGA')).NE.0) THEN
          IF (ALVERC .EQ. 0) CALL ALVERS(ALVERC)
          IF (ICVERC .EQ. 0) CALL ADBVER(ICVERC,IDVERC)
          IDVER = ICVERC
          ILVER = NINT(10.*ALVERC)
       ENDIF
      ENDIF
      CALL ECGATI(KRUN)
C
C-   Determine if correction have to be applied
C
      IF(ILVER.GE.ILVER2X.OR.IDVER.GE.IDBVE2X) GO TO 999
C
C-    Correct each photon 
C
      DO ILGAT = KFGAT,KLGAT
C
C-    Loop on Gampex photon
C
      EN = QP(ILGAT)
      PH = QPH(ILGAT)
      TH = ACOS(QCT(ILGAT))
C
C-    Determine Module number
C
       IREG=2
       IF(COS(TH) .LT. -0.72) IREG=3
       IF(COS(TH) .GT.  0.72) IREG=1
C
       FIDEG = PH*180./PI
       IF(FIDEG .LT. 0.)FIDEG=FIDEG+360.
       IF(IREG .EQ. 1 .OR. IREG .EQ. 3) THEN
          FIGAC = FIDEG+16.875
          IF(FIGAC .GT. 360.) FIGAC=FIGAC-360.
          MODUX = AINT(FIGAC/30.)+1
       ENDIF
       IF(IREG .EQ. 2 ) THEN
          FIGAC=FIDEG+1.875
          IF(FIGAC .GT. 360.) FIGAC=FIGAC-360.
          MODUX = AINT(FIGAC/30.)+1
       ENDIF
       MODRE = MODUX+(IREG-1)*12
       IF(MODRE.GT.36) MODRE=36
C
C-     Calculate correction
C
       CORF = ECCM(MODRE)
       CORA =1.
       IF (ILVER.LT.ILVERMX.AND.IDVER.LT.IDBVERX) THEN
       CORA = CORANEW(EN,TH,PH,KRUN)*CORAOLD(EN,TH,KRUN)
       ENDIF
       IF (ILVER.LT.ILVER2X.AND.IDVER.LT.IDBVE2X) THEN
         IF (ILVER.GE.ILVERMX.AND.IDVER.GE.IDBVERX) THEN
         CORA = CORANEW(EN,TH,PH,KRUN)*CORAOL2(EN,TH,PH,KRUN)
         ENDIF
       ENDIF
       CORF = CORF*CORA
C
C-     Rescale Gat section px,py,pz,p,e
C
        PX = RW(JR(JQVEQX))
        PY = RW(JR(JQVEQY))
        PZ = RW(JR(JQVEQZ))
        PN = RW(JR(JQVEQP))
        RW(JR(JQVEQX)) = PX*CORF
        RW(JR(JQVEQY)) = PY*CORF
        RW(JR(JQVEQZ)) = PZ*CORF
        RW(JR(JQVEQP)) = PN* CORF
        RW(JR(JQVEQE)) = PN*CORF
       ENDDO
C
 999   RETURN
       END
#endif

@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
C - Author: M.N Minard          940121
d62 5
a66 1
C-   Determine Version of Gammas
d95 1
d127 1
@


1.4
log
@alpha122_17 with corr in qipbtag and fixgaen
@
text
@a28 3
C-    Dont execute for MCarlo datasets
      IF (KRUN.LE.2000) GO TO 999
C
@


1.3
log
@*** empty log message ***
@
text
@d24 1
d57 2
a58 2
          CALL ALVERS(ALVERC)
          CALL ADBVER(ICVERC,IDVERC)
@


1.2
log
@update alpha122 with corr.file no.5
@
text
@d30 1
d36 1
d45 5
d52 9
a60 6
          IDVER = ITABL(KRHAH,NRHAH-1,JRHADV)
          ILVER = ITABL(KRHAH,NRHAH-1,JRHAAV)
      IF(IW(NAMIND('REPG')).NE.0.OR.IW(NAMIND('REGA')).NE.0) THEN
          IDVER = ITABL(KRHAH,NRHAH,JRHADV)
          ILVER = ITABL(KRHAH,NRHAH,JRHAAV)
       endif
@


1.1
log
@Initial revision
@
text
@d28 2
a29 1
C
d111 1
a111 1
       RETURN
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
