head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.35;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.36;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QEXTRA(PIN,ICH,XTRAP,IFIRS)
CKEY  FILL / INTERNAL
C ------------------------------------------------------------------------------
C! Extrapolates tracks in Ecal
C  Called from FIXRTRL
C      Author  : M.N. Minard                 10/11/93
C
C Input : PIN  (7)       = x.y.z.px,py,pz,p of track to extrapolate
C         ICH            = Track charge
C Output: XTRAP(3,3)     = x,y,z coordinates of extrapolated point
C                          in each stack
C         IFIRS          = 1 if track extrapolate S1 , 2 in S2
C ------------------------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
      DIMENSION XTRAP(3,3),XDER(3,3)
      DIMENSION EVECT(7),EVECE(7),PLAN(4),XX(3)
      DIMENSION ITOW (3),PIN(7),IFIR(3)
      DIMENSION RECAL(3), ZECAL(3)
      DIMENSION RHCAL(2), ZHCAL(2)
      INTEGER   EFNDSC , EFNDMD
      EXTERNAL  EFNDSC , EFNDMD
      DATA RECAL / 190.7, 204.1, 219.5/
      DATA ZECAL / 259.0, 273.7, 290.1/
#include "bmacro.h"
C ------------------------------------------------------------------------------
C-    Initialisation counters & arrays
C
      CALL VZERO ( XTRAP,9  )
      CALL VZERO ( XDER ,9  )
      CALL VZERO ( IFIR ,3  )
C
C-    Point to the track
C
      CALL UCOPY (PIN,EVECT(1),7)
C
C-    Extrapolation in electromagnetic calorimeter
C
      K = 1
 30   CONTINUE
C
      CH = ICH
      RHO = RECAL(K)
      ZED = ZECAL(K)
      CALL AUHCYL(RHO,ZED,QMFLD,CH,EVECT,EVECE,IH)
C
      IF ( IH.EQ.0 ) THEN
C-    Not valid extrapolation
            GO TO 50
      ENDIF

C
C-    Get subcomponent and module
C
      CALL UCOPY(EVECE(1),XX,3)
      KSC = EFNDSC(XX)
      IMD = EFNDMD(KSC,XX)
C
C-    Get equation of plane in the stack
C
      CALL EPLMST('ALEPH',KSC,IMD,K,PLAN)
C
C-    Find intersection with plane
C
      CALL QFNDIN(EVECE,PLAN,IERR)
      IF(IERR.EQ.1) GO TO 10
      IFIR (K) = IFIR (K) + 1
C
C-    Store stack extrapolation
C
C-    Extrapolated point
        CALL UCOPY (EVECE(1),XTRAP(1,K),3)
C-    Direction cosines
        CALL UCOPY (EVECE(4),XDER (1,K),3)
C
C-    Calculate new impact
C
        CALL UCOPY ( EVECE(1),EVECT(1),6 )
C
C
C-    Prepare next point
C
      IF ( K.NE.3) THEN
         K = K+1
         GO TO 30
      ENDIF
 50   CONTINUE

C
 10   CONTINUE
      IFIRS = 0
      IF ( IFIR(1).EQ.1) IFIRS = 1
      IF (IFIR(2).EQ.1) IFIRS = 2
      IFIRT = 0
      DO 11 I=1,3
       IFIRT = IFIR(I)+IFIRT
 11   CONTINUE
      IF ( IFIRS.EQ.0.AND.IFIRT.EQ.1) IFIRS =0
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
