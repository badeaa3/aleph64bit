head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.58;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.59;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QVDROA (CNAM,ICL)
CKEY CLASS TRACKS /INTERNAL
C----------------------------------------------------------------------
C! Drop tracks with name CNAM in class ICL. CNAM = ' ' : all tracks.
C                                                    H.Albrecht  2.1.89
C----------------------------------------------------------------------
#ifndef DOC
#include "qcdesh.h"
      CHARACTER *(*) CNAM
C----------------------------------------------------------------------
      JJ(I,J) = KOQVEC + I * KCQVEC + J
      JF(I)  = KOQFPA + I * KCQFPA + ICL
C----------------------------------------------------------------------
C       special call : CNAM = ' '
C
      IF (CNAM .EQ. ' ')  THEN
        IFP1 = 1
        IFP2 = KNQFPA
      ELSE
        IFP1 = IW(KOQPLI+KPART(CNAM))
        IF (IFP1 .EQ. 0)  GO TO 190
        IFP2 = IFP1
      ENDIF
C
C        loop over all particles in QFPA
C
      DO 100 IFP = IFP1, IFP2
        ITK = IW(JF(IFP))
        IW(JF(IFP)) = 0
   10   IF (ITK .EQ. 0)  GO TO 100
        ITKN = IW(JJ(ITK,JQVENP))
C
C         unviolable track ?
C
        IF (ITK .LE. KLMCT)  THEN
          IW (JJ(ITK,JQVENP)) = IW(JF(IFP))
          IW(JF(IFP)) = ITK
          GO TO 90
        ENDIF
C
C         list of dropped tracks
C
        IW(JJ(ITK,JQVENP)) = KTDROP
        KTDROP = ITK
C
C         drop KSAME pointer
C
        ITK0 = IW(JJ(ITK,JQVESP))
        ITK1 = ITK0
   20   ITK2 = IW(JJ(ITK1,JQVESP))
        IF (ITK2 .NE. ITK)  THEN
          ITK1 = ITK2
          GO TO 20
        ENDIF
        IW(JJ(ITK1,JQVESP)) = ITK0
        IW(JJ(ITK,JQVESP)) = ITK
C
C          daughter - mother relation
C
        DO 50 N=1,IW(JJ(ITK,JQVENO))
          ITK1 = IW(KOQLIN+IW(JJ(ITK,JQVEOL))+N)
          IN = IW(JJ(ITK1,JQVEND))
          IL = IW(JJ(ITK1,JQVEDL))
          ID = 0
          DO 40 I=1,IN
            IF (IW(KOQLIN+IL+I) .EQ. ITK)  ID = 1
   40     IW(KOQLIN+IL+I) = IW(KOQLIN+IL+I+ID)
          IF (ID .NE. 0)  IW(JJ(ITK1,JQVEND)) = IW(JJ(ITK1,JQVEND)) - 1
   50   CONTINUE
C
C          mother - daughter relation
C
        DO 70 N=1,IW(JJ(ITK,JQVEND))
          ITK1 = IW(KOQLIN+IW(JJ(ITK,JQVEDL))+N)
          IN = IW(JJ(ITK1,JQVENO))
          IL = IW(JJ(ITK1,JQVEOL))
          ID = 0
          DO 60 I=1,IN
            IF (IW(KOQLIN+IL+I) .EQ. ITK)  ID = 1
   60     IW(KOQLIN+IL+I) = IW(KOQLIN+IL+I+ID)
          IF (ID .NE. 0)  IW(JJ(ITK1,JQVENO)) = IW(JJ(ITK1,JQVENO)) - 1
   70   CONTINUE
C
        IW(JJ(ITK,JQVEND)) = 0
        IW(JJ(ITK,JQVENO)) = 0
C
   90   ITK = ITKN
        GO TO 10
C
  100 CONTINUE
C
C         class empty ?
C
      IF (ICL .LE. 2)  GO TO 190
      IF (IFP1 .EQ. IFP2)  THEN
        DO 110 IFP = 1, KNQFPA
  110   IF (IW(JF(IFP)) .NE. 0)  GO TO 190
      ENDIF
C
      KCLACO(ICL) = KUNDEF
      KCLAFR(ICL) = 0
      KCLARM(ICL) = 0
C
  190 END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
