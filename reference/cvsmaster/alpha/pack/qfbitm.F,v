head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.35;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.36;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QFBITM
CKEY FILL MASKS /INTERNAL
C-----------------------------------------------------------------------
C! Fill bit masks for reconstructed particles
C!                                                   H.Albrecht 27.11.88
C!                                                   E.Blucher  25.07.90
C!                                    Modified       E.Blucher  03.02.93
C! called from QFILL to set bit masks for all reconstructed objects.
C! Entry pointQSBITM added to set bit mask for
C! single tracks -- called from KVSAVC.
C-----------------------------------------------------------------------
#ifndef DOC
      SAVE IERR,INIT,IECAL,IHCAL,NECAL,NHCAL,NWRD,NBIT
#include "qcde.h"
      DATA IERR /0/, INIT /0/
#include "qmacro.h"
      JQVEC(I,N) = KOQVEC + I * KCQVEC + N
C-----------------------------------------------------------------------
C
      IF (INIT .EQ. 0)  THEN
        INIT = 1
        IECAL = KPCOMP ('ECAL')
        NECAL = KFPADR (IECAL)
        IHCAL = KPCOMP ('HCAL')
        NHCAL = KFPADR (IHCAL)
      ENDIF
C
      NBIT = 0
      NWRD = 0
C
C       Charged tracks
C
      DO 60 ITK=KFCHT,KLCHT
        IF (NBIT .LT. 32)  THEN
          NBIT = NBIT + 1
        ELSE
          NBIT = 1
          NWRD = NWRD + 1
          IF (NWRD .GE. KLOCKM)  GO TO 800
        ENDIF
        IW(JQVEC(ITK,JQVEBM+NWRD)) = KBIT(NBIT)
C
        DO 30 I=1,KNECAL(ITK)
          ITKC = KECAL(ITK,I)
          IW(JQVEC(ITKC,JQVEBM+NWRD)) =
     &      IOR (IW(JQVEC(ITKC,JQVEBM+NWRD)), KBIT(NBIT))
          DO 20 IM=1,KNMOTH(ITKC)
   20     IW(JQVEC(KMOTH(ITKC,IM),JQVEBM+NWRD)) =
     &       IOR (IW(JQVEC(KMOTH(ITKC,IM),JQVEBM+NWRD)), KBIT(NBIT))
   30   CONTINUE
C
        DO 50 I=1,KNHCAL(ITK)
          ITKC = KHCAL(ITK,I)
          IW(JQVEC(ITKC,JQVEBM+NWRD)) =
     &      IOR (IW(JQVEC(ITKC,JQVEBM+NWRD)), KBIT(NBIT))
          DO 40 IM=1,KNMOTH(ITKC)
   40     IW(JQVEC(KMOTH(ITKC,IM),JQVEBM+NWRD)) =
     &       IOR (IW(JQVEC(KMOTH(ITKC,IM),JQVEBM+NWRD)), KBIT(NBIT))
   50   CONTINUE
   60 CONTINUE
C
C       Ecal objects
C
      ITK = IW(KOQFPA+NECAL*KCQFPA+1)
  110 IF (ITK .EQ. 0)  GO TO 200
      IF (NBIT .LT. 32)  THEN
        NBIT = NBIT + 1
      ELSE
        NBIT = 1
        NWRD = NWRD + 1
        IF (NWRD .GE. KLOCKM)  GO TO 800
      ENDIF
      IW(JQVEC(ITK,JQVEBM+NWRD)) =
     &     IOR (IW(JQVEC(ITK,JQVEBM+NWRD)), KBIT(NBIT))
C
C            go along KSAME pointer
C
      ITKS = KSAME (ITK)
  120 IF (ITKS .EQ. ITK)  GO TO 130
      IW(JQVEC(ITKS,JQVEBM+NWRD)) =
     &     IOR (IW(JQVEC(ITKS,JQVEBM+NWRD)), KBIT(NBIT))
      ITKS = KSAME (ITKS)
      GO TO 120
C
C            composite cal objects
C
 130  IF (KNMOTH(ITK).LE.0) GO TO 150
      DO 140 I=1,KNMOTH(ITK)
  140 IW(JQVEC(KMOTH(ITK,I),JQVEBM+NWRD)) =
     &     IOR (IW(JQVEC(KMOTH(ITK,I),JQVEBM+NWRD)), KBIT(NBIT))
 150  CONTINUE
C
      ITK = IW(KOQVEC+ITK*KCQVEC+JQVENP)
      GO TO 110
C
C       Hcal objects
C
  200 ITK = IW(KOQFPA+NHCAL*KCQFPA+1)
  210 IF (ITK .EQ. 0)  GO TO 900
      IF (NBIT .LT. 32)  THEN
        NBIT = NBIT + 1
      ELSE
        NBIT = 1
        NWRD = NWRD + 1
        IF (NWRD .GE. KLOCKM)  GO TO 800
      ENDIF
      IW(JQVEC(ITK,JQVEBM+NWRD)) =
     &     IOR (IW(JQVEC(ITK,JQVEBM+NWRD)), KBIT(NBIT))
C
C            go along KSAME pointer
C
      ITKS = KSAME (ITK)
  220 IF (ITKS .EQ. ITK)  GO TO 230
      IW(JQVEC(ITKS,JQVEBM+NWRD)) =
     &     IOR (IW(JQVEC(ITKS,JQVEBM+NWRD)), KBIT(NBIT))
      ITKS = KSAME (ITKS)
      GO TO 220
C
C            composite cal objects
C
 230  IF (KNMOTH(ITK).LE.0) GO TO 250
      DO 240 I=1,KNMOTH(ITK)
  240 IW(JQVEC(KMOTH(ITK,I),JQVEBM+NWRD)) =
     &    IOR (IW(JQVEC(KMOTH(ITK,I),JQVEBM+NWRD)), KBIT(NBIT))
C
 250  CONTINUE
      ITK = IW(KOQVEC+ITK*KCQVEC+JQVENP)
      GO TO 210
C
C   entry point for single tracks
C
      ENTRY QSBITM(IDUM)
      IF (NBIT.GE.NBITW-1.AND.NWRD.GE.KLOCKM-1) GO TO 800
        IF (NBIT .LT. 32)  THEN
          NBIT = NBIT + 1
        ELSE
          NBIT = 1
          NWRD = NWRD + 1
          IF (NWRD .GE. KLOCKM)  GO TO 800
        ENDIF
        IW(JQVEC(IDUM,JQVEBM+NWRD)) = KBIT(NBIT)
      GOTO 900
C
C       more than 448 reconstructed objects
C
  800 IERR = IERR + 1
      IF (IERR .LE. 10)  CALL QWMESE
     &  ('_QFBITM_ More than 448 objects. Lock will not work')
C
  900 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
