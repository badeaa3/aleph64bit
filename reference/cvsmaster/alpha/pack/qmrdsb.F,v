head	1.6;
access;
symbols
	alpha126_22:1.6
	alpha126_21:1.6
	alpha126_20:1.6
	alpha126_19:1.6
	alpha126_18:1.6
	alpha126_17:1.6
	alpha126_16:1.6
	alpha126_15:1.6
	alpha126_14:1.6
	alpha126_13:1.6
	alpha126_12:1.6
	alpha126_11:1.6
	alpha126_10:1.6
	alpha126_09:1.5
	alpha126_08:1.5
	alpha126_07:1.5
	alpha126_06:1.5
	alpha126_05:1.5
	alpha126_04:1.5
	alpha126_03:1.5
	alpha126_02:1.5
	alpha126_1:1.5
	alpha125_17:1.5
	alpha125_16:1.5
	alpha125_15:1.5
	alpha125_14:1.5
	alpha125_13:1.5
	alpha125_12:1.5
	alpha125_11:1.5
	alpha125_10:1.5
	alpha125_09:1.5
	alpha125_08:1.5
	alpha125_07:1.5
	alpha125_06:1.5
	alpha125_05:1.5
	alpha125_04:1.5
	alpha125_03:1.5
	alpha125_02:1.5
	alpha125_01:1.5
	alpha124_19:1.5
	alpha125:1.5
	alpha124_18:1.5
	alpha124_17:1.5
	alpha124_16:1.5
	alpha124_15:1.5
	alpha124_14:1.5
	alpha124_13:1.5
	alpha124_12:1.5
	alpha124_11:1.5
	alpha124_10:1.5
	alpha124_09:1.5
	alpha124_08:1.5
	alpha124_07:1.5
	alpha124_7:1.5
	alpha124_06:1.5
	alpha124_05:1.5
	alpha124_04:1.5
	alpha124_03:1.5
	alpha124_02:1.5
	alpha124_01:1.5
	alpha124:1.5
	alpha123_12:1.5
	alpha123_11:1.5
	alpha123_10:1.5
	alpha123_9:1.5
	alpha123_8:1.5
	alpha123_7:1.5
	alpha123_6:1.5
	alpha123_5:1.5
	alpha123_4:1.5
	alpha123_3:1.5
	alpha123_2:1.5
	alpha123:1.5
	alpha122_48:1.5
	alpha122_47:1.5
	alpha122_46:1.5
	alpha122_45:1.5
	alpha122_44:1.5
	alpha122_43:1.5
	alpha122_42:1.5
	alpha122_41:1.5
	alpha122_40:1.5
	alpha122_39:1.5
	alpha122_38:1.5
	alpha122_37:1.5
	alpha122_36:1.5
	alpha122_35:1.5
	alpha122_34:1.5
	alpha122_33:1.5
	alpha122_32:1.5
	alpha122_31:1.5
	alpha122_30:1.5
	alpha122_29:1.5
	alpha122_28:1.4
	alpha122_27:1.4
	alpha122_26:1.4
	alpha122_25:1.4
	alpha122_24:1.4
	alpha122_23:1.4
	alpha122_22:1.4
	alpha122_21:1.4
	alpha122_20:1.4
	alpha122_19:1.4
	alpha122_18:1.4
	alpha122_17:1.4
	alpha122_16:1.4
	alpha122_15:1.4
	alpha122_14:1.4
	alpha122_13:1.4
	alpha122_12:1.4
	alpha122_11:1.4
	alpha122_10:1.4
	alpha122_9:1.4
	alpha122_8:1.4
	alpha122_6:1.2
	alpha122_5:1.2
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.6
date	2001.06.21.08.53.18;	author boucrot;	state Exp;
branches;
next	1.5;

1.5
date	97.05.13.11.54.51;	author boucrot;	state Exp;
branches;
next	1.4;

1.4
date	96.07.12.14.46.24;	author flr;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.12.15.01;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	96.06.25.14.11.15;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.41.50;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.51;	author flr;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@      SUBROUTINE QMRDSB(IEND)
CKEY EVENT /INTERNAL
C----------------------------------------------------------------------
C! read next event.
C  called from QMREAD
C                                        Author:    H.Albrecht 20.09.88
C                                        Modified:  E.Blucher  01.06.89
C                                        Modified:  M.Talby    17.07.89
C                                        Modified:  E.Blucher  27.07.90
C                                        Modified:  G.Graefe   13.07.94
C                                        Modified:  T.Oest     26.07.95
C                                        Modified:  I.Tomalin  14.05.97 
C                                        Modified:  J.Boucrot  21.06.01
C----------------------------------------------------------------------
#ifndef DOC
      SAVE LNEWR,IROLD,IEOLD
C
      DIMENSION LINDAT(2),LUTDAT(5)
      DIMENSION IPV(10),IAV(10)
#include "qcdesh.h"
      INTEGER BKINCA
      LOGICAL LNEWR
      LOGICAL CHKCLAS
      CHARACTER * 50 MESS
      COMMON / ALFORMA / LUFORM,IFALARM
C
      DATA LNEWR /.TRUE./, IROLD /0/, IEOLD /0/
C----------------------------------------------------------------------
      IEND=0
C
C       get next record
C
 1    CONTINUE
      KCLASW = 0
      CALL ABRSEL ('E', CQUNPK, IRET)
C       get record class word if read from EDIR
      CALL ABGTCL ( KCLASW )
C
C       determine whether we are reading a Mini or a Nano , or not :
C
      IF (IRET.LE.2) THEN
         CALL ALVSN(ITYP,IPV,IAV,IYR)
         INDATA=ITYP
         IF (ITYP.EQ.5) THEN
            XMINI = .TRUE.
         ELSE
            XMINI = .FALSE.
         ENDIF
         IF (ITYP.EQ.7) THEN
            XNANO = .TRUE.
         ELSE
            XNANO = .FALSE.
         ENDIF
      ELSE
         INDATA = 0
      ENDIF
C
C If one reads a MINI and if the BOS banks format reading was not OK ,
C one must stop the job :
C
      IF (XMINI.AND.IFALARM.NE.0) THEN
         CALL QMTERM
     +   ('_QMRDSB_ Error in BOS formats when reading a MINI')
         GO TO 900
      ENDIF
C
C       clear ALPHA banks
C
      IF (.NOT. XCOPYJ)  CALL QMCLR
C
      GO TO ( 10, 20, 30,  1, 50, 60, 70, 80, 90,130,
     +       110,120,130,140,150,160,170,180,190,200,210), IRET
C----------------------------------------------------------------------
C       event record
C
 10   CONTINUE
      IF (KCLASW.EQ.0) THEN
C       do NOT check class if only 1 bank (laser event)
C
        IF (IGTLEN(IW,'E') .GT. 1) THEN
C         class word not read from EDIR , get it from REVH bank
C         skip the event if not selected
C         Don't check for class if input is a NanoDst
          IF (.NOT.CHKCLAS(KCLASW).AND..NOT.XNANO) GO TO 1
        ELSE
C         skip empty events if specific edir classes requested.   
          CALL ABGTRCL (MASKR)        
          IF (MASKR.NE.0) GO TO 1
        ENDIF
      ENDIF
C
      KNREIN = KNREIN + 1
      KFFILL = 0
      KNEVT = KNEVT + 1
      KNEFIL = KNEFIL + 1
      XWREVT = .FALSE.
      CALL ABRUEV (KRUN, KEVT)
      CALL ALEVNUM(1,KRUN,KEVT)
      IF (IROLD - KRUN)  12, 13, 11
C
 11   IF (.NOT.XNSEQ) CALL QWMESE
     +  ('_QMREAD_ Run numbers on input file not in increasing order')
 12   IF (.NOT. LNEWR)
     +  CALL QWMESE ('_QMREAD_ New run - no run record found')
      CALL ABOLDR (-KRUN)
      LNEWR = .FALSE.
      IROLD = KRUN
      IEOLD = 0
      GO TO 19
 13   IF (LNEWR)  THEN
C         run record was preceded by events of the same run :
        CALL QMNEWR (KRUN, KRUN)
        LNEWR = .FALSE.
      ENDIF
      IF (IEOLD - KEVT)  19, 14, 15
 14   MESS = 'Same run/event number as previous event. Skipped'
      GO TO 400
 15   IF(.NOT.XNSEQ)CALL QWMESE
     +  ('_QMREAD_ Event numbers on input file not increasing order')
 19   IF (KNEFIL .EQ. 1)  CALL QWMESE
     +    ('_QMREAD_ First selected event on input file ')
#if defined(UNIX)
C_PVM
C
C    PVM: send new event to slave
C
      IEOLD = KEVT
      CALL QPVMES(KRUN,KEVT,IRET,IEND)
C_PVM
#endif
      GO TO 900
C----------------------------------------------------------------------
C       run record
C
 20   KNREIN = KNREIN + 1
C
C       special treatment of run number = infinity
C       remove if run numbers on POT are ok.
C       In future, these run numbers may be ok !
C
      CALL ABRUEV (I, DUMMY)
      IF (I .GT. 99999)  THEN
        CALL QWMESE ('_QMREAD_ New run number > 99999')
        GO TO 1
      ENDIF
      KRUN = I
C       Replace the previous statements by
C...  CALL ABRUEV (KRUN, DUMMY)
      IF (KRUN .NE. IROLD)  KEVT = 0
      LNEWR = .TRUE.
C
      XWRRUN = .FALSE.
      IF (KFEOUT .EQ. 2)  XWRRUN = .TRUE.
      IF (KFEOUT .EQ. 0)  CALL QWRUNR
C
      IF (IROLD.GT.KRUN.AND.(.NOT.XNSEQ))  CALL QWMESE
     +  ('_QMREAD_ Run numbers on input file not in increasing order')
      GO TO 1
C----------------------------------------------------------------------
C       special records
C
 30   KNREIN = KNREIN + 1
      KEVT = 0
      XWREVT = .FALSE.
      CALL QMSREC
      IF (.NOT. XSREC)  GO TO 1
C       write special records only if the current run is selected
      CALL ABSEVT (KRUN, 0, IRET)
      IF (IRET .NE. 1)  GO TO 1
      CALL QWRITE
      CALL ABCLAS (-1)
      GO TO 1
C
C       end of file
C
 50   CONTINUE
      KNEFIL = 0
      KNREIN = 0
      GO TO 1
C
C       normal end of job
C
 60   MESS = 'All event input files are processed'
      GO TO 300
 70   MESS = 'NEVT card : all events processed'
      GO TO 300
 80   IF(XNSEQ)GOTO 1
      MESS = 'SEVT / SRUN card : all events processed'
      GO TO 300
 90   MESS = 'Time Limit Reached'
      GO TO 300
 110  MESS = 'Error in SEVT,NEVT,SRUN,IRUN,TIME, or CLAS card'
      GO TO 300
 120  MESS = 'Read error in event directory'
      GO TO 300
 130  MESS = 'Error in FILI cards'
      GO TO 300
 140  MESS = 'Input file cannot be opened'
      GO TO 300
 150  MESS = 'Error in FILO cards'
      GO TO 300
 160  MESS = 'Output file cannot be opened'
      GO TO 300
C----------------------------------------------------------------------
C       error conditions :
C
 170  MESS = 'Read error. Record skipped.'
      GO TO 400
 180  MESS = 'Error on decompressing. Record skipped.'
      GO TO 400
 190  MESS = 'Not enough space for unpacking. Record skipped.'
      GO TO 400
 200  MESS = 'TPC unpacking error. Record skipped.'
      GO TO 400
 210  MESS = 'Error in data base reading. Record skipped.'
      GO TO 400
C
 300  CALL QWMESE ('0_QMREAD_ ' // MESS)
      IEND=1
      GOTO 900
C
 400  CALL QWMESE ('_QMREAD_ ' // MESS)
      GO TO 1
C
 900  CONTINUE
#if defined(UNIX)
C_PVM
C
C    GOTO 1, IF PVM MASTER PROCESS
C
      IF (IEND.EQ.0) CALL QPVMGT(*1)
C_PVM
#endif
      END
#endif
@


1.5
log
@*** empty log message ***
@
text
@d13 1
d98 1
@


1.4
log
@alpha122.08: keep laser events but do not check class word
@
text
@a9 1
C                                        Modified:  G.Graefe   22.04.94
d12 1
d84 4
@


1.3
log
@skip laser events in qmrdsb corr.file 122.07
@
text
@d77 1
a77 2
C       reject event if only 1 bank (laser event)
         IF (IGTLEN(IW,'E') .EQ. 1) GOTO 1
d79 6
a84 4
C       class word not read from EDIR , get it from REVH bank
C       skip the event if not selected
C       Don't check for class if input is a NanoDst
         IF (.NOT.CHKCLAS(KCLASW).AND..NOT.XNANO) GO TO 1
@


1.2
log
@update alpha122 with corr.file no.5
@
text
@a19 2
#include "evehjj.h"
#include "runhjj.h"
d77 3
a81 1
C
a82 1
C
@


1.1
log
@Initial revision
@
text
@d26 1
d38 1
a38 1
      CALL ABGTWCL (KCLASW)
d57 9
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
