head	1.2;
access;
symbols
	alpha126_22:1.2
	alpha126_21:1.2
	alpha126_20:1.2
	alpha126_19:1.2
	alpha126_18:1.2
	alpha126_17:1.2
	alpha126_16:1.2
	alpha126_15:1.2
	alpha126_14:1.2
	alpha126_13:1.2
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.2
date	2001.09.10.07.11.15;	author alphy;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.41.35;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.36;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@      SUBROUTINE QETHPH ( XPHI , XTET , SK ,EPHI , ETET  )
CKEY  FILL / INTERNAL
C ------------------------------------------------------------------------------
C! From Space coordinate calculate PHI, TETA ,IK in Ecal numbering
C  Called from FIXRTRL
C                                    Author M.N Minard 10/11/93
C
C      Input    XPHI   Phi angle in radian
C               XTET   Theta angle in radian
C               SK     Stack number for extrapolation
C      Output   ETET   Theta in ECAL numbering
C               EPHI   Phi in ECAL numbering
C ------------------------------------------------------------------------------
#ifndef DOC
       EXTERNAL EFNDSC,EFNDMD,EFNDCL,EFNDLG,EFNDST
       INTEGER EFNDSC,EFNDMD,EFNDCL,EFNDST,EFNDLG
       DIMENSION PIN (3,2) , POUT (3,2) ,PVAL(3)
       DIMENSION DIR (3) , VMID (3),VEDG(3)
       DOUBLE PRECISION DINF,DSUP
       CHARACTER*16 WRONG
C ------------------------------------------------------------------------------
       DIR (1 ) = COS (XPHI) * SIN(XTET)
       DIR (2) = SIN(XPHI) * SIN (XTET)
       DIR ( 3 ) = COS (XTET)
       CALL EMPACT ( DIR , NSC , PIN ,POUT)
       IF (  NSC.EQ.0) NSC = 1
       DO 10 IL =1,3
       PVAL( IL ) = PIN (IL,1)+SK*(POUT(IL,NSC)-PIN(IL,1))
 10    CONTINUE
       ISC = EFNDSC(PVAL)
       IMOD = EFNDMD(ISC,PVAL)
       ICOL = EFNDCL(ISC,IMOD,PVAL,'ALEPH')
       IROW = EFNDLG(ISC,IMOD,PVAL,'ALEPH')
       IK   = EFNDST(ISC,IMOD,PVAL,'ALEPH')
       ROW = IROW
       COL = ICOL
       SK = IK
       CALL ESRPT ('ALEPH',ROW,COL,SK,VMID)
       CALL ESRPT ('ALEPH',ROW+0.5,COL+0.5,SK,VEDG)
       DTHIT = ATAN2 (SQRT(PVAL(1)**2+PVAL(2)**2),PVAL(3))-
     &         ATAN2 (SQRT(VMID(1)**2+VMID(2)**2),VMID(3))
       DTREF = ATAN2 (SQRT(VEDG(1)**2+VEDG(2)**2),VEDG(3))-
     &         ATAN2 (SQRT(VMID(1)**2+VMID(2)**2),VMID(3))
       DROW =  DTHIT/DTREF
C We need double precision for DINF and DSUP to avoid division by zero
       DSUP=ATAN2(DBLE(PVAL(2)),DBLE(PVAL(1)))
     &      -ATAN2(DBLE(VMID(2)),DBLE(VMID(1)))
       DINF=ATAN2(DBLE(VEDG(2)),DBLE(VEDG(1)))
     &      -ATAN2(DBLE(VMID(2)),DBLE(VMID(1)))
       DCOL =DSUP/DINF
       EPHI = COL + DCOL
       ETET = ROW + DROW
       RETURN
       END
#endif
@


1.1
log
@Initial revision
@
text
@d19 1
d45 6
a50 2
       DCOL =(ATAN2(PVAL(2),PVAL(1))-ATAN2(VMID(2),VMID(1)))
     &      / (ATAN2(VEDG(2),VEDG(1))-ATAN2(VMID(2),VMID(1)))
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
