head	1.2;
access;
symbols
	alpha126_22:1.2
	alpha126_21:1.2
	alpha126_20:1.2
	alpha126_19:1.2
	alpha126_18:1.2
	alpha126_17:1.2
	alpha126_16:1.2
	alpha126_15:1.2
	alpha126_14:1.2
	alpha126_13:1.2
	alpha126_12:1.2
	alpha126_11:1.2
	alpha126_10:1.2
	alpha126_09:1.2
	alpha126_08:1.2
	alpha126_07:1.2
	alpha126_06:1.2
	alpha126_05:1.2
	alpha126_04:1.2
	alpha126_03:1.2
	alpha126_02:1.2
	alpha126_1:1.2
	alpha125_17:1.2
	alpha125_16:1.2
	alpha125_15:1.2
	alpha125_14:1.2
	alpha125_13:1.2
	alpha125_12:1.2
	alpha125_11:1.2
	alpha125_10:1.2
	alpha125_09:1.2
	alpha125_08:1.2
	alpha125_07:1.2
	alpha125_06:1.2
	alpha125_05:1.2
	alpha125_04:1.2
	alpha125_03:1.2
	alpha125_02:1.2
	alpha125_01:1.2
	alpha124_19:1.2
	alpha125:1.2
	alpha124_18:1.2
	alpha124_17:1.2
	alpha124_16:1.2
	alpha124_15:1.2
	alpha124_14:1.2
	alpha124_13:1.2
	alpha124_12:1.2
	alpha124_11:1.2
	alpha124_10:1.2
	alpha124_09:1.2
	alpha124_08:1.2
	alpha124_07:1.2
	alpha124_7:1.2
	alpha124_06:1.2
	alpha124_05:1.2
	alpha124_04:1.2
	alpha124_03:1.2
	alpha124_02:1.2
	alpha124_01:1.2
	alpha124:1.2
	alpha123_12:1.2
	alpha123_11:1.2
	alpha123_10:1.2
	alpha123_9:1.2
	alpha123_8:1.2
	alpha123_7:1.2
	alpha123_6:1.2
	alpha123_5:1.2
	alpha123_4:1.2
	alpha123_3:1.2
	alpha123_2:1.2
	alpha123:1.2
	alpha122_48:1.2
	alpha122_47:1.2
	alpha122_46:1.2
	alpha122_45:1.2
	alpha122_44:1.2
	alpha122_43:1.2
	alpha122_42:1.2
	alpha122_41:1.2
	alpha122_40:1.2
	alpha122_39:1.2
	alpha122_38:1.2
	alpha122_37:1.2
	alpha122_36:1.2
	alpha122_35:1.2
	alpha122_34:1.2
	alpha122_33:1.2
	alpha122_32:1.2
	alpha122_31:1.2
	alpha122_30:1.2
	alpha122_29:1.2
	alpha122_28:1.2
	alpha122_27:1.2
	alpha122_26:1.2
	alpha122_25:1.2
	alpha122_24:1.2
	alpha122_23:1.2
	alpha122_22:1.2
	alpha122_21:1.2
	alpha122_20:1.2
	alpha122_19:1.2
	alpha122_18:1.2
	alpha122_17:1.2
	alpha122_16:1.2
	alpha122_15:1.2
	alpha122_14:1.2
	alpha122_13:1.2
	alpha122_12:1.2
	alpha122_11:1.2
	alpha122_10:1.2
	alpha122_9:1.2
	alpha122_8:1.2
	alpha122_6:1.2
	alpha122_5:1.2
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.06.25.14.11.03;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.41.35;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.36;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update alpha122 with corr.file no.5
@
text
@      SUBROUTINE QFCADD (NTO, NFROM)
CKEY FILL CAL /INTERNAL
C----------------------------------------------------------------------
C! add 4-momenta of the composite calorimeter object NTO.
C! Called once for each contributing ECAL/HCAL object NFROM.
C
C! called from QFCASC
C!                                                   H.Albrecht 27.2.89
C----------------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
#include "qmacro.h"
      JQVEC(I,N) = KOQVEC + I * KCQVEC + N
C----------------------------------------------------------------------
C
      IF (XECAL(NFROM).AND.KNHCAL(NFROM).GT.0)  THEN
C
C       ECAL is ass. to several HCAL objects. Distribute the energy
C       equally amongst all composite objects.
C       Future : find a better solution but do not count energy twice!
C
        WEIGHT = 1. / FLOAT (KNHCAL(NFROM))
      ELSE
        WEIGHT = 1.
      ENDIF
C
C           add 4-momenta
C
      RW(JQVEC(NTO,JQVEQX)) = RW(JQVEC(NTO,JQVEQX)) +
     &  WEIGHT * RW(JQVEC(NFROM,JQVEQX))
      RW(JQVEC(NTO,JQVEQY)) = RW(JQVEC(NTO,JQVEQY)) +
     &  WEIGHT * RW(JQVEC(NFROM,JQVEQY))
      RW(JQVEC(NTO,JQVEQZ)) = RW(JQVEC(NTO,JQVEQZ)) +
     &  WEIGHT * RW(JQVEC(NFROM,JQVEQZ))
      RW(JQVEC(NTO,JQVEQE)) = RW(JQVEC(NTO,JQVEQE)) +
     &  WEIGHT * RW(JQVEC(NFROM,JQVEQE))
C
      W2 = WEIGHT**2
      RW(JQVEC(NTO,JQVEEM)) = RW(JQVEC(NTO,JQVEEM)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM))
      RW(JQVEC(NTO,JQVEEM+1)) = RW(JQVEC(NTO,JQVEEM+1)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+1))
      RW(JQVEC(NTO,JQVEEM+2)) = RW(JQVEC(NTO,JQVEEM+2)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+2))
      RW(JQVEC(NTO,JQVEEM+3)) = RW(JQVEC(NTO,JQVEEM+3)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+3))
      RW(JQVEC(NTO,JQVEEM+4)) = RW(JQVEC(NTO,JQVEEM+4)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+4))
      RW(JQVEC(NTO,JQVEEM+5)) = RW(JQVEC(NTO,JQVEEM+5)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+5))
      RW(JQVEC(NTO,JQVEEM+6)) = RW(JQVEC(NTO,JQVEEM+6)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+6))
      RW(JQVEC(NTO,JQVEEM+7)) = RW(JQVEC(NTO,JQVEEM+7)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+7))
      RW(JQVEC(NTO,JQVEEM+8)) = RW(JQVEC(NTO,JQVEEM+8)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+8))
      RW(JQVEC(NTO,JQVEEM+9)) = RW(JQVEC(NTO,JQVEEM+9)) +
     &  W2 * RW(JQVEC(NFROM,JQVEEM+9))
C
      END
#endif
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
      IF (XECAL(NFROM))  THEN
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
