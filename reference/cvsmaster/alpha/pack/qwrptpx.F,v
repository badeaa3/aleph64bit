head	1.1;
access;
symbols
	alpha126_22:1.1
	alpha122_22:1.1
	alpha126_21:1.1
	alpha126_20:1.1
	alpha126_19:1.1
	alpha126_18:1.1
	alpha126_17:1.1
	alpha126_16:1.1
	alpha126_15:1.1
	alpha126_14:1.1
	alpha126_13:1.1
	alpha126_12:1.1
	alpha126_11:1.1
	alpha126_10:1.1
	alpha126_09:1.1
	alpha126_08:1.1
	alpha126_07:1.1
	alpha126_06:1.1
	alpha126_05:1.1
	alpha126_04:1.1
	alpha126_03:1.1
	alpha126_02:1.1
	alpha126_1:1.1
	alpha125_17:1.1
	alpha125_16:1.1
	alpha125_15:1.1
	alpha125_14:1.1
	alpha125_13:1.1
	alpha125_12:1.1
	alpha125_11:1.1
	alpha125_10:1.1
	alpha125_09:1.1
	alpha125_08:1.1
	alpha125_07:1.1
	alpha125_06:1.1
	alpha125_05:1.1
	alpha125_04:1.1
	alpha125_03:1.1
	alpha125_02:1.1
	alpha125_01:1.1
	alpha124_19:1.1
	alpha125:1.1
	alpha124_18:1.1
	alpha124_17:1.1
	alpha124_16:1.1
	alpha124_15:1.1
	alpha124_14:1.1
	alpha124_13:1.1
	alpha124_12:1.1
	alpha124_11:1.1
	alpha124_10:1.1
	alpha124_09:1.1
	alpha124_08:1.1
	alpha124_07:1.1
	alpha124_7:1.1
	alpha124_06:1.1
	alpha124_05:1.1
	alpha124_04:1.1
	alpha124_03:1.1
	alpha124_02:1.1
	alpha124_01:1.1
	alpha124:1.1
	alpha123_12:1.1
	alpha123_11:1.1
	alpha123_10:1.1
	alpha123_9:1.1
	alpha123_8:1.1;
locks; strict;
comment	@c @;


1.1
date	99.01.16.17.03.23;	author boucrot;	state Exp;
branches;
next	;


desc
@@


1.1
log
@*** empty log message ***
@
text
@      SUBROUTINE QWRPTPX(ier)
C
C-----------------------------------------------------------------------
C! Transfer the TPXS banks to the PTPX banks
C!
C!    Author:   F. Palla 14-Nov-1998
C!              Called from QFPTPX
C!
C!    Output:   IER       /I    Error return=0 if operation successful
C!
C-----------------------------------------------------------------------
#ifndef DOC
C
#include "bcs.h"
#include "ptunjj.h"
#include "tpxsjj.h"
#include "ptpxjj.h"
C
      LOGICAL FIRST
      DATA FIRST/.TRUE./
C
#include "bmacro.h"
C-----------------------------------------------------------------------
      IF (FIRST) THEN
        FIRST=.FALSE.
        NPTUN=NAMIND('PTUN')
        NTPXS=NAMIND('TPXS')
        NPTPX=NAMIND('PTPX')
      ENDIF
C
      KTPXS=IW(NTPXS)
      IF (KTPXS.EQ.0) THEN
        IER=1
        GO TO 999
      ENDIF
      KPTUN=IW(NPTUN)
      IF (KPTUN.EQ.0) THEN
        IER=2
        GO TO 999
      ENDIF
C
      IF (IW(NPTPX).NE.0) CALL BDROP(IW,'PTPX')
      LEN=LPTPXA*LROWS(KTPXS)+LMHLEN
      IW(1)=1
      CALL AUBOS('PTPX',0,LEN,KPTPX,IGARB)
      IF (IGARB.EQ.2) THEN
        IER=3
        GO TO 999
      ENDIF
      IW(KPTPX+LMHCOL)=LPTPXA
      IW(KPTPX+LMHROW)=LROWS(KTPXS)
      KTPXS=IW(NTPXS)
      KPTUN=IW(NPTUN)+LMHLEN
      DO 502 I=1,LROWS(KTPXS)
        IW(KROW(KPTPX,I)+JPTPSL)=ITABL(KTPXS,I,JTPXSI)
        IW(KROW(KPTPX,I)+JPTPTM)=
     &             INT(RTABL(KTPXS,I,JTPXTM)/RW(KPTUN+JPTUTM))
        IW(KROW(KPTPX,I)+JPTPUL)=
     &             INT(RTABL(KTPXS,I,JTPXTL)/RW(KPTUN+JPTUTL))
        IW(KROW(KPTPX,I)+JPTPNS)=INT(100.*RTABL(KTPXS,I,JTPXNS))
        IW(KROW(KPTPX,I)+JPTPAD)=
     &             INT(RTABL(KTPXS,I,JTPXAD)/RW(KPTUN+JPTUAD))
        IW(KROW(KPTPX,I)+JPTPTN)=ITABL(KTPXS,I,JTPXTN)
  502 CONTINUE
      IER=0
      CALL BLIST(IW,'E+','PTPX')
  999 CONTINUE
      RETURN
      END
#endif

@
