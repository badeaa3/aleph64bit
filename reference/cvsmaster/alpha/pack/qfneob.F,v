head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.44;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.45;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QFNEOB
CKEY FILL PCPA EFLOW /INTERNAL
C----------------------------------------------------------------------
C!  - Fill NEOB section from PCQA bank.
C!
C!   Author   :- E. Blucher     29-NOV-1990
C! Modified   :- J. Carr        10-May-1991
C! Modified   :- E. Blucher     02-Feb-1992
C!     kfnet = first neutral track
C!     klnet = last neutral track
C!     knnet = number of neutral tracks
C!     Objects from PCQA stored as 'NEOB'
C
C  Called from QFILL
C!======================================================================
#ifndef DOC
      SAVE INIT,IERR,INEOB,NNEOB
#include "qcde.h"
      DATA INIT /0/, IERR /0/
#include "qmacro.h"
C----------------------------------------------------------------------
C
      JR(I) = KOQVEC + ITK * KCQVEC + I
      JQDET(I,N) = KOQDET + (KFFRD+I-1) * KCQDET + N
C----------------------------------------------------------------------
C
      IF (INIT .EQ. 0) THEN
        INIT = 1
        INEOB = KPCOMP ('NEOB')
        NNEOB = KFPADR(INEOB)
      ENDIF
C
      JPCQA = IW(NAPCQA)
      IF(JPCQA.EQ.0)GOTO 999
C
      KNNET = IW(JPCQA+LMHLEN)
      KFNET = KFFRT
      KLNET=KFNET + KNNET -1
C
      IF (KLNET .GE. KLFRT)  CALL QSBANK ('QVEC', KLNET+200)
      IF (KFFRD + KNNET -1 .GE. IW(KOQDET))
     &   CALL QSBANK ('QDET', KFFRD + KNNET -1 + 100)
C
      DO 10 I=1,KNNET
        ITK=KFNET+I-1
        PX = RTABL(JPCQA,I,JPCQPX)
        PY = RTABL(JPCQA,I,JPCQPY)
        PZ = RTABL(JPCQA,I,JPCQPZ)
        EN = RTABL(JPCQA,I,JPCQEN)
        RW(JR(JQVEQX)) = PX
        RW(JR(JQVEQY)) = PY
        RW(JR(JQVEQZ)) = PZ
        RW(JR(JQVEQE)) = EN
        PN = SQRT( PX**2+PY**2+PZ**2 )
        RW(JR(JQVEQP)) = PN
        AM=QSQT(EN**2-PN**2)
        RW(JR(JQVEQM)) = AM
        RW(JR(JQVECH)) = 0.
        IW(JR(JQVETN)) = I
        IW(JR(JQVEPA)) = INEOB
        IW(JR(JQVENP)) = IW(KOQFPA+NNEOB*KCQFPA+1)
        IW(KOQFPA+NNEOB*KCQFPA+1) = ITK
        IW(JR(JQVESC)) = 1
        IW(JR(JQVEKS)) = 0
        IW(JR(JQVECL)) = 1
        IW(JR(JQVEQD)) = JQDET(I,0)
        IW(JR(JQVESP)) = ITK
        IW(JR(JQVEOV)) = 0
        IW(JR(JQVEEV)) = 0
        IW(JR(JQVEND)) = 0
        IW(JR(JQVENO)) = 0
        IW(JR(JQVENM)) = 0
          DO 9 IDUM=1,KLOCKM
            IW(JR(JQVEBM+IDUM-1)) = 0
9         CONTINUE
        IW(JR(JQVELK)) = 0
        RW(JR(JQVEEW)) = 0.
        RW(JR(JQVEDB)) = 0.
        RW(JR(JQVEZB)) = 0.
        RW(JR(JQVESD)) = 0.
        RW(JR(JQVESZ)) = 0.
        RW(JR(JQVEEM)) = -1.
        RW(JR(JQVECF)) = -1.
C---Fill QDET
          IW(JQDET(I,JQDEAF)) = KQZER
          IW(JQDET(I,JQDEAL)) = KQZER
          IW(JQDET(I,JQDENT)) = 0
          IW(JQDET(I,JQDEAT)) = KQZER
          IW(JQDET(I,JQDEAE)) = KQZER
          IW(JQDET(I,JQDEAH)) = KQZER
          IW(JQDET(I,JQDEAM)) = KQZER
          IW(JQDET(I,JQDECF)) = 0
          IW(JQDET(I,JQDEEC)) = KQZER
          IW(JQDET(I,JQDEHC)) = KQZER
          IW(JQDET(I,JQDEET)) = KQZER
          IW(JQDET(I,JQDEFI)) = KQZER
          IW(JQDET(I,JQDENF)) = 0
          IW(JQDET(I,JQDENE)) = 0
          IW(JQDET(I,JQDENH)) = 0
          IW(JQDET(I,JQDEEF)) = KQZER
          IW(JQDET(I,JQDEPC)) = JPCQA + LMHLEN + (I-1)*LCOLS(JPCQA)
          IW(JQDET(I,JQDEEG)) = KQZER
          IW(JQDET(I,JQDEMU)) = KQZER
          IW(JQDET(I,JQDEPG)) = KQZER
          IW(JQDET(I,JQDEPG)) = KQZER
C--- set bit mask
        CALL QSBITM(ITK)
   10 CONTINUE
C   UPDATE KLOCUS POINTERS.
      DO 20 N = KSNET+1,KSMCT
        KLOCUS(1,N) = KLOCUS(2,KSNET) + 1
   20 KLOCUS(2,N) = KLOCUS(2,KSNET)
      KFFRT = KLOCUS(2,KSNET) + 1
      KFFRD=KFFRD+KNNET
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
