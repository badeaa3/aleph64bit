head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.29;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.30;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QAPNAM (CPAR,CANT,IFLG, IPAR,IANT)
CKEY PART /INTERNAL
C----------------------------------------------------------------------
C! get particle codes from particle names; check part-antip relation;
C! check whether particles do exist already
C  IFLG = 0 : particles should not yet exist
C  IFLG = 1 : particles should already exist
C  IFLG = -1 : don't care
C called from QCPxxx
C!                                                  H.Albrecht 15.01.89
C----------------------------------------------------------------------
#ifndef DOC
#include "qcdesh.h"
      CHARACTER * (*) CPAR,CANT
      CHARACTER * 12 CPAR12,CANT12
C----------------------------------------------------------------------
C
      CPAR12 = CPAR
      CANT12 = CANT
      IPAR = KPARTX (CPAR(1:LENOCC(CPAR)),JPAR)
      IANT = KPARTX (CANT(1:LENOCC(CANT)),JANT)
      IF (IFLG .LT. 0)  GO TO 10
      IF (JPAR .EQ. 0 .AND. IFLG .NE. 0)
     &  CALL QWMESS ('_QAPNAM_ Modify particle ' // CPAR12 //
     &    ' (particle is unknown and now established)')
      IF (JANT .EQ. 0 .AND. IFLG .NE. 0)
     &  CALL QWMESS ('_QAPNAM_ Modify particle ' // CANT12 //
     &    ' (particle is unknown and now established)')
      IF (JPAR .NE. 0 .AND. IFLG .EQ. 0)
     &  CALL QWMESS ('_QAPNAM_ New particle ' // CPAR12 //
     &    '(particle has been established before)')
      IF (JANT .NE. 0 .AND. IFLG .EQ. 0)
     &  CALL QWMESS ('_QAPNAM_ New particle ' // CANT12 //
     &    '(particle has been established before)')
C
   10 LPAR = KOQPAR + IPAR * KCQPAR + JQPAAN
      LANT = KOQPAR + IANT * KCQPAR + JQPAAN
C
      IF (JPAR .NE. 0 .AND. JANT .NE. 0 .AND.
     &    IW(LPAR) .EQ. IANT .AND. IW(LANT) .EQ. IPAR)  GO TO 90
      IF (IW(LPAR) .NE. IPAR .OR. IW(LANT) .NE. IANT)
     &  CALL QWSYNT ('_QAPNAM_ Particle-antip relation conflict for ' //
     &    CPAR12 // CANT12)
      IW(LPAR) = IANT
      IW(LANT) = IPAR
C
   90 END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
