head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.31;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.32;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QBOOKR(ID,NAME,NVAR,USNAM)
CKEY HIST /USER
C----------------------------------------------------------------------
C! Book Ntuples with 2 more variables to store Run/Event numbers
C Authors  V. Journe - J. Boucrot       10-Nov-1988
C Called from USER
C Calls  HBOOKN                                    from HBOOK4 Lib
C  Input arguments :
C    ID  =  Ntuple identifier ( must be # 0 )
C   NAME =  Ntuple name ( up to 80 characters )
C   NVAR =  Number of variables per element of the Ntuple
C  USNAM =  array of user-defined names of the NVAR variables
C           ( 8 characters maximum , as prescribed by HBOOK4 )
C----------------------------------------------------------------------
C Here is prepared the facility to store the event and run number
C   automatically as the two last variables of Ntuple # ID .
C To benefit from this facility , the filling of the Ntuple
C   must be be done by the routine QHFR .
C LIMITATION : Do not define Ntuples with more than 80 variables
C----------------------------------------------------------------------
#ifndef DOC
      SAVE ICALL
#include "qcdesh.h"
      PARAMETER (NVMAX = 80 , NTMAX = 100 , NVNTU = 2 )
C Internal common to store the work bank index :
      COMMON  / QHNTUR / KWNTUW
      CHARACTER*(*) NAME, USNAM(*)
      CHARACTER*8 NTNAM(NVMAX+2)
      DATA ICALL /0/
#include "bmacro.h"
C---------------------------------------------------------------------
C Book work bank on first call :
C
      IF (ICALL.EQ.0) THEN
        KWNTUW=0
        LENW=NVNTU*NTMAX+LMHLEN
        CALL WBANK(IW,KWNTUW,LENW,*990)
        IW(KWNTUW+LMHCOL)=NVNTU
        IW(KWNTUW+LMHROW)=0
        IW(KWNTUW-3)=INTCHA('NTUW')
      ENDIF
C
      ICALL=ICALL+1
      IF (ICALL.GT.NTMAX) GO TO 900
      IF (NVAR.GT.NVMAX)  GO TO 910
C Store ID and NVAR in the work bank :
      KXNTU=KNEXT(KWNTUW)
      IW(KXNTU+1)=ID
      IW(KXNTU+2)=NVAR
      IW(KWNTUW+2)=IW(KWNTUW+2)+1
C
C Add the names 'KRUN' and 'KEVT' to the user list :
C
      DO 10 I=1,NVAR
   10 NTNAM(I)=USNAM(I)
      NTNAM(NVAR+1)='KRUN'
      NTNAM(NVAR+2)='KEVT'
C
C Now book the Ntuple with NVAR+2 variables :
C
      CALL HBOOKN(ID,NAME,NVAR+2,'ALPHA',10000,NTNAM)
      GO TO 999
C
C Error messages :
C
  900 CALL QMTERM ('_HBOOKR_ Too many Ntuples booked ')
      GO TO 999
C
  910 CALL QMTERM ('_HBOOKR_ Too many variables in Ntuple')
      GO TO 999
C
  990 CALL QMTERM ('_HBOOKR_ No room to book work bank')
C
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
