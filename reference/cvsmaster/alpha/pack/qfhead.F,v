head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.41.40;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.41.41;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QFHEAD
CKEY FILL HEADER /INTERNAL
C-----------------------------------------------------------------------
C!   Puts selected contents of banks EVEH, DHEA, KEVH into variables
C!   in COMMON blocks
C!
C!  Author   : E. Blucher      5-OCT-1988
C!  Modified : E.Blucher      18-APR-1991
C!     -- All ALPHA variables reset to zero if banks not available.
C!        ALTRIG used to fill trigger words.
C!
C!  Called from QFILL
C!======================================================================
#ifndef DOC
C
#include "qcde.h"
C
#include "evehjj.h"
#include "dheajj.h"
#include "kevhjj.h"
#include "xtcnjj.h"
#include "revhjj.h"
      LOGICAL BTEST
      INTEGER ALTRIG
C!======================================================================
C
C       EVEH is NOT a standard (tabular) bank !
C
      KEVEH = IW(NAEVEH)
      KEXP =   IW(KEVEH+JEVEEN)
C     KRUN, KEVT : filled in QMREAD
      KEVERT = IW(KEVEH+JEVERT)
      KEVEDA = IW(KEVEH+JEVEDA)
      KEVETI = IW(KEVEH+JEVETI)
      KEVEMI(1) = IW(KEVEH+JEVEM1)
      KEVEMI(2) = IW(KEVEH+JEVEM2)
      KEVEMI(3) = IW(KEVEH+JEVEM3)
      KEVEMI(4) = IW(KEVEH+JEVEM4)
      KEVETY = IW(KEVEH+JEVETY)
      KEVEES = IW(KEVEH+JEVEES)
C
C--- DHEA ---------
C
      KDHEA =  IW(NADHEA)
      IF (KDHEA .EQ. 0)THEN
        KDHEFP = 0
        KDHENP = 0
        KDHENM = 0
        QDHEEC = 0.
        QDHEEL = 0.
        QDHEPF = 0.
        QDHETH = 0.
        QDHEPH = 0.
        QDHEEF = 0.
        QDHEET = 0.
        QDHET1 = 0.
        QDHEP1 = 0.
        QDHET2 = 0.
        QDHEP2 = 0.
        QDHEE1 = 0.
        QDHEE2 = 0.
        QDHEE3 = 0.
        KDHENX = 0
        KDHENV = 0
        KDHENJ = 0
        KDHENX = 0
        KDHENV = 0
        KDHENJ = 0
      ELSE
        KDHEFP = IW(KDHEA+JDHEFP+LMHLEN)
        KDHENP = IW(KDHEA+JDHENP+LMHLEN)
        KDHENM = IW(KDHEA+JDHENM+LMHLEN)
        QDHEEC = RW(KDHEA+JDHEEC+LMHLEN)
        QDHEEL = RW(KDHEA+JDHEEL+LMHLEN)
        QDHEPF = RW(KDHEA+JDHEPF+LMHLEN)
        QDHETH = RW(KDHEA+JDHETH+LMHLEN)
        QDHEPH = RW(KDHEA+JDHEPH+LMHLEN)
        QDHEEF = RW(KDHEA+JDHEEF+LMHLEN)
        QDHEET = RW(KDHEA+JDHEET+LMHLEN)
        QDHET1 = RW(KDHEA+JDHET1+LMHLEN)
        QDHEP1 = RW(KDHEA+JDHEP1+LMHLEN)
        QDHET2 = RW(KDHEA+JDHET2+LMHLEN)
        QDHEP2 = RW(KDHEA+JDHEP2+LMHLEN)
        QDHEE1 = RW(KDHEA+JDHEE1+LMHLEN)
        QDHEE2 = RW(KDHEA+JDHEE2+LMHLEN)
        QDHEE3 = RW(KDHEA+JDHEE3+LMHLEN)
        KDHENX = IW(KDHEA+JDHENX+LMHLEN)
        KDHENV = IW(KDHEA+JDHENV+LMHLEN)
        KDHENJ = IW(KDHEA+JDHENJ+LMHLEN)
        KDHENX = IW(KDHEA+JDHENX+LMHLEN)
        KDHENV = IW(KDHEA+JDHENV+LMHLEN)
        KDHENJ = IW(KDHEA+JDHENJ+LMHLEN)
      ENDIF
C
C--- KEVH ---------
C
      KKEVH = IW(NAKEVH)
      IF (KKEVH .EQ. 0)THEN
        KKEVNT = 0
        KKEVNV = 0
        KKEVID = 0
        QKEVWT = 0.
      ELSE
        KKEVNT = IW(KKEVH+JKEVNT+LMHLEN)
        KKEVNV = IW(KKEVH+JKEVNV+LMHLEN)
        KKEVID = IW(KKEVH+JKEVPI+LMHLEN)
        QKEVWT = RW(KKEVH+JKEVWT+LMHLEN)
      ENDIF
C
C--- LOLE ---------
C
      JLOLE = IW(NALOLE) + LMHLEN
      IF(JLOLE.NE.LMHLEN) THEN
        IF(IW(JLOLE + 12).EQ.0)XVLCAL=.TRUE.
      ENDIF
C
C--- REVH ---------
C
      JREVH = IW(NAREVH) + LMHLEN
      IF(JREVH.EQ.LMHLEN)THEN
        KREVDS=0
        XVLCAL=.FALSE.
        XVECAL=.FALSE.
        XVTPC=.FALSE.
        XVTPCD=.FALSE.
        XVITC=.FALSE.
        XVSATR=.FALSE.
        XVHCAL=.FALSE.
      ELSE
        KREVDS=IW(JREVH+JREVDS)
        XVECAL=BTEST(KREVDS,0).AND.BTEST(KREVDS,1).AND.BTEST(KREVDS,2)
        XVHCAL=BTEST(KREVDS,7).AND.BTEST(KREVDS,8).AND.BTEST(KREVDS,9)
        XVTPCD=BTEST(KREVDS,4)
        XVTPC=BTEST(KREVDS,15)
        XVITC=BTEST(KREVDS,5)
        XVSATR=BTEST(KREVDS,6)
      ENDIF
C
C--- XTEB or XTRB
C
      ITRG=ALTRIG(KXTET1,KXTET2,KXTEL2)
      IF(ITRG.EQ.0)THEN
        KXTET1=0
        KXTET2=0
        KXTEL2=0
      ENDIF
C
C--- XTCN
C
      JXTCN = IW(NAXTCN) + LMHLEN
      IF(JXTCN.EQ.LMHLEN)THEN
        KXTCGC= 0
        KXTCLL= 0
        KXTCBN= 0
        KXTCCL= 0
        KXTCHV= 0
        KXTCEN= 0
      ELSE
        KXTCGC=IW(JXTCN+JXTCGC)
        KXTCLL=IW(JXTCN+JXTCLL)
        KXTCBN=IW(JXTCN+JXTCBN)
        KXTCCL=IW(JXTCN+JXTCCL)
        KXTCHV=IW(JXTCN+JXTCTR)
        KXTCEN=IW(JXTCN+JXTCTR + 1)
      ENDIF
C
C--- XLUMOK
C
      XHVTRG=XLUMOK(DUMMY)
C
C---Beam position from BOM
C
      CALL QBOMEV (QVXBOM, QVYBOM, KERBOM)
C
   90 END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
