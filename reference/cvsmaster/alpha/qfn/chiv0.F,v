head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.35;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.36;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE CHIV0(IFRFT,IROW,MOM,D,M2,SM2,
     &  CHISQ,POINT,DERR,V0MOM,TMOM,IERROR)
CKEY   QIPBTAG / INTERNAL
C ------------------------------------------------------------------------------
C! Compute the chisquared for a V0 candidate, given an initial
C  estimate of the decay point.
C  Author                                                D. Brown 6-9-93
C  Called from QFNDV0
C ------------------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
C
C  Global includes
C
#include "bcs.h"
#include "bmacrod.h"
C
C  Input variables
C
      INTEGER IFRFT,IROW(2),KTRK
      REAL D(3),M2,SM2(2),MOM(2)
C
C  Output variables
C
      INTEGER IERROR
      REAL CHISQ,POINT(3),DERR(3,3),V0MOM(3),TMOM(3,2)
C
C  Local variables
C
      INTEGER ICOR,JCOR,IERR,JERR,ITRK
      INTEGER IPT,JROW
      INTEGER ITER,MAXITER/5/
      REAL RADIUS(2),TARC(2),TRKPT(3,2),T1(3,2),AMAT(3,3,2)
      REAL TERR(3,3,2)
      REAL DELTA,BVEC(3),OMAT(3,3),KERR2
      REAL ALPHA,BETA(3),GAMMA(3,3)
      REAL DD(3)
C
      REAL DIST,DIST_ERR,DISTCUT/1.0/
#include "bmacro.h"
C ------------------------------------------------------------------------------
C  Copy the point; it may get overwritten
C
      DO ICOR=1,3
        POINT(ICOR) = D(ICOR)
      END DO
      DIST = 100.
      ITER = 0
C
C  Compute some things that don't change
C
      DO ITRK=1,2
        RADIUS(ITRK) = 1./RTABL(IFRFT,IROW(ITRK),1)
C
C  Get the upper corner of the error matrix
C
        IPT = 7
        DO IERR=1,3
          DO JERR =1,IERR
            TERR(IERR,JERR,ITRK) = RTABL(IFRFT,IROW(ITRK),IPT)
            IPT = IPT + 1
          END DO
        END DO
        DO IERR=1,3
          DO JERR=IERR+1,3
            TERR(IERR,JERR,ITRK) = TERR(JERR,IERR,ITRK)
          END DO
        END DO
      END DO
C
C  Iterate
C
      DO WHILE(DIST .GT. DISTCUT .AND. ITER .LT. MAXITER)
C
C  Move the tracks to the initial point; this also computes
C  some vectors and matricies
C
        DO ITRK=1,2
          JROW = KROW(IFRFT,IROW(ITRK))
          CALL TMOVE(POINT,RW(JROW+1),RW(JROW+7),
     &          TARC(ITRK),TRKPT(1,ITRK),T1(1,ITRK),AMAT(1,1,ITRK))
        END DO
C
C  Get the mass constraint kinematic information
C
        CALL V0KINE(M2,SM2,MOM,T1,RADIUS,TERR,
     &        DELTA,BVEC,OMAT,KERR2)
C
C  Compute tensors
C
        ALPHA = DELTA**2/KERR2
        DO ICOR=1,3
          BETA(ICOR) = BVEC(ICOR)/KERR2
          DO JCOR=1,3
            GAMMA(JCOR,ICOR) = OMAT(JCOR,ICOR)/KERR2
            DO KTRK=1,2
              ALPHA = ALPHA + AMAT(JCOR,ICOR,KTRK)*
     &              TRKPT(ICOR,KTRK)*TRKPT(JCOR,KTRK)
              BETA(ICOR) = BETA(ICOR) + AMAT(JCOR,ICOR,KTRK)*
     &              TRKPT(JCOR,KTRK)
              GAMMA(JCOR,ICOR) = GAMMA(JCOR,ICOR) +
     &              AMAT(JCOR,ICOR,KTRK)
            END DO
          END DO
        END DO
C
C  Invert the matrix
C
        CALL RSINV(3,GAMMA,3,IERROR)
        IF(IERROR.NE.0)RETURN
C
C  Solve for the change in D and the chisquared
C
        CHISQ = ALPHA
        DIST = 0.0
        DIST_ERR = 0.0
        DO ICOR=1,3
          DD(ICOR) = 0.0
          DO JCOR = 1,3
            DD(ICOR) = DD(ICOR) + GAMMA(JCOR,ICOR)*BETA(JCOR)
            DERR(JCOR,ICOR) = GAMMA(JCOR,ICOR)
            CHISQ = CHISQ - GAMMA(JCOR,ICOR)*BETA(ICOR)*BETA(JCOR)
          END DO
          DIST = DIST + DD(ICOR)**2
          DIST_ERR = MAX(DIST_ERR,DERR(ICOR,ICOR))
        END DO
        DIST = SQRT(DIST/DIST_ERR)
C
C  Update the point
C
        DO ICOR=1,3
          POINT(ICOR) = POINT(ICOR) + DD(ICOR)
        END DO
        ITER = ITER + 1
      END DO
C
C  Move the tracks to this new point, and find the momentum
C
      DO ICOR=1,3
        V0MOM(ICOR) = 0.0
      END DO
      DO ITRK=1,2
        JROW = KROW(IFRFT,IROW(ITRK))
        CALL TMOVE(POINT,RW(JROW+1),RW(JROW+7),
     &      TARC(ITRK),TRKPT(1,ITRK),T1(1,ITRK),AMAT(1,1,ITRK))
        DO ICOR=1,3
          TMOM(ICOR,ITRK) = MOM(ITRK)*T1(ICOR,ITRK)
          V0MOM(ICOR) = V0MOM(ICOR) + TMOM(ICOR,ITRK)
        END DO
      END DO
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
