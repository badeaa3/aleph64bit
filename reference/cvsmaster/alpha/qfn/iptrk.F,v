head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.36;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.37;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE IPTRK(NTRK,JTRK,IP,IP_ERR,NUSED)
CKEY   QIPBTAG / INTERNAL
C ------------------------------------------------------------------------------
C! Entry point for calculating the effect of removing a single track
C  from an existing vertex.  This relies on a valid vertex to have already
C  been found.  Dave Brown, 29-1-93
C  Called from FINDDMIN or MAKE2D
C
C  INPUTS:
C     NTRK     =  # of tracks to exclude
C     JTRK     =  FRFT track number of tracks to exclude from vertex
C                 (=ALPHA track number - KFCHT + 1).
C  Outputs:
C
C      IP      =  New primary vertex position.  If the given track wasn't
C                 used in the vertex fit, this will be the same as the
C                 original.
C    IP_ERR    =  Error matrix of above vertex.
C    NUSED     =  Number of tracks used in the 2 different directions.
C                 Compared with the NUSED returned by QFNDIP, this allows
C                 you to know in which degrees of freedom the given
C                 track participated for the original vertex fit.
C ------------------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
#include "maxtrk.h"
      SAVE
C
C  Inputs and outputs
C
      INTEGER NTRK,JTRK(*),NUSED(2)
      REAL IP(3),IP_ERR(3,3)
C
C  Common variables; these transmit the necessary information from FINDIP
C
      REAL ALPHA_SAVE, BETA_SAVE(3), GAMMA_SAVE(3,3)
      REAL HAT(3,4,MAXTRK)
      REAL DT0(4,MAXTRK),ERR2(5,MAXTRK)
      INTEGER IFLAG(MAXTRK)
      INTEGER NUSED_SAVE(2)
      LOGICAL USEIT
C
      COMMON/IPVTX/DT0,HAT,ERR2,IFLAG,
     &      ALPHA_SAVE,BETA_SAVE,GAMMA_SAVE,NUSED_SAVE
C
C  Local variables
C
      REAL ALPHA, BETA(3), GAMMA(3,3)
      INTEGER ICOR,JCOR,ITRK,ITYP,JFLAG,IERR
C
C  Inlines for defining good tracks
C
      USEIT(JFLAG,ITYP) = IAND(JFLAG,ISHFT(1,ITYP-1)).GT.0
C ------------------------------------------------------------------------------
C
C  Copy the saved tensors, counters
C
      ALPHA = ALPHA_SAVE
      DO ICOR=1,3
        BETA(ICOR) = BETA_SAVE(ICOR)
        DO JCOR=1,3
          GAMMA(ICOR,JCOR) = GAMMA_SAVE(ICOR,JCOR)
        END DO
      END DO
      NUSED(1) = NUSED_SAVE(1)
      NUSED(2) = NUSED_SAVE(2)
C
C  Subtract off the degrees of freedom for this track that were
C  actually used
C
      DO ITRK=1,NTRK
        DO ITYP=1,3
          IF(USEIT(IFLAG(JTRK(ITRK)),ITYP))THEN
            ALPHA = ALPHA - DT0(ITYP,JTRK(ITRK))**2/
     &           ERR2(ITYP,JTRK(ITRK))
            DO ICOR=1,3
              BETA(ICOR) = BETA(ICOR) -
     &             DT0(ITYP,JTRK(ITRK))*HAT(ICOR,ITYP,JTRK(ITRK))/
     &             ERR2(ITYP,JTRK(ITRK))
              DO JCOR=1,3
                GAMMA(JCOR,ICOR) = GAMMA(JCOR,ICOR) -
     &               HAT(ICOR,ITYP,JTRK(ITRK))*
     &               HAT(JCOR,ITYP,JTRK(ITRK))/
     &               ERR2(ITYP,JTRK(ITRK))
              END DO
            END DO
C
C  Correct the number of degrees of freedom
C
            IF(ITYP.EQ.1)THEN
              NUSED(2) = NUSED(2) - 1
            ELSE
              NUSED(1) = NUSED(1) - 1
            END IF
          END IF
        END DO
      END DO
C
C  Compute the new position and error
C
      CALL RSINV(3,GAMMA,3,IERR)
      IF(IERR .NE. 0)THEN
        NUSED(1) = -1
        NUSED(2) = -1
        GOTO 1100
      END IF
      DO ICOR=1,3
        IP(ICOR) =  0.0
        DO JCOR=1,3
          IP(ICOR) = IP(ICOR) + BETA(JCOR)*GAMMA(ICOR,JCOR)
          IP_ERR(ICOR,JCOR) = GAMMA(ICOR,JCOR)
        END DO
      END DO
 1100 CONTINUE
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
