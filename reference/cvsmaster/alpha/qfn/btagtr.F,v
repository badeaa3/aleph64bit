head	1.2;
access;
symbols
	alpha126_22:1.2
	alpha126_21:1.2
	alpha126_20:1.2
	alpha126_19:1.2
	alpha126_18:1.2
	alpha126_17:1.2
	alpha126_16:1.2
	alpha126_15:1.2
	alpha126_14:1.2
	alpha126_13:1.2
	alpha126_12:1.2
	alpha126_11:1.2
	alpha126_10:1.2
	alpha126_09:1.2
	alpha126_08:1.2
	alpha126_07:1.2
	alpha126_06:1.2
	alpha126_05:1.2
	alpha126_04:1.2
	alpha126_03:1.2
	alpha126_02:1.2
	alpha126_1:1.2
	alpha125_17:1.2
	alpha125_16:1.2
	alpha125_15:1.2
	alpha125_14:1.2
	alpha125_13:1.2
	alpha125_12:1.2
	alpha125_11:1.2
	alpha125_10:1.2
	alpha125_09:1.2
	alpha125_08:1.2
	alpha125_07:1.2
	alpha125_06:1.2
	alpha125_05:1.2
	alpha125_04:1.2
	alpha125_03:1.2
	alpha125_02:1.2
	alpha125_01:1.2
	alpha124_19:1.2
	alpha125:1.2
	alpha124_18:1.2
	alpha124_17:1.2
	alpha124_16:1.2
	alpha124_15:1.2
	alpha124_14:1.2
	alpha124_13:1.2
	alpha124_12:1.2
	alpha124_11:1.2
	alpha124_10:1.2
	alpha124_09:1.2
	alpha124_08:1.2
	alpha124_07:1.2
	alpha124_7:1.2
	alpha124_06:1.2
	alpha124_05:1.2
	alpha124_04:1.2
	alpha124_03:1.2
	alpha124_02:1.2
	alpha124_01:1.2
	alpha124:1.2
	alpha123_12:1.2
	alpha123_11:1.2
	alpha123_10:1.2
	alpha123_9:1.2
	alpha123_8:1.2
	alpha123_7:1.2
	alpha123_6:1.2
	alpha123_5:1.2
	alpha123_4:1.2
	alpha123_3:1.2
	alpha123_2:1.2
	alpha123:1.2
	alpha122_48:1.2
	alpha122_47:1.2
	alpha122_46:1.2
	alpha122_45:1.2
	alpha122_44:1.2
	alpha122_43:1.2
	alpha122_42:1.2
	alpha122_41:1.2
	alpha122_40:1.2
	alpha122_39:1.2
	alpha122_38:1.2
	alpha122_37:1.2
	alpha122_36:1.2
	alpha122_35:1.2
	alpha122_34:1.2
	alpha122_33:1.2
	alpha122_32:1.2
	alpha122_31:1.2
	alpha122_30:1.2
	alpha122_29:1.2
	alpha122_28:1.2
	alpha122_27:1.2
	alpha122_26:1.2
	alpha122_25:1.2
	alpha122_24:1.2
	alpha122_23:1.2
	alpha122_22:1.2
	alpha122_21:1.2
	alpha122_20:1.2
	alpha122_19:1.2
	alpha122_18:1.2
	alpha122_17:1.2
	alpha122_16:1.2
	alpha122_15:1.2
	alpha122_14:1.2
	alpha122_13:1.2
	alpha122_12:1.2
	alpha122_11:1.2
	alpha122_10:1.2
	alpha122_9:1.2
	alpha122_8:1.2
	alpha122_6:1.2
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.06.27.15.14.55;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	96.03.14.12.42.34;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.35;	author flr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove underscore in file names
@
text
@      SUBROUTINE BTAGTR(FITP,NTRACK,DMIN,S_DMIN,TFLAG,PROBTRK)
C-----------------------------------------------------------------------------
C! Calculate the probability of the track to come from IP
CKEY   QIPBTAG / INTERNAL
C  Called from QIPBTAG
C  Author  Dave Brown  29-1-93
C
C  SUBROUTINE BTAGTR
C  ==================
C
C  INPUT :
C          FITP      #koeffizents of track fit polynomial...
C
C          NTRACK == # OF TRACKS PASSED FOR ANALYSIS
C
C          DMIN(i)                                           i=1,ntrack
C          --  distance of track from the primary vertex
C
C          S_DMIN(i)                                         i=1,ntrack
C          --  error on this distance
C
C          TFLAG(i)                                         i=1,ntrack
C          --  flag for this track
C
C OUTPUT:
C          PROBTRK(i)
C          --  probability of a track
C
C-----------------------------------------------------------------------------
#ifndef DOC
      IMPLICIT NONE
      INTEGER NTRACK, TFLAG(*)
      REAL DMIN(*), S_DMIN(*), PROBTRK(*)
      REAL FITP(5,*)
C
C  Local variables
C
      INTEGER ITRK,ITYPE,IFLAG,IVIEW
      REAL*8 EXPMAX,PROB,SIG,ROOT2,GAUMAX
      DATA GAUMAX/10.0D0/
      DATA EXPMAX/50.0D0/,ROOT2/1.41421356/
C
C  Inline functions
C
      INTEGER IIII
      REAL*8 XXXX
      REAL*8 F1,F2,F3,TPROB,G1,G2,G3,TPROB1
      REAL*8 DERFC
#include "btaginl.h"
C
C  Probability functions; these are the integrals of common
C  functions.
C
      F1(XXXX,IIII) = EXP(-MIN((XXXX/FITP(3,IIII))**2/2.,EXPMAX))
      F2(XXXX,IIII) = (1.+ABS(XXXX)/FITP(4,IIII))*
     &                EXP(-MIN(ABS(XXXX)/FITP(4,IIII),EXPMAX))
      F3(XXXX,IIII) = (1.+ABS(XXXX)/FITP(5,IIII))*
     &                EXP(-MIN(ABS(XXXX)/FITP(5,IIII),EXPMAX))
      TPROB(XXXX,IIII) = SIGN(
     & (1.-FITP(1,IIII)-FITP(2,IIII))*F1(XXXX,IIII)+
     & FITP(1,IIII)*F2(XXXX,IIII)+ FITP(2,IIII)*F3(XXXX,IIII),XXXX)
C
C  Now also some functions for 1-view tracks
C
      G1(XXXX,IIII) = DERFC(MIN(ABS(XXXX)/(FITP(3,IIII)*ROOT2),
     &      GAUMAX))
      G2(XXXX,IIII) = EXP(-MIN(ABS(XXXX)/FITP(4,IIII),EXPMAX))
      G3(XXXX,IIII) = EXP(-MIN(ABS(XXXX)/FITP(5,IIII),EXPMAX))
      TPROB1(XXXX,IIII) = SIGN(
     & (1.-FITP(1,IIII)-FITP(2,IIII))*G1(XXXX,IIII)+
     & FITP(1,IIII)*G2(XXXX,IIII)+ FITP(2,IIII)*G3(XXXX,IIII),XXXX)
C
C----------------------------------------------------------------------------
C
C  Loop over the tracks
C
      DO ITRK=1,NTRACK
C
C  Compute the probability for this track to have come from the
C  IP given that it's distance/error is DMIN/SIG OR LARGER
C  Separate probability functions by number of hits
C
        SIG = DMIN(ITRK)/S_DMIN(ITRK)
        IFLAG = TFLAG(ITRK)
        ITYPE = TTYPE(IFLAG)
        IVIEW = TVIEW(IFLAG)
        IF(IVIEW.EQ.3)THEN
          PROB = TPROB(SIG,ITYPE)
        ELSE
          PROB = TPROB1(SIG,ITYPE)
        END IF
        PROBTRK(ITRK)= PROB
      END DO
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
#include "btag_inl.h"
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
