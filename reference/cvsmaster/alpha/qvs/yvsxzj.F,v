head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.43;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.44;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE YVSXZJ(NGTK,JGTK,PVTX,EVTX,DJET,JET,EJET,SGMX,
     > NBX,XL,XH,NBZ,ZL,ZH,NBT,TL,TH,VLF,
     > XV,EXV,ZV,EZV,TV,ETV,DLLX,DLLZ)
CKEY  QVSRCH / INTERNAL
C ------------------------------------------------------------------------------
C! Finds X,Z,and T of secondary vertex
C     IN VERTEX-JET COORDINATE SYSTEM (T MEANS ALONG JET DIRECTION)
C     USING SAMPLED MAXIMUM LIKELIHOOD FIT TO PROJECTIONS
C  Author : T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C  Input Arguments :
C  *  JGTK IS ARRAY CONTAINING A LIST OF NGTK TRACKS
C  *  PVTX() IS COORDINATE OF PRIMARY VERTEX IN ALEPH COORDINATES
C  *  EVTX() IS ERROR IN PVTX
C  *  DJET() IS TWO NORMALIZED 3-VECTOR JET DIRECTIONS
C        MUST BE NORMALIZED TO 1 (NOT CHECKED HERE)
C  *  JET IS WHICH JET TO DO (1 OR 2)
C  *  EJET IS ERROR IN JET ANGLE
C  *  SGMX IS GAUSSIAN RANGE OF ERRORS (CONSIDERED FLAT BEYOND THIS)
C  *  NBX,XL,XH ARE BINS, LOW AND HIGH LIMITS FOR VERTEX X
C  *  NBZ,ZL,ZH ARE SAME FOR VERTEX Z
C  *  NBT,TL,TH ARE SAME FOR DECAY LENGTH IN DJET DIRECTION
C  *  VLF((NBX+NBZ)*NBT) IS SAMPLED LOG-LIKELIHOOD ARRAY
C
C  Output Arguments :
C  *  XV,ZV,EXV,EZV ARE X AND Z VERTEX AND ERROR NORMAL TO DJET(,JET)
C        IN THE ROTATED AND TRANSLATED COORDINATE SYSTEM
C  *  TV,ETV IS THE DECAY LENGTH AND ERROR
C        IN THE DJET(,JET) DIRECTION
C  *  VLF CONTAINS 2 2-DIMENSIONAL SAMPLED LOG-LIKELIHOOD FUNCTIONS:
C        VLFX(NBX,NBT),VLFZ(NBZ,NBT)
C  *  DLLX,DLLZ ARE VALUES OF LIKELIHOOD FUNCTIONS AT THE COMBINED PEAK
C        WHICH IS ALSO THE DIFFERENCE IN LOG-LIKELIHOOD BETWEEN
C        PRESENCE AND ABSENCE OF THE SECONDARY VERTEX
C        IN THE TWO PROJECTIONS
C
C ------------------------------------------------------------------------------
#ifndef DOC
      DIMENSION JGTK(*),PVTX(3),EVTX(3),DJET(3,2)
      DIMENSION VLF(*)
C ------------------------------------------------------------------------------
C CLEAR LIKELIHOOD FUNCTION
      CALL UZERO(VLF,1,(NBX+NBZ)*NBT)
C
C CALCULATE PRIMARY VERTEX ERRORS IN ROTATED SYSTEM
      CALL YVSPVE(EVTX,DJET(1,JET),EX,EZ,ET)
C
C ENTER PRIMARY VERTEX AND JET ERRORS AS A PSEUDO-TRACK
C ZERO INTERCEPT AND SLOPE, ERROR GROWS WITH DISTANCE
C CUTOFF AT SGMX, ENTERED IN BOTH X AND Z PROJECTIONS
      CALL YVSVJE(EX,EJET,SGMX,NBX,XL,XH,NBT,TL,TH,VLF(1))
      CALL YVSVJE(EZ,EJET,SGMX,NBZ,ZL,ZH,NBT,TL,TH,VLF(NBX*NBT+1))
C
C CLEAR LIKELIHOOD SUMS FOR HYPOTHESIS OF NO-SECONDARY
      VLFX=0.
      VLFZ=0.
C FIND BIN WIDTHS
      BWX=(XH-XL)/NBX
      BWZ=(ZH-ZL)/NBZ
      BWT=(TH-TL)/NBT
      SGMX2=SGMX**2
C
C LOOP OVER TRACKS
      DO 250 JTK=1,NGTK
        ITK=JGTK(JTK)
C
C CHECK IF TRACK IS IN DESIRED JET
        CALL QVSTKJ(ITK,DJET,ITKJ)
        IF (ITKJ .EQ. JET) THEN
C
C GET TRACK DESCRIPTION POLYNOMIAL, ERRORS
          CALL QVSTKP(ITK,PVTX,DJET(1,JET),
     >     XP,DXDT,D2XDT2,ZP,DZDT,D2ZDT2,VXP,VZP,VXZ)
C
C ADD VERTEX ERRORS IN QUADRATURE
          VXP=VXP+EX**2+(ET*DXDT)**2
          VZP=VZP+EZ**2+(ET*DZDT)**2
C
C LIMIT ERRORS TO BIN SIZES
          EXP=MAX(SQRT(VXP),ABS(BWX),ABS(BWT*DXDT))
          EZP=MAX(SQRT(VZP),ABS(BWZ),ABS(BWT*DZDT))
C
C FIND HOW FAR TRACK IS FROM (0,0) AT T=0 (TRANSFORMED PRIMARY
          DX2=XP**2/EXP**2
          DZ2=ZP**2/EZP**2
C ADD TO NULL-HYPOTHESIS SUMS
          VLFX=VLFX-.5*MIN(DX2,SGMX2)
          VLFZ=VLFZ-.5*MIN(DZ2,SGMX2)
C
C ONLY LET TRACK CONTRIBUTE WHEN CLOSER TO
C HYPOTHETICAL SECONDARY THAN TO PRIMARY VERTEX
C USING 2-D MISS DISTANCE LETS VIEWS HELP EACH OTHER
C BUT MAKES NEGATIVE DLL POSSIBLE
          SIGL=MIN(SQRT(DX2+DZ2),SGMX)
C
C ADD TRACK TO LIKELIHOOD FUNCTIONS
C    X PROJECTION
          CALL YVSLFL(NBX,XL,XH,XP,EXP,SIGL,NBT,TL,TH,
     >      DXDT,D2XDT2,VLF(1))
C
C    Z PROJECTION
          CALL YVSLFL(NBZ,ZL,ZH,ZP,EZP,SIGL,NBT,TL,TH,
     >      DZDT,D2ZDT2,VLF(NBX*NBT+1))
C
        ENDIF
  250 CONTINUE
C
C GIVE UP IF NO TRACKS IN THE HEMISPHERE
      IF (VLFX .EQ. 0.) THEN
        EXV=-999.
        EZV=-999.
        ETV=-999.
        DLLX=-999.
        DLLZ=-999.
        RETURN
      ENDIF
C
C FIND CONSISTENT PEAK IN THE 2 LIKELIHOOD FUNCTIONS
      CALL YVSCM2(VLF(1),VLF(NBX*NBT+1),
     > NBX,NBT,NBZ,MBX,MBT,MBZ)
C
C FIT PARABOLOIDS TO PEAKS TO INTERPOLATE AND GET ERRORS
      CALL YVSPR2(VLF(1),VLF(NBX*NBT+1),
     > NBX,NBT,NBZ,MBX,MBT,MBZ,
     > IERR,XV,EXV,TV,ETV,ZV,EZV,FXT,FZT)
C
C CONVERT TO EXTERNAL UNITS
      XV=XL+(MBX-.5+XV)*BWX
      ZV=ZL+(MBZ-.5+ZV)*BWZ
      TV=TL+(MBT-.5+TV)*BWT
      EXV=EXV*ABS(BWX)
      EZV=EZV*ABS(BWZ)
      ETV=ETV*ABS(BWT)
C
C FIND LIKELIHOOD CONTRIBUTION FROM PRIMARY+JET
      EX2=EX**2+(EJET*TV)**2
      PJX=.5*MIN(XV**2/EX2,SGMX2)
      EZ2=EZ**2+(EJET*TV)**2
      PJZ=.5*MIN(ZV**2/EZ2,SGMX2)
C
C LIKELIHOOD DIFFERENCES FOR PROJECTIONS
      DLLX=FXT+PJX-VLFX
      DLLZ=FZT+PJZ-VLFZ
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
