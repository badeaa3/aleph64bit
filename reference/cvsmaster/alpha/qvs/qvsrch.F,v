head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.39;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.40;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QVSRCH(BPOS,BSIZ,PVTX,EPVTX,DJET,
     > BTAG,SVTX,ESVTX,AVTX,CAVTX,JERR)
CKEY  QVSRCH / USER
C ------------------------------------------------------------------------------
C! Finds primary/secondary vertex , errors , and B-tag variables
C
C  Author : T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C  Modified : G.Graefe                       25-MAR-1995 adapted to NanoDst
C
C  Input Arguments :
C
C   * BPOS() IS BEAM POSITION
C      BPOS(2) MUST BE AN ACCURATE BEAM Y COORDINATE,
C        I.E., QVYNOM OR OUTPUT FROM GET_BP)
C      BPOS(1),BPOS(3) ARE USED FOR X AND Z TRACK CUTS
C        AND AS ADDITIONAL CONSTRAINTS ON PRIMARY VERTEX
C   * BSIZ() IS SIZE OF LUMINOUS REGION (1 SIGMA)
C       FIXED VALUES OF .0200, .0020, 2.0 WILL WORK OK
C       ANY NEGATIVE ELEMENT OF BSIZ WILL SUPPRESS INTERNAL PRIMARY FINDIG
C       IN WHICH CASE PVTX() AND EPVTX() BECOME INPUT VARIABLES
C       ALPHA 'NQVJ' CARD WILL SUPPRESS INTERNAL JET FINDING,
C       IN WHICH CASE DJET BECOMES AN INPUT VARIABLE
C
C  Output Arguments :
C
C   * PVTX() IS PRIMARY VERTEX IN ALEPH XYZ COORDINATES
C   * EPVTX() IS ERROR (NOT VARIANCE) IN PVTX
C   * DJET(3,2) IS TWO NORMALIZED XYZ DIRECTION VECTORS FOR TWO JETS
C   * BTAG(2) IS THE B-TAGGING VARIABLE FOR THE TWO HEMISPHERES
C       IT IS BASICALLY THE HALF THE CHI-SQUARE DIFFERENCE BETWEEN THE
C       HYPOTHESIS THAT ALL TRACKS IN THE HEMISPHERE COME FROM PRIMARY,
C       OR THAT SOME TRACKS COME FROM THE SECONDARY AND SOME FROM PRIMARY
C       A CUT AT 10, OR AT 20 ON THE SUM, IS REASONABLE
C   * SVTX(3,2) IS TWO SECONDARY VERTICES IN COORDINATE SYSTEMS
C       THAT ARE USED INTERNALLY, (ONE SYSTEM PER JET)
C       ORIGINS ARE AT PVTX(), AND ARE ORIENTED BY DJET(,)
C       THE THIRD COORDINATE IS THE DECAY LENGTH IN THE JET DIRECTION
C       THE FIRST COORDINATE IS R-PHI-LIKE, THE SECOND IS Z-LIKE
C   * ESVTX(3,2) IS THE ERRORS ON SVTX() IN THE INTERNAL ROTATED SYSTEM
C       WHERE GEOMETRICAL CORRELATIONS ARE SMALL AND IGNORED
C       MAY BE NEGATIVE, INDICATING A PROBLEM, NOT NECESSARILY SEVERE,
C       IN FINDING THE VERTEX
C   * AVTX(3,2) IS THE TWO SECONDARY VERTICES IN ALEPH XYZ COORDINATES
C   * CAVTX(3,3,2) IS TWO COVARIANCE MATRICES FOR AVTX()
C   * JERR IS ERROR FLAG :
C        0 FOR OK
C       +1 FOR SECONDARY VERTEX 1 ERRORS QUESTIONABLE
C       +2 FOR SECONDARY VERTEX 2 ERRORS QUESTIONABLE
C       +3 FOR QUESTIONABLE ERRORS ON BOTH SECONDARY VERTICES
C       +4 FOR NO GOOD TRACKS IN JET 1
C       +8 FOR NO GOOD TRACKS IN JET 2
C      +12 FOR NO GOOD TRACKS IN EITHER JET
C      +16 FOR QUESTIONABLE PRIMARY VERTEX
C      +32 FOR NOT ENOUGH TRACKS FOR PRIMARY VERTEX
C      +64 FOR NO JETS FOUND
C ------------------------------------------------------------------------------
#ifndef DOC
      DIMENSION BPOS(3),BSIZ(3)
      DIMENSION PVTX(3),EPVTX(3),DJET(3,2)
      DIMENSION BTAG(2),SVTX(3,2),ESVTX(3,2)
      DIMENSION AVTX(3,2),CAVTX(3,3,2)
#include "nancom.h"
C ------------------------------------------------------------------------------
C
      JERR=0
C
C  IF NANO, CALL NVSRCH
C
      IF (XNANO) THEN
        CALL NVSRCH(BPOS,BSIZ,PVTX,EPVTX,DJET,BTAG,SVTX,ESVTX,AVTX,
     &              CAVTX,JERR)
        RETURN
      ENDIF
C
C
C  CHECK FOR USER PRIMARY VERTEX
      IF (BSIZ(1) .GT. 0. .AND. BSIZ(2) .GT. 0.
     >                    .AND. BSIZ(3) .GT. 0.) THEN
C  FIND PRIMARY VERTEX
C  ZERO TRACK SMEARING GIVES SLIGHTLY WORSE B VERTEX RESOLUTION
C  BUT BETTER TAGGING, AND BETTER UDS PRIMARY VERTEX
        TSMR=.0000
        CALL QVSPVX(BPOS,BSIZ,TSMR,PVTX,EPVTX,IERR)
        JERR=16*IERR
      ENDIF
C
C  FIND JET DIRECTIONS
      CALL QVSJET(DJET,NJETS)
      IF (NJETS .LT. 2) THEN
        JERR=JERR+64
        RETURN
      ENDIF
C
C  FIND SECONDARY VERTICES
      CALL QVSVTX(PVTX,EPVTX,DJET,BTAG,SVTX,ESVTX,IERR)
C
      JERR=JERR+IERR
C
C  TRANSFORM VERTICES TO ALEPH COORDINATES
      CALL QVSAVX(PVTX,DJET(1,1),SVTX(1,1),ESVTX(1,1),
     > AVTX(1,1),CAVTX(1,1,1))
C
      CALL QVSAVX(PVTX,DJET(1,2),SVTX(1,2),ESVTX(1,2),
     > AVTX(1,2),CAVTX(1,1,2))
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
