head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.44;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.45;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE YVSPR2(F1,F2,NU1,NV,NU2,MU1,MV,MU2,
     > IERR,U1M,U1E,VM,VE,U2M,U2E,F1M,F2M)
CKEY  QVSRCH / INTERNAL
C ------------------------------------------------------------------------------
C! Fits combined paraboloid to 2 2-d functions
C  Author : T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C  Input Arguments :
C  *  F1 IS FIRST FUNCTION, STORED AS IF DIMENSIONED F1(NU1,NV)
C  *  F2(NU2,NV) IS ANALOGOUS
C  *  NU1,NV,NU2 ARE THE DIMENSIONS
C  *  MU1,MV,MU2 ARE THE COORDINATES OF THE MAXIMUM
C        MUST BE >1, < DIMENSION
C  Output Arguments :
C  *  IERR=0 FOR OK, 1 FOR MATRIX PROBLEM, 2 FOR MAXIMUM PROBLEMS
C  *  U1M IS THE FRACTION OF A BIN TO THE INTERPOLATED MAXIMUM
C       FOR THE U VARIABLE IN F1
C  *  U1E IS THE ERROR (HALF LOG-LIKELIHOOD UNIT) IN BIN UNITS
C  *  U1M,U2E ARE ANALOGOUS FOR THE U2 VARIABLE IN F2
C  *  VM,VE ARE ANALOGOUS FOR THE COMMON VARIABLE V
C        ERRORS CAN BE NEGATIVE IF IERR .NE. 0
C  *  F1M IS VALUE OF F1 AT THE MAXIMUM POINT, SIMILAR FOR F2M
C
C ------------------------------------------------------------------------------
#ifndef DOC
      DIMENSION F1(*),F2(*)
      DIMENSION P1(6),P2(6)
      DIMENSION WM(3,3),RH(3),SL(3),ER(3),WK(3)
C ------------------------------------------------------------------------------

C FIND PARABOLOID PARAMETERS FOR F1
      CALL YVSPAR(F1,NU1,MU1,MV,P1)
C AND FOR F2
      CALL YVSPAR(F2,NU2,MU2,MV,P2)
C FILL WEIGHT MATRIX FOR COMBINED FIT
C ORDER IS U1,U2,V
      WM(1,1)=2.*P1(1)
      WM(2,2)=2.*P2(1)
      WM(3,3)=2.*(P1(4)+P2(4))
      WM(1,2)=0.
      WM(2,1)=0.
      WM(1,3)=P1(6)
      WM(3,1)=P1(6)
      WM(2,3)=P2(6)
      WM(3,2)=P2(6)
C FILL RIGHT-HAND-SIDE VECTOR
      RH(1)=-P1(2)
      RH(2)=-P2(2)
      RH(3)=-(P1(5)+P2(5))
C CHECK FOR PATHOLOGICAL MATRIX
      IERR=0
      DO 150 I=1,3
      IF (WM(I,I) .GE. 0.) THEN
C CURVATURE IS WRONG SIGN!
        IERR=2
C DON'T MOVE FROM CELL CENTER
        SL(I)=0.
        ER(I)=-1.
C NEGATIVE ERROR, STILL DEPENDING ON CURVATURE
        IF (WM(I,I) .NE. 0.) ER(I)=-1./SQRT(WM(I,I))
      ELSE
C SOLVE IGNORING CORRELATIONS
        SL(I)=RH(I)/WM(I,I)
        ER(I)=1./SQRT(-WM(I,I))
      ENDIF
  150 CONTINUE
      IF (IERR .EQ. 0) THEN
C FIND DETERMINANT AND FACTOR MATRIX (BEFORE INVERTING)
        CALL RFACT(3,WM,3,WK,IFAIL,DET,JFAIL)
C CHECK FOR TROUBLE
        IF (IFAIL .NE. 0) THEN
C MATRIX IS SINGULAR
          IERR=1
        ELSE
C FIND THE SOLUTION
          CALL RFEQN(3,WM,3,WK,1,RH)
C FIND THE ERRORS
          CALL RFINV(3,WM,3,WK)
C CHECK FOR NONSENSE ERRORS
          DO 250 I=1,3
            IF (WM(I,I) .GT. 0.) THEN
              IERR=1
C NEGATIVE ERROR
              ER(I)=-SQRT(WM(I,I))
C LEAVE THE OLD APPROXIMATE SOLUTION
            ELSE
C             USE THE SOLUTION AND ERROR
              ER(I)=SQRT(-WM(I,I))
              SL(I)=RH(I)
            ENDIF
  250     CONTINUE
        ENDIF
      ENDIF
C COPY SOLUTION AND ERRORS
      U1M=SL(1)
      U2M=SL(2)
      VM=SL(3)
      U1E=ER(1)
      U2E=ER(2)
      VE=ER(3)
C CALCULATE FUNCTION VALUES
      F1M=P1(1)*U1M*U1M + P1(2)*U1M + P1(3) +
     >    P1(4)*VM*VM   + P1(5)*VM  + P1(6)*U1M*VM
      F2M=P2(1)*U2M*U2M + P2(2)*U2M + P2(3) +
     >    P2(4)*VM*VM   + P2(5)*VM  + P2(6)*U2M*VM
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
