head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.40;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.41;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      LOGICAL FUNCTION QVSGTK(ITK,VTX,
     >  MNTP,CTMX,D0MX,Z0MX,RVMX,PMIN,CPDMX)
CKEY  QVSRCH / INTERNAL
C ------------------------------------------------------------------------------
C! Applies track cuts including ALPHA lock function
C     QVSGTK IS A FUNCTION NOT A SUBROUTINE
C  Author : T. MATTISON  U.A.BARCELONA/SLAC  1 DECEMBER 1992
C
C  Input Arguments :
C  *  ITK IS ALPHA TRACK NUMBER
C  *  VTX() IS PRIMARY VERTEX COORDINATES FOR CUTS
C  *  MNTP IS MINIMUM TPC HITS
C  *  CTMX IS MAXIMUM COS(THETA)
C  *  D0MX IS MAXIMUM D0 VALUE
C  *  Z0MX IS MAXIMUM Z0 VALUE
C        BOTH D0 AND Z0 ARE CORRECTED FROM ALEPH COORDINATES
C        TO COORDINATES CENTERED ON VTX()
C  *  RVMX IS MAXIMUM 3-D DISTANCE FROM TRACK TO VTX
C        IF CUT IS LESS THAN 3 TIMES Z0 ERROR TRANSVERSE TO TRACK,
C        THE CUT IS APPLIED TO THE 2D RADIAL (D0) DISTANCE TO VTX
C  *  PMIN IS MINIMUM TOTAL MOMENTUM
C  *  CPDMX IS MAXIMUM CHISQUARE/DOF
C  Output Arguments :
C     RETURNS QVSGTK=.TRUE. OR .FALSE.
C
C ------------------------------------------------------------------------------
#ifndef DOC
      DIMENSION VTX(3)
#include "qcde.h"
#include "qmacro.h"
C ------------------------------------------------------------------------------
C
      QVSGTK=.FALSE.
C
C ALPHA LOCK
      IF (XLOCK(ITK)) RETURN
C
C TPC HITS CUT
      IF (KFRTNT(ITK) .LT. MNTP) RETURN
C
C COS-THETA CUT
      IF (ABS(QCT(ITK)) .GT. CTMX) RETURN
C
C FIND DISTANCE FROM VERTEX
      CALL QVSMIS(ITK,VTX,D0V,Z0V,R3D)
C
C D0 CUT (RELATIVE TO VTX)
      IF (ABS(D0V) .GT. D0MX) RETURN
C
C Z0 CUT RELATIVE TO VERTEX
      IF (ABS(Z0V) .GT. Z0MX) RETURN
C
C Z0 ERROR TRANSVERSE TO TRACK
      DZT=SQRT( ABS( QFRFEM(ITK,5,5)/(1.+QFRFTL(ITK)**2) ))
C
C COMPARE 3D DISTANCE CUT TO Z ERROR
      IF (RVMX .LT. 3.*DZT) THEN
C NOT SAFE TO USE 3D DISTANCE
C USE D0 RELATIVE TO VERTEX
        RV=ABS(D0V)
      ELSE
C USE 3D MISS DISTANCE
        RV=R3D
      ENDIF
C
C 3D (OR 2D) DISTANCE FROM VERTEX CUT
      IF (RV .GT. RVMX) RETURN
C
C TOTAL MOMENTUM CUT
      P=QP(ITK)
      IF (P .LT. PMIN) RETURN
C
C CHI SQUARE PER DEGREE OF FREEDOM
      IF (QFRFC2(ITK)/MAX(KFRFDF(ITK),1) .GT. CPDMX) RETURN
C
C TRACK MUST BE OK
      QVSGTK=.TRUE.
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
