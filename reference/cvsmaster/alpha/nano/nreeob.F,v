head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.49;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.50;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE NREEOB(IRET)
CKEY NANO IN ALPHA /INTERNAL
C----------------------------------------------------------------------
C! NANO unpacking : create EFOL bank from NDOB bank (and a pseudo NDTK
C!                  in case of MC events to have matching info)
C!
C!   Author   :- Gerrit Graefe         11-FEB-1995
C!
C!   Inputs:
C!        - none
C!
C!   Outputs:
C!        - IRET / I        return code  0=created EFOL from NDOB
C!                                       1=can't find NDOB
C!                                       2=no space to book EFOL
C!                                       3=unknown error
C!
C!   Libraries required: ALPHA,BOS77
C!
C!   Description
C!   ===========
C!
C?   This subroutine creates the EFOL bank from the NDOB bank. If the
C?   event is a MC event and no NDTK bank is given it will be created
C?   with momenta taken from NDOB and set to a non-zero value to avoid
C?   problems with divisions. The main purpose is to have easy access
C?   to the matching information between MC - reco and MC - truth tracks.
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
      SAVE M4,M8
#include "qdecl.h"
#include "qcde.h"
#include "nbpdcl.h"
#include "nbnkpo.h"
#include "ndobjj.h"
#include "ndtkjj.h"
#include "ndmsjj.h"
      INTEGER NLINK,NVERS,NAMIND,NERR1
      INTEGER I,J,INDOB,INDEFO,IGARB,IROWN,IROWE,KRNDOB,
     &        KCEFOL,IRET,KOEFOL,ITK,IROWT,KRNDTK,INDTK,INDMS,INDNT
      INTEGER KRNDMS,ITK1,ITK2
      INTEGER M4,M8
      DATA    M4,M8/15,255/
C----------------------------------------------------------------------
C
C!..LINK TO BANK NDOB
C
      IRET=3
      INDOB=IW(NAMIND('NDOB'))
      IF(INDOB.EQ.0)THEN
        IRET=1
        RETURN
      ENDIF
      KONDOB=INDOB
      KCNDOB=IW(KONDOB+1)
      KRNDOB=IW(KONDOB+2)
C
C!..CREATE BANK EFOL
C
      CALL AUBOS('EFOL',3,LMHLEN+LEFOLA*KRNDOB,INDEFO,IGARB)
      IF(IGARB.EQ.2)THEN
        CALL QWMESE('### NREEOB ### No space to book EFOL')
        IRET=2
        RETURN
      ENDIF
      CALL BKFMT('EFOL','2I,(5F,6I)')
      NAEFOL=NAMIND('EFOL')
      KOEFOL=INDEFO
      IW(KOEFOL+1)=LEFOLA
      IW(KOEFOL+2)=KRNDOB
C
C!..FILL BANK EFOL
C
      ITK1=0
      DO 100 I=1,KRNDOB
        IROWN=KONDOB+LMHLEN+(I-1)*LNDOBA
        IROWE=KOEFOL+LMHLEN+(I-1)*LEFOLA
C..MOMENTA
        RW(IROWE+JEFOPX)=FLOAT(IW(IROWN+JNDOPX)) / 10000000.0
        RW(IROWE+JEFOPY)=FLOAT(IW(IROWN+JNDOPY)) / 10000000.0
        RW(IROWE+JEFOPZ)=FLOAT(IW(IROWN+JNDOPZ)) / 10000000.0
        RW(IROWE+JEFOEW)=FLOAT(IW(IROWN+JNDOEN)) / 10000000.0
C..TYPE
        IW(IROWE+JEFOTY)=IAND(IW(IROWN+JNDOTY),M4)
C..TRACK
        IW(IROWE+JEFOLT)=IAND(ISHFT(IW(IROWN+JNDOTY),-12),M8)
        IF(IW(IROWE+JEFOLT).GT.ITK1)ITK1=IW(IROWE+JEFOLT)
C..JET
        IW(IROWE+JEFOLJ)=IAND(ISHFT(IW(IROWN+JNDOTY), -4),M8)
C..SET OTHERS TO ZERO
        IW(IROWE+JEFOLH)=0
        IW(IROWE+JEFOLC)=0
        IW(IROWE+JEFOLE)=0
        RW(IROWE+JEFOWE)=0.0
  100 CONTINUE
      CALL BLIST(IW,'S+','EFOL')
C
C!..IF MC - EVENT THEN LOOK FOR NDTK BANK:
C
      INDNT=IW(NAMIND('NDNT'))
      INDMS=IW(NAMIND('NDMS'))
      IF(INDNT.NE.0.OR.INDMS.NE.0)THEN
C
C!..TRY TO FIND OUT NUMBER OF ROWS IN ORIGINAL NDTK BANK:
C
        KONDMS=INDMS
        KCNDMS=IW(KONDMS+1)
        KRNDMS=IW(KONDMS+2)
        ITK=0
        ITK2=0
        DO 160 I=1,KRNDMS
          IF(IAND(ISHFT(IW(INDMS+LMHLEN+(I-1)*KCNDMS+JNDMHI),-10),M8).
     &      GT.ITK2)ITK2=IAND(ISHFT(IW(INDMS+LMHLEN+(I-1)*KCNDMS+JNDMHI
     &      ),-10),M8)
  160   CONTINUE
        IF(ITK1.GT.ITK2)THEN
          ITK=ITK1
        ELSE
          ITK=ITK2
        ENDIF
        INDTK=0
        INDTK=IW(NAMIND('NDTK'))
        IF(INDTK.EQ.0)THEN
          IF(ITK.EQ.0)THEN
            IRET=4
            GOTO 999
          ENDIF
C
C!..IF NO NDTK BANK AVAILABLE, BOOK ONE
C
          CALL AUBOS('NDTK',1,LMHLEN+LNDTKA*ITK,INDTK,IGARB)
          IF(IGARB.EQ.2)THEN
             CALL QWMESE('### NREEOB ### No space to book NDTK')
            IRET=2
            RETURN
          ENDIF
          CALL BKFMT('NDTK','2I,(6I)')
          KONDTK=INDTK
          IW(KONDTK+1)=LNDTKA
          IW(KONDTK+2)=ITK
          IROWT=KONDTK
          DO 150 I=1,ITK*LNDTKA
            IW(IROWT+LMHLEN+I)=0
  150     CONTINUE
          DO 120 I=1,KRNDOB
            IROWN=KONDOB+LMHLEN+(I-1)*LNDOBA
            IF(IAND(ISHFT(IW(IROWN+JNDOTY),-12),M8).EQ.0)GOTO 120
            IROWT=KONDTK+LMHLEN+(IAND(ISHFT(IW(IROWN+JNDOTY),-12),M8)-1)
     &           *LNDTKA
C..MOMENTA
            IW(IROWT+JNDTPX)=IW(IROWN+JNDOPX)
            IW(IROWT+JNDTPY)=IW(IROWN+JNDOPY)
            IW(IROWT+JNDTPZ)=IW(IROWN+JNDOPZ)
            IW(IROWT+JNDTDZ)=0
            IW(IROWT+JNDTTA)=IAND(ISHFT(IW(IROWN+JNDOTY),-20),M8)
            IW(IROWT+JNDTTQ)=0
  120     CONTINUE
C..LOOK IF SOME TRACKS ARE NOT FILLED:
          DO 130 I=1,ITK
            IROWT=KONDTK+LMHLEN+(I-1)*LNDTKA
            IF(IW(IROWT+JNDTPX).EQ.0.AND.IW(IROWT+JNDTPY).EQ.0.AND.
     &         IW(IROWT+JNDTPZ).EQ.0)THEN
              IW(IROWT+JNDTPX)=1
              IW(IROWT+JNDTPY)=1
              IW(IROWT+JNDTPZ)=1
            ENDIF
  130     CONTINUE
          CALL BLIST(IW,'S+','NDTK')
        ENDIF
      ENDIF
      IRET=0
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
