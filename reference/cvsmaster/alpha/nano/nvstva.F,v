head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.50;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.51;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE NVSTVA(ITK,JET,IVX)
CKEY NANO IN ALPHA /INTERNAL
C----------------------------------------------------------------------
C! NANO unpacking : auxiliary routine to QVSTVA. Gets jet and vertex
C!                  assignment if input is a NanoDST
C!
C!   Author   :- Gerrit Graefe         25-MAR-1995
C!
C!   Inputs:
C!        - ITK  / I        ALPHA TRACK NUMBER
C!
C!
C!   Outputs:
C!        - JET  / I        JET=1 OR 2 ACCORDING TO JET DIRECTION
C!          IVX  / I        Vertex assignment from QVSRCH
C!                          1 FOR PRIMARY,
C!                          2 FOR SECONDARY (IN ABOVE JET)
C!                          0 FOR TRACK PASSING CUTS BUT NOT CLOSE
C!                                TO EITHER VERTEX
C!                         -1 FOR TRACK FAILING CUTS
C!
C!   Libraries required: ALPHA,BOS77
C!
C!   Description
C!   ===========
C!
C?   This subroutine is a dummy one that only gets the jet/vertex assignment
C?   of a track from the NDTK bank. The real work was done during the
C?   NanoDst production by QVSTVA. Therfore all input arguments except
C?   the track number to QVSTVA are dummy, if a NanoDST is the input.
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
      SAVE M2,NERR
#include "qdecl.h"
#include "qcde.h"
#include "ndtkjj.h"
      INTEGER NVERS,NAMIND,NERR
      INTEGER IVX,JET,INDTK,IROWN,KCNDTK,ITK,KRNDTK,KONDTK
      INTEGER M2
      DATA    NERR/0/
      DATA    M2/3/
C----------------------------------------------------------------------
      JET=0
      IVX=-10
C
C!..CHECK NANODST VERSION
C
      CALL GETNAV(NVERS)
      IF(NVERS.LT.116.AND.NERR.LT.10)THEN
        NERR=NERR+1
        CALL QWMESE
     &    ('+++ NVSTVA +++ No QVSRCH information for NANO<116 !')
        GOTO 999
      ENDIF
C
C!..LINK TO BANK NDTK
C
      INDTK=IW(NAMIND('NDTK'))
      IF(INDTK.EQ.0)THEN
        RETURN
      ENDIF
      KONDTK=INDTK
      KCNDTK=IW(KONDTK+1)
      KRNDTK=IW(KONDTK+2)
      IROWN=KONDTK+LMHLEN+(ITK-KFCHT)*KCNDTK
      JET=IAND(ISHFT(IW(IROWN+JNDTTA),-15),M2)
      IVX=IAND(ISHFT(IW(IROWN+JNDTTA),-17),M2)-1
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
