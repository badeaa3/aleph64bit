head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.50;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.51;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE NREPGP(IRET)
CKEY NANO IN ALPHA /INTERNAL
C----------------------------------------------------------------------
C! NANO unpacking : create PGPC bank from NDPH bank
C!
C!   Author   :- Gerrit Graefe         15-FEB-1994
C!   Modified :- Gerrit Graefe         27-FEB-1995  If photons were
C!                                                  taken from PGAC,
C!                                                  create PGAC
C!
C!   Inputs:
C!        - none
C!
C!   Outputs:
C!        - IRET / I        return code  0=created PGPC from NDPH
C!                                       1=can't find NDPH
C!                                       2=no space to book PGPC
C!                                       3=unknown error
C!
C!   Libraries required: ALPHA,BOS77
C!
C!   Description
C!   ===========
C!
C?   This subroutine creates the bank PGPC from the NDPH bank. Only few
C?   numbers from PGPC are stored on NDPH so the recreated PGPC contains
C?   not much more than the momenta.
C?
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
#include "qdecl.h"
#include "qcde.h"
#include "nbpdcl.h"
#include "nbnkpo.h"
#include "ndphjj.h"
#include "nehejj.h"
      INTEGER NLINK,NVERS,NAMIND,NAVERS
      INTEGER I,J,INDPH,INDPGP,IGARB,IROWN,IROWP,KRNDPH,KOPGPC,IRET,
     &        INEHE,IBK,KOPGAC
      INTEGER IGOR,ILEN,IGEC,IGPC,IGTC,IGQU,IGPE
      REAL    GP(3)
      INTEGER MASK2,MASK8
      DATA MASK2,MASK8/3,255/
#include "qmacro.h"
C----------------------------------------------------------------------
C
C!..LINK TO BANK NDPH
C
      IRET=3
      INDPH=IW(NAMIND('NDPH'))
      IF(INDPH.EQ.0)THEN
        IRET=1
        RETURN
      ENDIF
      KONDPH=INDPH
      KCNDPH=IW(KONDPH+1)
      KRNDPH=IW(KONDPH+2)
C
C!..LINK TO BANK NEHE
C
      CALL GETNAV(NAVERS)
      IF(NAVERS.GT.115)THEN
        INEHE=IW(NAMIND('NEHE'))
        IF(INEHE.EQ.0)THEN
          CALL QWMESE(
     &      '### NRECPG ### Can`t find NEHE. Will create PGAC bank !')
          IBK=1
        ELSE
          IBK=IAND(ISHFT(IW(INEHE+LMHLEN+JNEHPF),-30),1)
        ENDIF
      ELSE
        IBK=0
      ENDIF
C
C!..FILL POINTERS ACCORDING TO BANK
C
      IF(IBK.EQ.0)THEN
C
C!..CREATE BANK PGPC
C
        CALL AUBOS('PGPC',0,LMHLEN+LPGPCA*KRNDPH,INDPGP,IGARB)
        IF(IGARB.EQ.2)THEN
          CALL QWMESE('### NRECPG ### No space to book PGPC')
          IRET=2
          RETURN
        ENDIF
        CALL BKFMT('PGPC','2I,(8F,1I,8F,1I)')
        NAPGPC=NAMIND('PGPC')
        KOPGPC=INDPGP
        IW(KOPGPC+1)=LPGPCA
        IW(KOPGPC+2)=KRNDPH
        CALL BLIST(IW,'S+','PGPC')
        IGEC=JPGPEC
        IGTC=JPGPTC
        IGPC=JPGPPC
        IGPE=JPGPPE
        IGQU=JPGPQU
        IGOR=KOPGPC
        ILEN=LPGPCA
      ELSE
C
C!..CREATE BANK PGAC
C
        CALL AUBOS('PGAC',0,LMHLEN+LPGACA*KRNDPH,INDPGP,IGARB)
        IF(IGARB.EQ.2)THEN
          CALL QWMESE('### NRECPG ### No space to book PGAC')
          IRET=2
          RETURN
        ENDIF
        CALL BKFMT('PGAC','2I,(7F,2I,13F,3I)')
        NAPGAC=NAMIND('PGAC')
        KOPGAC=INDPGP
        IW(KOPGAC+1)=LPGACA
        IW(KOPGAC+2)=KRNDPH
        CALL BLIST(IW,'S+','PGAC')
        IGEC=JPGAEC
        IGTC=JPGATC
        IGPC=JPGAPC
        IGPE=JPGAPE
        IGQU=JPGAQU
        IGOR=KOPGAC
        ILEN=LPGACA
      ENDIF
C
C!..FILL BANK PG.C
C
      DO 100 I=1,KRNDPH
        IROWN=KONDPH+LMHLEN+(I-1)*LNDPHA
        IROWP=IGOR+LMHLEN+(I-1)*ILEN
C!..MOMENTA
        GP(1)=FLOAT(IW(IROWN+JNDPPX)) / 10000000.0
        GP(2)=FLOAT(IW(IROWN+JNDPPY)) / 10000000.0
        GP(3)=FLOAT(IW(IROWN+JNDPPZ)) / 10000000.0
        RW(IROWP+IGEC)=SQRT(GP(1)*GP(1)+GP(2)*GP(2)+GP(3)*GP(3))
        RW(IROWP+IGTC)=ACOS(GP(3) / RW(IROWP+IGEC))
        RW(IROWP+IGPC)=ATAN2(GP(2),GP(1)) + (QQPI-SIGN(QQPI,GP(1)))
C!..POINTER TO PECO BANK
C!..AS PECO WILL BE NOT AVALIABLE ON A DST MADE FROM A NANO THE FOLLOWING
C!..LINE IS COMMENTED OUT.
        IW(IROWP+IGPE)=IAND(IW(IROWN+JNDPPA),MASK8)
C!..CRACK
        IF(IAND(ISHFT(IW(IROWN+JNDPPA), -8),MASK2).EQ.0) THEN
          IW(IROWP+IGQU)=1
        ELSE
          IW(IROWP+IGQU)=0
        ENDIF
  100 CONTINUE
      IRET=0
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
