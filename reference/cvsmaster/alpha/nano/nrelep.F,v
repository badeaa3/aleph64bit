head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.49;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.50;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE NRELEP(IRET)
CKEY NANO IN ALPHA /INTERNAL
C----------------------------------------------------------------------
C! NANO unpacking : create PDLT+PMLT bank from NDCL bank
C!
C!   Author   :- Gerrit Graefe         10-FEB-1995
C!
C!   Inputs:
C!        - none
C!
C!   Outputs:
C!        - IRET / I        return code  0=created PDLT from NDCL
C!                                       1=can't find NDCL
C!                                       2=no space to book PDLT
C!                                       3=unknown error
C!
C!   Libraries required: ALPHA,BOS77
C!
C!   Description
C!   ===========
C!
C?   This subroutine creates the banks PDLT (and PMLT in case of Monte Carlo
C?   from the NDCL bank.
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
      SAVE M2,M3,M4,M8,NERR1
#include "qdecl.h"
#include "qcde.h"
#include "nbpdcl.h"
#include "nbnkpo.h"
#include "ndcljj.h"
#include "ndtkjj.h"
      INTEGER NLINK,NVERS,NAMIND,NERR1
      INTEGER I,J,INDCL,INDPML,INDPDL,IGARB,IROWN,IROWPD,IROWPM,KRNDCL,
     &        KOPDLT,KOPMLT,IRET,INDTK,IROWT,IIASL,KOIASL,KCIASL
      INTEGER IPARTY,IREGCO,ITKPOI
      INTEGER M2,M3,M4,M8
      DATA    M2,M3,M4,M8/3,7,15,255/
#include "qmacro.h"
C----------------------------------------------------------------------
C
C!..LINK TO BANK NDCL
C
      IRET=3
      INDCL=IW(NAMIND('NDCL'))
      IF(INDCL.EQ.0)THEN
        IRET=1
        RETURN
      ENDIF
      KONDCL=INDCL
      KCNDCL=IW(KONDCL+1)
      KRNDCL=IW(KONDCL+2)
C
C!..LINK TO BANK NDTK
C
      INDTK=IW(NAMIND('NDTK'))
      IF(INDTK.EQ.0)THEN
        IRET=1
        RETURN
      ENDIF
      IROWT=INDTK+LMHLEN
C
C!..LINK TO BANK IASL IF NECCESSARY
C
      IF(XMCEV)THEN
        IIASL=IW(NAMIND('IASL'))
        IF(IIASL.EQ.0)THEN
          IF(NERR1.LT.10)THEN
            NERR1=NERR1+1
            CALL QWMESE
     &         ('+++ NRELEP +++ Bank IASL missing. Can`t link to FKIN')
          ENDIF
        ELSE
          KOIASL=IIASL
          KCIASL=IW(KOIASL+1)
        ENDIF
      ENDIF
C
C!..CREATE BANK PDLT
C
      CALL AUBOS('PDLT',0,LMHLEN+LPDLTA*KRNDCL,INDPDL,IGARB)
      IF(IGARB.EQ.2)THEN
        CALL QWMESE('### NRELEP ### No space to book PDLT')
        IRET=2
        RETURN
      ENDIF
      CALL BKFMT('PDLT','2I,(2I,2F,2I)')
      NAPDLT=NAMIND('PDLT')
      KOPDLT=INDPDL
      IW(KOPDLT+1)=LPDLTA
      IW(KOPDLT+2)=KRNDCL
C
C!..AND BANK PMLT IF MC- EVENT
C
      IF(XMCEV)THEN
        CALL AUBOS('PMLT',0,LMHLEN+LPMLTA*KRNDCL,INDPML,IGARB)
        IF(IGARB.EQ.2)THEN
          CALL QWMESE('### NRELEP ### No space to book PMLT')
          IRET=2
          RETURN
        ENDIF
        CALL BKFMT('PMLT','2I,(8I)')
        NAPMLT=NAMIND('PMLT')
        KOPMLT=INDPML
        IW(KOPMLT+1)=LPMLTA
        IW(KOPMLT+2)=KRNDCL
      ENDIF
C
C!..FILL BANK PDLT
C
      DO 100 I=1,KRNDCL
        IROWN=KONDCL+LMHLEN+(I-1)*LNDCLA
        IROWPD=KOPDLT+LMHLEN+(I-1)*LPDLTA
        IROWPM=KOPMLT+LMHLEN+(I-1)*LPMLTA
C..
        IPARTY=IAND(IW(IROWN+JNDCTA),M2)
        IREGCO=IAND(ISHFT(IW(IROWN+JNDCTA),-2),M2)*10
        IF(IPARTY.EQ.0)THEN
          IPARTY=2
        ELSEIF(IPARTY.EQ.1)THEN
          IPARTY=3
        ELSEIF(IPARTY.EQ.2)THEN
          IPARTY=5
        ELSEIF(IPARTY.EQ.3)THEN
          IPARTY=6
        ENDIF
C..PARTICLE CODE
        IW(IROWPD+JPDLPA)=IPARTY+IREGCO
C..TRANSVERSE MOMENTA
        RW(IROWPD+JPDLPI)=FLOAT(IW(IROWN+JNDCPI)) / 10000000.0
        RW(IROWPD+JPDLPE)=FLOAT(IW(IROWN+JNDCPE)) / 10000000.0
C..VALIDITY
        IW(IROWPD+JPDLVP)=IAND(ISHFT(IW(IROWN+JNDCTA),-4),M2)*10
C..TRACK
        IW(IROWPD+JPDLFR)=IAND(ISHFT(IW(IROWN+JNDCTA),-6),M8)
C..JET
        ITKPOI=IROWT+(IW(IROWPD+JPDLFR)-1)*LNDTKA+JNDCTA
        IW(IROWPD+JPDLJT)=IAND(ISHFT(IW(ITKPOI),-11),M4)
C
C!..FILL BANK PMLT
C
        IF(XMCEV)THEN
C..QUARK FLAVOUR
          IW(IROWPM+JPMLFL)=IAND(ISHFT(IW(IROWN+JNDCTA),-14),M3)
C..POPPING FLAG
          IW(IROWPM+JPMLPO)=IAND(ISHFT(IW(IROWN+JNDCTA),-17),M3)
C..ICHAIN
          IW(IROWPM+JPMLCH)=IAND(ISHFT(IW(IROWN+JNDCTA),-20),M2)+1
C..SPLIT
          IW(IROWPM+JPMLSP)=IAND(ISHFT(IW(IROWN+JNDCTA),-22),M4)
C..LEPID
          IW(IROWPM+JPMLLE)=IAND(ISHFT(IW(IROWN+JNDCTA),-26),M3)
C..IBMES
          IW(IROWPM+JPMLME)=IAND(ISHFT(IW(IROWN+JNDCTA),-29),M3)-2
C..FRFT TRACK
          IW(IROWPM+JPMLFR)=IAND(ISHFT(IW(IROWN+JNDCTA),-6),M8)
C..KINE TRACK
          IF(IIASL.NE.0)THEN
            IW(IROWPM+JPMLKT)=IW(KOIASL+LMHLEN+(IW(IROWPM+JPMLFR)-1)
     &        *KCIASL+1)
          ENDIF
        ENDIF
  100 CONTINUE
      CALL BLIST(IW,'S+','PDLT')
      IF(XMCEV)CALL BLIST(IW,'S+','PMLT')
      IRET=0
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
