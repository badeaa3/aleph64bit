head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.49;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.50;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE NREFRF(IRET)
CKEY NANO IN ALPHA /INTERNAL
C----------------------------------------------------------------------
C! NANO unpacking : create FRFT bank from NDTK bank
C!
C!   Author   :- Gerrit Graefe         15-FEB-1994
C!   Modified :- Gerrit Graefe         27-FEB-1994 link to bank NEHE,
C!                                                 if Nano version >115
C!
C!   Inputs:
C!        - none
C!
C!   Outputs:
C!        - IRET / I        return code  0=created FRFT from NDTK
C!                                       1=can't find NDTK
C!                                       2=no space to book FRFT
C!                                       3=unknown error
C!
C!   Libraries required: ALPHA,BOS77
C!
C!   Description
C!   ===========
C!
C?   This subroutine creates the bank FRFT from the NDTK bank. This is a
C?   dangerous thing because not all tracks are kept on the NANO DST and the
C?   remaining are reordered. So the pointers from other banks like YV0V have
C?   to reset and there is no easy way to get the original 'JULIA' number. The
C?   only way is to link to the NDTK bank and ask for the JULIA track number in
C?   this bank. There is a one-to-one relation between the row numbers in NDTK
C?   and FRFT made from NDTK.
C?   Also there is a problem with the track quality. Normally only good tracks
C?   are kept on the NANO DST but although those which are coming from a V0 or
C?   a gamma conversion candidate even if they are not 'good' ones. This was
C?   done for quality studies (dE/dx, # of hits in TPC/ITC etc.). Unfortunately
C?   there is no proper way to put some quality flag into FRFT. So this
C?   information is put into the error matrix which is zero by default. A huge
C?   value of QFRFEM(ITK,1,1) [99999.0] indicates that this is a 'bad' track
C?   according to the NANO DST definitions.
C?
C?
C!======================================================================
#ifndef DOC
      IMPLICIT NONE
#include "qdecl.h"
#include "qcde.h"
#include "nbpdcl.h"
#include "nbnkpo.h"
#include "ntrcor.h"
#include "ndtkjj.h"
#include "ndhejj.h"
#include "nehejj.h"
      INTEGER NLINK,NVERS,NAMIND,NAVERS
      INTEGER I,J,INDNTK,INDFRF,IGARB,IROWN,IROWF,KOFRFT,JULTRK,
     &        NJULTR,IFBADT,INDNHE,IRET,KRNDTK
      REAL    GP(3),P,GPHI,GRHO,GTHETA,GSECL,GTANL,GCHAR,CFACT,
     &        BFACT,DUMMY
      REAL    ALFIEL
      LOGICAL BTEST
      INTEGER MASK1,MASK2,MASK8,MASK9,MASK14,MASK15
      DATA    MASK1,MASK2,MASK8,MASK9,MASK14,MASK15
     &        /1,3,255,511,16383,32767/
      PARAMETER (CFACT=CLGHT/100000.)
#include "qmacro.h"
C----------------------------------------------------------------------
C
C!..LINK TO BANK NDTK
C
      IRET=3
      INDNTK=IW(NAMIND('NDTK'))
      IF(INDNTK.EQ.0)THEN
        IRET=1
        RETURN
      ENDIF
      KONDTK=INDNTK
      KCNDTK=IW(KONDTK+1)
      KRNDTK=IW(KONDTK+2)
C
C!..LINK TO BANK NDHE TO GET ROW NUMBER OF FIRST BAD TRACK
C
      CALL GETNAV(NAVERS)
      IF(NAVERS.EQ.115)THEN
        INDNHE=IW(NAMIND('NDHE'))
        IF(INDNHE.EQ.0)THEN
          IRET=1
          RETURN
        ENDIF
        KONDHE=INDNHE
        KCNDHE=IW(KONDHE+1)
        IFBADT=IAND(IW(KONDHE+LMHLEN+JNDHP2),MASK8)
      ELSE
        INDNHE=IW(NAMIND('NEHE'))
        IF(INDNHE.EQ.0)THEN
          IRET=1
          RETURN
        ENDIF
        KONEHE=INDNHE
        KCNEHE=IW(KONEHE+1)
        IFBADT=IAND(IW(KONEHE+LMHLEN+JNDHP2),MASK8)
      ENDIF
C
C!..CREATE BANK FRFT
C
      CALL AUBOS('FRFT',2,LMHLEN+LFRFTA*KRNDTK,INDFRF,IGARB)
      IF(IGARB.EQ.2)THEN
        CALL QWMESE('### NREFRF ### No space to book FRFT')
        IRET=2
        RETURN
      ENDIF
      CALL BKFMT('FRFT','2I,(8F,2I)')
      NAFRFT=NAMIND('FRFT')
      KOFRFT=INDFRF
      IW(KOFRFT+1)=LFRFTA
      IW(KOFRFT+2)=KRNDTK
C
C!..GET B-FIELD FROM ALEPHLIB ROUTINE ALFIEL
C
      BFACT = - ALFIEL(DUMMY) * CFACT
      IF(BFACT.EQ.0.) BFACT = - 15. * CFACT
C
C!..SET NJUNAT(I) TO 0
C
      CALL VZERO(NJUNAT,255)
C
C!..FILL BANK FRFT
C
      DO 100 I=1,KRNDTK
C!..ROW IN FRFT BANK
        IROWN=KONDTK+LMHLEN+LNDTKA*(I-1)
        IROWF=KOFRFT+LMHLEN+LFRFTA*(I-1)
C!..CORRESPONDENCE BETWEEN OLD AND NEW FRFT BANK
        NJUNAT(I)=IAND(IW(IROWN+JNDTTA),MASK8)
C!..MOMENTA
        GP(1) = FLOAT(IW(IROWN+JNDTPX)) / 10000000.0
        GP(2) = FLOAT(IW(IROWN+JNDTPY)) / 10000000.0
        GP(3) = FLOAT(IW(IROWN+JNDTPZ)) / 10000000.0
        P     = SQRT(GP(1)*GP(1)+GP(2)*GP(2)+GP(3)*GP(3))
        GTHETA = ACOS(GP(3) / P)
        GSECL = 1. / SIN(GTHETA)
        GTANL = TAN( PIBY2-GTHETA )
        IF (IAND(ISHFT(IW(IROWN+JNDTTA),-10),MASK1).EQ.0) THEN
          GCHAR = -1.0
        ELSE
          GCHAR =  1.0
        ENDIF
        GRHO = BFACT * GSECL / (GCHAR * P)
        GPHI = ATAN2(GP(2),GP(1)) + (QQPI-SIGN(QQPI,GP(2)))
        RW(IROWF+JFRFIR) = GRHO
        RW(IROWF+JFRFTL) = GTANL
        RW(IROWF+JFRFP0) = GPHI
C!..D0+Z0
        IF (BTEST(IW(IROWN+JNDTDZ),15)) THEN
          RW(IROWF+JFRFD0)=FLOAT(IAND(IW(IROWN+JNDTDZ),MASK15))/
     &    (-1000.0)
        ELSE
          RW(IROWF+JFRFD0)=FLOAT(IAND(IW(IROWN+JNDTDZ),MASK15))/1000.0
        ENDIF
        IF (BTEST(IW(IROWN+JNDTDZ),31)) THEN
          RW(IROWF+JFRFZ0)=-FLOAT(IAND(ISHFT(IW(IROWN+JNDTDZ),-16),
     &                     MASK15)) / 1000.0
        ELSE
          RW(IROWF+JFRFZ0)=FLOAT(IAND(ISHFT(IW(IROWN+JNDTDZ),-16),
     &                     MASK15)) / 1000.0
        ENDIF
C!..CHI2
        RW(IROWF+JFRFC2)=FLOAT(IAND(IW(IROWN+JNDTTQ),MASK14)) / 100.0
        IW(IROWF+JFRFDF)=1
C!..ERROR ON MOMENTUM
          RW(IROWF+JFRFEM)=(FLOAT(IAND(ISHFT(IW(IROWN+JNDTTQ),-14),
     &                      MASK9))*P)**2
C!..BAD TRACK
        IF (IFBADT.LE.I) THEN
          RW(IROWF+JFRFEM+1)=99999.0
        ELSE
          RW(IROWF+JFRFEM+1)=    0.0
        ENDIF
C!..ERROR MATRIX
        DO 110 J=2,20
          RW(IROWF+JFRFEM+J)=    0.0
  110   CONTINUE
  100 CONTINUE
      CALL BLIST(IW,'S+','FRFT')
      IRET=0
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
