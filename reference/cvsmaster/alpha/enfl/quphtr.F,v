head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.32;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.33;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE QUPHTR(ICL,NPL)
C----------------------------------------------------------------
C! Look for fired planes in the corresponding trigger segment
C  Input  ICL  PHCO index
C  Output NPL  # of fired planes
C----------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
#include "qhac.h"
#include "cuhnto.h"
      DIMENSION IHW(4),ITRI(4)
      LOGICAL FBIT
#include "qmacro.h"
C
      DATA THE1,THE2,THE3,THE4,THE5 / 6.,26.,39.,60.,90. /
C----------------------------------------------------------------
      NPL= 0
C
      IPHCO= IW(NAPHCO)
      IF(IPHCO.EQ.0) THEN
        NPL= -1
        RETURN
      END IF
      IXTEB= IW(NAMIND('XTEB'))
      IF(IXTEB.EQ.0) RETURN
C
C----- Get theta and phi
      THE= RTABL(IPHCO,ICL,JPHCTH)
      PHI= RTABL(IPHCO,ICL,JPHCPH)
      THE= THE*180./QQPI
      PHI= PHI*180./QQPI
C
      ISEC= 1
      IF(THE.GT.THE2) ISEC= ISEC+1
      IF(THE.GT.THE3) ISEC= ISEC+1
      IF(THE.GT.THE4) ISEC= ISEC+1
      IF(THE.GT.THE5) ISEC= ISEC+1
      IF(THE.GT.(180.-THE4)) ISEC= ISEC+1
      IF(THE.GT.(180.-THE3)) ISEC= ISEC+1
      IF(THE.GT.(180.-THE2)) ISEC= ISEC+1
C
      IF(ISEC.LE.2.OR.ISEC.GE.7) THEN
        IPHI= INT(PHI/60.) + 1
        IF(IPHI.GT.6) IPHI= 6
      ELSE
        IPHI= INT(PHI/30.) + 1
        IF(IPHI.GT.12) IPHI= 12
      END IF
C
      ISEG= 0
      DO 10 L1=1,ISEC-1
        IF(L1.LE.2.OR.L1.GE.7) ISEG= ISEG+6
        IF(L1.GE.3.AND.L1.LE.6) ISEG= ISEG+12
10    CONTINUE
      ISEG= ISEG+IPHI
C
      IWD= 1
      IBIT= ISEG-1
      IF(ISEG.GT.32) THEN
        IWD=2
        IBIT= ISEG-33
      END IF
      IF(ISEG.GT.64) THEN
        IWD=3
        IBIT= ISEG-65
      END IF
C
      K1= 0
      DO 20 L1=IWD,12,3
        K1= K1+1
        IHW(K1)= ITABL(IXTEB,1,L1+15)
20    CONTINUE
C
      DO 30 L0=1,4
        IAD= IHW(L0)
        FBIT= BTEST(IAD,IBIT)
        ITRI(L0)= 0
        IF(FBIT) ITRI(L0)= 1
30    CONTINUE
C
      DO 40 L1=1,4
        IF(ITRI(L1).EQ.1) THEN
          IF(NPLTHR(L1).GT.NPL) NPL= NPLTHR(L1)
        END IF
40    CONTINUE
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
