head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.33;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.34;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE RELKHC(IHCOBJ,ICHARG,ANGL,DELTAE)
C--------------------------------------------------------------------
C!  Force a link of an isolated HCAL cluster to a TPC track
C   when JULIA failed...
C
C   Input :   -- ihcobj,  ALPHA index of the HCAL cluster
C   Output:   -- icharg,  ALPHA index of the TPC track
C             -- angl  ,  angle between HCAL and extrapolation (deg.)
C             -- deltae,  energy difference (GeV)
C
C  Patrick Janot -- 05 Sep 1990
C--------------------------------------------------------------------
#ifndef DOC
#include "intval.h"
      COMMON / hlkbk / kcha, nchj(200)
#include "cuphco.h"
#include "qcde.h"
      DIMENSION QT(KCQVEC,1), KT(KCQVEC,1), QV(KCQVRT,1), KV(KCQVEC,1)
#include "qhac.h"
#include "qmacro.h"
C--------------------------------------------------------------------
C  Find the track closest to the HCAL cluster ihcobj
C
      icharg = 0
      anglmin = 999999.
      angl = anglmin
      icluhc = ktn(ihcobj)
      pzh2 = COS(twh(1,icluhc))
      pyh2 = SIN(twh(1,icluhc)) * SIN(pwh(1,icluhc))
      pxh2 = SIN(twh(1,icluhc)) * COS(pwh(1,icluhc))
C
      DO 1 jcha = 1 , kchatt
        nchtr = ncht(jcha)
        DO lcha = 1 , kcha
          IF ( nchj(lcha) .EQ. nchtr ) GOTO 1
        ENDDO
        pxh = pexhca(jcha,1)
        pyh = pexhca(jcha,2)
        pzh = pexhca(jcha,3)
        dis = SQRT(pxh**2+pyh**2+pzh**2)
        angh = (pxh * qx(ihcobj)
     .       +  pyh * qy(ihcobj)
     .       +  pzh * qz(ihcobj))
     .       / dis
     .       / SQRT(qx(ihcobj)**2+qy(ihcobj)**2+qz(ihcobj)**2)
        IF ( angh .GE. 1. ) angh = .99999999
        IF ( angh .LE.-1. ) angh =-.99999999
        angh = acos(angh) * 180. / qqpi
C
        IF ( etw(1,icluhc) .GT. 0. ) THEN
          ang2 = (pxh * pxh2 + pyh * pyh2 + pzh * pzh2) / dis
          IF ( ang2 .GE. 1. ) ang2 = .99999999
          IF ( ang2 .LE.-1. ) ang2 =-.99999999
          ang2 = acos(ang2) * 180. / qqpi
          angh = AMIN1(angh,ang2)
        ENDIF
C
        IF ( angh .LT. anglmin ) THEN
          anglmin = angh
          angl = angh
          icharg = ncht(jcha)
          deltae = delt(jcha) - qe(ihcobj)
        ENDIF
    1 CONTINUE
C
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
