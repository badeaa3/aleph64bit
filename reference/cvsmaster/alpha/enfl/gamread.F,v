head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.27;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.28;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE GAMREAD(ICLUS,EMIGA,NNGA,GAMVE,IRTFG)
C---------------------------------------------------------------------
C! Interface for GAMPEX (use of the bank PGAC)
C
C  Patrick Janot -- 30 sept 1991, Modified for PGPC -- 15 April 1993
C                                 Modified for PGAC -- 30  oct  1994
C---------------------------------------------------------------------
#ifndef DOC
#include "parabank.h"
      DIMENSION gamve(20,20)
      DIMENSION gamce(20,20)
#include "qcde.h"
#include "qmacro.h"
C
      CALL vzero(gamve(1,1),200)
      CALL vzero(gamce(1,1),200)
      nnga = 0
      irtfg = 0
      ipgac = 0
      ipgac = NLINK('PGAC',0)
      IF ( ipgac .LE. 0 ) GOTO 999
C
C  Now (free) re-fills GAMVE
C
      ncol = IW(ipgac+lmhcol)
      nrow = IW(ipgac+lmhlen)
      DO 10 jpgac = 1 , nrow
        IF ( IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaPE) .NE. iclus )
     .  GOTO 10
        nnga = nnga + 1
        IF ( nnga .GT. 20 ) THEN
          WRITE (IW(6),*) 'Warning!! More than 20 photons in cluster ',
     .               iclus
          nnga = 20
          GOTO 999
        ENDIF
        gamve( 1,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaEC)
        gamve( 2,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaTC)
        gamve( 3,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaPC)
        gamve( 4,nnga) = 1.
        gamve( 6,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaF4)
        gamve( 7,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaQ1)
        gamve( 8,nnga) = IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaST)
        gamve( 9,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaR1)
        gamve(10,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaR2)
        gamve(11,nnga) = IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaQU)/100
        gamve(12,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaER)
     .                 * RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaGC)
        gamve(13,nnga) = IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaQU)
     .                 - IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaQU)/2*2
        gamve(16,nnga) = RW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaDM)
        iovfl          = IW(ipgac+lmhlen+ncol*(jpgac-1)+jpgaQU)
     .                 - gamve(11,nnga)*100
     .                 - gamve(13,nnga)
        icrak          = gamve(13,nnga)
C
C Use the F4 technique only in for 'true' photons, and outside
C cracks and Endcap/Barrel overlaps.
C
        IF  ( gamve(6,nnga) .GT. 0.8 .AND.
     .        gamve(7,nnga) .LT. 1.5 ) THEN
C    .        gamve(7,nnga) .LT. 1.5 .AND.
C    .        icrak         .EQ. 0   .AND.
C    .        iovfl         .EQ. 0         ) THEN
            gamve(1,nnga) = gamve(1,nnga)*gamve(4,nnga)
C
        ELSE
C
C  Else use the raw energy corrected for leakage and saturation.
C
          gamve(1,nnga) = gamve(12,nnga)*gamve(4,nnga)
        ENDIF
   10 CONTINUE
C
 999  RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
