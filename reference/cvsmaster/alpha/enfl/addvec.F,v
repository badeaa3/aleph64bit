head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.25;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.26;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE ADDVEC(VEC, IPARTK, LINK1, LINK2, WEIGHT)
C----------------------------------------------------------------
C!  Store particles in class KENFLW (i.e. -3)
C   ipartk --  1 : charged particles
C              2 : V0s
C              3 : photons
C              4 : neutral hadrons
C              5 : lumi + low part of ECAL/HCAL
C              6 : SiCAL clusters
C              7 : killed clusters (Weight=1 : ECAL
C                                   Weight=0 : HCAL)
C   link1  --    : original JULIA index
C   link2  --    : JULIA index of the sister (V0 tracks only)
C   weight --    : prop. of ECAL energy (neutral hadrons only)
C
C  Patrick Janot -- 19 Apr 1990
C
C  Modif -- 01 oct 1990. store temporary particles in kreco
C           13 jun 1992. use banks instead of QVEC
C----------------------------------------------------------------
#ifndef DOC
#include "parcut.h"
#include "parabank.h"
#include "qcde.h"
#include "qhac.h"
#include "qmacro.h"
C----------------------------------------------------------------
      IF ( vec(4) .LE. 0. ) RETURN
C
C -- Prevents from negative mass squared
C
      IF ( idbg .GE. 1 ) CALL looses('NEGAMASS',1)
      xmomen = SQRT ( vec(1)**2 + vec(2)**2 + vec(3)**2 )
      IF ( xmomen .GT. vec(4) ) THEN
        vec(1) = vec(1) * vec(4) / xmomen
        vec(2) = vec(2) * vec(4) / xmomen
        vec(3) = vec(3) * vec(4) / xmomen
        xmomen = SQRT ( vec(1)**2 + vec(2)**2 + vec(3)**2 )
        vec(4) = vec(4) + 0.0001
        IF ( idbg .GE. 1 ) CALL looses('NEGAMASS',ipartk+1)
      ENDIF
      IF ( ipartk .LE. 2 ) THEN
        xmass2 = 0.1395675**2
      ELSEIF ( ipartk .EQ. 3 ) THEN
        xmass2 = 0.
      ELSE
        xmass2 = AMIN1( vec(4)**2 - xmomen**2, qelep**2/4. )
      ENDIF
C
C -- Prevents from too high momenta
C
      IF ( ipartk .LE. 6 ) THEN
        factor = SQRT ( qelep**2/4.-xmass2 ) / xmomen
        IF ( factor .LT. 1. ) THEN
          xmom2 = 0.
          DO ivec = 1 , 3
            vec(ivec) = vec(ivec) * factor
            xmom2 = xmom2 + vec(ivec)**2
          ENDDO
          xmomen = SQRT( xmom2 )
          vec(4) = SQRT( xmomen**2 + xmass2 )
        ENDIF
      ENDIF
C
C -- Fills the appropriate bank:
C
      IW(ifwvc(ipartk)+lmhlen) = IW(ifwvc(ipartk)+lmhlen) + 1
      nfwvc = IW(ifwvc(ipartk)+lmhlen)
      DO iv = 1 , 4
        RW(ifwvc(ipartk)+lmhlen+kfwvc*(nfwvc-1)+iv) = vec(iv)
        RW(ifwvc(ipartk)+lmhlen+iv) =
     .  RW(ifwvc(ipartk)+lmhlen+iv) + vec(iv)
      ENDDO
      RW(ifwvc(ipartk)+lmhlen+kfwvc*(nfwvc-1)+5) = weight
      IW(ifwvc(ipartk)+lmhlen+kfwvc*(nfwvc-1)+6) = link1
      IW(ifwvc(ipartk)+lmhlen+kfwvc*(nfwvc-1)+7) = link2
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
