head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.30;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.31;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE LUMICA(IECOBJ,IOK)
C---------------------------------------------------------------------
C! LCAL cleaning
C
C  Patrick Janot -- 26 April 1990
C---------------------------------------------------------------------
#ifndef DOC
#include "parcut.h"
#include "parabank.h"
#include "qcde.h"
      DIMENSION QT(KCQVEC,1), KT(KCQVEC,1), QV(KCQVRT,1), KV(KCQVEC,1)
#include "qhac.h"
#include "qmacro.h"
C---------------------------------------------------------------------
      iok = 0
      mod1 = 0
      mod2 = 0
      icluec = ktn(iecobj)
      etotrw = qpecer(iecobj)
      DO 1 itow = 1 , nplsd
        IF ( itabl(iplsd, itow, jplspe) .NE. icluec ) GOTO 1
        iaddr = itabl(iplsd, itow, jplsad)
        modu = iaddr/512 + 1
        IF ( modu .LE. 0 .OR. modu .GT. 4 ) GOTO 1
        IF ( mod1 .EQ. 0 ) THEN
          mod1 = modu
        ELSEIF ( mod2 .EQ. 0 .AND. mod1 .NE. modu ) THEN
          mod2 = modu
        ENDIF
    1 CONTINUE
      epadl = padl(mod1)
      ewirl = wirl(mod1)
      edifl = difl(mod1)
      IF ( mod2 .NE. 0 ) THEN
        epadl = epadl + padl(mod2)
        ewirl = ewirl + wirl(mod2)
        edifl = edifl + difl(mod2)
      ENDIF
C
      IF ( idbg .GE. 10 .AND.
     .   ( epadl .NE. 0 .OR. ewirl .NE. 0 ) ) THEN
        CALL hfill(120,epadl,ewirl,1.)
        CALL hfill(121,edifl,0.,1.)
        CALL hfill(122,epadl/(ewirl+.01),0.,1.)
        CALL hfill(122+mod1,epadl/(ewirl+.01),0.,1.)
      ENDIF
      IF ( idbg .GE. 10 ) WRITE (IW(6),*) 'Lumi : modules/clu/pad/fil ',
     &   mod1, mod2, qe(iecobj), epadl, ewirl

      IF ( idbg .GE. 1 ) CALL looses('LCALCLUS',1)

      IF ( qe(iecobj)/5. .GT. ewirl ) GOTO 999
      IF ( idbg .GE. 1 ) CALL looses('LCALCLUS',2)
C
      IF ( etotrw - ewirl .GT. 2. ) THEN
        corfac = ewirl/etotrw
        IF ( idbg .GE. 11 )
     .  WRITE (IW(6),*) ' LCAL cluster energy scaled by : ',corfac
        rw(ipeco+lmhlen+(icluec-1)*iw(ipeco+1)+jpecer) =
     .  rw(ipeco+lmhlen+(icluec-1)*iw(ipeco+1)+jpecer) * corfac
        rw(ipeco+lmhlen+(icluec-1)*iw(ipeco+1)+jpecec) =
     .  rw(ipeco+lmhlen+(icluec-1)*iw(ipeco+1)+jpecec) * corfac
        etotrw = qpecer(iecobj)
      ENDIF
      IF ( idbg .GE. 1 ) CALL looses('LCALCLUS',3)
C
C Quality of cluster
C
      IF ( edifl .GE. 2.) THEN
        pp3  = 1. - qpece1(iecobj) - qpece2(iecobj)
        IF ( qpece1(iecobj) .GT. .99 .OR.
     .       qpece2(iecobj) .GT. .99 .OR.
     .       pp3            .GT. .99  )
     .  GOTO 999
      ENDIF
      IF ( idbg .GE. 1 ) CALL looses('LCALCLUS',4)
C
      iok = 1
  999 RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
