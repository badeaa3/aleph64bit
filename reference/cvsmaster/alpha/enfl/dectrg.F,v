head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.26;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.27;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE DECTRG(IPECO,ITRGT1,ITRGT2)
C------------------------------------------------------------------
C! Trigger decoding
C
C Modif : L. Duflot (30 Aug 95) : Include new trigger schemes
C------------------------------------------------------------------
#ifndef DOC
#include "qcde.h"
      INTEGER altrig
#include "qhac.h"
#include "qmacro.h"
C------------------------------------------------------------------
      itrgw  = 0
      itrgfl = 0
      itrgt1 = 0
      itrgt2 = 0
      ifwev = NLINK('FWEV',0)
      ieaux = NLINK('EAUX',0)
      IF     ( ipeco .LE. 0 .AND. ifwev .GT. 0 ) THEN
        itrgw = IW(ifwev+lmhlen+1)
      ELSEIF ( XMINI .AND. ieaux .GT. 0 ) THEN
        itrgw = IW(ieaux+lmhlen+1)
      ELSE
        IF ( krun .LT. 4000 ) then
          IF ( NLINK('X1RG',0) .GT. 0 ) THEN
            CALL x1redo
          ELSE
            CALL x1trg
          ENDIF
        ENDIF
        itrgfl = ALTRIG(itrg1,itrg2,itrg3)
        IF ( itrgfl .LE. 0 ) THEN
C         PRINT *,'!!! No trigger bank !!!'
C         PRINT *,'ALTRIG :',itrgfl
          itrgw = 0
        ELSE
         itrgw = itrg1
        ENDIF
      ENDIF
C -- Trigger Type
C -- ECAL Barrel Total Energy
      itrgt1 =          8 * IBITS(itrgw,17,1)
C -- ECAL End Cap Coincidence
      itrgt1 = itrgt1 + 1 * IBITS(itrgw,20,1)
C -- ECAL End Cap A Total Energy
      IF ( krun .LT. 6000 .AND. NLINK('X1RG',0) .LE. 0 ) THEN
        itrgt1 = itrgt1 + 2 * IBITS(itrgw,24,1)
      ELSE
        itrgt1 = itrgt1 + 2 * IBITS(itrgw,18,1)
      ENDIF
C -- ECAL End Cap B Total Energy
      IF ( krun .LT. 6000 .AND. NLINK('X1RG',0) .LE. 0 ) THEN
        itrgt1 = itrgt1 + 4 * IBITS(itrgw,25,1)
      ELSE
        itrgt1 = itrgt1 + 4 * IBITS(itrgw,19,1)
      ENDIF
C -- Single Muon (HCAL Penetration) Trigger
      itrgt2 =          1 * IBITS(itrgw,8,1)
C -- Single Charged Electromagnetic Trigger
      itrgt2 = itrgt2 + 2 * IBITS(itrgw,9,1)
C --
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
