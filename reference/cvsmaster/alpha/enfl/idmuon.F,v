head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.29;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.30;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE IDMUON(ICH,NEXP,NFIR,N10,N03,NMU,IDF,EHC,LIDT,
     .                  xmult,rapp,ang,ishad,sudnt,imcf)
C-----------------------------------------------------------------
C! Return muon identication information for the ENFLW track ich
C
C  Input:  -- ich:   The ENFLW track
C
C  Output: -- nexp: number of expected planes in the HCAL
C          -- nfir: number of fired    planes in the HCAL
C          -- n10 : number of fired    planes in the last 10
C          -- n03 : number of fired    planes in the last 3
C          -- nmu : number of fired    muon chamber layers
C          -- idf : official ALEPH muon flag
C          -- ehc : energy of he PHCO associated to ich
C          -- lidt: local identification flag
C          -- xmult --> imcf : same definition as in QMUIDO
C
C  Patrick Janot - 27 June 1991
C-----------------------------------------------------------------
#ifndef DOC
#include "parcut.h"
#include "qcde.h"
#include "qmacro.h"
C
      jch = ichefw(ich)
C
      IF ( jch .GE. kfrtot(3) .OR. jch .LT. kfrtot(1) ) THEN
        nexp = 0
        nfir = 0
        n10  = 0
        n03  = 0
        nmu  = 0
        idf  = 0
        ehc  = 0.
        lidt = 5
        xmult = 0.
        rapp  = 0.
        ang   = 0.
        ishad = 0
        sudnt = 0.
        imcf  = 0
      ELSE
        jch = jch - kfrtot(1) + 1
        nexp = muflg(jch)/20
        nfir = muwrd(jch)/2000
        n10  = (muwrd(jch) - nfir*2000)/100
        n03  = (muwrd(jch) - nfir*2000 - n10*100)/10
        nmu  = (muwrd(jch) - nfir*2000 - n10*100-n03*10)/1
        idf  = muflg(jch) - nexp*20
        IF ( ( idf .GE.  5 .AND. idf .LE.  9 ) .OR.
     .       ( idf .GE. 16 .AND. idf .LE. 19 ) ) THEN
          idf = idf - 20
          IF ( idf .EQ. -4 ) idf = -10
          nexp = nexp + 1
        ENDIF
        ehc  = ehcal(jch)
        lidt = idtflg(jch)
        xmult = yxmult(jch)
        rapp  = yrapp (jch)
        ang   = yang  (jch)
        ishad = jishad(jch)
        sudnt = ysudnt(jch)
        imcf  = jimcf (jch)
      ENDIF
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
