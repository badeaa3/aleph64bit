head	1.1;
branch	1.1.1;
access;
symbols
	alpha126_22:1.1.1.1
	alpha126_21:1.1.1.1
	alpha126_20:1.1.1.1
	alpha126_19:1.1.1.1
	alpha126_18:1.1.1.1
	alpha126_17:1.1.1.1
	alpha126_16:1.1.1.1
	alpha126_15:1.1.1.1
	alpha126_14:1.1.1.1
	alpha126_13:1.1.1.1
	alpha126_12:1.1.1.1
	alpha126_11:1.1.1.1
	alpha126_10:1.1.1.1
	alpha126_09:1.1.1.1
	alpha126_08:1.1.1.1
	alpha126_07:1.1.1.1
	alpha126_06:1.1.1.1
	alpha126_05:1.1.1.1
	alpha126_04:1.1.1.1
	alpha126_03:1.1.1.1
	alpha126_02:1.1.1.1
	alpha126_1:1.1.1.1
	alpha125_17:1.1.1.1
	alpha125_16:1.1.1.1
	alpha125_15:1.1.1.1
	alpha125_14:1.1.1.1
	alpha125_13:1.1.1.1
	alpha125_12:1.1.1.1
	alpha125_11:1.1.1.1
	alpha125_10:1.1.1.1
	alpha125_09:1.1.1.1
	alpha125_08:1.1.1.1
	alpha125_07:1.1.1.1
	alpha125_06:1.1.1.1
	alpha125_05:1.1.1.1
	alpha125_04:1.1.1.1
	alpha125_03:1.1.1.1
	alpha125_02:1.1.1.1
	alpha125_01:1.1.1.1
	alpha124_19:1.1.1.1
	alpha125:1.1.1.1
	alpha124_18:1.1.1.1
	alpha124_17:1.1.1.1
	alpha124_16:1.1.1.1
	alpha124_15:1.1.1.1
	alpha124_14:1.1.1.1
	alpha124_13:1.1.1.1
	alpha124_12:1.1.1.1
	alpha124_11:1.1.1.1
	alpha124_10:1.1.1.1
	alpha124_09:1.1.1.1
	alpha124_08:1.1.1.1
	alpha124_07:1.1.1.1
	alpha124_7:1.1.1.1
	alpha124_06:1.1.1.1
	alpha124_05:1.1.1.1
	alpha124_04:1.1.1.1
	alpha124_03:1.1.1.1
	alpha124_02:1.1.1.1
	alpha124_01:1.1.1.1
	alpha124:1.1.1.1
	alpha123_12:1.1.1.1
	alpha123_11:1.1.1.1
	alpha123_10:1.1.1.1
	alpha123_9:1.1.1.1
	alpha123_8:1.1.1.1
	alpha123_7:1.1.1.1
	alpha123_6:1.1.1.1
	alpha123_5:1.1.1.1
	alpha123_4:1.1.1.1
	alpha123_3:1.1.1.1
	alpha123_2:1.1.1.1
	alpha123:1.1.1.1
	alpha122_48:1.1.1.1
	alpha122_47:1.1.1.1
	alpha122_46:1.1.1.1
	alpha122_45:1.1.1.1
	alpha122_44:1.1.1.1
	alpha122_43:1.1.1.1
	alpha122_42:1.1.1.1
	alpha122_41:1.1.1.1
	alpha122_40:1.1.1.1
	alpha122_39:1.1.1.1
	alpha122_38:1.1.1.1
	alpha122_37:1.1.1.1
	alpha122_36:1.1.1.1
	alpha122_35:1.1.1.1
	alpha122_34:1.1.1.1
	alpha122_33:1.1.1.1
	alpha122_32:1.1.1.1
	alpha122_31:1.1.1.1
	alpha122_30:1.1.1.1
	alpha122_29:1.1.1.1
	alpha122_28:1.1.1.1
	alpha122_27:1.1.1.1
	alpha122_26:1.1.1.1
	alpha122_25:1.1.1.1
	alpha122_24:1.1.1.1
	alpha122_23:1.1.1.1
	alpha122_22:1.1.1.1
	alpha122_21:1.1.1.1
	alpha122_20:1.1.1.1
	alpha122_19:1.1.1.1
	alpha122_18:1.1.1.1
	alpha122_17:1.1.1.1
	alpha122_16:1.1.1.1
	alpha122_15:1.1.1.1
	alpha122_14:1.1.1.1
	alpha122_13:1.1.1.1
	alpha122_12:1.1.1.1
	alpha122_11:1.1.1.1
	alpha122_10:1.1.1.1
	alpha122_9:1.1.1.1
	alpha122_8:1.1.1.1
	alpha122_6:1.1.1.1
	alpha122_5:1.1.1.1
	alpha122:1.1.1.1
	alpha212:1.1.1.1
	ALPHA212:1.1.1;
locks; strict;
comment	@c @;


1.1
date	96.03.14.12.42.33;	author flr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.03.14.12.42.34;	author flr;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@      SUBROUTINE V0SUM
C-----------------------------------------------------------------------
C!  Determine the energy carried by V0's (K0L, Lambda , conv. photon)
C
C  Patrick Janot -- 18 Apr 1990
C-----------------------------------------------------------------------
#ifndef DOC
#include "parcut.h"
      DIMENSION mot(200)
#include "qcde.h"
#include "qhac.h"
#include "qmacro.h"
C-----------------------------------------------------------------------
      v0mult = 0.
      nv0mlt = 0
      CALL vzero(kav(1),200)
      CALL vzero(kam(1),200)
      CALL vzero(mot(1),200)
C
C  Loop on bad tracks  (CHT sector)
C
      DO 2 jch = kfcht, klcht
C -- Unlocked tracks
        IF ( xlock(jch) ) GOTO 2
C-- Bad tracks only ( but with more than 4 TPC points )
        IF ( kfrtnt(jch)   .LT. n0 ) GOTO 2
        IF ( ABS(qzb(jch)) .LT. z0 .AND. ABS(qdb(jch)) .LT. d0 .AND.
     .     ( qp(jch) .LE. 15. .OR. kfrtni(jch) .GE. 1 .OR.
     .       kfrtnt(jch) .GE. 8 .OR. keidip(jch) .EQ. 1 ) ) GOTO 2
        IF ( idbg .GE. 10 ) WRITE (IW(6),*) 'Track : ',jch
C-- Track already associated :
        DO itaken = 1, 200
          IF ( kam(itaken) .EQ. 0 ) GOTO 20
          IF ( jch .EQ. KCHT(kam(itaken)) ) THEN
            dstmn = 0.
            mothmn = mot(itaken)
            iv0mn = kam(itaken)
            GOTO 21
          ENDIF
        ENDDO
   20   CONTINUE
C
C  Loop on V0 associated tracks ( DCT sector )
C
        dstmn = 999.
        DO 1 iv0 = kfdct , kldct
          ich = kcht(iv0)
          IF ( ich .NE. jch ) GOTO 1
C
C -- Loop on corresponding V0s
C
          DO 10 kv0 = 1 , knmoth(iv0)
            mothv0 = kmoth(iv0,kv0)
            IF ( idbg .GE. 10 )
     .      WRITE (IW(6),*) 'V0 : ',kcht(kdau(mothv0,1)),
     .                         kcht(kdau(mothv0,2))
C Sister already associated !
            IF (kcht(kdau(mothv0,1)) .EQ. jch ) is = 2
            IF (kcht(kdau(mothv0,2)) .EQ. jch ) is = 1
            DO 11 jv0mlt = 1 , nv0mlt
            IF (kcht(kdau(mothv0,is)) .EQ.      kav(jv0mlt) ) GOTO 10
   11       IF (kcht(kdau(mothv0,is)) .EQ. kcht(kam(jv0mlt))) GOTO 10
C Check n_TPC (Ian's Bug)
            IF ( kfrtnt(kcht(kdau(mothv0,is))) .LT. n0 ) GOTO 10
C-- Minimal distance from V0 to vertex ( d0 , z0 )
            alphvx = - ( qx(mothv0)*qyv0vx(mothv0)
     .               +   qy(mothv0)*qyv0vy(mothv0) )
     .               / ( qx(mothv0)**2 + qy(mothv0)**2 )
            distvx = ( qyv0vx(mothv0) + alphvx*qx(mothv0) ) **2
     .             + ( qyv0vy(mothv0) + alphvx*qy(mothv0) ) **2
            distvx = sqrt(distvx)
            zcorvx = qyv0vz(mothv0) + alphvx * qz(mothv0)
            dist = SQRT(distvx**2+zcorvx**2)
            IF ( idbg .GE. 10 ) THEN
              WRITE (IW(6),*) 'V0 origin : ',qyv0vX(mothv0),
     &                         qyv0vY(mothv0),qyv0vZ(mothv0)
              WRITE (IW(6),*) 'V0 impuls. : ',qx(mothv0),qy(mothv0),
     .                                   qz(mothv0)
              WRITE (IW(6),*) 'V0 d0/z0/dist  : ', distvx,zcorvx,dist
            ENDIF
            IF ( distvx      .GT.  5.0 .OR.
     .           abs(zcorvx) .GT. 15.0 ) GOTO 10
            IF ( dist .LT. dstmn ) THEN
              dstmn  = dist
              mothmn = mothv0
              iv0mn  = iv0
            ENDIF
   10     CONTINUE
    1   CONTINUE
C
   21   IF ( dstmn .LT. 999. ) THEN
          mothv0 = mothmn
          i1s = kdau(mothv0,1)
          i2s = kdau(mothv0,2)
          iv0 = iv0mn
          nv0mlt = nv0mlt + 1
          v0mult = v0mult + 1.
          kav(nv0mlt) = jch
          IF ( KCHT(i1s) .EQ. jch ) kam(nv0mlt) = i2s
          IF ( KCHT(i2s) .EQ. jch ) kam(nv0mlt) = i1s
          mot(nv0mlt) = mothv0
          IF ( idbg .GE. 10 ) THEN
            isis = kam(nv0mlt)
            WRITE (IW(6),*) ' Track V0 found : ',jch,iv0
            WRITE (IW(6),*) ' Sister         : ',KCHT(isis),isis
          ENDIF
          vec(1) = qx(iv0)
          vec(2) = qy(iv0)
          vec(3) = qz(iv0)
          vec(4) = qe(iv0)
          CALL addvec(vec,2,jch,kam(nv0mlt),1.)
C
        ELSE
          CALL qltrk(jch)
        ENDIF
C
    2 CONTINUE
C
      RETURN
      END
#endif
@


1.1.1.1
log
@import alpha122 from alws
@
text
@@
