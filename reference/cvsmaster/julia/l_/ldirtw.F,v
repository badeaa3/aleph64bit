head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.25.05;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.53;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.54;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE LDIRTW(THETA,PHI,IADDR,DIST)
C-----------------------------------------------------------------------
C! Extrapolate track to Lcal reference plane
C!
C!   Author   : P. H. Hansen   880418
C!   Input    : THETA, PHI    track direction
C!   Output   : IADDR         tower address
C!              DIST(2)       Hor/Ver distance from inner edge (signed)
C!
C!   Description :
C!   ===========
C?      Extrapolate to reference plane (average shower max)
C?      Make alignment corrections and find local coordinates
C?      Test if these are inside the Lcal acceptance + 1cm
C?      Find the corresponding tower address
C-----------------------------------------------------------------------
#ifndef DOC
#include "rparac.h"
#include "bcs.h"
#include "lcnamc.h"
#include "lcrejj.h"
#include "lalijj.h"
#include "lslojj.h"
#include "lmtyjj.h"
#include "lwrgjj.h"
#include "lypars.h"
#include "llayjj.h"
      DIMENSION XTRG(3),DTRG(3),XTRL(3)
      DIMENSION DIST(*)
#include "bmacro.h"
C----------------------------------------------------------------------
      IADDR = 0
C Geometry banks
      KLALI = IW(NALALI)
      KLSLO = IW(NALSLO)
      KLMTY = IW(NALMTY)
      KLWRG = IW(NALWRG)
      KLLAY = IW(NALLAY)
      KLCRE = IW(NALCRE)
C
C Direction in global frame
      DTRG(1) = SIN(THETA)*COS(PHI)
      DTRG(2) = SIN(THETA)*SIN(PHI)
      DTRG(3) = COS(THETA)
C
C Module number
      MODU = 1
      IF(DTRG(1).GT.0.) MODU = 2
      IF(DTRG(3).GT.0.) MODU = MODU + 2
C
C Position in global coordinates
      XTRG(3) = RTABL(KLCRE,1,JLCRZC)*SIGN(1.,DTRG(3))
      XTRG(1) = XTRG(3)*DTRG(1)/DTRG(3)
      XTRG(2) = XTRG(3)*DTRG(2)/DTRG(3)
C
C and in local coordinates
      XTRL(3) = XTRG(3) - RTABL(KLSLO,MODU,JLSLXS+2)
     &                  - RTABL(KLALI,MODU,JLALDX+2)
      XTRL(1) = XTRG(1) - RTABL(KLALI,MODU,JLALDX)
     &                  - RTABL(KLALI,MODU,JLALDR+1)*XTRL(3)
     &                  + RTABL(KLALI,MODU,JLALDR+2)*XTRG(2)
      XTRL(2) = XTRG(2) - RTABL(KLALI,MODU,JLALDX+1)
     &                  - RTABL(KLALI,MODU,JLALDR+2)*XTRG(1)
     &                  + RTABL(KLALI,MODU,JLALDR)*XTRL(3)
C
C Test Lcal acceptance:
C
C   The wire support covers in each end
      DY1 = RTABL(KLMTY,1,JLMTDT)
C
C   Impact point in wire plane quadrant
      X = ABS(XTRL(1))
      Y = ABS(XTRL(2))
C
C   Find distance from inter-model crack
      DIST(1) = X - RTABL(KLWRG,1,JLWRXL)
      DIST(2) = 24.5
C
C   Find distance to "staircase" boundary
C   - approximate it by straight line: Y = YEDGLC - TEDGLC*X
      IF(Y.GT.RTABL(KLWRG,5,JLWRYL)+DY1) THEN
         DIS = X - (YEDGLC-Y)/TEDGLC
         IF(DIS.LT.DIST(1)) DIST(1)=DIS
         DIST(2) = Y - (YEDGLC-X*TEDGLC)
C
C or distance to inner vertical boundary
      ELSE
         DIST(1) = X - RTABL(KLWRG,6,JLWRXL)
      ENDIF
C
C Determine pad size
      SIZE = RTABL(KLCRE,1,JLCRSR)
C
C Allow one pad size outside acceptance
      IF(DIST(1).LT.-SIZE.OR.DIST(2).LT.-SIZE)              GOTO 999
C
C Determine row and column
      IY = MIN0(15,INT((Y-RTABL(KLMTY,1,JLMTCC))/SIZE)+1)
      IX = MIN0(16,INT(X/SIZE+.5))
      IF(IX.LE.0) IX=1
      IF(IY.LE.0) IY=1
C
      IF(IY.GE.1.AND.IY.LE.3) THEN
         IX = MAX0(4,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.4) THEN
         IX = MAX0(3,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.5) THEN
         IX = MAX0(2,IX)
         GOTO 30
      ENDIF
C
      IF(IY.GE.6.AND.IY.LE.8) THEN
         IX = MIN0(15,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.9) THEN
         IX = MIN0(14,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.10.OR.IY.EQ.11) THEN
         IX = MIN0(13,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.12) THEN
         IX = MIN0(12,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.13) THEN
         IX = MIN0(11,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.14) THEN
         IX = MIN0(10,IX)
         GOTO 30
      ENDIF
C
      IF(IY.EQ.15) THEN
         IX = MIN0(8,IX)
         IX = MAX0(3,IX)
         GOTO 30
      ENDIF
   30 CONTINUE
C
C Encode tower address
      IF (XTRL(2) .GE. 0.) THEN
       IY = IY + 15
      ELSE
       IY = 16 - IY
      ENDIF
      IADDR    = IX + 16*(IY-1) + 512*(MODU-1)
C
  999 CONTINUE
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK ldirtw
@


1.1.1.1
log
@import julia 300
@
text
@@
