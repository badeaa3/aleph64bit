head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.5
	jul309:1.5
	jul308_6:1.5
	jul308_5:1.5
	jul308_4:1.5
	jul308_3:1.5
	jul308_2:1.5
	jul308_1:1.5
	jul308:1.5
	jul307_4:1.5
	jul307_3:1.5
	jul307_2:1.5
	jul307_1:1.5
	jul307:1.5
	jul306_3:1.5
	jul306_2:1.5
	jul306_1:1.5
	jul306:1.5
	jul305_4:1.5
	jul305_3:1.5
	jul305_2:1.5
	jul305_1:1.5
	jul305:1.5
	jul304_3:1.5
	jul304_2:1.5
	jul304_1:1.5
	jul304:1.5
	jul303_7:1.5
	jul303_6:1.5
	jul303_5:1.5
	jul303_4:1.5
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	97.07.04.08.11.24;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.06.16.11.45.06;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.06.03.10.26.38;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.25.17;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.54;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.55;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Julia corr 303.4
@
text
@      SUBROUTINE LIDCOD
C-----------------------------------------------------------------------
C! Set acceptance code and quality flag
C!
C!   Author   : P. H. Hansen  890101
C!   Modified : H. Meinhard   05-Mar-1990
C!   Modified : P. H. Hansen  01-May-1996 Fix reference MC energy
C!   Modified : P. H. Hansen  16-Jun-1997 Use BHZ0 bank for Z0 runs from 1996
C!   Modified : P. H. Hansen  24-Jun-1997 Fix reference energy of methods < 9 
C!
C!     Input  : 'LIDT'           Lumi electron candidate bank
C!              'SFTR'           Lumi track bank
C!              'BHAB'           Cuts from data cards
C!     Output :
C!              'LIDT'  IFlag    Track Quality flag
C!                               bit0:    track or patch
C!                               bit1:    track
C!                               bit2:    SATR region
C!              'LIFL'  K1rg     Flag for small fiducial area
C!                               bit0-32: cuts 1-32
C!              'LIFL'  K2rg     Flag for large fiducial area
C!                               bit0-32: cuts 1-32
C!              'LIFL'  KHrg     Flag for high energy threshold
C!                               bit0-32: cuts 1-32
C!              'LIFL'  KLrg     Flag for low energy threshold
C!                               bit0-32: cuts 1-32
C!
C!   Description :
C!   ===========
C?   Encode quality flag in LIDT
C?   Encode Bhabha acceptance code LIFL
C?   Six different acceptance definitions are considered:
C?      1) Tracks used to determine accepted fraction
C?         in SATR region. Cluster centroid used outside.
C?      2) Track required on small side
C?         Either track or cluster is used on the other side.
C?      3) Track required on both sides.
C?      4) Cluster centroid used on both sides.
C?      5) Pad boundaries used on small side.
C?      6) Restricted version of 5)
C?   The definitions are chosen according to the
C?   Method number and the track quality flag in bank BHAB.
C-----------------------------------------------------------------------
#ifndef DOC
#include "rconds.h"
#include "bcs.h"
#include "rflags.h"
#include "rcurnt.h"
#include "lcnamc.h"
#include "lsdajj.h"
#include "lidtjj.h"
#include "lifljj.h"
#include "bhabjj.h"
#include "lalijj.h"
#include "sanamc.h"
#include "sftrjj.h"
#include "srecpc.h"
#include "lcrejj.h"
#include "alcons.h"
      DIMENSION MASK(32)
      LOGICAL BTEST,REJFL
      DATA MASK/1,2,4,8,16,32,64,128,256,512,1024,2048,
     &          4096,8192,16384,32768,16*0/
      DATA MAXM/16/
#include "bmacro.h"
#include "lcmacr.h"
C---------------------------------------------------------------------
C
C Check existence of Lcal electron candidates
      KLIDT = IW(NALIDT)
      IF(KLIDT.LE.0)                                GOTO 999
      NIDT = LROWS(KLIDT)
      IF(NIDT.LE.0)                                 GOTO 999
      KLALI = IW(NALALI)
C
C Book bank for acceptance flags
      LEN = LMHLEN + LLIFLA*NIDT
      CALL AUBOS('LIFL',0,LEN,KLIFL,IGARB)
      IF(IGARB.EQ.2)                                GOTO 997
      CALL BLIST(IW,'T+','LIFL')
      IW(KLIFL+1) = LLIFLA
      IW(KLIFL+2) = NIDT
      KLIDT = IW(NALIDT)
      KLCRE = IW(NALCRE)
      KSFTR = IW(NAMIND('SFTR'))
      KLSDA = IW(NALSDA)
C
C
C Bhabha selection criteria
      KBHAB = IW(NABHAB)
C
C For LEPII calibration runs use BHZ0:
      IF( IRUNRC.GE.40000 .AND. ENERRC.LT.96. ) THEN
        KBHAB = IW(NABHZ0)
      ENDIF
C
      IF(KBHAB.LE.0)                                GOTO 999
      NMETH = MIN0(MAXM,LROWS(KBHAB))
      IF(NMETH.LE.0)                                GOTO 999
C
C Take beam energy
       EBEAM = ENERRC/2.
C
C For all lumi electron candidates
      DO 21 I=1,NIDT
        JTRK = ITABL(KLIDT,I,JLIDST)
        EC = RTABL(KLIDT,I,JLIDEC)
        ILSDA = ITABL(KLIDT,I,JLIDLS)
        IADDR = ITABL(KLSDA,ILSDA,JLSDAD)
C
C Transform cluster theta to subdetector system
        PHCL = RTABL(KLIDT,I,JLIDPC)
        THCL = RTABL(KLIDT,I,JLIDTC)
        IF (THCL .LT. PIBY2) THEN
          X0 = (RTABL(KLALI,3,JLALDX)+RTABL(KLALI,4,JLALDX))/2.
          Y0 = (RTABL(KLALI,3,JLALDX+1)+RTABL(KLALI,4,JLALDX+1))/2.
          XL = RTABL(KLCRE,1,JLCRZC)*TAN(THCL)*COS(PHCL) - X0
          YL = RTABL(KLCRE,1,JLCRZC)*TAN(THCL)*SIN(PHCL) - Y0
          ZL = RTABL(KLCRE,1,JLCRZC)
        ELSE
            X0 = (RTABL(KLALI,1,JLALDX)+RTABL(KLALI,2,JLALDX))/2.
            Y0 = (RTABL(KLALI,1,JLALDX+1)+RTABL(KLALI,2,JLALDX+1))/2.
            XL = -RTABL(KLCRE,1,JLCRZC)*TAN(THCL)*COS(PHCL) - X0
            YL = -RTABL(KLCRE,1,JLCRZC)*TAN(THCL)*SIN(PHCL) - Y0
            ZL = -RTABL(KLCRE,1,JLCRZC)
        ENDIF
        THCL = ATAN(SQRT(XL**2+YL**2)/ABS(ZL))
C
C Fill 3 quality bits
        IFLAG = 0
        IF(JTRK.NE.0) THEN
          IFLAG = IFLAG+MASK(1)
          IF(ITABL(KSFTR,JTRK,JSFTQF).NE.0)
     &      IFLAG=IFLAG+MASK(2)
        ENDIF
        TSA = RTABL(KLCRE,1,JLCRSA)
        IF(RTABL(KLIDT,I,JLIDTC).LT.TSA.OR.
     &      PI-RTABL(KLIDT,I,JLIDTC).LT.TSA) THEN
          IFLAG=IFLAG+MASK(3)
        ENDIF
C
C Fill Bhabha acceptance code
        ICODH = 0
        ICODL = 0
        ICOD1 = 0
        ICOD2 = 0
C
C Loop over all methods
        DO 15 IM=1,NMETH
          MTYP = ITABL(KBHAB,IM,JBHAME)
          IQUA = ITABL(KBHAB,IM,JBHAQF)
C
C Use track if it exists, otherwise cluster (Method 1 or 2)
          IF(MTYP.EQ.1.OR.MTYP.EQ.2) THEN
            IF(BTEST(IFLAG,IQUA)) THEN
              THETA = RTABL(KSFTR,JTRK,JSFTTH)
              PHI = RTABL(KSFTR,JTRK,JSFTPH)
              X0 = RTABL(KSFTR,JTRK,JSFTX0)
              Y0 = RTABL(KSFTR,JTRK,JSFTY0)
              IF (THETA .LT. PIBY2) THEN
                PHI = PHI + RTABL(KLCRE,1,JLCRZC) * DPHBSR
                XT = X0 + RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * COS(PHI)
                YT = Y0 + RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * SIN(PHI)
                ZT = RTABL(KLCRE,1,JLCRZC)
              ELSE
                PHI = PHI - RTABL(KLCRE,1,JLCRZC) * DPHBSR
                XT = X0 - RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * COS(PHI)
                YT = Y0 - RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * SIN(PHI)
                ZT = -RTABL(KLCRE,1,JLCRZC)
              ENDIF
              PH = ATAN2(YT,XT)
              TH = ATAN(SQRT(XT**2+YT**2)/ZT)
              DX = RTABL(KLIDT,I,JLIDDA+2)
              DY = RTABL(KLIDT,I,JLIDDA+3)
            ELSE
              PH = RTABL(KLIDT,I,JLIDPC)
              TH = RTABL(KLIDT,I,JLIDTC)
              DX = RTABL(KLIDT,I,JLIDDA)
              DY = RTABL(KLIDT,I,JLIDDA+1)
            ENDIF
C
C Use track (Method 3)
          ELSEIF(MTYP.EQ.3) THEN
            IF(BTEST(IFLAG,IQUA)) THEN
              THETA = RTABL(KSFTR,JTRK,JSFTTH)
              PHI = RTABL(KSFTR,JTRK,JSFTPH)
              X0 = RTABL(KSFTR,JTRK,JSFTX0)
              Y0 = RTABL(KSFTR,JTRK,JSFTY0)
              IF (THETA .LT. PIBY2) THEN
                PHI = PHI + RTABL(KLCRE,1,JLCRZC) * DPHBSR
                XT = X0 + RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * COS(PHI)
                YT = Y0 + RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * SIN(PHI)
                ZT = RTABL(KLCRE,1,JLCRZC)
              ELSE
                PHI = PHI - RTABL(KLCRE,1,JLCRZC) * DPHBSR
                XT = X0 - RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * COS(PHI)
                YT = Y0 - RTABL(KLCRE,1,JLCRZC) * TAN(THETA) * SIN(PHI)
                ZT = -RTABL(KLCRE,1,JLCRZC)
              ENDIF
              PH = ATAN2(YT,XT)
              TH = ATAN(SQRT(XT**2+YT**2)/ZT)
              DX = RTABL(KLIDT,I,JLIDDA+2)
              DY = RTABL(KLIDT,I,JLIDDA+3)
            ELSE
              GOTO 15
            ENDIF
C
C Use cluster (Method 4,5,6)
          ELSEIF(MTYP.GE.4) THEN
            DX = RTABL(KLIDT,I,JLIDDA)
            DY = RTABL(KLIDT,I,JLIDDA+1)
            PH = PHCL
            TH = THCL
C
C Use pad boundaries for small area (Method 5,6,7)
            IF(MTYP.GE.5) THEN
              CALL LACCEP(MTYP,IADDR,REJFL)
            ENDIF
          ENDIF
          IF(TH.GT.PIBY2) TH = PI-TH
C
C Take MC energy from BHAB (protect against old DB)
          IF(LCOLS(KBHAB).GE.25) THEN
             IF(IRUNRC.GE.40000.AND.IM.GE.9) THEN
               ESTAN = RTABL(KBHAB,IM,JBHAEG)/2.
             ELSE
               ESTAN = RTABL(KBHAB,IM,JBHAEG)
             ENDIF
          ELSE
             IF(EBEAM.LT.48.) THEN
               ESTAN = 45.6
             ELSE
               ESTAN = 80.
             ENDIF
          ENDIF
C
C Test energy thresholds
          IF(EC/EBEAM.GT.RTABL(KBHAB,IM,JBHAEL)/ESTAN)
     &      ICODL = ICODL+MASK(IM)
          IF(EC/EBEAM.GT.RTABL(KBHAB,IM,JBHAEH)/ESTAN)
     &      ICODH = ICODH+MASK(IM)
C
C Test large fiducial area
          IF(DX.LT.RTABL(KBHAB,IM,JBHAXL+1))            GOTO 14
          IF(DY.LT.RTABL(KBHAB,IM,JBHAYL+1))            GOTO 14
          IF(ABS(COS(PH)).LT.
     &         RTABL(KBHAB,IM,JBHACL+1))                GOTO 14
          IF(ABS(COS(PH)).GT.
     &         RTABL(KBHAB,IM,JBHACH+1))                GOTO 14
          IF(TH.LT.RTABL(KBHAB,IM,JBHATL+1))            GOTO 14
          IF(TH.GT.RTABL(KBHAB,IM,JBHATH+1))            GOTO 14
          ICOD2 = ICOD2 + MASK(IM)
   14     CONTINUE
C
C Test small fiducial area
          IF(MTYP.GE.5) THEN
            IF(.NOT.REJFL) ICOD1 = ICOD1 + MASK(IM)
            GOTO 15
          ENDIF
          IF(DX.LT.RTABL(KBHAB,IM,JBHAXL))              GOTO 15
          IF(DY.LT.RTABL(KBHAB,IM,JBHAYL))              GOTO 15
          IF(ABS(COS(PH)).LT.
     &         RTABL(KBHAB,IM,JBHACL))                  GOTO 15
          IF(ABS(COS(PH)).GT.
     &         RTABL(KBHAB,IM,JBHACH))                  GOTO 15
          IF(TH.LT.RTABL(KBHAB,IM,JBHATL))              GOTO 15
          IF(TH.GT.RTABL(KBHAB,IM,JBHATH))              GOTO 15
          ICOD1 = ICOD1 + MASK(IM)
   15   CONTINUE
C
C Fill track quality in LIDT
        KIDT = KROW(KLIDT,I)
        IW(KIDT+JLIDIF) = IFLAG
C
C Fill acceptance codes in LIFL
        KIFL = KROW(KLIFL,I)
        IW(KIFL+JLIFKH) = ICODH
        IW(KIFL+JLIFKL) = ICODL
        IW(KIFL+JLIFK1) = ICOD1
        IW(KIFL+JLIFK2) = ICOD2
   21 CONTINUE
      GOTO 999
C
  997 CALL REPORT('LIDCOD','AUBOS failure',1)
  999 CONTINUE
      END
#endif
@


1.4
log
@LCAL changes for BHZ0 bank
@
text
@d9 1
d224 2
a225 2
             IF(IRUNRC.GE.40000) THEN
               ESTAN = RTABL(KBHAB,9,JBHAEG)/2.
@


1.3
log
@Mods for julia 281 release. See news for details
@
text
@d8 1
d90 6
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d7 1
d216 5
a220 1
             ESTAN = RTABL(KBHAB,IM,JBHAEG)
d222 5
a226 1
             ESTAN = 45.6
@


1.1
log
@Initial revision
@
text
@a0 1
*DK lidcod
@


1.1.1.1
log
@import julia 300
@
text
@@
