head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.25.02;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.52;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.53;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE LCRPOT
C------------------------------------------------------------------
C! Create Lcal POT banks
C!
C!   Author   : P. H. Hansen   880801
C!   Modified : H. Meinhard    24-Apr-1991
C!   Input    : 'LSDA' 'LPDA' 'LCLU' 'LOBJ' 'LIDT'
C!   Output   : 'PLSD' 'PLPD'
C!              'PCOB' 'PCPA' 'PCHY' 'PCRL'
C!              'PEOB' 'PEHY' 'PEOT'
C!   Created  : 'PLSD' 'PLPD'
C!
C!   Description :
C!   ===========
C?   Create or expand packed banks for POT
C?   Zero suppression is applied:
C?    PLSD row filled if any storey with E > 50 MeV
C?    PLPD row filled for planes with E > 10 MeV
C------------------------------------------------------------------
#ifndef DOC
#include "rparac.h"
#include "bcs.h"
#include "rflags.h"
#include "lcnamc.h"
#include "lsdajj.h"
#include "lpdajj.h"
#include "lobjjj.h"
#include "lclujj.h"
#include "lidtjj.h"
#include "plsdjj.h"
#include "plpdjj.h"
#include "pchyjj.h"
#include "pehyjj.h"
#include "pcobjj.h"
#include "pcrljj.h"
#include "peobjj.h"
#include "peotjj.h"
#include "pcpajj.h"
#include "lpotun.h"
#include "lcrejj.h"
#include "alcons.h"
      EXTERNAL NAMIND
#include "bmacro.h"
C-----------------------------------------------------------------
C
C Check if LCalobjects exist
      KLOBJ = IW(NAMIND('LOBJ'))
      IF(KLOBJ.LE.0)                                    GOTO 999
      NLOB = LROWS(KLOBJ)
      IF(NLOB.LE.0)                                     GOTO 999
C
C Get the "charged" Lcalobjects
      KLIDT = IW(NALIDT)
      NLID = 0
      IF(KLIDT.GT.0) NLID = LROWS(KLIDT)
C
C Create or modify Calobject bank
      KPCOB = IW(NAMIND('PCOB'))
      NCOB = 0
      IF(KPCOB.GT.0) NCOB = LROWS(KPCOB)
      LEN = LMHLEN + (NCOB+NLOB)*LPCOBA
      CALL AUBOS('PCOB',0,LEN,KPCOB,IGARB)
      IF(IGARB.EQ.2)                              GOTO 997
      CALL BLIST(IW,'E+','PCOB')
      IW(KPCOB+1) = LPCOBA
      IW(KPCOB+2) = NCOB+NLOB
C
C Create or expand Calobject Hypothesis bank
      KPCHY = IW(NAMIND('PCHY'))
      NCHY = 0
      IF(KPCHY.GT.0) NCHY = LROWS(KPCHY)
      LEN = LMHLEN + (NCHY+NLOB)*LPCHYA
      CALL AUBOS('PCHY',0,LEN,KPCHY,IGARB)
      IF(IGARB.EQ.2)                              GOTO 997
      CALL BLIST(IW,'E+','PCHY')
      IW(KPCHY+1) = LPCHYA
      IW(KPCHY+2) = NCHY+NLOB
C
C Create or expand Calobject Relations bank
      KPCRL = IW(NAMIND('PCRL'))
      NCRL = 0
      IF(KPCRL.GT.0) NCRL = LROWS(KPCRL)
      LEN = LMHLEN + (NCRL+NLOB)*LPCRLA
      CALL AUBOS('PCRL',0,LEN,KPCRL,IGARB)
      IF(IGARB.EQ.2)                              GOTO 997
      CALL BLIST(IW,'E+','PCRL')
      IW(KPCRL+1) = LPCRLA
      IW(KPCRL+2) = NCRL+NLOB
C
C Create or expand Calobject neutral particle bank
      KPCPA = IW(NAMIND('PCPA'))
      NCPA = 0
      IF(KPCPA.GT.0) NCPA = LROWS(KPCPA)
      IF(NLOB.GT.0) THEN
         LEN = LMHLEN + (NCPA+NLOB)*LPCPAA
         CALL AUBOS('PCPA',0,LEN,KPCPA,IGARB)
         IF(IGARB.EQ.2)                           GOTO 997
         CALL BLIST(IW,'E+','PCPA')
         IW(KPCPA+1) = LPCPAA
         IW(KPCPA+2) = NCPA+NLOB
      ENDIF
C
C Create or expand ECalobject bank
      KPEOB = IW(NAMIND('PEOB'))
      NEOB = 0
      IF(KPEOB.GT.0) NEOB = LROWS(KPEOB)
      LEN = LMHLEN + (NEOB+NLOB)*LPEOBA
      CALL AUBOS('PEOB',0,LEN,KPEOB,IGARB)
      IF(IGARB.EQ.2)                              GOTO 997
      CALL BLIST(IW,'E+','PEOB')
      IW(KPEOB+1) = LPEOBA
      IW(KPEOB+2) = NEOB+NLOB
C
C Create or expand ECalobject Hypothesis bank
      KPEHY = IW(NAMIND('PEHY'))
      NEHY = 0
      IF(KPEHY.GT.0) NEHY = LROWS(KPEHY)
      LEN = LMHLEN + (NEHY+NLOB)*LPEHYA
      CALL AUBOS('PEHY',0,LEN,KPEHY,IGARB)
      IF(IGARB.EQ.2)                              GOTO 997
      CALL BLIST(IW,'E+','PEHY')
      IW(KPEHY+1) = LPEHYA
      IW(KPEHY+2) = NEHY+NLOB
C
C Create or expand ECalobject Topology bank
      KPEOT = IW(NAMIND('PEOT'))
      NEOT = 0
      IF(KPEOT.GT.0) NEOT = LROWS(KPEOT)
      LEN = LMHLEN + (NEOT+NLOB)*LPEOTA
      CALL AUBOS('PEOT',0,LEN,KPEOT,IGARB)
      IF(IGARB.EQ.2)                             GOTO 997
      CALL BLIST(IW,'E+','PEOT')
      IW(KPEOT+1) = LPEOTA
      IW(KPEOT+2) = NEOT+NLOB
C
C Create Lcal storey data bank with maximum size
      IF (IW(NAMIND('PLSD')).NE.0) CALL BDROP(IW,'PLSD')
      KLSDA = IW(NALSDA)
      NSDA = LROWS(KLSDA)
      LEN = LMHLEN + LPLSDA*NSDA
      CALL AUBOS('PLSD',0,LEN,KPLSD,IGARB)
      IF(IGARB.EQ.2)                                    GOTO 997
      CALL BLIST(IW,'E+','PLSD')
      IF(IGARB.NE.0) THEN
         KLSDA = IW(NALSDA)
      ENDIF
      NPLS = 0
      IW(KPLSD+1) = LPLSDA
      DO 100 I = 1,NSDA
         KLSD = KROW(KLSDA,I)
         IE1 = NINT(RW(KLSD+JLSDEN)/UNITES)
         IE2 = NINT(RW(KLSD+JLSDEN+1)/UNITES)
         IE3 = NINT(RW(KLSD+JLSDEN+2)/UNITES)
C
C Clear a word in LSDA (which is  not used)
         IW(KLSD+JLSDLS) = 0
C
         IF(IE1.LE.10.AND.IE2.LE.10.AND.IE3.LE.10) GOTO 100
         NPLS = NPLS+1
         KPLS = KROW(KPLSD,NPLS)
         IW(KPLS+JPLSE1) = IE1
         IW(KPLS+JPLSE2) = IE2
         IW(KPLS+JPLSE3) = IE3
         IW(KPLS+JPLSAD) = IW(KLSD+JLSDAD)
         IF(IW(KLSD+JLSDLC).NE.0) THEN
           IW(KPLS+JPLSPE) = NEOB+IW(KLSD+JLSDLC)
         ELSE
           IW(KPLS+JPLSPE) = 0
         ENDIF
C
C Store the PLSD row number in the cleared LSDA word
         IW(KLSD+JLSDLS) = NPLS
  100 CONTINUE
C
C Shrink PLSD
      IW(KPLSD+2) = NPLS
      LEN = LMHLEN + LPLSDA*NPLS
      CALL AUBOS('PLSD',0,LEN,KPLSD,IGARB)
      IF(IGARB.EQ.2)                                    GOTO 997
C
C
C Create Lcal wire data bank with maximum size
      IF (IW(NAMIND('PLPD')).NE.0) CALL BDROP(IW,'PLPD')
      KLPDA = IW(NALPDA)
      IF(KLPDA.LE.0) GOTO 220
      NPDA = LROWS(KLPDA)*(LLPDAA-1)
      LEN = LMHLEN + LPLPDA*NPDA
      CALL AUBOS('PLPD',0,LEN,KPLPD,IGARB)
      IF(IGARB.EQ.2)                                    GOTO 997
      CALL BLIST(IW,'E+','PLPD')
      IF(IGARB.NE.0) THEN
         KLPDA = IW(NALPDA)
      ENDIF
      IW(KPLPD+1) = LPLPDA
      NPLP = 0
      DO 200 I = 1,LROWS(KLPDA)
         KLPD = KROW(KLPDA,I)
         DO 210 J = 1,39
           IENE = NINT(RW(KLPD+JLPDEN+J-1)/UNITEW)
           IF(IENE.GT.10) THEN
              NPLP = NPLP+1
              KPLP = KROW(KPLPD,NPLP)
              IW(KPLP+JPLPAD) = (IW(KLPD+JLPDMO)-1)*64 + J
              IW(KPLP+JPLPEN) = IENE
            ENDIF
  210    CONTINUE
  200 CONTINUE
C Shrink PLPD
      IW(KPLPD+2) = NPLP
      LEN = LMHLEN + LPLPDA*NPLP
      CALL AUBOS('PLPD',0,LEN,KPLPD,IGARB)
      IF(IGARB.EQ.2)                                    GOTO 997
  220 CONTINUE
C
C Restore bank pointers
      KLCRE = IW(NALCRE)
      KLOBJ = IW(NALOBJ)
      KLCLU = IW(NALCLU)
      KLIDT = IW(NALIDT)
      KLSDA = IW(NALSDA)
      KPCOB = IW(NAMIND('PCOB'))
      KPCHY = IW(NAMIND('PCHY'))
      KPCRL = IW(NAMIND('PCRL'))
      KPCPA = IW(NAMIND('PCPA'))
      KPEOB = IW(NAMIND('PEOB'))
      KPEHY = IW(NAMIND('PEHY'))
      KPEOT = IW(NAMIND('PEOT'))
C
C Fill calobject banks
      DO 500 I=1,NLOB
         NCHY = NCHY+1
         NCOB = NCOB+1
         NCRL = NCRL+1
         NEOB = NEOB+1
         NEHY = NEHY+1
         NEOT = NEOT+1
C
C PCHY
         KCHY = KROW(KPCHY,NCHY)
         IW(KCHY+JPCHBH) = 1
         IW(KCHY+JPCHKT) = ITABL(KLOBJ,I,JLOBKT)
         IW(KCHY+JPCHPC) = NCOB
C
C PCRL
         KCRL = KROW(KPCRL,NCRL)
         IW(KCRL+JPCRPC) = NCOB
         IW(KCRL+JPCRPE) = NEOB
C
C PEOB
         KEOB = KROW(KPEOB,NEOB)
         ERAW = RTABL(KLCLU,I,JLCLE4)
         RW(KEOB+JPEOER) = ERAW
         RW(KEOB+JPEOE1) = RTABL(KLCLU,I,JLCLE1)/ERAW
         RW(KEOB+JPEOE2) = RTABL(KLCLU,I,JLCLE2)/ERAW
         RW(KEOB+JPEOEC) = RTABL(KLOBJ,I,JLOBEC)
         RW(KEOB+JPEOKD) = RTABL(KLOBJ,I,JLOBKD)
         RW(KEOB+JPEOR1) = RTABL(KLOBJ,I,JLOBR1)
         RW(KEOB+JPEOR2) = RTABL(KLOBJ,I,JLOBR2)
C
C PEHY
         KEHY = KROW(KPEHY,NEHY)
         IW(KEHY+JPEHBH) = 1
         IW(KEHY+JPEHKT) = ITABL(KLOBJ,I,JLOBKT)
         IW(KEHY+JPEHPE) = NEOB
C
C PEOT
            KEOT = KROW(KPEOT,NEOT)
            RW(KEOT+JPEOT1) = RTABL(KLCLU,I,JLCLT1)
            RW(KEOT+JPEOP1) = RTABL(KLCLU,I,JLCLF1)
            RW(KEOT+JPEOS1) = RTABL(KLCLU,I,JLCLW1)/
     &                        RTABL(KLCRE,1,JLCRZ1)
            RW(KEOT+JPEOT2) = RTABL(KLCLU,I,JLCLT2)
            RW(KEOT+JPEOP2) = RTABL(KLCLU,I,JLCLF2)
            RW(KEOT+JPEOS2) = RTABL(KLCLU,I,JLCLW2)/
     &                        RTABL(KLCRE,1,JLCRZ2)
            RW(KEOT+JPEOT3) = RTABL(KLCLU,I,JLCLT3)
            RW(KEOT+JPEOP3) = RTABL(KLCLU,I,JLCLF3)
            RW(KEOT+JPEOS3) = RTABL(KLCLU,I,JLCLW3)/
     &                        RTABL(KLCRE,1,JLCRZ3)
            IW(KEOT+JPEOPE) = NEOB
C
C If "neutral"
         IF(ITABL(KLOBJ,I,JLOBLI).EQ.0) THEN
         ENDIF
C
C Put any Lcob into PCPA
            NCPA = NCPA + 1
            KPCP = KROW(KPCPA,NCPA)
C
C  Codes are described in ddl of PCPA
C
            KODE=22
            IW(KPCP+JPCPNA) = KODE
            RW(KPCP+JPCPEN) = RTABL(KLOBJ,I,JLOBEC)
            RW(KPCP+JPCPTE) = RTABL(KLOBJ,I,JLOBTC)
            RW(KPCP+JPCPFI) = RTABL(KLOBJ,I,JLOBPC)
            R1 = RTABL(KLOBJ,I,JLOBR3)
            R1 = AMAX1(-10.,R1)
            R1 = AMIN1(10.,R1)
            RW(KPCP+JPCPR1) = R1
            R2 = RTABL(KLOBJ,I,JLOBR4)
            R2 = AMAX1(-10.,R2)
            R2 = AMIN1(10.,R2)
            RW(KPCP+JPCPR2) = R2
            IW(KPCP+JPCPPC) = NCHY
  500 CONTINUE
C
      IF(FDEBRF.AND.JDBDRF(JULLC).GE.4) THEN
         CALL PRTABL('PLSD',0)
C
         CALL PRTABL('PCOB',0)
         CALL PRTABL('PCHY',0)
         CALL PRTABL('PCRL',0)
         CALL PRTABL('PCPA',0)
         CALL PRTABL('PEOB',0)
         CALL PRTABL('PEHY',0)
         CALL PRTABL('PEOT',0)
      ENDIF
C
      GOTO 999
  997 CALL REPORT('LCRPOT','AUBOS failure',1)
  999 CONTINUE
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK lcrpot
@


1.1.1.1
log
@import julia 300
@
text
@@
