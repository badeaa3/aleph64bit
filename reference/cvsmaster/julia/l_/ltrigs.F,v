head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.3
	jul305:1.3
	jul304_3:1.3
	jul304_2:1.3
	jul304_1:1.3
	jul304:1.3
	jul303_7:1.3
	jul303_6:1.3
	jul303_5:1.3
	jul303_4:1.3
	jul303_3:1.3
	jul303_2_mc1:1.3
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.06.03.10.27.21;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.26.13;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.59;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.00;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Mods for julia 281 release. See news for details
@
text
@      SUBROUTINE LTRIGS(ITYPE)
C-----------------------------------------------------------------------
C! Count trigger types and background
C!
C!   Author   : P. H. Hansen  890701
C! Modified   : J. Wear       891119  Count GBX's from trigger scalar ba
C! Modified   : E. Lancon     10-APR-1991  Use ALTRIG to Trigger bits
C! Modified   : P. H. Hansen  01-MAY-1996  Update backgr every 10 single
C!
C!     Input  : 'X1SC'           Trigger info -- GBX count since last ev
C!              'XTEB'/'XTRB'    Trigger bit mask from level 1
C!              'XTCN'           Trigger info -- GBX count (incorrect)
C!              'LSIN'           Singles storage
C!
C!     Output :  ITYPE=0         : Non-lumi
C!                    =1         : exclusive single low
C!                    =2         : exclusive single high
C!                    =3         : exclusive single very high
C!                    =4         : exclusive low-low
C!                    =5         : high-low
C!              'LONL'           Lcal Online trigger statistics
C!              'LBAK'           Beamgas background to Bhabhas
C!   Description :
C!   ===========
C?   Classify and count trigger types
C?   IF (not Monte Carlo) THEN
C?       Count GBX and RANDOM
C?       Decide if time is up for background estimate
C?   ELSE
C?       Count events
C?       Decide if time is up for background estimate
C?   ENDIF
C?   IF (time is up) THEN
C?       Update background statistics -- call LBLDBA
C?       Reset GBX and RANDOM counters
C?       Reset singles storage
C?   ENDIF
C?
C-----------------------------------------------------------------------
C
#ifndef DOC
#include "bcs.h"
#include "rflags.h"
#include "rcurnt.h"
#include "lcnamc.h"
#include "lonljj.h"
#include "lsinjj.h"
#include "alcons.h"
      INTEGER ALTRIG
      EXTERNAL ALTRIG
      EXTERNAL NAMIND,NDROP
      LOGICAL FCOMB,XLTRG(5)
      DATA NSING,MXSIN/0,10/
#include "bmacro.h"
C---------------------------------------------------------------------
C
      FCOMB = .FALSE.
      ITYPE = 0
      KLONL = IW(NALONL)
      IF(KLONL.LE.0)                                      GOTO 999
C
C Test trigger bits
      ITB = 0
      IF ( ALTRIG(IT1,IT2,IL2).GT.0 ) ITB = IL2
C
C Get Lumi trigger type
C
      CALL LTGTYP(IRUNRC,ITB,XLTRG)
      DO 10 JTYPE = 1,5
 10     IF (XLTRG(JTYPE)) ITYPE = JTYPE
C
C Count trigger types
      RW(KLONL+LMHLEN+JLONTR+ITYPE) = RW(KLONL+LMHLEN+JLONTR+ITYPE)
     &                                + 1.
C
C IF not Monte-Carlo
      IF(.NOT.FMCRUN) THEN
C
C Count GBXs and single arm triggers
        NGBX = 0
        CALL LGNGBX(NGBX)
        RW(KLONL+LMHLEN+JLONGB)=RW(KLONL+LMHLEN+JLONGB)+FLOAT(NGBX)
C
C IF Monte-Carlo
      ELSE
        RW(KLONL+LMHLEN+JLONGB) = RW(KLONL+LMHLEN+JLONGB)+1.
      ENDIF
C
C Debug print
      IF(FDEBRF.AND.JDBDRF(5).GE.2) THEN
        WRITE(IW(6),'(/,2X,A,Z8,A,I4,A,E12.4)')
     & '+++LTRIGS+++ Trigger bits ',ITB,'  Type',ITYPE,
     & ' Bunch cross/1024',RW(KLONL+LMHLEN+JLONGB)
      ENDIF
C
C Time is up to build fake combinations of stored singles?
      KLSIN=IW(NALSIN)
      IF(KLSIN.GT.0.AND.LROWS(KLSIN).GE.MXSIN) CALL LBLDBA
C
  999 CONTINUE
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d8 1
d53 1
a53 2
      DATA NCROS,NRAND/0,0/
      DATA MXGBX/4096/
a62 3
      KXTBP = IW(NAMIND('XTBP'))
      KXTCN = IW(NAMIND('XTCN'))
      KEVEH = IW(NAMIND('EVEH'))
a63 5
      NGBX = 0
      IF(KXTBP.GT.0) THEN
        ITB = IW(KXTBP+LMHLEN+4)
        NGBX = MOD(IW(KXTBP+LMHLEN+3),16777216)/1000
      ENDIF
a75 5
      IF(FDEBRF.AND.JDBDRF(5).GE.2) THEN
        WRITE(IW(6),'(/,2X,A,Z8,A,I4)')
     & '+++LTRIGS+++ Trigger bits ',ITB,'  Type',ITYPE
      ENDIF
C
d78 3
a80 5
C    count GBXs and decide whether time is up for a background update
C    number of GBX extracted from the X1SC bank
C  - alternatively (if run > 5314) from the XTCN bank
C  - alternatively (if 4534 < run < 5314) put NGBX=100
C  - NGBX is prescaled by 1024.
a81 1
        NCROS = NCROS + NGBX
a82 3
        IF(NCROS.GE.MXGBX) THEN
          FCOMB = .TRUE.
        ENDIF
a84 1
C      update background for every 10 events
a85 1
        NCROS = NCROS + 1
a86 3
        IF(NCROS.GE.10) THEN
          FCOMB=.TRUE.
        ENDIF
d88 12
a99 7
C if time is up then build fake combinations of stored singles
      IF(.NOT.FCOMB)                               GOTO 999
      CALL LBLDBA
C
C Reset GBX counter and Random trigger counter.
      NCROS = 0
      NRAND = 0
@


1.1
log
@Initial revision
@
text
@a0 1
*DK ltrigs
d85 1
a85 1
        WRITE(6,'(/,2X,A,Z8,A,I4)')
@


1.1.1.1
log
@import julia 300
@
text
@@
