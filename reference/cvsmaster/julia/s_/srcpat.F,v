head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.36.31;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.38;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.39;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE SRCPAT(NCOR1,XCOR1,NCOR2,XCOR2,NCOR,XCOM)
C----------------------------------------------------------------------
C! Find intersection between two polygons
C!
C!    Author:     H. Meinhard       26-Feb-1990
C!    Modified:   H. Meinhard       09-Mar-1990  (1)
C!
C!    Input:      - NCOR1     /I    number of corners of 1st polygon
C!                - XCOR1ij   /R    coordinate i of corner j of 1st pl.
C!                - NCOR2     /I    number of corners of 2nd polygon
C!                - XCOR2ij   /R    coordinate i of corner j of 2nd pl.
C!    Output:     - NCOR      /I    number of corners of itersection
C!                - XCOMij    /R    coordinate i of corner j of inters.
C!
C!    Description
C!    ===========
C!    Find the intersection between two polygons being defined by the
C!    number and the coordinates of their corners. The second polygon
C!    must be convex. NCOR2 must be at most 8 (see parameter
C!    statement). The routine uses a clipping algorithm (I. E.
C!    Sutherland, G. W. Hodgman, Communications of the ACM, Vol. 17,
C!    No. 1, January, 1974).
C----------------------------------------------------------------------
#ifndef DOC
      REAL XCOR1(2,*),XCOR2(2,*),XCOM(2,*)
C MXCOR is the maximum number of corners of clipping patch
      PARAMETER (MXCOR = 8)
      REAL F(MXCOR,2),S(MXCOR,2),B1X(MXCOR),B1Y(MXCOR),
     +  B2X(MXCOR),B2Y(MXCOR),B3X(MXCOR),B3Y(MXCOR),ALB3(MXCOR)
      INTEGER IFL(MXCOR),IJUMP(MXCOR)
C----------------------------------------------------------------------
      CALL VZERO(IFL,MXCOR)
      CALL VZERO(IJUMP,MXCOR)
      NCOR = 0
C loop over corners ("vertices") of first polygon
      ICOR1 = 0
  300 ICOR1 = ICOR1 + 1
      IF (ICOR1 .GT. NCOR1)                                 GOTO 350
C loop over clipping straight lines
      ILVL = 1
      PX = XCOR1(1,ICOR1)
      PY = XCOR1(2,ICOR1)
  310 CONTINUE
      IF (ILVL .EQ. NCOR2 + 1) THEN
        NCOR = NCOR + 1
        XCOM(1,NCOR) = PX
        XCOM(2,NCOR) = PY
        GOTO 330
      ENDIF
C first point?
      IF (IFL(ILVL) .EQ. 0) THEN
C compute distance measures
        B1X(ILVL) = XCOR2(1,MOD(ILVL-1,NCOR2)+1)
        B1Y(ILVL) = XCOR2(2,MOD(ILVL-1,NCOR2)+1)
        B2X(ILVL) = XCOR2(1,MOD(ILVL,NCOR2)+1)
        B2Y(ILVL) = XCOR2(2,MOD(ILVL,NCOR2)+1)
        B3X(ILVL) = XCOR2(1,MOD(ILVL+1,NCOR2)+1)
        B3Y(ILVL) = XCOR2(2,MOD(ILVL+1,NCOR2)+1)
        ALB3(ILVL) = (B3X(ILVL)-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +               (B3Y(ILVL)-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
C P -> S -> F
        IFL(ILVL) = 1
        S(ILVL,1) = PX
        S(ILVL,2) = PY
        F(ILVL,1) = PX
        F(ILVL,2) = PY
      ELSE
C compute distance measures
        ALS = (S(ILVL,1)-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +        (S(ILVL,2)-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
        ALP = (PX-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +        (PY-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
C does line SP cross limiting plane?
        IF (ALS*ALP .LE. 0.) THEN
C compute intersection T of SP and the plane
          IF (ALP-ALS .EQ. 0.) THEN
            TX = PX
            TY = PY
          ELSE
            TX = PX + (ALP/(ALP-ALS))*(S(ILVL,1)-PX)
            TY = PY + (ALP/(ALP-ALS))*(S(ILVL,2)-PY)
          ENDIF
C P -> S
          S(ILVL,1) = PX
          S(ILVL,2) = PY
C output I
          PX = TX
          PY = TY
          IJUMP(ILVL) = 1
          ILVL = ILVL + 1
          GOTO 310
        ELSE
C P -> S
          S(ILVL,1) = PX
          S(ILVL,2) = PY
        ENDIF
      ENDIF
  320   CONTINUE
C is S on visible side of plane?
      ALS = (S(ILVL,1)-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +      (S(ILVL,2)-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
      IF (ALS*ALB3(ILVL) .GE. 0.) THEN
        PX = S(ILVL,1)
        PY = S(ILVL,2)
        IJUMP(ILVL) = 2
        ILVL = ILVL + 1
        GOTO 310
      ENDIF
  330   CONTINUE
C exit: go back one level
  340 CONTINUE
      ILVL = ILVL - 1
      IF (ILVL .GE. 1) THEN
        GOTO (320,330,370) IJUMP(ILVL)
      ENDIF
C next vertex
      GOTO 300
C all vertices done
  350 CONTINUE
      ILVL = 1
  360 CONTINUE
C was there any output?
      IF (IJUMP(ILVL) .NE. 0) THEN
        ALS = (S(ILVL,1)-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +        (S(ILVL,2)-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
        ALF = (F(ILVL,1)-B1X(ILVL))*(B2Y(ILVL)-B1Y(ILVL)) -
     +        (F(ILVL,2)-B1Y(ILVL))*(B2X(ILVL)-B1X(ILVL))
C does line SF cross limiting plane?
        IF (ALS*ALF .LE. 0.) THEN
C compute intersection T of SF and the plane
          IF (ALF-ALS .EQ. 0.) THEN
            TX = F(ILVL,1)
            TY = F(ILVL,2)
          ELSE
            TX = F(ILVL,1) + (ALF/(ALF-ALS))*(S(ILVL,1)-F(ILVL,1))
            TY = F(ILVL,2) + (ALF/(ALF-ALS))*(S(ILVL,2)-F(ILVL,2))
          ENDIF
C output I
          PX = TX
          PY = TY
          IJUMP(ILVL) = 3
          ILVL = ILVL + 1
          GOTO 310
        ENDIF
      ENDIF
  370   CONTINUE
      IFL(ILVL) = 0
      IF (ILVL .LT. NCOR2) THEN
        ILVL = ILVL + 1
        GOTO 360
      ENDIF
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK srcpat
@


1.1.1.1
log
@import julia 300
@
text
@@
