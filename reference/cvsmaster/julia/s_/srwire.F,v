head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.38.16;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.45;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.46;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE SRWIRE(JCRA,JCAR,JTDC,IOR,ISIDE,ILAYE,ISECT,IWIRE)
C----------------------------------------------------------------------
C! Calculate wire and sector numbers
C!
C!    Author:     H. Meinhard       02-Sep-1987
C!    Modified:   H. Meinhard       07-Mar-1991  (2)
C!
C!    Input:        - JCRA    /I      crate number (1...3)
C!                  - JCAR    /I      card number (1...24)
C!                  - JTDC    /I      TDC number on card (1...16)
C!                  - IOR     /I      number of remaining ored wires
C!    Output:       - ISIDE   /I      side number (1...2)
C!                  - ILAYE   /I      layer number (1...9)
C!                  - ISECT   /I      sector number (1...8)
C!                  - IWIRE   /I      wire number (1...14)
C!                  - IOR     /I      number of remaining ored wires
C!
C!    Description
C!    ===========
C!    This routine contains the mapping from electronics addresses
C!    (crate, card, TDC) to the wire positions (side, layer, sector,
C!    wire). The conversion depends on the oring mode; so some details
C!    of the oring modes are encoded in this routine.
C!    If a fired channel ores wires, IOR is set to the number of
C!    wires still to be described, thus indicating that this routine
C!    must be called once more in order to get the complete mapping
C!    information.
C?
C!======================================================================
#ifndef DOC
#include "bcs.h"
#include "sgeomc.h"
#include "sanamc.h"
#include "swtujj.h"
#include "bmacro.h"
C----------------------------------------------------------------------
C check whether data come from final setup or from test setup
      IF (MDORSG(1) .GT. 0) THEN
C
C ---> final setup
C calculate side, layer
        ISIDE = (JCAR-1) / (MCRDSG/2) + 1
        JCAR1 = MOD(JCAR-1,MCRDSG/2) + 1
        ILAYE = JCRA + MCRASG*((JCAR1-1)/MGRSG)
        IGROU = MOD(JCAR1-1,MGRSG) + 1
        MODE  = MDORSG(ILAYE)
C
C calculate sector, wire
C Simple oring: two wires of same number in same half layer
        IF (MODE .GT. 0 .AND. MODE .LT. 10) THEN
          IWIRE = JTDC
          IF (IOR .EQ. 0) THEN
            ISECT = KSECSG(1,IGROU,MODE)
            IOR = 1
          ELSE
            ISECT = KSECSG(2,IGROU,MODE)
            IOR = 0
          ENDIF
        ENDIF
C
C Innermost two wires ored fourfold, 3...5 not ored, 6...14 ored two-
C fold
        IF (MODE .GT. 10 .AND. MODE .LT. 20) THEN
          IF (JTDC .EQ. 1) THEN
            IF (MOD(IGROU,2).NE.0) IWIRE = 1
            IF (MOD(IGROU,2).EQ.0) IWIRE = 2
            IF (IGROU .LE. MGRSG/2) THEN
              IADD = 0
            ELSE
              IADD = MSECSG/2
            ENDIF
            IF (IOR .EQ. 0) THEN
              ISECT = 1 + IADD
              IOR = 3
            ELSE
              ISECT = 5 - IOR + IADD
              IOR = IOR - 1
            ENDIF
          ENDIF
          IF (JTDC .EQ. 2 .OR. JTDC .EQ. 3 .OR. JTDC .EQ. 4) THEN
            IWIRE = JTDC+1
            ISECT = 2*IGROU-1
          ENDIF
          IF (JTDC .EQ. 5 .OR. JTDC .EQ. 6 .OR. JTDC .EQ. 7) THEN
            IWIRE = JTDC-2
            ISECT = 2*IGROU
          ENDIF
          IF (JTDC .GE. 8) THEN
            IWIRE = JTDC-2
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-10)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-10)
              IOR = 0
            ENDIF
          ENDIF
        ENDIF
C
C Wires 1, 2, 5...14 ored twofold, wires 3, 4 not ored
        IF (MODE .GT. 20 .AND. MODE .LT. 30) THEN
          IF (JTDC .GE. 1 .AND. JTDC .LE. 2) THEN
            IWIRE = JTDC
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-20)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-20)
              IOR = 0
            ENDIF
          ELSE IF (JTDC .EQ. 3) THEN
            IWIRE = 3
            ISECT = KSECSG(1,IGROU,MODE-20)
          ELSE IF (JTDC .EQ. 4) THEN
            IWIRE = 3
            ISECT = KSECSG(2,IGROU,MODE-20)
          ELSE IF (JTDC .EQ. 5) THEN
            IWIRE = 4
            ISECT = KSECSG(1,IGROU,MODE-20)
          ELSE IF (JTDC .EQ. 6) THEN
            IWIRE = 4
            ISECT = KSECSG(2,IGROU,MODE-20)
          ELSE IF (JTDC .GE. 7) THEN
            IWIRE = JTDC - 2
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-20)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-20)
              IOR = 0
            ENDIF
          ENDIF
        ENDIF
C
C Wires 1...3, 6...14 ored twofold, wires 4, 5 not ored
        IF (MODE .GT. 30 .AND. MODE .LT. 40) THEN
          IF (JTDC .GE. 1 .AND. JTDC .LE. 3) THEN
            IWIRE = JTDC
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-30)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-30)
              IOR = 0
            ENDIF
          ELSE IF (JTDC .EQ. 4) THEN
            IWIRE = 4
            ISECT = KSECSG(1,IGROU,MODE-30)
          ELSE IF (JTDC .EQ. 5) THEN
            IWIRE = 4
            ISECT = KSECSG(2,IGROU,MODE-30)
          ELSE IF (JTDC .EQ. 6) THEN
            IWIRE = 5
            ISECT = KSECSG(1,IGROU,MODE-30)
          ELSE IF (JTDC .EQ. 7) THEN
            IWIRE = 5
            ISECT = KSECSG(2,IGROU,MODE-30)
          ELSE IF (JTDC .GE. 8) THEN
            IWIRE = JTDC - 2
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-30)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-30)
              IOR = 0
            ENDIF
          ENDIF
        ENDIF
C
C-------> Insert here code for additional oring modes
C
C fix of sectors with exchanged sockets
        JSWTU = IW(NASWTU)
        IF (JSWTU .NE. 0) THEN
          DO 300 IENT = 1, LROWS(JSWTU)
            IF (ISIDE .EQ. ITABL(JSWTU,IENT,JSWTSI) .AND.
     +          ILAYE .EQ. ITABL(JSWTU,IENT,JSWTLA) .AND.
     +          ISECT .EQ. ITABL(JSWTU,IENT,JSWTSC)) THEN
              IWIRE = MWIRSG + 1 - IWIRE
              GOTO 301
            ENDIF
  300     CONTINUE
  301     CONTINUE
        ENDIF
C
      ELSE
C
C ---> test setups
C CERN SPS tests in 1986, 1987
C calculate side, layer, wire
        IF (MDORSG(1) .GE. -99 .AND. MDORSG(1) .LE. -90) THEN
          ISIDE = 1
          ILAYE = JCAR
          IWIRE = 15 - MOD(JTDC-1,8)
C
C calculate sector
          IF (MDORSG(ILAYE) .EQ. -90) ISECT = (JTDC-1)/8 + 1
          IF (MDORSG(ILAYE) .EQ. -91) ISECT = (JTDC-1)/8 + 2
          IF (MDORSG(ILAYE) .EQ. -92) ISECT = (JTDC-1)/8 + 3
        ENDIF
C
C CERN SPS test in 1988
        IF (MDORSG(1) .GE. -29 .AND. MDORSG(1) .LE. -20) THEN
C
C calculate side, layer
          ISIDE = 1
          JCAR1 = MOD(JCAR-1,MCRDSG/2) + 1
          ILAYE = JCRA + MCRASG*((JCAR1-1)/MGRSG)
          IF (JCAR1 .NE. JCAR) ILAYE = ILAYE - 2
          IGROU = MOD(JCAR1-1,MGRSG) + 1
          MODE = - MDORSG(ILAYE)
C
C calculate sector, wire
          IF (JTDC .GE. 1 .AND. JTDC .LE. 2) THEN
            IWIRE = JTDC
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-20)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-20)
              IF (ILAYE .EQ. 1 .AND. IGROU .EQ. 2) IWIRE = IWIRE + 7
              IOR = 0
            ENDIF
          ELSE IF (JTDC .EQ. 3) THEN
            IWIRE = 3
            ISECT = KSECSG(1,IGROU,MODE-20)
          ELSE IF (JTDC .EQ. 4) THEN
            IWIRE = 3
            ISECT = KSECSG(2,IGROU,MODE-20)
            IF (ILAYE .EQ. 1 .AND. IGROU .EQ. 2) IWIRE = IWIRE + 7
          ELSE IF (JTDC .EQ. 5) THEN
            IWIRE = 4
            ISECT = KSECSG(1,IGROU,MODE-20)
          ELSE IF (JTDC .EQ. 6) THEN
            IWIRE = 4
            ISECT = KSECSG(2,IGROU,MODE-20)
            IF (ILAYE .EQ. 1 .AND. IGROU .EQ. 2) IWIRE = IWIRE + 7
          ELSE IF (JTDC .GE. 7) THEN
            IWIRE = JTDC - 2
            IF (IOR .EQ. 0) THEN
              ISECT = KSECSG(1,IGROU,MODE-20)
              IOR = 1
            ELSE
              ISECT = KSECSG(2,IGROU,MODE-20)
              IF (ILAYE .EQ. 1 .AND. IGROU .EQ. 2)
     +          IWIRE = MOD(IWIRE+6,14) + 1
              IOR = 0
            ENDIF
          ENDIF
        ENDIF
C
C-------> Insert here code for additional oring modes
C
      ENDIF
C
      GOTO 999
C----------------------------------------------------------------------
  999 CONTINUE
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK srwire
@


1.1.1.1
log
@import julia 300
@
text
@@
