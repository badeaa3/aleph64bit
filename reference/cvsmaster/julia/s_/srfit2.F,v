head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.4
	jul307_4:1.4
	jul307_3:1.4
	jul307_2:1.4
	jul307_1:1.4
	jul307:1.4
	jul306_3:1.4
	jul306_2:1.4
	jul306_1:1.4
	jul306:1.4
	jul305_4:1.4
	jul305_3:1.4
	jul305_2:1.4
	jul305_1:1.4
	jul305:1.4
	jul304_3:1.3
	jul304_2:1.3
	jul304_1:1.3
	jul304:1.3
	jul303_7:1.3
	jul303_6:1.3
	jul303_5:1.3
	jul303_4:1.3
	jul303_3:1.3
	jul303_2_mc1:1.3
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	99.10.27.12.27.34;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.11.07.11.19.36;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.37.02;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.19.37;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.40;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.41;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@For julia 310
@
text
@      SUBROUTINE SRFIT2(ISACP,CHI2,XFIT,COVX,IER)
C----------------------------------------------------------------------
C! Perform double arm straight line fit
C!
C!    Author:     H. Meinhard       02-Feb-1990
C!    Modified:   H. Meinhard       28-Mar-1990  (4)
C!    Modified:   D.Smith     991027 Double precision fixes for Linux
C!
C!    Input:      - ISACPi    /I    pointer to elements of bank SACO
C!                                  which will be used in fit; must
C!                                  end with 0
C!    Output:     - CHI2      /F    chisquare of fit
C!                - XFITi     /F    vector of fitted parameters:
C!                                  (theta,phi,x0,y0)
C!                - COVXij    /F    matrix of covariance elements
C!                - IER       /I    error code: 1 = missing input banks
C!                                              2 = singularity
C!
C!    Description
C!    ===========
C!    Fit a straight line to measurements of SATR coordinates on both
C!    sides of the interaction point. Coordinates are taken from bank
C!    SACO.
C!    For the fit formulas, see calculation in Logbook 4, pg. 82 ff.
C?
C!======================================================================
#ifndef DOC
#ifndef DOC
#include "alcons.h"
#include "bcs.h"
#include "rlunit.h"
#include "sanamc.h"
#include "sacojj.h"
#include "srecpc.h"
C NR is the number of fitted parameters, NN the maximum number of mea-
C surements
      PARAMETER (NR=4,NN=18)
      INTEGER ISACP(*)
      REAL XFIT(*),COVX(NR,*)
      DOUBLE PRECISION A(NN,NR),B(NN),C(NN),GB(NN),ATGB(NR,NN),
     +  CX(NR,NR),BEPS(NN),XI(NR),WORK(NN),T(NR,NR),DEN1,DEN2
      REAL X0(NR),BF(3),BR(3),BW(3)
      EXTERNAL DVMPY,PROXIM
#include "bmacro.h"
C----------------------------------------------------------------------
C link to bank SACO
      JSACO = IW(NASACO)
      IF (JSACO .EQ. 0)                                     GOTO 901
C set the initial values for the parameters: impact points: zero;
C declinations: calculate mean value for coordinates
      N = 0
      C1 = 0.
      C2 = 0.
      DO 300 IN = 1, NN
        IP = ISACP(IN)
        IF (IP .NE. 0) THEN
          X2 = RTABL(JSACO,IP,JSACBF) +
     +         RTABL(JSACO,IP,JSACRA) * RTABL(JSACO,IP,JSACBR)
          Y2 = RTABL(JSACO,IP,JSACBF+1) +
     +         RTABL(JSACO,IP,JSACRA) * RTABL(JSACO,IP,JSACBR+1)
          Z2 = RTABL(JSACO,IP,JSACBF+2) +
     +         RTABL(JSACO,IP,JSACRA) * RTABL(JSACO,IP,JSACBR+2)
          N = N + 1
          C1 = C1 + X2 / Z2
          C2 = C2 + Y2 / Z2
        ENDIF
  300 CONTINUE
      IF (N .NE. 0) THEN
        C1 = C1 / REAL(N)
        C2 = C2 / REAL(N)
      ENDIF
      X0(1) = C1
      X0(2) = C2
      X0(3) = 0.
      X0(4) = 0.
C fill matrices A = (dfi / dxk), B = (dfi / dyk),
C and vector c = fi (x0, y0)
C Since B is diagonal, we store it as a vector
C N is the number of coordinates in fit
      N = 0
      DO 310 IN = 1, NN
        IP = ISACP(IN)
        IF (IP .EQ. 0)                                      GOTO 320
        N = N + 1
        KSACO = KROW(JSACO,IP)
        RA = RW(KSACO+JSACRA)
        CALL UCOPY(RW(KSACO+JSACBF),BF,3)
        CALL UCOPY(RW(KSACO+JSACBR),BR,3)
        CALL UCOPY(RW(KSACO+JSACBW),BW,3)
        A(N,1) = DBLE( -BW(3) * (BF(2) + RA*BR(2) - X0(4)) +
     +    BW(2) * (BF(3) + RA*BR(3)) )
        A(N,2) = DBLE(  BW(3) * (BF(1) + RA*BR(1) - X0(3)) -
     +    BW(1) * (BF(3) + RA*BR(3)) )
        A(N,3) = DBLE( -X0(2) * BW(3) + BW(2) )
        A(N,4) = DBLE(  X0(1) * BW(3) - BW(1) )
        B(N) = DBLE(
     +    (X0(2) * BW(3) - BW(2)) * BR(1) -
     +    (X0(1) * BW(3) - BW(1)) * BR(2) +
     +    (X0(1) * BW(2) - X0(2) * BW(1)) * BR(3) )
        C(N) = DBLE(
     +    (X0(2) * BW(3) - BW(2)) * (BF(1) + RA*BR(1) - X0(3)) -
     +    (X0(1) * BW(3) - BW(1)) * (BF(2) + RA*BR(2) - X0(4)) +
     +    (X0(1) * BW(2) - X0(2) * BW(1)) * (BF(3) + RA*BR(3)) )
        GB(N) = 1D0 / (DBLE(SIG2SR) * B(N)) ** 2
  310 CONTINUE
  320 CONTINUE
C calculate ATGB
      CALL DRSCL(N,NR,GB(1),GB(2),A(1,1),A(1,2),A(2,1),
     +  ATGB(1,1),ATGB(2,1),ATGB(1,2))
C calculate CX
      CALL DMMLT(NR,N,NR,ATGB(1,1),ATGB(1,2),ATGB(2,1),
     +  A(1,1),A(1,2),A(2,1),CX(1,1),CX(1,2),CX(2,1),WORK)
      CALL DINV(NR,CX,NR,WORK,IER)
      IF (IER .EQ. -1)                                      GOTO 902
C calculate XI
      CALL DMMPY(NR,N,ATGB(1,1),ATGB(1,2),ATGB(2,1),C(1),C(2),
     +  XI(1),XI(2))
      CALL DMMPY(NR,NR,CX(1,1),CX(1,2),CX(2,1),XI(1),XI(2),
     +  WORK(1),WORK(2))
      CALL DVSCL(NR,-1.D0,WORK(1),WORK(2),XI(1),XI(2))
C calculate (B * Epsilon) / (SIGMA * B)
      CALL DVCPY(N,C(1),C(2),WORK(1),WORK(2))
      CALL DMMPA(N,NR,A(1,1),A(1,2),A(2,1),XI(1),XI(2),WORK(1),WORK(2))
      CALL DVMUL(N,GB(1),GB(2),WORK(1),WORK(2),BEPS(1),BEPS(2))
      CALL DVMUL(N,B(1),B(2),BEPS(1),BEPS(2),WORK(1),WORK(2))
      CALL DVSCL(N,DBLE(SIG2SR),WORK(1),WORK(2),BEPS(1),BEPS(2))
C calculate chisquare
      CHI2 = REAL(DVMPY(N,BEPS(1),BEPS(2),BEPS(1),BEPS(2)))
C transform c1 and c2 into theta and phi
      C1 = X0(1) + REAL(XI(1))
      C2 = X0(2) + REAL(XI(2))
      CC = C1**2 + C2**2
      THETA = ATAN(SQRT(CC))
      PHI = PROXIM(ATAN2(C2,C1),PI)
C fill vector with fitted parameters
      XFIT(1) = THETA
      XFIT(2) = PHI
      XFIT(3) = X0(3) + REAL(XI(3))
      XFIT(4) = X0(4) + REAL(XI(4))
C define transformation matrix
      DO 326 I = 1, NR
        DO 325 J = 1, NR
          T(J,I) = 0D0
  325   CONTINUE
  326 CONTINUE
      DEN1 = 1D0 / DBLE( (1.+CC)*SQRT(CC) )
      DEN2 = 1D0 / DBLE( CC )
      T(1,1) = DBLE(C1) * DEN1
      T(1,2) = DBLE(C2) * DEN1
      T(2,1) = -DBLE(C2) * DEN2
      T(2,2) = DBLE(C1) * DEN2
      T(3,3) = 1D0
      T(4,4) = 1D0
C calculate transformed covariance matrix
      CALL DMMLT(NR,NR,NR,CX(1,1),CX(1,2),CX(2,1),T(1,1),T(2,1),T(1,2),
     +  CX(1,1),CX(1,2),CX(2,1),WORK)
      CALL DMMLT(NR,NR,NR,T(1,1),T(1,2),T(2,1),CX(1,1),CX(1,2),CX(2,1),
     +  CX(1,1),CX(1,2),CX(2,1),WORK)
      DO 340 J = 1, NR
        DO 330 I = 1, NR
          COVX(I,J) = REAL(CX(I,J))
  330   CONTINUE
  340 CONTINUE
      GOTO 999
C----------------------------------------------------------------------
  901 IER = 1
      GOTO 999
  902 IER = 2
      CALL RERROR('SRFIT2',IER,'Matrix to be inverted is singular')
      GOTO 999
  999 CONTINUE
      RETURN
      END
#endif
#endif
@


1.4
log
@Prepare Julia 305
@
text
@d7 1
d104 1
a104 1
        GB(N) = 1. / (DBLE(SIG2SR) * B(N)) ** 2
d143 1
a143 1
          T(J,I) = 0.
d146 2
a147 2
      DEN1 = 1. / DBLE( (1.+CC)*SQRT(CC) )
      DEN2 = 1. / DBLE( CC )
d152 2
a153 2
      T(3,3) = 1.
      T(4,4) = 1.
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d119 1
a119 1
      CALL DVSCL(NR,-1.,WORK(1),WORK(2),XI(1),XI(2))
@


1.2
log
@julia version 279
@
text
@a0 1
*DK srfit2
@


1.1
log
@Initial revision
@
text
@d28 1
d174 1
@


1.1.1.1
log
@import julia 300
@
text
@@
