head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.36.04;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.35;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.36;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE SR2PAT(ISIDE,IOR1,IOR2,IOR3,N3TOT,IER)
C----------------------------------------------------------------------
C! Find patches of clusters
C!
C!    Author:     H. Meinhard       12-Jan-1988
C!    Modified:   H. Meinhard       02-Mar-1990  (2)
C!
C!    Input:      - ISIDE     /I    current side [1,2]
C!                - IOR1,2    /I    orientations from which clusters
C!                                  should be considered [1,3]
C!                - IOR3      /I    orientations from which single hits
C!                                  should be considered [1,3]
C!                - N3TOT     /I    number of patches found, without
C!                                  actual 2-patches [0,*]
C!    Output:     - IER       /I    error flag (.ne. 0 on error)
C!
C!    Description
C!    ===========
C!    Look for patches consisting of two clusters and optionally an
C!    additional wire hit in the third orientation. Use this patch only
C!    if it is not a subset of a patch consisting of three clusters.
C?
C!======================================================================
#ifndef DOC
#include "alcons.h"
#include "bcs.h"
#include "sanamc.h"
#include "sccpjj.h"
#include "sclujj.h"
#include "scoojj.h"
#include "sgeomc.h"
#include "spatjj.h"
#include "spcpjj.h"
#include "srecpc.h"
#include "ssbpjj.h"
#include "sscpjj.h"
      PARAMETER (MXCOR=8)
      REAL AX(MXCOR),AY(MXCOR),AXBAK(MXCOR),AYBAK(MXCOR)
      PARAMETER (MOR=3)
      INTEGER ISC(MOR)
      REAL PHI(MOR)
      LOGICAL LSING,SRSUBS
      INTEGER IARR(MLASG)
      EXTERNAL SRSUBS
#include "bmacro.h"
#include "smacro.h"
C Statement function: x of intersection points
      XS(T1,T2,P1,P2) = (T1*SIN(P2)-T2*SIN(P1))/SIN(P2-P1)
C Statement function: y of intersection points
      YS(T1,T2,P1,P2) = (T2*COS(P1)-T1*COS(P2))/SIN(P2-P1)
C----------------------------------------------------------------------
C get half width of tubes in tan(theta)
      Z = ZZERSG - ZOFFSG - FLOAT(MLAYSG-1)*ZDELSG/2.
      DTBY2 = ZONWSR/(2.*Z)
C
C link to coordinates, clusters and patches
      KSCOO = IW(NASCOO)
      KSSCP = IW(NASSCP)
      KSCLU = IW(NASCLU)
      KSCCP = IW(NASCCP)
      KSSBP = IW(NASSBP)
      KSPAT = IW(NASPAT)
      KSPCP = IW(NASPCP)
C
C top of loop over clusters in orientation IOR1
      IND = (ISIDE-1)*3
      DO 410 ICL1 = ITABL(KSSBP,IND+IOR1,JSSBPB),
     +              ITABL(KSSBP,IND+IOR1,JSSBPE)
        ISC(1) = ITABL(KSCLU,ICL1,JSCLSC)
        PHI(1) = PHIXXX(IOR1,ISC(1))
        THL1 = RTABL(KSCLU,ICL1,JSCLTL)
        THU1 = RTABL(KSCLU,ICL1,JSCLTU)
        NW1 = ITABL(KSCLU,ICL1,JSCLNW)
C
C top of loop over clusters in orientation IOR2
        DO 400 ICL2 = ITABL(KSSBP,IND+IOR2,JSSBPB),
     +                ITABL(KSSBP,IND+IOR2,JSSBPE)
          ISC(2) = ITABL(KSCLU,ICL2,JSCLSC)
          PHI(2) = PHIXXX(IOR2,ISC(2))
          THL2 = RTABL(KSCLU,ICL2,JSCLTL)
          THU2 = RTABL(KSCLU,ICL2,JSCLTU)
          NW2 = ITABL(KSCLU,ICL2,JSCLNW)
C
C LSING will be set to .TRUE. if patch with single hit found
          LSING = .FALSE.
C
C get corners of initial parallelogram
          NC = 4
          AX(1) = XS(THL1,THL2,PHI(1),PHI(2))
          AY(1) = YS(THL1,THL2,PHI(1),PHI(2))
          AX(2) = XS(THL1,THU2,PHI(1),PHI(2))
          AY(2) = YS(THL1,THU2,PHI(1),PHI(2))
          AX(3) = XS(THU1,THU2,PHI(1),PHI(2))
          AY(3) = YS(THU1,THU2,PHI(1),PHI(2))
          AX(4) = XS(THU1,THL2,PHI(1),PHI(2))
          AY(4) = YS(THU1,THL2,PHI(1),PHI(2))
C
C clip at sector borders / gas channels
          DO 300 I = 1, 2
            DCUT = DSECSR/Z
            IF (ISC(I).EQ.1 .OR. ISC(I).EQ.5) DCUT = DGASSR/Z
            PH = PHI(I) - PI/FLOAT(MSECSG) + PIBY2
            CALL SRCLIP(NC,AX,AY,DCUT,PH,2)
            IF (NC .EQ. 0)                                  GOTO 400
            DCUT = DSECSR/Z
            IF (ISC(I).EQ.4 .OR. ISC(I).EQ.8) DCUT = DGASSR/Z
            PH = PHI(I) + PI/FLOAT(MSECSG) - PIBY2
            CALL SRCLIP(NC,AX,AY,DCUT,PH,2)
            IF (NC .EQ. 0)                                  GOTO 400
  300     CONTINUE
C
C save polygon since we need it several times
          CALL SRCCOP(NC,AX,AY,NCBAK,AXBAK,AYBAK)
C
C top of loop over hits in orientation IOR3
          DO 350 IHT3 = ITABL(KSSCP,(IND+IOR3-1)*3+1,JSSCPB),
     +                  ITABL(KSSCP,(IND+IOR3-1)*3+3,JSSCPE)
            ILA3 = ITABL(KSCOO,IHT3,JSCOLA)
            ISC(3) = ITABL(KSCOO,IHT3,JSCOSC)
            PHI(3) = PHIXXX(ILA3,ISC(3))
            TT3 =  (RTABL(KSCOO,IHT3,JSCOTT)+RTABL(KSCOO,IHT3,
     +             JSCOTT+1))/2.
C
C get polygon from backup copy
            CALL SRCCOP(NCBAK,AXBAK,AYBAK,NC,AX,AY)
C
C clip at hit in orientation IOR3
            CALL SRCLIP(NC,AX,AY,TT3-DTBY2,PHI(3),2)
            IF (NC .EQ. 0)                                  GOTO 350
            CALL SRCLIP(NC,AX,AY,TT3+DTBY2,PHI(3),1)
            IF (NC .EQ. 0)                                  GOTO 350
C
C clip at sector borders / gas channels
            DCUT = DSECSR/Z
            IF (ISC(3).EQ.1 .OR. ISC(3).EQ.5) DCUT = DGASSR/Z
            PH = PHI(3) - PI/FLOAT(MSECSG) + PIBY2
            CALL SRCLIP(NC,AX,AY,DCUT,PH,2)
            IF (NC .EQ. 0)                                  GOTO 350
            DCUT = DSECSR/Z
            IF (ISC(3).EQ.4 .OR. ISC(3).EQ.8) DCUT = DGASSR/Z
            PH = PHI(3) + PI/FLOAT(MSECSG) - PIBY2
            CALL SRCLIP(NC,AX,AY,DCUT,PH,2)
            IF (NC .EQ. 0)                                  GOTO 350
C
C candidate for patch found. Look whether subset of 3-patch
C IARR contains the hit numbers
            DO 310 I = 1, NW1
  310       IARR(I) = ITABL(KSCCP,ICL1,JSCCCC+I-1)
            DO 320 I = 1, NW2
  320       IARR(NW1+I) = ITABL(KSCCP,ICL2,JSCCCC+I-1)
            IARR(NW1+NW2+1) = IHT3
            CALL INTSOR(IARR,NW1+NW2+1)
            IF (.NOT. SRSUBS(ISIDE,N3TOT,IARR,NW1+NW2+1)) THEN
C
C patch candidate is no subset of 3-patch; store it
              LSING = .TRUE.
              IF (LFRROW(KSPAT) .LE. 0)                     GOTO 901
              IW(KNEXT(KSPAT)+JSPASI) = ISIDE
              IW(KNEXT(KSPAT)+JSPANC) = NC
              IW(KNEXT(KSPAT)+JSPANW) = NW1+NW2+1
              DO 330 IC = 1, NC
                RW(KNEXT(KSPAT)+JSPAAX+IC-1) = AX(IC)
                RW(KNEXT(KSPAT)+JSPAAY+IC-1) = AY(IC)
  330         CONTINUE
              DO 340 IWI = 1, NW1+NW2+1
  340         IW(KNEXT(KSPCP)+JSPCPC+IWI-1) = IARR(IWI)
              IW(KSPAT+LMHROW) = LROWS(KSPAT)+1
              IW(KSPCP+LMHROW) = LROWS(KSPCP)+1
            ENDIF
C
C bottom of loop over hits in orientation IOR3
  350     CONTINUE
C
C if no patch of two clusters and one single hit found, look whether
C two clusters are subset of a 3-patch; if not, store 2-patch
          IF (.NOT. LSING) THEN
            DO 360 I = 1, NW1
  360       IARR(I) = ITABL(KSCCP,ICL1,JSCCCC+I-1)
            DO 370 I = 1, NW2
  370       IARR(NW1+I) = ITABL(KSCCP,ICL2,JSCCCC+I-1)
            CALL INTSOR(IARR,NW1+NW2)
            IF (.NOT. SRSUBS(ISIDE,N3TOT,IARR,NW1+NW2+1)) THEN
              IF (LFRROW(KSPAT) .LE. 0)                     GOTO 901
              IW(KNEXT(KSPAT)+JSPASI) = ISIDE
              IW(KNEXT(KSPAT)+JSPANC) = NCBAK
              IW(KNEXT(KSPAT)+JSPANW) = NW1+NW2
              DO 380 IC = 1, NCBAK
                RW(KNEXT(KSPAT)+JSPAAX+IC-1) = AXBAK(IC)
                RW(KNEXT(KSPAT)+JSPAAY+IC-1) = AYBAK(IC)
  380         CONTINUE
              DO 390 IWI = 1, NW1+NW2
  390         IW(KNEXT(KSPCP)+JSPCPC+IWI-1) = IARR(IWI)
              IW(KSPAT+LMHROW) = LROWS(KSPAT)+1
              IW(KSPCP+LMHROW) = LROWS(KSPCP)+1
            ENDIF
          ENDIF
C
C bottom of loop over clusters in orientation IOR2
  400   CONTINUE
C
C bottom of loop over clusters in orientation IOR1
  410 CONTINUE
C
      GOTO 999
C----------------------------------------------------------------------
C error condition: not enough space in patch banks
  901 IER = 1
      GOTO 999
  999 CONTINUE
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK sr2pat
@


1.1.1.1
log
@import julia 300
@
text
@@
