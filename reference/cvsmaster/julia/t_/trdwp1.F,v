head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.44.09;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.12;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.13;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TRDWP1(IT0,NWSMP,IPH,ICHG,TIM,IER)
C
C----------------------------------------------------------------------
C! Reduce those TPC wire pulses not already done by the TPP
C
C  R. Johnson    16-1-91
C
C  Input:    IT0       /I        Time of 1st bucket in the pulse
C            NWSMP     /I        Number of samples in the pulse
C            IPH(n)    /I        Array of sample pulse heights
C  Output:   ICHG      /I        Charge estimate
C            TIM       /R        Time estimate
C            IER       /I        Error code
C                                0= all OK
C
C----------------------------------------------------------------------
#ifndef DOC
C
#include "twirct.h"
C
      LOGICAL GOOD
      DIMENSION IPH(NWSMP)
C
      IER=0
C
C++   Loop only on the samples above the TPD threshold
C     (i.e. skip the pre and post samples) and find the maximum.
C     Also, look for valleys which are too large to tolerate.
C     Also, calculate the rms width of the pulse.
C
      IS1=IPH(NPRETW+1)
      IS2=IPH(NPRETW+1)
      IS3=IPH(NPRETW+1)
      IMAX=NPRETW+1
      DO 300 IS=NPRETW+2,NWSMP-NPSTTW
        IF (IPH(IS).GE.IPH(IMAX)) THEN
          IMAX=IS
        ENDIF
C
        ITST=IPH(IS)+JTOLTW
        IF (ITST.LT.IPH(IS-1) .AND. ITST.LT.IPH(IS+1)) THEN
          IER=1
        ENDIF
        IS1=IS1 + IPH(IS)*IS
        IS2=IS2 + IPH(IS)*(IS**2)
        IS3=IS3 + IPH(IS)
  300 CONTINUE
C
C++   Cut on the RMS width of the pulse
C
      IF (IS3.EQ.0) THEN
        ICHG=0
        TIM=FLOAT(IT0-1)+0.5*FLOAT(NWSMP)
        IER=6
        RETURN
      ELSE
        RNS=FLOAT(IS3)
        WRM= FLOAT(IS2)/RNS - (FLOAT(IS1)/RNS)**2
        IF (WRM.GT.WRMXTW) THEN
          IER=2
        ENDIF
C
      ENDIF
C
C++   Find the charge estimate from the sum of highest three samples
C++   and subtract the pedestal
C
      IF (IPH(IMAX-1).GT.IPH(IMAX+1)) THEN
        IF (IPH(IMAX-2).GT.IPH(IMAX+1)) THEN
          ICHG= IPH(IMAX-2)+IPH(IMAX-1)
        ELSE
          ICHG= IPH(IMAX-1)+IPH(IMAX+1)
        ENDIF
      ELSE
        IF (IPH(IMAX+2).GT.IPH(IMAX-1)) THEN
          ICHG= IPH(IMAX+2)+IPH(IMAX+1)
        ELSE
          ICHG= IPH(IMAX+1)+IPH(IMAX-1)
        ENDIF
      ENDIF
      ICHG=ICHG+IPH(IMAX)
C
C++   Calculate the threshold = 1/2 the maximum
C
      THR= RTHRTW*FLOAT(IPH(IMAX))
      ITHR=INT(THR)
C
C++   Check if the last presample or 1st postsample is above threshold
C
      GOOD= IPH(NPRETW).LT.ITHR.AND.IPH(NWSMP-NPSTTW+1).LT.ITHR
C
C++   Check if the last presample is below the first valid sample.
C++   Only a hardware failure can cause this to be false.
C
      IF (IPH(NPRETW).GT.IPH(NPRETW+1)) GOOD=.FALSE.
      IF (IPH(NWSMP-NPSTTW+1).GT.IPH(NWSMP-NPSTTW)) GOOD=.FALSE.
C
C++   Use the threshold method for good pulses
C
      IF (GOOD) THEN
C
C++     Find the first pulse above threshold
C
        DO 600 IS=NPRETW+1,IMAX
          IF (IPH(IS).GT.ITHR) THEN
C
C++         Interpolate to find the beginning time
C
            T1= FLOAT(IS-1) + (THR-FLOAT(IPH(IS-1)))
     &                             /FLOAT(IPH(IS)-IPH(IS-1))
            GO TO 601
          ENDIF
  600   CONTINUE
        CALL RERROR('TRDWP1',1,
     &          'Input data format error.  Unphysical pulse shape.')
        IER=4
        GOOD=.FALSE.
  601   CONTINUE
C
C++     Find the last pulse above threshold
C
        DO 700 IS=NWSMP-NPSTTW,IMAX,-1
          IF (IPH(IS).GT.ITHR) THEN
C
C++         Interpolate to find the ending time
C
            T2= FLOAT(IS+1) - (THR-FLOAT(IPH(IS+1)))
     &                             /FLOAT(IPH(IS)-IPH(IS+1))
            GO TO 701
          ENDIF
  700   CONTINUE
        CALL RERROR('TRDWP1',2,
     &          'Input data format error.  Unphysical pulse shape.')
        IER=4
        GOOD=.FALSE.
  701   CONTINUE
C
C++     Average the two times to get the final value
C
        TIM= FLOAT(IT0-1) + 0.5*(T1+T2)
      ENDIF
      IF (.NOT.GOOD) THEN
C
C++     The threshold method won't work, so we'll just use the
C++     old weighted mean method.
C
        ISMPH=0
        ISMPT=0
        DO 3323 IS=NPRETW+1,NWSMP-NPSTTW
          IF (IPH(IS).GE.JTHRTW) THEN
            ISMPH= ISMPH + IPH(IS)
            ISMPT= ISMPT + IPH(IS)*IS
          ENDIF
 3323   CONTINUE
        IF (ISMPH.EQ.0) THEN
          TIM=FLOAT(IT0-1)+0.5*FLOAT(NWSMP)
          IER=5
        ELSE
          TIM=FLOAT(IT0-1) + FLOAT(ISMPT)/FLOAT(ISMPH)
        ENDIF
      ENDIF
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK trdwp1
@


1.1.1.1
log
@import julia 300
@
text
@@
