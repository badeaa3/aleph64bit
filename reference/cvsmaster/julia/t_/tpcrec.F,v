head	1.4;
access;
symbols
	jul313_3:1.4
	jul313_2:1.4
	jul313_1:1.4
	jul313:1.4
	jul312_1:1.4
	jul312:1.4
	jul311:1.4
	jul310_1:1.4
	jul310:1.4
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.4
	jul307_4:1.4
	jul307_3:1.4
	jul307_2:1.4
	jul307_1:1.4
	jul307:1.4
	jul306_3:1.4
	jul306_2:1.4
	jul306_1:1.4
	jul306:1.4
	jul305_4:1.4
	jul305_3:1.4
	jul305_2:1.4
	jul305_1:1.4
	jul305:1.4
	jul304_3:1.4
	jul304_2:1.4
	jul304_1:1.4
	jul304:1.4
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.4
date	97.03.06.09.55.19;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.42.50;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.20;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.08;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.09;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Tracking upgrade
@
text
@      SUBROUTINE TPCREC
C
C----------------------------------------------------------------
C! Steering for TPC reconstruction
C!
C!    Author:    D. Schlatter
C!    Modified:  R. Johnson   19-01-88
C!    Modified:  R. Johnson   21-01-91 clean out unused code.
C!    Modified:  I. Tomalin    3-04-95 Calculate TPC bunch number.
C!    Modified:  D. Casper    05-11-94 calculate dE/dx from pad pulses.
C!    Modified:  D. Casper    23-10-95 refit after corrections, and remove
C!                                     filtered hits from coord list
C!    Modified:  O. Callot       12-95 call ALTIME only if TPTI card used
C!
C!    Description
C!    ===========
C?      1.  find chains
C?      2.  find links
C?      3.  create track candidates
C?      4.  resolve coordinates in clusters with overlapping tracks
C?      5.  fit tracks
C?      6.  add wire pulses to tracks
C?      7.  calculate wire dE/dx for tracks
C?      8.  calculate pad dE/dx for tracks
C?      9.  recalculate coordinates, including wire corrections
C?      10. refit track and remove filtered coordinates (turn off w/TNFF card)
C?      11. associate tracks with MC truth information
C!---------------------------------------------------------------
#ifndef DOC
C
#include "rparac.h"
#include "tparac.h"
#include "tpgpar.h"
#include "rcurnt.h"
#include "rflags.h"
#include "rlunit.h"
#include "tflags.h"
#include "bcs.h"
#include "tstate.h"
#include "tptime.h"
C Position of TPC bunch number in EVEH bank.
      PARAMETER(IBPOS=20,IBQUAL=23)
#include "evehjj.h"
C
      CHARACTER TEXT*100
      LOGICAL FIRST,RMOD
      LOGICAL IFTPTI
      DATA FIRST/.TRUE./
C
#include "bmacro.h"
C
      IF (FIRST) THEN
        IFTPTI = IW( NAMIND('TPTI') ) .NE. 0
        FIRST=.FALSE.
        NTPCO=NAMIND('TPCO')
        NTCHA=NAMIND('TCHA')
        NTGFT=NAMIND('TGFT')
        NT1FT=NAMIND('T1FT')
        NTWRR=NAMIND('TWRR')
        NTWTB=NAMIND('TWTB')
        NTELS=NAMIND('TELS')
        NTARC=NAMIND('TARC')
        NTCAL=NAMIND('TCAL')
        NTPCH=NAMIND('TPCH')
        NT2XS=NAMIND('T2XS')
        NTNPX=NAMIND('TNPX')
        NTNFF=NAMIND('TNFF')
        NTPLS=NAMIND('TPLS')
      ENDIF
C
      IF ( IFTPTI ) CALL ALTIME(TIME1)
      IER=0
C
C++   Check that the data have been prepared
C
      KTPCO=IW(NTPCO)
      IF (KTPCO.EQ.0 .OR. NOTRKF) GO TO 999
C
C++   Find tracks using TPC coordinates (choice of two programs)
C
      ICNTER(LCTRKF)=ICNTER(LCTRKF)+1
C
      IF (FDEBRF) THEN
        KTPCO=IW(NTPCO)
        IF (KTPCO.NE.0) THEN
          NCO1=LROWS(KTPCO)
        ELSE
          NCO1=0
        ENDIF
      ENDIF
      IF ( IFTPTI ) CALL ALTIME(TFCH1)
      CALL TRKFND(IER)
      IF ( IFTPTI ) CALL ALTIME(TFCH2)
      TPTSUM(6) = TPTSUM(6) + (TFCH2 - TFCH1)
      IF (FDEBRF) THEN
        KTCHA=IW(NTCHA)
        IF (JDBDRF(JULTP).GE.1 .AND. KTCHA.GT.0) THEN
          WRITE(LDEBRL,1003) IRUNRC,IEVTRC,LROWS(KTCHA)
        ENDIF
 1003   FORMAT(' TRKFND for run ',I5,' event ',I6,' finds ',
     &         I3,' TPC chains')
        KTPCO=IW(NTPCO)
        IF (KTPCO.NE.0) THEN
          NCO2=LROWS(KTPCO)
        ELSE
          NCO2=0
        ENDIF
        IF (JDBDRF(JULTP).GE.1) THEN
          NCADD=NCO2-NCO1
          IF (NCADD.GT.0) WRITE(LDEBRL,1869) IRUNRC,IEVTRC,NCADD
 1869     FORMAT(' TRKFND for run ',I5,' event ',I6,' adds ',
     &           I2,' TPC coordinates at small angles.')
        ENDIF
        IF (JDBDRF(JULTP).GE.6) CALL TCHADP(LDEBRL)
      ENDIF
      IF (IER.NE.0) THEN
        IER=IER+2000
        GO TO 998
      ENDIF
      IF (FTSTAT) THEN
        KTCHA=IW(NTCHA)
        IF (KTCHA.GT.0) ITSTAT(LTCHTS)=ITSTAT(LTCHTS)+LROWS(KTCHA)
      ENDIF
C
C++   Find links between chains
C
      IF ( IFTPTI ) CALL ALTIME(TMLK1)
      CALL TFLNKS(IER)
      IF (IER.NE.0) THEN
        IER=IER+3000
        GO TO 998
      ENDIF
C
C++   Assemble track candidates
C
      CALL TFCAND(IER)
      IF (IER.NE.0) THEN
        IER=IER+4000
        GO TO 998
      ENDIF
      IF ( IFTPTI ) CALL ALTIME(TMLK2)
      IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
        KTCAL=IW(NTCAL)
        KTARC=IW(NTARC)
        WRITE(LDEBRL,1854) IRUNRC,IEVTRC,LROWS(KTCAL),LROWS(KTARC)
 1854   FORMAT(' TFCAND for run ',I5,' event ',I6,
     &         ' finds ',I3,' track candidates and ',I3,' arcs')
      ENDIF
      TPTSUM(10)=TPTSUM(10) + (TMLK2-TMLK1)
      IF (FCLEAN) CALL BDROP(IW,'TLNKTCRL')
      IF (JDBDRF(JULTP).GE.6) THEN
        CALL TARCDP(LDEBRL)
        CALL TCALDP(LDEBRL)
      ENDIF
C
C++   Correct coordinates at track overlaps
C
      IF ( IFTPTI ) CALL ALTIME(TMOV1)
      CALL TOVRLP(IER,NTOSS,NADD)
      IF ( IFTPTI ) CALL ALTIME(TMOV2)
      TPTSUM(11)=TPTSUM(11) + (TMOV2-TMOV1)
      IF (IER.NE.0) THEN
        IER=IER+5000
        GO TO 998
      ENDIF
      IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
        WRITE(LDEBRL,1654) IRUNRC,IEVTRC,NTOSS,NADD
 1654   FORMAT(' TOVRLP for run ',I5,' event ',I6,' removes',
     &         I3,' coordinates and adds ',I3,' twin coordinates',
     &         ' to track candidates')
      ENDIF
      IF (FTSTAT) THEN
        ITSTAT(LTPCOV)=ITSTAT(LTPCOV)+NTOSS
        ITSTAT(LTPCTW)=ITSTAT(LTPCTW)+NADD
      ENDIF
      IF (JDBDRF(JULTP).GE.6) THEN
        CALL TCALDP(LDEBRL)
      ENDIF
      IF (FCLEAN) CALL BDROP(IW,'TCHATCTC')
C
C++   Fit TPC tracks
C
      ICNTER(LCTRFT)=ICNTER(LCTRFT)+1
      IF ( IFTPTI ) CALL ALTIME(TFIT1)
      CALL TFITTK(IER)
      IF ( IFTPTI ) CALL ALTIME(TFIT2)
      TPTSUM(7)=TPTSUM(7) + (TFIT2-TFIT1)
      IF (IER.NE.0) THEN
        IER=IER+6000
        GO TO 998
      ENDIF
      IF (FDEBRF) THEN
        KT1FT=IW(NT1FT)
        IF (JDBDRF(JULTP).GE.1 .AND. KT1FT.GT.0) THEN
          WRITE(LDEBRL,1835) IRUNRC,IEVTRC,LROWS(KT1FT)
 1835     FORMAT(' TFITTK for run ',I5,' event ',I6,' fits ',
     &           I3,' TPC tracks')
        ENDIF
        IF (JDBDRF(JULTP).GE.3) CALL T1FTDP(LDEBRL)
      ENDIF
      IF (FTSTAT) THEN
        KT1FT=IW(NT1FT)
        IF (KT1FT.GT.0) ITSTAT(LTGFTS)=ITSTAT(LTGFTS)+LROWS(KT1FT)
      ENDIF
      IF (FCLEAN) CALL BDROP(IW,'TTCC')
C
C++   Try to link together broken tracks
C
      KT1FT=IW(NT1FT)
      IF (KT1FT.NE.0) THEN
        NTK1=LROWS(KT1FT)
      ELSE
        NTK1=0
      ENDIF
      IF ( IFTPTI ) CALL ALTIME(TFLK1)
      CALL TFLNK2(IER)
      IF ( IFTPTI ) CALL ALTIME(TFLK2)
      TPTSUM(13)=TPTSUM(13) + (TFLK2-TFLK1)
      KTGFT=IW(NTGFT)
      IF (KTGFT.NE.0) THEN
        NTK2=LROWS(KTGFT)
      ELSE
        NTK2=0
      ENDIF
      NJOIN=NTK1-NTK2
      IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
        WRITE(LDEBRL,1764) IRUNRC,IEVTRC,NJOIN
 1764   FORMAT(' TFLNK2 for run ',I5,' event ',I6,' joins ',
     &          I2,' TPC track pairs.')
      ENDIF
      IF (FTSTAT) THEN
        ITSTAT(LTPCTL)=ITSTAT(LTPCTL)+NJOIN
      ENDIF
      IF (FCLEAN) CALL BDROP(IW,'T1TLT1CL')
C
C++   Associate wires with tracks and calculate wire dE/dx
C
      KTWRR=IW(NTWRR)
      IF (.NOT.FNOWIR .AND. KTWRR.GT.0) THEN
        ICNTER(LCTRWR)=ICNTER(LCTRWR)+1
        CALL RNXMOD(MODTPW,RMOD)
        IF ( IFTPTI ) CALL ALTIME(TMTW1)
        IF (RMOD) THEN
          CALL TRKWRA(IER)
        ENDIF
        IF ( IFTPTI ) CALL ALTIME(TMTW2)
        TPTSUM(8)=TPTSUM(8) + (TMTW2-TMTW1)
        IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
          KTWTB=IW(NTWTB)
          IF (KTWTB.GT.0) THEN
            WRITE(LDEBRL,1402) IRUNRC,IEVTRC,LROWS(KTWTB)
          ENDIF
 1402     FORMAT(' TRKWRA for run ',I5,' event ',I6,' associates ',
     &           I5,' wire pulses with tracks')
        ENDIF
        IF (FTSTAT) THEN
          KTWTB=IW(NTWTB)
          IF (KTWTB.GT.0) ITSTAT(LTWTTS)=ITSTAT(LTWTTS)+LROWS(KTWTB)
        ENDIF
        IF (IER.NE.0) THEN
          IER=IER+7000
          GO TO 998
        ENDIF
C
        ICNTER(LCELOS)=ICNTER(LCELOS)+1
        CALL RNXMOD(MODDEX,RMOD)
        IF ( IFTPTI ) CALL ALTIME(TMEL1)
        IF (RMOD) THEN
C
C++       dE/dx for non-overlapping tracks
C
          CALL TRKELS(IER)
C
C++       dE/dx for pairs of overlapping tracks
C
          IF (IER.EQ.0) CALL TTWODX(IER)
        ENDIF
        IF ( IFTPTI ) CALL ALTIME(TMEL2)
        TPTSUM(9)=TPTSUM(9) + (TMEL2-TMEL1)
        IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
          KTELS=IW(NTELS)
          IF (KTELS.GT.0) THEN
            WRITE(LDEBRL,1302) IRUNRC,IEVTRC,LROWS(KTELS)
          ENDIF
 1302     FORMAT(' TRKELS for run ',I5,' event ',I6,
     &           ' calculates dE/dx for ',I3,' TPC tracks.')
          KT2XS=IW(NT2XS)
          IF (KT2XS.GT.0) THEN
            WRITE(LDEBRL,1303) IRUNRC,IEVTRC,LROWS(KT2XS)
 1303       FORMAT(' TTWODX for run ',I5,' event ',I6,
     &           ' calculates dE/dx for ',I3,' pairs.')
          ENDIF
        ENDIF
      ENDIF
      IF (FTSTAT) THEN
        KTELS=IW(NTELS)
        IF (KTELS.GT.0) ITSTAT(LTELTS)=ITSTAT(LTELTS)+LROWS(KTELS)
      ENDIF
C
C++   Update coordinate calculation now that the track parameters
C++   are known.
C
      IF ( IFTPTI ) CALL ALTIME(TMCT1)
      CALL TCOORT(IER)
      IF (FCLEAN) CALL BDROP(IW,'TSPU')
      IF ( IFTPTI ) CALL ALTIME(TMCT2)
      TPTSUM(12)=TPTSUM(12) + (TMCT2-TMCT1)
C
C++   Final TPC fit, using corrected coordinates
C++   Remove outliers from associated coordinate list
C
      IF (IW(NTNFF).EQ.0) THEN
        IF ( IFTPTI ) CALL ALTIME(TFIT1)
        CALL TFITKF(IER)
        IF ( IFTPTI ) CALL ALTIME(TFIT2)
        TPTSUM(7)=TPTSUM(7) + (TFIT2-TFIT1)
        CALL AUBPRS('TGCL')
        IF (IER.NE.0) THEN
          IER=IER+9000
          GO TO 998
        ENDIF
        IF (FDEBRF) THEN
          KTGFT=IW(NTGFT)
          IF (JDBDRF(JULTP).GE.1 .AND. KTGFT.GT.0) THEN
            WRITE(LDEBRL,2835) IRUNRC,IEVTRC,LROWS(KTGFT)
 2835       FORMAT(' TFITKF for run ',I5,' event ',I6,' fits ',
     &           I3,' TPC tracks')
          ENDIF
          IF (JDBDRF(JULTP).GE.3) CALL TGFTDP(LDEBRL)
        ENDIF
      ENDIF
C
C++   Accumulate subcluster pulseheights for dE/dx using pads.
C
      IF (NTK2.GT.0) THEN
          IF(IW(NTNPX).EQ.0) THEN
            ICNTER(LCPDEX) = ICNTER(LCPDEX) + 1
            IF ( IFTPTI ) CALL ALTIME(TPDX1)
            CALL TPADDX
            CALL TPDELS
            IF ( IFTPTI ) CALL ALTIME(TPDX2)
            TPTSUM(14)=TPTSUM(14) + (TPDX2-TPDX1)
            IF (FDEBRF .AND. JDBDRF(JULTP).GE.1) THEN
                KTPLS=IW(NTPLS)
                IF (KTPLS.GT.0) THEN
                    WRITE(LDEBRL,1304) IRUNRC,IEVTRC,LROWS(KTPLS)
                ENDIF
 1304           FORMAT(' TPDELS for run ',I5,' event ',I6,
     &           ' calculates pad dE/dx for ',I3,' TPC tracks.')
            ENDIF
            IF (FTSTAT) THEN
                KTPLS=IW(NTELS)
                IF (KTPLS.GT.0) ITSTAT(LTPLTS)=ITSTAT(LTPLTS)+
     &                  LROWS(KTPLS)
            ENDIF
          ENDIF
      END IF
C
C++   For MC data produced simply by smearing the MC hits, TPCH should
C++   be on the input tape.  Otherwise we construct it here.
C
      IF (FMCTKA) THEN
        KTPCH=IW(NTPCH)
        IF (KTPCH.NE.0) CALL BDROP(IW,'TPCH')
        CALL TREFCH(KTPCH,IGARB)
        IF (IGARB.EQ.2) THEN
          CALL RERROR('TPCREC',3,'No room for bank TPCH')
        ENDIF
      ENDIF
      IF (FCLEAN) CALL BDROP(IW,'TSRL')
C
C++   Associate tracks with the MC true tracks
C
      IF (FMCTKA) THEN
        CALL TRKMCA
        IF (FDEBRF .AND. JDBDRF(JULTP).GE.5) THEN
          CALL TGMADP(LDEBRL)
        ENDIF
      ENDIF
C
C++   Do FASGAL dE/dx analysis.  Does nothing to GALEPH output.
C
      CALL FAWIAN
C
C++   Calculate TPC bunch number
C
      IF (.NOT.FPASS0) THEN
        KEVEH = IW(NAMIND('EVEH'))
        IF (KEVEH.GT.0) THEN
          CALL TPCBUN(ITPBUN,IQUAL)
          IF (IQUAL.GT.0) THEN
            CALL MVBITS(ITPBUN,0,3,IW(KEVEH+JEVEM4),IBPOS)
            CALL MVBITS(IQUAL ,0,2,IW(KEVEH+JEVEM4),IBQUAL)
          END IF
        END IF
      END IF
C
C++   Accumulate monitoring statistics
C
      CALL TACCMN
C
      IF (FCLEAN) CALL BDROP(IW,'TWOLTWRRTWPUTWTBTWITTWAT')
      IF (IER.NE.0) THEN
        IER=IER+8000
        GO TO 998
      ENDIF
C
      GO TO 999
C
C++   Report errors which leave the event not fully reconstructed
C
  998 CONTINUE
      IF(IER.NE.4002)THEN
        WRITE(TEXT,101) IER
        CALL RERROR('TPCREC',1,TEXT(1:90))
      ENDIF
  101 FORMAT('ERROR RETURN=',I4,' FROM TPC RECONSTRUCTION.&',
     &       'Reconstruction is not complete for this event.')
  999 CONTINUE
C
C++   Debug summary:
C
      IF (FDEBRF) THEN
        IF (JDBDRF(JULTP).GE.1) WRITE(LDEBRL,1672) IRUNRC,IEVTRC
 1672   FORMAT(' TPC reconstruction finished for run ',I5,
     &         ' event ',I6)
        IF (JDBDRF(JULTP).EQ.2) CALL TGFTDP(LDEBRL)
        IF (JDBDRF(JULTP).EQ.3) CALL TRKDMP(LDEBRL,1)
        IF (JDBDRF(JULTP).GE.4) CALL TRKDMP(LDEBRL,3)
        IF (JDBDRF(JULTP).GE.6) THEN
          CALL TBPRNT
        ENDIF
      ENDIF
      IF ( IFTPTI ) CALL ALTIME(TIME2)
      TPTSUM(2)=TPTSUM(2) + (TIME2-TIME1)
      CALL RNXMOD(MODEND,RMOD)
C
      RETURN
      END
#endif
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d13 1
d26 1
a26 1
C?      10. refit track and remove filtered coordinates
d67 1
a67 1
        NTFIL=NAMIND('TFIL')
d71 1
a71 1
      IF( IFTPTI ) CALL ALTIME( TIME1 )
d91 1
a91 1
      IF( IFTPTI ) CALL ALTIME( TFCH1 )
d93 1
a93 1
      IF( IFTPTI ) CALL ALTIME( TFCH2 )
d127 1
a127 1
      IF( IFTPTI ) CALL ALTIME( TMLK1 )
d141 1
a141 1
      IF( IFTPTI ) CALL ALTIME( TMLK2 )
d158 1
a158 1
      IF( IFTPTI ) CALL ALTIME( TMOV1 )
d160 1
a160 1
      IF( IFTPTI ) CALL ALTIME( TMOV2 )
d184 1
a184 1
      IF( IFTPTI ) CALL ALTIME( TFIT1 )
d186 1
a186 1
      IF( IFTPTI ) CALL ALTIME( TFIT2 )
d215 1
a215 1
      IF( IFTPTI ) CALL ALTIME( TFLK1 )
d217 1
a217 1
      IF( IFTPTI ) CALL ALTIME( TFLK2 )
d242 1
a242 1
      IF( IFTPTI ) CALL ALTIME( TMTW1 )
d246 1
a246 1
      IF( IFTPTI ) CALL ALTIME( TMTW2 )
d267 1
a267 1
      IF( IFTPTI ) CALL ALTIME( TMEL1 )
d278 1
a278 1
      IF( IFTPTI ) CALL ALTIME( TMEL2 )
d303 1
a303 1
      IF( IFTPTI ) CALL ALTIME( TMCT1 )
d306 1
a306 1
      IF( IFTPTI ) CALL ALTIME( TMCT2 )
d312 2
a313 2
      IF (IW(NTFIL).NE.0) THEN
      IF( IFTPTI ) CALL ALTIME( TFIT1 )
d315 1
a315 1
      IF( IFTPTI ) CALL ALTIME( TFIT2 )
d338 1
a338 1
      IF( IFTPTI ) CALL ALTIME( TPDX1 )
d341 1
a341 1
      IF( IFTPTI ) CALL ALTIME( TPDX2 )
d434 1
a434 1
      IF( IFTPTI ) CALL ALTIME( TIME2 )
@


1.2
log
@julia version 279
@
text
@a0 1
*DK tpcrec
d46 1
d52 1
d70 1
a70 1
      CALL ALTIME(TIME1)
d90 1
a90 1
      CALL ALTIME(TFCH1)
d92 1
a92 1
      CALL ALTIME(TFCH2)
d126 1
a126 1
      CALL ALTIME(TMLK1)
d140 1
a140 1
      CALL ALTIME(TMLK2)
d157 1
a157 1
      CALL ALTIME(TMOV1)
d159 1
a159 1
      CALL ALTIME(TMOV2)
d183 1
a183 1
      CALL ALTIME(TFIT1)
d185 1
a185 1
      CALL ALTIME(TFIT2)
d214 1
a214 1
      CALL ALTIME(TFLK1)
d216 1
a216 1
      CALL ALTIME(TFLK2)
d241 1
a241 1
        CALL ALTIME(TMTW1)
d245 1
a245 1
        CALL ALTIME(TMTW2)
d266 1
a266 1
        CALL ALTIME(TMEL1)
d277 1
a277 1
        CALL ALTIME(TMEL2)
d302 1
a302 1
      CALL ALTIME(TMCT1)
d305 1
a305 1
      CALL ALTIME(TMCT2)
d312 1
a312 1
        CALL ALTIME(TFIT1)
d314 1
a314 1
        CALL ALTIME(TFIT2)
d337 1
a337 1
            CALL ALTIME(TPDX1)
d340 1
a340 1
            CALL ALTIME(TPDX2)
d433 1
a433 1
      CALL ALTIME(TIME2)
@


1.1
log
@Initial revision
@
text
@d9 5
a13 1
C!    Modified:  R. Johnson   21-01-91 clean out unused code
d22 6
a27 3
C?      6.  associate tracks with MC truth information
C?      7.  add wire pulses to tracks
C?      8.  calculate dE/dx for tracks
d41 3
d64 3
d234 1
a234 36
C++   Update coordinate calculation now that the track parameters
C++   are known.
C
      CALL ALTIME(TMCT1)
      CALL TCOORT(IER)
      IF (FCLEAN) CALL BDROP(IW,'TSPU')
      CALL ALTIME(TMCT2)
      TPTSUM(12)=TPTSUM(12) + (TMCT2-TMCT1)
C
C++   For MC data produced simply by smearing the MC hits, TPCH should
C++   be on the input tape.  Otherwise we construct it here.
C
      IF (FMCTKA) THEN
        KTPCH=IW(NTPCH)
        IF (KTPCH.NE.0) CALL BDROP(IW,'TPCH')
        CALL TREFCH(KTPCH,IGARB)
        IF (IGARB.EQ.2) THEN
          CALL RERROR('TPCREC',3,'No room for bank TPCH')
        ENDIF
      ENDIF
      IF (FCLEAN) CALL BDROP(IW,'TSRL')
C
C++   Associate tracks with the MC true tracks
C
      IF (FMCTKA) THEN
        CALL TRKMCA
        IF (FDEBRF .AND. JDBDRF(JULTP).GE.5) THEN
          CALL TGMADP(LDEBRL)
        ENDIF
      ENDIF
C
C++   Do FASGAL dE/dx analysis.  Does nothing to GALEPH output.
C
      CALL FAWIAN
C
C++   Associate wires with tracks and calculate dE/dx
d298 98
d412 2
a413 2
      WRITE(TEXT,101) IER
      CALL RERROR('TPCREC',1,TEXT(1:90))
@


1.1.1.1
log
@import julia 300
@
text
@@
