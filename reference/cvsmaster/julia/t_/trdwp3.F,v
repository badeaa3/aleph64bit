head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.44.17;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.13;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.14;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TRDWP3(NSAT,IT0,NWSMP,IPH,NHIT,IQ,TIME,LENGTH,IQUAL)
C
C-----------------------------------------------------------------------
C! Reduce TPC wire pulses not handled by the TPP, using the default
C! algorithm used for all data taken so far.
C
C  Author:    R. Johnson    16-1-91
C  Modified:  R. Johnson    24-8-92   Return LMPH to calling routine
C  Modified:  R. Johnson    2-3-93    Fix bug such that LMPH REALLY
C                                     is returned
C             R. Johnson    5-9-93    Major changes to add possibility
C                                     of splitting double peaks.  Also,
C                                     use threshold alg. for times.
C
C  Input:    NSAT      /I        Number of saturated samples
C            IT0       /I        Time of 1st bucket in the pulse
C            NWSMP     /I        Number of samples in the pulse
C            IPH(n)    /I        Array of sample pulse heights
C  Output:   NHIT
C            IQ        /I        Charge estimate
C            TIME      /R        Time estimate
C            LENGTH    /I        Length of pulse above threshold
C            IQUAL     /I        Error code
C                                0= all OK
C
C----------------------------------------------------------------------
#ifndef DOC
C
      DIMENSION IQ(*),TIME(*),LENGTH(*),IQUAL(*)
C
#include "tpgpar.h"
#include "tpccon.h"
#include "twirct.h"
C
      DIMENSION IPH(NWSMP),IPK(2),T(2),PH(2),I1(2),I2(2)
      LOGICAL FMIN,GOOD
C
      IER=0
C
C++   Completely ignore the first and last sample if there are
C++   more than one pre and post samples.
C
      IF (NPRETW.GT.1) THEN
        JS1=2
      ELSE
        JS1=1
      ENDIF
      IF (NPSTTW.GT.1) THEN
        JS2=NWSMP-1
      ELSE
        JS2=NWSMP
      ENDIF
C
C++   Loop only on the samples above the TPD threshold
C     (i.e. skip the pre and post samples) and find the total
C     charge and charge-weighted time above a threshold
C
      IS2=0
      ICHG=0
      ISMPT=0
      LMPH=0
      FMIN=.FALSE.
      DO 300 IS=JS1,JS2
        IF (IPH(IS).GT.JTHRTW) THEN
          LMPH=LMPH+1
          ICHG= ICHG + IPH(IS)
          ISMPT= ISMPT + IPH(IS)*IS
          IS2=IS2 + IPH(IS)*(IS**2)
C
C++       Look for a local minimum in the pulse
C
          IF (IS.GT.NPRETW .AND. IS.LE.(NWSMP-NPSTTW)) THEN
            IF (IPH(IS).LT.IPH(IS-1)) THEN
              IF (IPH(IS).LT.IPH(IS+1)) THEN
                IF (FMIN) THEN
                  IER=1
                ELSE
                  FMIN=.TRUE.
                  IMN=IS
                ENDIF
              ELSEIF (IPH(IS).EQ.IPH(IS+1)) THEN
                IF (IPH(IS).LT.IPH(IS+2)) THEN
                  IF (FMIN) THEN
                    IER=1
                  ELSE
                    FMIN=.TRUE.
                    IMN=IS
                  ENDIF
                ENDIF
              ENDIF
            ENDIF
          ENDIF
        ENDIF
  300 CONTINUE
      IF (FMIN.AND.NSAT.GT.0) THEN
        IER=6
      ENDIF
      IF (IER.EQ.0.AND.FMIN) THEN
        IER=4
C
C++     Try to analyze the pulse as a double peak
C
        NPK=0
        NHIT=0
        DO 500 IS=NPRETW+1,NWSMP-NPSTTW
          IF (IPH(IS).GT.IPH(IS-1)) THEN
            IF (IPH(IS).GT.IPH(IS+1)) THEN
              NPK=NPK+1
              IF (NPK.GT.2) GO TO 501
              IPK(NPK)=IS
            ELSEIF (IPH(IS).EQ.IPH(IS+1)) THEN
              IF (IPH(IS).GT.IPH(IS+1)) THEN
                NPK=NPK+1
                IF (NPK.GT.2) GO TO 501
                IPK(NPK)=IS
              ENDIF
            ENDIF
          ENDIF
  500   CONTINUE
  501   CONTINUE
        IF (NPK.EQ.2) THEN
          IF (IPK(1).LT.IMN-1.AND.IPK(2).GT.IMN+1) THEN
            CALL TPARAB(FLOAT(IPK(1)),IPH(IPK(1)-1),T(1),PH(1))
            CALL TPARAB(FLOAT(IPK(2)),IPH(IPK(2)-1),T(2),PH(2))
            IF ((T(2)-T(1))*TVDRFT(1).GT.SPACTW) THEN
              I1(1)=JS1
              I2(1)=IMN-1
              I1(2)=IMN+1
              I2(2)=JS2
              NHIT=2
              DO 603 K=1,NHIT
                ICHG=IPH(IMN)/2
                ISMPT=ICHG*IMN
                IS2=ICHG*(IMN**2)
                LMPH=1
                DO 600 IS=I1(K),I2(K)
                  IF (IPH(IS).GT.JTHRTW) THEN
                    ICHG=ICHG+IPH(IS)
                    ISMPT= ISMPT + IPH(IS)*IS
                    IS2=IS2 + IPH(IS)*(IS**2)
                    LMPH=LMPH+1
                  ENDIF
  600           CONTINUE
                IF (ICHG.GT.0) THEN
                  RNS=FLOAT(ICHG)
                  WRM=FLOAT(IS2)/RNS - (FLOAT(ISMPT)/RNS)**2
                ELSE
                  WRM=0.
                ENDIF
                IQ(K)=ICHG
                TIME(K)=FLOAT(IT0-1)+T(K)
                LENGTH(K)=LMPH
                IF ((IPH(IPK(1))*10)/IPH(IMN).GT.MNRATW
     &                    .AND.ICHG.GT.0.AND.WRM.LE.WRMXTW) THEN
                  IER=0
                  IQUAL(K)=0
                ELSE
                  IQUAL(K)=5
                ENDIF
  603         CONTINUE
            ENDIF
          ENDIF
        ENDIF
        IF (IER.EQ.0) GOTO 999
      ENDIF
C
C++   Calculate and cut on the RMS width of the pulse for singles
C
      NHIT=1
      RT0=FLOAT(IT0-1)
      IF (ICHG.EQ.0) THEN
        TIM=RT0+0.5*FLOAT(NWSMP)
        IER=3
        ITHR=-255
      ELSE
        RNS=FLOAT(ICHG)
        TIM=RT0 + FLOAT(ISMPT)/RNS
        WRM= FLOAT(IS2)/RNS - (FLOAT(ISMPT)/RNS)**2
        IF (WRM.GT.WRMXTW) THEN
          IER=2
        ENDIF
        THR=THRSTW*RNS/FLOAT(LMPH)
        ITHR=INT(THR)
      ENDIF
C
C++   Calculate the time estimate from 2 threshold crossings
C
      GOOD= IPH(NPRETW).LT.ITHR.AND.IPH(NWSMP-NPSTTW+1).LT.ITHR
      IF (IPH(NPRETW).GT.IPH(NPRETW+1)) GOOD=.FALSE.
      IF (IPH(NWSMP-NPSTTW+1).GT.IPH(NWSMP-NPSTTW)) GOOD=.FALSE.
      IF (GOOD) THEN
        DO 660 IS=NPRETW+1,JS2
          IF (IPH(IS).GT.ITHR) THEN
            T1= FLOAT(IS-1) + (THR-FLOAT(IPH(IS-1)))
     &                             /FLOAT(IPH(IS)-IPH(IS-1))
            GO TO 661
          ENDIF
  660   CONTINUE
        CALL RERROR('TRDWP3',1,
     &          'Input data format error.  Unphysical pulse shape.')
        IER=7
        GOOD=.FALSE.
  661   CONTINUE
        DO 700 IS=NWSMP-NPSTTW,JS1,-1
          IF (IPH(IS).GT.ITHR) THEN
            T2= FLOAT(IS+1) - (THR-FLOAT(IPH(IS+1)))
     &                             /FLOAT(IPH(IS)-IPH(IS+1))
            GO TO 701
          ENDIF
  700   CONTINUE
        CALL RERROR('TRDWP3',2,
     &          'Input data format error.  Unphysical pulse shape.')
        IER=7
        GOOD=.FALSE.
  701   CONTINUE
        TIME(NHIT)=RT0+0.5*(T1+T2)
      ENDIF
      IF (.NOT.GOOD) THEN
        TIME(NHIT)=TIM
      ENDIF
C
      IQ(NHIT)=ICHG
      LENGTH(NHIT)=LMPH
      IQUAL(NHIT)=IER
C
  999 RETURN
C
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK trdwp3
@


1.1.1.1
log
@import julia 300
@
text
@@
