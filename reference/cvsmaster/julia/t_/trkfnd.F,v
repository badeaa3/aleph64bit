head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.44.48;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.14;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.15;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TRKFND(IER)
C
C--------------------------------------------------------------------
C! Track-finding in the TPC
C! using 3-D chain method (ALEPH-TPCDET Note 84-69)
C!
C!   Author:     M.Mermikides    06-10-86
C!   Modified:   R.Johnson        8-04-88
C!   Modified:   M.Mermikides    19-08-89
C!
C!   Output:  IER    /I    Error code, nonzero if error has occurred
C!   Input banks:
C!            'TPCO'       TPC coordinates
C!            'TCRL'       TPC coordinate row list
C!   Output banks:
C!            'TCHA'       Chain parameters
C!            'TCTC'       Chain -> coordinate reference
C!
C!
C!   Called by TPCREC
C!
C!   Strategy:
C!   ========
C!
C!     Three-point links are formed from successive padrows,
C!  starting from the outermost row.(There can be a maximum gap
C!  of MAXGAP between successive rows). Links are sorted in order
C!  of decreasing radius of curvature and propagated inwards
C!  using a local point search to form longest possible chain.
C!  Chains are verified by a helix fit and fitted parameters
C!  are used to project incomplete chains both inwards and
C!  outwards to pick extra coordinates.
C!
C!  Workbanks used internally:
C!                INDCXY    X-Y coordinates corresp. to TPCO
C!                INDLNK    Padrow and hit references and
C!                          helix parameters of links from
C!                          current staring row
C!                JSORTW    Workspace for sorting links
C!                INDBIN    Date structure for binned coordinates
C!
C!  NOTE:  This routine and the subroutines which it calls represent
C!         a MODULE within JULIA.
C-------------------------------------------------------------------
#ifndef DOC
C
#include "rparac.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tclujj.h"
#include "tlrljj.h"
#include "tpuljj.h"
#include "tpcojj.h"
#include "tcrljj.h"
#include "tchajj.h"
#include "bcs.h"
#include "tpwork.h"
#include "trfdct.h"
#include "tchain.h"
#include "rcurnt.h"
#include "rlunit.h"
#include "tpgeom.h"
#include "tcbins.h"
C
C----------------------------------------------------------------------
C
      PARAMETER (LNSRT=100)
      LOGICAL LFRST
      CHARACTER TEXT*60
      DATA NDCHA/800/, NXCHA/200/
      DATA NWCHC/1/,NWCXY/2/,MNLNK/4/
      DATA NWLNK/16/, NDLNK/300/
      DATA LFRST/.TRUE./
C
C----------------------------------------------------------------------
C
#include "bmacro.h"
#include "tsfunc.h"
C
C----------------------------------------------------------------------
C
      IF (LFRST) THEN
        LFRST=.FALSE.
        INDLNK=0
        INDCXY = 0
        JSORTW = 0
        NTPCO=NAMIND('TPCO')
        NTCRL=NAMIND('TCRL')
        NTCHA=NAMIND('TCHA')
        NTCTC=NAMIND('TCTC')
      ENDIF
C
      IER=0
C
C++   Check that the input banks are present
C
      KTPCO = IW(NTPCO)
      IF (KTPCO.EQ.0) GO TO 800
      KTCRL = IW(NTCRL)
      IF (KTCRL.EQ.0) GO TO 800
C
C++   Drop any of the output banks still lingering around
C
      IF (IW(NTCHA).NE.0) CALL BDROP(IW,'TCHA')
      IF (IW(NTCTC).NE.0) CALL BDROP(IW,'TCTC')
C
C  Create a workbank for sorting links
C
      IF (JSORTW.EQ.0) THEN
         IW(1) = 1
         LEN= 2*LNSRT
         CALL WBANK(IW,JSORTW,LEN,*801)
         IW(JSORTW-3)=INTCHA('WSRW')
      ENDIF
C
C  Bin the coordinates
C
      CALL TCOBIN(IER)
      IF (IER.NE.0) THEN
         CALL RERROR('TRKFND',5,'Error in binning of coordinates')
         IER=5
         GO TO 999
      ENDIF
C
C  Lift chain bank and add to T list
C
      IW(1) = 1
      CALL AUBOS('TCHA',0,NDCHA,KTCHA,IGARB)
      CALL BLIST(IW,'T+','TCHA')
      IF (IGARB.EQ.2) GO TO 830
      IF (IGARB.EQ.1) THEN
         KTCRL=IW(NTCRL)
         KTPCO=IW(NTPCO)
      ENDIF
      IW(KTCHA + LMHCOL) = LTCHAA
      IW(KTCHA + LMHROW) = 0
C
C  Lift Chain-> Coordinate  ref. bank and add to T list
C
      IW(1) = 1
      CALL AUBOS('TCTC',0,IW(KTPCO+LMHROW)+LMHLEN,KTCTC,IGARB)
      CALL BLIST(IW,'T+','TCTC')
      IF (IGARB.EQ.2) GO TO 830
      IF (IGARB.EQ.1) THEN
         KTCHA = IW(NTCHA)
         KTPCO = IW(NTPCO)
         KTCRL = IW(NTCRL)
      ENDIF
      IW(KTCTC + LMHCOL) = NWCHC
      IW(KTCTC + LMHROW) = 0
C
C  Book work banks to store links starting from given padrow
C
      IW(1) = 1
      CALL WBANK(IW,INDLNK,NDLNK,*810)
      IW(INDLNK + LMHCOL) = NWLNK
      IW(INDLNK + LMHROW) = 0
      IW(INDLNK-3)=INTCHA('WLNK')
C
C  Create INDCXY workbank to store x-y coordinates of pad hits.
C  This saves having to recompute them in the algorithms.
C
      IW(1) = 1
      NDATA = LMHLEN + LROWS(KTPCO)*NWCXY
      CALL WBANK(IW,INDCXY,NDATA,*820)
      IW(INDCXY + LMHCOL) = NWCXY
      IW(INDCXY + LMHROW) = LROWS(KTPCO)
      IW(INDCXY-3)=INTCHA('WCXY')
      JXY = INDCXY + LMHLEN
      KTPCO = IW(NTPCO)
      DO 50 I=1,LROWS(KTPCO)
         R = RTABL(KTPCO,I,JTPCRV)
         PHI = RTABL(KTPCO,I,JTPCPH)
         RW(JXY+1) = R*COS(PHI)
         RW(JXY+2) = R*SIN(PHI)
         JXY = JXY + NWCXY
   50 CONTINUE
C
C  Start looking for 3-point links from outermost padrow.
C  Stop when we reach padrow 4.
C
      DO 30 IROW=NTPROW, 4, -1
C
         KTCRL = IW(NTCRL)
         NCO1 = ITABL(KTCRL,IROW,JTCRNC)
         IF(NCO1.EQ.0) GO TO 30
C
C  Loop over every other phi bin in this row (this will get all
C  coordinates on this row, since they are double binned).
C
         DO 20 IBIN=1,LMXBIN,2
C
C  Loop through the linked list of coordinates for this bin
C
            IPTR= IBNPTR(IBIN,IROW)
  513       IF (IPTR.EQ.0) GO TO 514
C
C  Test all combinations of 3 padrows with max gap MAXGAP between
C  successive ones.
C
               DO 25 J=1,MAXGAP+1
                  IRWM = IROW - J
                  IF (IRWM.LT.3) GO TO 27
                  KTCRL = IW(NTCRL)
                  NCO2 = ITABL(KTCRL,IRWM,JTCRNC)
                  IF (NCO2.EQ.0) GO TO 25
C
                  DO 26 K=1,MAXGAP+1
                     IRWI = IRWM - K
                     IF (IRWI.LT.2) GO TO 26
                     KTCRL = IW(NTCRL)
                     NCO3 = ITABL(KTCRL,IRWI,JTCRNC)
                     IF (NCO3.EQ.0) GO TO 26
C
C  Search for 3-point link(s) from this hit
C
                     CALL TRSLNK(IROW,IRWM,IRWI,IPTR,NL,IER)
                     IF (IER.NE.0) GO TO 999
C
C  Exit the double loop as soon as a valid link is found
C
                     IF (NL.GT.0) GO TO 27
   26             CONTINUE
   25          CONTINUE
   27          CONTINUE
C
C  Find the next coordinate in the linked list for this phi bin
C
               IPTR=ITABL(INDBIN,IPTR,JNDBFW)
               GO TO 513
  514       CONTINUE
   20    CONTINUE
C
C   End of links originating from current pad row.
C   Sort links in decreasing radius of curvature so we get
C   fast tracks first.  Extend workbank if necessary.
C
         NLNKS=LROWS(INDLNK)
         IF (IW(JSORTW).LT.2*NLNKS) THEN
            LEN= 2*NLNKS
            CALL WBANK(IW,JSORTW,LEN,*801)
         ENDIF
         IF (NLNKS.GT.1) THEN
            JWORK= JSORTW+NLNKS
            DO 123 I = 1,NLNKS
               RW(JWORK + I) = ABS(RTABL(INDLNK,I,7))
  123       CONTINUE
            CALL SORTZV(RW(JWORK+1),IW(JSORTW+1),NLNKS,1,1,0,0,0)
         ELSE
            IW(JSORTW+1)=1
         ENDIF
C
C   Try to start a chain from each valid link
C
         DO 10 KK= 1,NLNKS
            ILINK= IW(JSORTW+KK)
C
C   Copy the chain's parameters into the current chain (common/TCHAIN/)
C   If any hits in this link have already been used by a validated
C   chain, then skip it.
C
            CALL UCOPY(IW(KROW(INDLNK,ILINK) + 4),IHCHAI(1),3)
            IF (ITABL(INDBIN,IHCHAI(1),JNDBFW).LT.0) GO TO 10
            IF (ITABL(INDBIN,IHCHAI(2),JNDBFW).LT.0) GO TO 10
            IF (ITABL(INDBIN,IHCHAI(3),JNDBFW).LT.0) GO TO 10
            NHCHAI = 3
            CALL UCOPY(IW(KROW(INDLNK,ILINK) + 1),IRCHAI(1),3)
            CALL UCOPY(RW(KROW(INDLNK,ILINK) + 7),PCHAIN(1),6)
            PCHAIN(JTCHC1) = 999.
            PCHAIN(JTCHC2) = 999.
            CALL VZERO(PCHAIN(JTCHER),15)
            D2CHAI(1) = RW(KROW(INDLNK,ILINK) + 14)
            D2CHAI(2) = RW(KROW(INDLNK,ILINK) + 15)
            D2CHAI(3) = RW(KROW(INDLNK,ILINK) + 16)
            ISTCHA = 0
C
C   Move inward row-by-row to add new points to the chain
C
            CALL TRSEEK
C
C  If we have enough points fit the chain to validate.
C
            IF (NHCHAI.GE.MNLNK)  CALL TRFTCH
C
C  If fit fails and there are enough points, try to rescue chain
C
            IF (ISTCHA.EQ.0 .AND. NHCHAI.GE.8) THEN
               CALL TRRESC
            ENDIF
C
C  Drop chain if unsuccessful; otherwise try to project across all padro
C  to pick up additional hits.
C
            IF (ISTCHA.EQ.0) GO TO 10
C
            IF (NHCHAI.GE.MNLNK) CALL TRPROJ
C
C  Save good chain in BOS bank TCHA
C
            IF (LTCHAA*(IW(KTCHA+LMHROW)+1)+LMHLEN.GT.IW(KTCHA)) THEN
               NDATA = IW(KTCHA) + NXCHA
               IW(1) = 1
               CALL AUBOS('TCHA',0,NDATA,KTCHA,IGARB)
               IF (IGARB.EQ.2) GO TO 810
               IF (IGARB.EQ.1) KTCTC=IW(NTCTC)
            ENDIF
            KCHA1 = KTCHA + LTCHAA*IW(KTCHA+LMHROW) + LMHLEN
C
C Convert first helix parameter from rho to 1/rho
C
            RW(KCHA1 + JTCHIR) = 1./PCHAIN(1)
            CALL UCOPY(PCHAIN(JTCHTL),RW(KCHA1 + JTCHTL),7)
            CALL UCOPY(PCHAIN(JTCHER),RW(KCHA1 + JTCHER),15)
            IW(KCHA1 + JTCHPI) = 0
            IW(KTCHA + LMHROW) = IW(KTCHA + LMHROW) + 1
C
C   Remove associated coordinates from the phi bins, enter
C   hits in TCTC bank and define offset in TCHA.
C
            NHITS = 0
            NLAST = IW(KTCTC+LMHROW)
            DO 11 J=NHCHAI,1,-1
               IF (MCHAIN(J).EQ.0) THEN
                  IPTR= IHCHAI(J)
                  IW(KCHA1+JTCHPI)= IBSET(IW(KCHA1+JTCHPI),IRCHAI(J))
                  NHITS = NHITS + 1
                  IC= ITABL(INDBIN,IPTR,JNDBCO)
                  IW(KTCTC+LMHLEN+NLAST+NHITS) = IC
C
C  Each coordinate must be removed from two phi bins
C
                  IPTBW= ITABL(INDBIN,IPTR,JNDBBW)
                  IPTFW= ITABL(INDBIN,IPTR,JNDBFW)
                  IF (IPTBW.GT.0) THEN
                     IW(KROW(INDBIN,IPTBW)+JNDBFW)= IPTFW
                  ELSE
                     IBNPTR(-IPTBW,IRCHAI(J))= IPTFW
                  ENDIF
                  IF (IPTFW.NE.0) IW(KROW(INDBIN,IPTFW)+JNDBBW)= IPTBW
                  IW(KROW(INDBIN,IPTR)+JNDBFW)= -1
C
C  The other entry for the same coordinate is adjacent to the first
C  in workbank INDBIN, but we do not know to which side.
C
                  IPTR= IPTR-1
                  IF (IPTR.NE.0) THEN
                    IF (ITABL(INDBIN,IPTR,JNDBCO).NE.IC) THEN
                      IPTR= IPTR+2
                    ENDIF
                  ELSE
                    IPTR= IPTR+2
                  ENDIF
                  IPTBW= ITABL(INDBIN,IPTR,JNDBBW)
                  IPTFW= ITABL(INDBIN,IPTR,JNDBFW)
                  IF (IPTBW.GT.0) THEN
                     IW(KROW(INDBIN,IPTBW)+JNDBFW)= IPTFW
                  ELSE
                     IBNPTR(-IPTBW,IRCHAI(J))= IPTFW
                  ENDIF
                  IF (IPTFW.NE.0) IW(KROW(INDBIN,IPTFW)+JNDBBW)= IPTBW
                  IW(KROW(INDBIN,IPTR)+JNDBFW)= -1
               ENDIF
   11       CONTINUE
            IW(KCHA1+JTCHNC) = NHITS
            IW(KCHA1+JTCHOF) = IW(KTCTC+LMHROW)
            IW(KTCTC+LMHROW) = IW(KTCTC+LMHROW) + NHITS
   10    CONTINUE
C
   30 CONTINUE
C
C  Drop work banks
C
      CALL WDROP(IW,INDCXY)
      CALL WDROP(IW,INDLNK)
      CALL WDROP(IW,INDBIN)
C
C  Do small angle pattern recognition
C
C     small angle pattern recognition disabled IF
C     data card NTSA (No Track Small Angle) is present
C
       NNTSA=NAMIND('NTSA')
       IF(IW(NNTSA).EQ.0)CALL TSAPAT
C
C  Compress TCHA, TCTC banks
C
      CALL AUBPRS('TCHATCTC')
      GO TO 999
C
C Set error code and print error messages
C
  801 CONTINUE
      CALL RERROR('TRKFND',6,'Error booking work bank for sorting')
      IER=6
      GO TO 999
  800 CONTINUE
      IER=1
      CALL RERROR('TRKFND',1,'No TPCO or TCRL bank!')
      GO TO 999
  810 CONTINUE
      IER=2
      CALL RERROR('TRKFND',2,'Error booking link work bank')
      GOTO 999
  820 CONTINUE
      IER=3
      CALL RERROR('TRKFND',3,'Error booking INDCXY work bank')
      GOTO 999
  830 CONTINUE
      IER=4
      CALL RERROR('TRKFND',4,'Error lifting/extending TCHA bank')
  999 CONTINUE
C
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK trkfnd
@


1.1.1.1
log
@import julia 300
@
text
@@
