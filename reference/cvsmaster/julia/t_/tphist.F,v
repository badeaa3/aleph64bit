head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.43.10;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.09;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.10;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TPHIST
C
C----------------------------------------------------------------
C! TPC histograms
C! for analysis of coordinate- and track-finding efficiency.
C!
C!    Author:   M. Mermikides
C!    Modified: R. Johnson      8/04/88
C!    Modified: I. Tomalin     23/06/88
C!
C----------------------------------------------------------------
#ifndef DOC
C
#include "rparac.h"
#include "bcs.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tpchjj.h"
#include "tphtjj.h"
#include "tpcojj.h"
#include "tgftjj.h"
#include "tgmajj.h"
#include "tmtljj.h"
#include "tgtljj.h"
#include "trcljj.h"
C
      COMMON/TPHIWB/ JIDWBK,JINDXW
C
      PARAMETER (JOFF=JULTP*1000, MXNCT=200)
      DIMENSION NCT(MXNCT),NKI(MXNCT),NSH(MXNCT)
      LOGICAL FIRST
      DATA FIRST/.TRUE./
C
C-----------------Statement function-------------------------------
C
#include "bmacro.h"
C
C------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        JIDWBK=0
        JINDXW=0
        NTPHT=NAMIND('TPHT')
        NTPCO=NAMIND('TPCO')
        NTPCH=NAMIND('TPCH')
        NTGFT=NAMIND('TGFT')
        NTGMA=NAMIND('TGMA')
        NTMTL=NAMIND('TMTL')
        NTSCL=NAMIND('TSCL')
        NTGCL=NAMIND('TGCL')
        NTGTL=NAMIND('TGTL')
        NTRCL=NAMIND('TRCL')
      ENDIF
C
C++   Do first those histograms not requiring MC truth information
C
C++   Histogram number of TPC coordinates
C
      KTPCO = IW(NTPCO)
      IF (KTPCO.EQ.0) THEN
        NCO=0
      ELSE
        NCO = LROWS(KTPCO)
      ENDIF
      CALL HFILL(JOFF+2,FLOAT(NCO),0.,1.)
C
C++   Fraction of coordinates not on a track
C
      NMISS=0.
      DO 237 I=1,NCO
        IF (ITABL(KTPCO,I,JTPCTN).EQ.0) NMISS=NMISS+1
  237 CONTINUE
      IF (NCO.GT.0) THEN
         FRAC = FLOAT(NMISS)/FLOAT(NCO)
         CALL HFILL(JOFF+6,FRAC,0.,1.)
      ENDIF
C
C++   Number of found tracks
C
      KTGFT = IW(NTGFT)
      IF (KTGFT.EQ.0) THEN
        NTK=0
      ELSE
        NTK=LROWS(KTGFT)
      ENDIF
      CALL HFILL(JOFF+13,FLOAT(NTK),0.,1.)
C
C++   Chisq/ndof, Proj track length, Number of coords on found tracks
C
      KTGFT=IW(NTGFT)
      KTGCL=IW(NTGCL)
      KTGTL=IW(NTGTL)
      KTPCO=IW(NTPCO)
      IF (KTGFT.NE.0 .AND. KTGCL.NE.0 .AND. KTGTL.NE.0
     &                                       .AND. KTPCO.NE.0) THEN
        DO 300 IT=1,LROWS(KTGFT)
          NHT1 = ITABL(KTGTL,IT,JTGTN1)
          NHT = ITABL(KTGTL,IT,JTGTNR) + NHT1
          JH = ITABL(KTGTL,IT,JTGTIO)
          IC1 = IW(KTGCL+LMHLEN+JH+1)
          IC2 = IW(KTGCL+LMHLEN+JH+NHT)
          DZ = RTABL(KTPCO,IC1,JTPCZV)-RTABL(KTPCO,IC2,JTPCZV)
          NDF = ITABL(KTGFT,IT,JTGFDF)
          CHI = RTABL(KTGFT,IT,JTGFCD)
          PRB = PROB(CHI,NDF)
          TANL = RTABL(KTGFT,IT,JTGFTL)
          IF (TANL.NE.0.) THEN
            SLEN = ABS(DZ/TANL)
          ELSE
            SLEN = 999.
          ENDIF
          CALL HFILL(JOFF+15,PRB,0.,1.)
          CALL HFILL(JOFF+16,SLEN,0.,1.)
          CALL HFILL(JOFF+20,FLOAT(NHT1),0.,1.)
          CALL HFILL(JOFF+17,FLOAT(NHT),0.,1.)
  300   CONTINUE
      ENDIF
C
C++   Now fill those histograms requiring MC truth information
C
      KTPHT = IW(NTPHT)
      IF (KTPHT.EQ.0) GO TO 999
      KTPCO=IW(NTPCO)
      IF (KTPCO.EQ.0) GO TO 999
C
      NHITS = IW(KTPHT+LMHROW)
      CALL HFILL(JOFF+1,FLOAT(NHITS),0.,1.)
C
      IF (NHITS.GT.0) THEN
        EFFIC = FLOAT(LROWS(KTPCO))/FLOAT(NHITS)
        CALL HFILL(JOFF+3,EFFIC,0.,1.)
      ENDIF
C
C++   Resolution obtained by comparing reconstructed coordinates to
C++   hits.   Relation between the two is given by the bank 'TPCH'.
C
      KTPCH = IW(NTPCH)
      IF (KTPCH.NE.0) THEN
C
C++     Make sure the TPCH bank matches the TPCO bank
C
        IF (LROWS(KTPCH).NE.LROWS(KTPCO)) THEN
          KTPCH=NDROP('TPCH',0)
        ENDIF
      ENDIF
      IF (KTPCH.EQ.0) GO TO 999
C
C++   Number of MC tracks in each cluster
C
      KTRCL=IW(NTRCL)
  425 IF (KTRCL.EQ.0) GO TO 428
        DO 426 ICL=1,LROWS(KTRCL)
          NHTCL=ITABL(KTRCL,ICL,JTRCNH)
          CALL HFILL(JOFF+10,FLOAT(NHTCL),0.,1.)
  426   CONTINUE
        KTRCL=IW(KTRCL-1)
        GO TO 425
  428 CONTINUE
C
C++   Histogram coordinate errors with respect to MC points
C
      KTPCO=IW(NTPCO)
      KTPHT=IW(NTPHT)
      DO 20 I = 1,LROWS(KTPCO)
        IFL = ITABL(KTPCO,I,JTPCTN)
        IREF = ITABL(KTPCH,I,JTPCIH)
        IF (IREF.EQ.0) GO TO 20
        RAD=  RTABL(KTPCO,I,JTPCRV)
        DPHI= RTABL(KTPCO,I,JTPCPH) - RTABL(KTPHT,IREF,JTPHPH)
        DZ=   RTABL(KTPCO,I,JTPCZV) - RTABL(KTPHT,IREF,JTPHZV)
        DW=   RAD*DPHI
        CALL HFILL(JOFF+4,DW,0.,1.)
        CALL HFILL(JOFF+5,DZ,0.,1.)
        PULL = DW/SQRT(RTABL(KTPCO,I,JTPCSR))
        CALL HFILL(JOFF+8,PULL,0.,1.)
        PULL = DZ/SQRT(RTABL(KTPCO,I,JTPCSZ))
        CALL HFILL(JOFF+9,PULL,0.,1.)
   20 CONTINUE
C
C++   Find no of distinct MC tracks (NTRK) giving hits and number of
C++   coordinates NCT(i) on each.
C
      CALL WBANK(IW,JIDWBK,LROWS(KTPCO),*999)
      IW(JIDWBK-3)=INTCHA('WIDW')
      CALL WBANK(IW,JINDXW,LROWS(KTPCO),*999)
      IW(JINDXW-3)=INTCHA('WNDX')
      NN = 0
      DO 25 I = 1,LROWS(KTPCO)
        IREF = ITABL(KTPCH,I,JTPCIH)
        IF (IREF.EQ.0) GO TO 25
        NN = NN + 1
        IW(JIDWBK+NN) = ITABL(KTPHT,IREF,JTPHKT)
   25 CONTINUE
C
C++   Sort hits according to kin. track number
C
      NTRK = 0
      IF (NN.GE.1) THEN
        CALL SORTZV(IW(JIDWBK+1),IW(JINDXW+1),NN, -1, 0, 0 ,0 ,0)
        JT = IW(JINDXW+1)
        IDLST = IW(JIDWBK+JT)
        NTRK = 1
        NCT(NTRK) = 1
        DO 28 I = 2,NN
          JT = IW(JINDXW+I)
          IF (IW(JIDWBK+JT).EQ.IDLST) THEN
            NCT(NTRK) = NCT(NTRK) + 1
          ELSE
            NKI(NTRK)=IDLST
            CALL HFILL(JOFF+7,FLOAT(NCT(NTRK)),0.,1.)
            IDLST = IW(JIDWBK+JT)
            IF (NTRK.EQ.MXNCT) GO TO 29
            NTRK = NTRK + 1
            NCT(NTRK) = 1
          ENDIF
   28   CONTINUE
   29   CONTINUE
        NKI(NTRK)=IDLST
        CALL HFILL(JOFF+7,FLOAT(NCT(NTRK)),0.,1.)
      ENDIF
      CALL WDROP(IW,JIDWBK)
      CALL WDROP(IW,JINDXW)
C
C++   No of MC tracks entering, and no. with > 3 hits
C
      CALL HFILL(JOFF+11,FLOAT(NTRK),0.,1.)
      NGOOD = 0
      DO 35 I=1,NTRK
        IF(NCT(I).GT.3) NGOOD = NGOOD + 1
   35 CONTINUE
      CALL HFILL(JOFF+12,FLOAT(NGOOD),0.,1.)
  650 CONTINUE
C
      KTGFT = IW(NTGFT)
      IF (KTGFT.EQ.0) GO TO 999
C
C++   Track-finding efficiency
C
      MTGFT = LROWS(KTGFT)
      IF (NGOOD.GT.0) THEN
        EFFT = FLOAT(MTGFT)/FLOAT(NGOOD)
        CALL HFILL(JOFF+14,EFFT,0.,1.)
      ENDIF
C
      DO 410 I=1,MIN(NTRK,MXNCT)
        NSH(I)=0
  410 CONTINUE
C
      KTGMA=IW(NTGMA)
      KTMTL=IW(NTMTL)
      IF (KTGMA.GT.0 .AND. KTMTL.GT.0) THEN
        DO 421 ITK=1,IW(KTGMA+LMHROW)
C Get the number of MC tracks associated with JULIA track ITK.
          NMC=ITABL(KTGMA,ITK,JTGMNM)
C Find the total number of hits on JULIA track ITK.
          NHITK=ITABL(KTGMA,ITK,JTGMNC)
          CALL HFILL(JOFF+18,FLOAT(NMC),0.,1.)
          NSHAR=0
C Loop over the true MC tracks sharing hits with JULIA track ITK.
          DO 419 J=1,NMC
            IMC= J + ITABL(KTGMA,ITK,JTGMOM)
C Note the KINE number of this true MC track.
            IKINE=ITABL(KTMTL,IMC,JTMTMT)
C Note the number of hits which it shares with JULIA track ITK.
            ISHAR=ITABL(KTMTL,IMC,JTMTNH)
            IF (ISHAR.GE.6)
     +        CALL HFILL(JOFF+19,RTABL(KTMTL,IMC,JTMTCS),0.,1.)
C Note the true MC track which shares the most hits with JULIA track ITK
            IF (ISHAR.GT.NSHAR) THEN
              JBEST=IKINE
              NSHAR=ISHAR
            END IF
C If true MC track IKINE shares more of its hits with JULIA track ITK
C than with any other JULIA track, note the number of hits shared.
            IOFF=1
  413       IF (NKI(IOFF).EQ.IKINE.OR.IOFF.GT.MIN(NTRK,MXNCT)) GOTO 415
            IOFF=IOFF+1
            GOTO 413
  415       IF (ISHAR.GT.NSH(IOFF)) NSH(IOFF)=ISHAR
  419     CONTINUE
C  Plot the fraction of the hits on JULIA track ITK which were shared
C  with its closest true MC track.
          FRAC=FLOAT(NSHAR)/FLOAT(NHITK)
          CALL HFILL(JOFF+21,FRAC,0.0,1.0)
  421   CONTINUE
C  Plot the fraction of the hits on each true MC track which were
C  shared with its closest JULIA track.
        DO 430 L=1,NTRK
          FRAC=FLOAT(NSH(L))/FLOAT(NCT(L))
          CALL HFILL(JOFF+22,FRAC,0.0,1.0)
  430   CONTINUE
      ENDIF
  999 RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tphist
@


1.1.1.1
log
@import julia 300
@
text
@@
