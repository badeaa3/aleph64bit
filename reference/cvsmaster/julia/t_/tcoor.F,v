head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.5
	jul309:1.5
	jul308_6:1.5
	jul308_5:1.5
	jul308_4:1.5
	jul308_3:1.5
	jul308_2:1.5
	jul308_1:1.5
	jul308:1.5
	jul307_4:1.5
	jul307_3:1.5
	jul307_2:1.5
	jul307_1:1.5
	jul307:1.5
	jul306_3:1.5
	jul306_2:1.5
	jul306_1:1.5
	jul306:1.5
	jul305_4:1.5
	jul305_3:1.5
	jul305_2:1.5
	jul305_1:1.5
	jul305:1.5
	jul304_3:1.5
	jul304_2:1.5
	jul304_1:1.5
	jul304:1.5
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	97.08.19.15.02.43;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.03.06.09.55.10;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.40.00;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.05;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.54;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.55;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@modifs for julia 304
@
text
@      SUBROUTINE TCOOR(IROW,IC,KTCLU,KTSPU,KTSCL,KTHRP)
C
C----------------------------------------------------------------------
C! Calculate coordinates from subclusters
C!
C!    Author:    R. Johnson 20-09-86
C!    Modified:  R. Johnson  8-04-88
C!           D. Casper  09-06-95  Support for Gaussian charge estimator
C!                                for pad dE/dx in call to TCOALG
C!           D. Casper  12-06-95  Support for low momentum track coords
C!                                Store #pads in subcluster, instead of
C!                                cluster, in TBCO
C!           D. Casper  24-04-96  Correct z for shaping effects
C!
C!           D. Casper  26-02-97  modify alignment calls
C!
C!                      05-08-97  Replace call to THPFDG with new routine
C!                                THPCOR, to correct 1 half-pad coordinates
C!                                too.
C!
C!    Input:
C!       IROW     /I       Padrow number within the sector
C!       IC       /I       Subcluster number for this sector
C!       KTCLU    /I       BOS offset to TCLU cluster bank
C!       KTSPU    /I       BOS offset to TSPU subpulse bank
C!       KTSCL    /I       BOS offset to TSCL subcluster bank
C!       KTHRP    /I       BOS offset to THRP TPD threshold pointers
C!
C!    Called by TCODRV
C!
C!    Description
C!    ===========
C!    This routine cycles through all subclusters in TSCL row by
C!    row (using the TSRL bank to point to row beginnings in
C!    TSCL) over all TPC sectors.  For each good cluster, a
C!    coordinate is calculated by TCOALG.  All coordinates for
C!    the entire TPC are filled into the TPCO bank and
C!    the bank TCRL is filled with pointers to the row beginnings
C!    in TPCO.
C!---------------------------------------------------------------------
#ifndef DOC
#include "alcons.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tsrljj.h"
#include "tpcojj.h"
#include "tbcojj.h"
#include "tspujj.h"
#include "tscljj.h"
#include "tcrljj.h"
#include "thpljj.h"
#include "thrpjj.h"
#include "tclujj.h"
#include "bcs.h"
#include "tpccon.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "tflags.h"
#include "tpccut.h"
#include "tzcorr.h"
C
      DIMENSION ZCUT(LTPDRO)
      DIMENSION RPULS(LMXPCL),RTIME(LMXPCL),ERRM(3)
      LOGICAL BAD,FIRST
      DATA FIRST/.TRUE./
      SAVE NTBCO,NTCRL,NTPCO,NTHPL,ZCUT
C
C----------------------------------------------------------------------
C
#include "bmacro.h"
C
C----------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        NTBCO=NAMIND('TBCO')
        NTCRL=NAMIND('TCRL')
        NTPCO=NAMIND('TPCO')
        NTHPL=NAMIND('THPL')
C
C++     For each padrow, calculate a limit on how close the coordinate
C++     can be to the endplate before becoming distorted due to the
C++     track passing through the endplate and not traversing the full
C++     length of the pad (assuming the track came from the I.P.)
C
        DO 10 I=1,LTPDRO
          ZCUT(I)=0.5*TPDHGT(1)*ZTPCMX/(TPPROW(I)+0.5*TPDHGT(1)) + 0.1
   10   CONTINUE
      ENDIF
C
C++   Get the sector slot number
C
      ISLOT=IW(KTSCL-2)
C
C++   Skip subclusters with multiple peaks or saturation or
C++   large overlapping pulses
C
      BAD=.FALSE.
      IQW=IW(KROW(KTSCL,IC)+JTSCQU)
C
C++   Find which time and charge estimators to use.
C
      IALGW=ITABL(KTSCL,IC,JTSCAW)
      IQE=IALGW/1000
      ITE=IALGW-1000*IQE
      IF (IQW.GT.99) THEN
        IFLG=20
        GO TO 100
      ENDIF
      IF (IQE.EQ.0) THEN
        IFLG=30
        GO TO 100
      ENDIF
      IF (ITE.EQ.0) THEN
        IFLG=40
        GO TO 100
      ENDIF
C
C     Get approximate tan(lambda)
C
      ICL=ITABL(KTSCL,IC,JTSCCL)
      IBK1=ITABL(KTCLU,ICL,JTCLFB)
      IBK2=ITABL(KTCLU,ICL,JTCLLB)
      BKT = 0.5*(IBK1+IBK2)
      ZBKT = ZTPCMX - (BKT-TVOFFS(ISLOT))*TVDRFT(IENDTP(ISLOT))
      IF (ITPTYP(ISLOT).EQ.1)THEN
        RAPPX = TPPROW(IROW)
      ELSE
        RAPPX = TPPROW(IROW+NTPDRW(1))
      ENDIF
      TANL = ZBKT/RAPPX
C
C++   Make lists of charge and time estimates for the subpulses.  Here
C++   we also handle the problem of half pads by adding them together,
C++   if possible, to give corresponding full pads.
C
      CALL TGETQT(IROW,KTSCL,IC,KTSPU,IQE,ITE,TANL,RPULS,RTIME,
     &  NSPL,JP1,IFLG)
      IF (IFLG.NE.0) GO TO 100
C
C++   Check that the subcluster is not adjacent to a dead pad.  If it
C++   is, then reject the coordinate if the edge pad is a local
C++   maximum or if the subcluster contains greater than 3 pads.
C
      IPDMN=ITABL(KTSCL,IC,JTSCFP)
      IF (KTHRP.NE.0) THEN
        KTHPL=IW(NTHPL)
        IF (KTHPL.NE.0) THEN
          IP1=IPDMN-1
          IP2=ITABL(KTSCL,IC,JTSCNS)+IPDMN
          DO 68 I=1,ITABL(KTHRP,IROW,JTHRNB)
            IBD= I + ITABL(KTHRP,IROW,JTHRPT)
            ITHR=ITABL(KTHPL,IBD,JTHPTH)
            IF (ITHR.NE.255) GO TO 68
            IBPAD=ITABL(KTHPL,IBD,JTHPPN)
            IF (IBPAD.GT.IP2) GO TO 69
            IF (IBPAD.EQ.IP1) THEN
              IF (NSPL.GT.3 .OR. RPULS(JP1).GE.RPULS(JP1+1)) THEN
                IFLG=50
                GO TO 100
              ENDIF
            ELSEIF (IBPAD.EQ.IP2) THEN
              IF (NSPL.GT.3 .OR. RPULS(JP1+NSPL-1)
     &                           .GE. RPULS(JP1+NSPL-2)) THEN
                IFLG=50
                GO TO 100
              ENDIF
            ENDIF
   68     CONTINUE
   69     CONTINUE
        ENDIF
      ENDIF
C
C++   Remove pulses which are too small.  In 3-pad clusters, remove
C++   the smallest pulse only if the two side ones are not balanced.
C
      CALL TRMVEP(KTSCL,IC,KTSPU,RPULS,JP1,NSPL)
      IPDMN=IPDMN+JP1-1
C
C++   Average the time estimates to give z for the cluster in buckets.
C
      CALL TSZCOR(ITE,RTIME(JP1),RPULS(JP1),NSPL,ZB)
C
C++   Apply the appropriate coordinate algorithm for r*phi (in pad units
C
      ZDRFT=(ZB-TVOFFS(ISLOT))*TVDRFT(IENDTP(ISLOT))
      PFRS2=TPRF2(ZDRFT,ISLOT,0,0.,0.)
      CALL TCOALG(ISLOT,IROW,IQW,NSPL,RPULS(JP1),PFRS2,
     &                   IPDMN,RPHIP,QCO,IFLG)
      IF (IFLG.NE.0) THEN
        GO TO 100
      ENDIF
C
C Apply a fudge in the case that half pads are used
C
      CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
      IF (NHALF.GT.0) THEN
        CALL THPCOR(NHALF,IPDMN,ISLOT,IROW,RPHIP,RFUDG,IFLG)
        IF (IFLG.NE.0) THEN
          GO TO 100
        ENDIF
        RPHIP=RFUDG
      ENDIF
      GO TO 200
C
C++   Calculate rough r*phi and z values for subclusters which have
C++   failed the previous tests and calculations.
C
  100 CONTINUE
        IW(KROW(KTSCL,IC)+JTSCNC)=-IFLG
        BAD=.TRUE.
        NSPL=ITABL(KTSCL,IC,JTSCNS)
        IPDMN=ITABL(KTSCL,IC,JTSCFP)
C
C++     Average the first and last pad numbers for r*phi
C
        RPHIP=FLOAT(IPDMN)+FLOAT(NSPL-1)/2.
C
C++     Average the minimum and maximum threshold crossings for z
C
        IOFSP=IW(KROW(KTSCL,IC)+JTSCPO)
        T1MIN=513.
        T2MAX=0.
        DO 92 J=1,NSPL
          ISP=IOFSP+J
          T1=RTABL(KTSPU,ISP,JTSPT1)
          T2=RTABL(KTSPU,ISP,JTSPT2)
          IF (T1.LT.T1MIN) T1MIN=T1
          IF (T2.GT.T2MAX) T2MAX=T2
   92   CONTINUE
        ZB= 0.5*(T1MIN+T2MAX) + TZOFFS(ITE)
C
C++   Convert the r*phi and z to units of centimeters in the sector
C++   frame of reference, making any necessary corrections for
C++   misalignment of the pads within the sector.
C
  200 CONTINUE
      CALL TSCOOR(ISLOT,IROW,RPHIP,ZB,RS,RPHIS,ZS)
C
      ISTYP=ITPTYP(ISLOT)
      IF (ISTYP.EQ.1) THEN
        IROWG=IROW
      ELSE
        IROWG=IROW+NTPDRW(1)
      ENDIF
C
C++   See if the coordinate is too close to the endplate
C
      IF (ZS.LT.ZCUT(IROWG)) BAD=.TRUE.
C
C++   Transform the coordinate to the ALEPH frame of reference,
C++   including all necessary alignment corrections.
C
      IF (FTPC90) THEN
        R=RS
        PHI=RPHIS/RS
        IF (PHI.LT.0.) PHI=PHI+TWOPI
        RPHI=R*PHI
        Z=ZS
      ELSE
        CALL TCTGLB(ISLOT,RS,RPHIS,ZS,R,RPHI,Z)
      ENDIF
C
C++   For good coordinates, make an estimate of the uncertainty.
C
      IF (.NOT.BAD) THEN
        MSPL=ITABL(KTSCL,IC,JTSCNS)
        WPS=RTABL(KTSCL,IC,JTSCSP)
        WZS=RTABL(KTSCL,IC,JTSCSB)
        IQS=ITABL(KTSCL,IC,JTSCTC)
        CALL TCOERR(ERRM,MSPL,WPS,WZS,IQS)
      ENDIF
C
C++   Fill the results into the appropriate banks, and make a rowlist
C++   for the good coordinates.
C
      IF (BAD) THEN
        KTBCO=IW(NTBCO)
        IW(KTBCO+LMHROW)=LROWS(KTBCO)+1
        NBC=LROWS(KTBCO)
        IPDCH=IPDMN+NSPL/2
        IW(KROW(KTBCO,NBC)+JTBCIN)=ISLOT*1000+IROWG*100000+IPDCH
        RW(KROW(KTBCO,NBC)+JTBCRV)=R
        RW(KROW(KTBCO,NBC)+JTBCPH)=RPHI/R
        RW(KROW(KTBCO,NBC)+JTBCZV)=Z
        ICL=ITABL(KTSCL,IC,JTSCCL)
        IBK1=ITABL(KTCLU,ICL,JTCLFB)
        IBK2=ITABL(KTCLU,ICL,JTCLLB)
        IW(KROW(KTBCO,NBC)+JTBCRW)=ITABL(KTSCL,IC,JTSCNS)
        IW(KROW(KTBCO,NBC)+JTBCZW)=IBK2-IBK1+1
        IW(KROW(KTBCO,NBC)+JTBCSC)=IC
      ELSE
        KTCRL=IW(NTCRL)
        IW(KROW(KTCRL,IROWG)+JTCRNC)=IW(KROW(KTCRL,IROWG)+JTCRNC)+1
        IF (IENDTP(ISLOT).EQ.1) THEN
          IW(KROW(KTCRL,IROWG)+JTCRN1)
     &                            = IW(KROW(KTCRL,IROWG)+JTCRN1)+1
        ENDIF
        KTPCO=IW(NTPCO)
        IW(KTPCO+LMHROW)=IW(KTPCO+LMHROW)+1
        NC=IW(KTPCO+LMHROW)
        IPDCH=IPDMN+NSPL/2
C
C++     Correct only good coordinates for drift field distortions
C
        PHI= RPHI/R
        IF (FFCORR) THEN
          MODE=0
          IF (FFMODE) MODE=1
          CALL TLACOR(R,PHI,Z,RCR,PHICR,ZCR,MODE)
          R=RCR
          PHI=PHICR
          Z=ZCR
        ENDIF
C
C++     Correct coordinate z for time-of-flight
C
        CALL TCRTOF(BFIELD,R,Z,0,' ',ZCR)
        Z=ZCR
C
C++     Correct coordinate for transverse drift
C
        IF (FECORR) THEN
            CALL TCRTRN(ISLOT,R,PHI,Z,RCR,PHICR,ZCR)
            R = RCR
            PHI = PHICR
            Z = ZCR
        ENDIF
C
C++     Correct for z distortions measured by VDET
C
        CALL TZCRVD(IENDTP(ISLOT),R,Z,ZCR)
        Z=ZCR
        CALL TZCSVD(ISLOT,R,PHI,Z,ZCR)
        Z=ZCR
C
C++   Correct for Residual field distortions
C
        CALL TCORES(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
        R  =RCR
        PHI=PHICR
        Z  =ZCR
        CALL TFICOR(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
        R  =RCR
        PHI=PHICR
        Z  =ZCR
C
        IW(KROW(KTPCO,NC)+JTPCIN)=ISLOT*1000+IROWG*100000+IPDCH
        RW(KROW(KTPCO,NC)+JTPCRV)=R
        RW(KROW(KTPCO,NC)+JTPCPH)=PHI
        RW(KROW(KTPCO,NC)+JTPCZV)=Z
        RW(KROW(KTPCO,NC)+JTPCSR)=ERRM(1)
        RW(KROW(KTPCO,NC)+JTPCSZ)=ERRM(3)
        IW(KROW(KTPCO,NC)+JTPCOF)=1
        IW(KROW(KTPCO,NC)+JTPCTN)=0
        IW(KROW(KTPCO,NC)+JTPCIT)=0
        RW(KROW(KTPCO,NC)+JTPCRR)=RPHIS
        RW(KROW(KTPCO,NC)+JTPCRZ)=ZS
C
C++     Put the coordinate reference into the subcluster bank
C++     and vice-versa
C
        IW(KROW(KTSCL,IC)+JTSCCO)=NC-1
        IW(KROW(KTSCL,IC)+JTSCNC)=1
        IW(KROW(KTPCO,NC)+JTPCCN)=IC
      ENDIF
C
  999 CONTINUE
      RETURN
      END
#endif
@


1.4
log
@Tracking upgrade
@
text
@d17 4
d194 1
a194 1
C Apply a fudge in the case that two half pads are used
d197 2
a198 2
      IF (NHALF.EQ.2) THEN
        CALL THPFDG(IPDMN,ISLOT,IROW,RPHIP,RFUDG,IFLG)
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d13 3
a37 1
C
d62 1
d115 14
d133 2
a134 1
      CALL TGETQT(IROW,KTSCL,IC,KTSPU,IQE,RPULS,RTIME,NSPL,JP1,IFLG)
d319 6
a324 1
        IF (FECORR) CALL TCRTRA(IENDTP(ISLOT),R,PHI,Z,RC,PHIC)
d328 1
a328 1
        CALL TZCRVD(IENDTP(ISLOT),RC,Z,ZCR)
d330 1
a330 1
        CALL TZCSVD(ISLOT,RC,PHIC,Z,ZCR)
d335 8
a342 8
        CALL TCORES(IENDTP(ISLOT),IROWG,RC,PHIC,Z,RCR,PHICR,ZCR)
        RC  =RCR
        PHIC=PHICR
        Z   =ZCR
        CALL TFICOR(IENDTP(ISLOT),IROWG,RC,PHIC,Z,RCR,PHICR,ZCR)
        RC  =RCR
        PHIC=PHICR
        Z   =ZCR
d345 2
a346 2
        RW(KROW(KTPCO,NC)+JTPCRV)=RC
        RW(KROW(KTPCO,NC)+JTPCPH)=PHIC
@


1.2
log
@julia version 279
@
text
@a0 1
*DK tcoor
@


1.1
log
@Initial revision
@
text
@d9 5
d168 1
a168 1
     &                   IPDMN,RPHIP,IFLG)
a265 2
        IPD1=ITABL(KTCLU,ICL,JTCLFP)
        IPD2=ITABL(KTCLU,ICL,JTCLLP)
d268 1
a268 1
        IW(KROW(KTBCO,NBC)+JTBCRW)=IPD2-IPD1+1
@


1.1.1.1
log
@import julia 300
@
text
@@
