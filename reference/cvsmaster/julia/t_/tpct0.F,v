head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.42.59;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.08;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.09;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TPCT0(IER,DT)
C
C-----------------------------------------------------------------------
C! TPC T0 monitoring
C!
C!  Author:   W. Wiedenmann   12-09-89
C!  Modified: R. Johnson      18-09-89
C!  Modified :- E. Lancon             25-FEB-1992
C!     use alephlib routine TPDVEL to load drift velocity
C!
C!  Output:  IER      /I     If non-zero, then no valid T0 info for
C!                           this event
C!           DT       /R     Difference in time between TPC side A
C!                           and side B in microseconds.
C!
C?
C!======================================================================
#ifndef DOC
C
#include "bcs.h"
#include "alcons.h"
#include "frftjj.h"
#include "frtljj.h"
#include "tpgpar.h"
#include "tmonit.h"
#include "tpcojj.h"
#include "tpgeom.h"
#include "tpccon.h"
#include "rlunit.h"
C
      DIMENSION DVSA (3), DVSB (3)
      DIMENSION NTR(2),ZV(2),CUTLM(2),NEND(2)
      LOGICAL FIRST
      DATA FIRST/.TRUE./
C
#include "bmacro.h"
C
      IF (FIRST) THEN
        FIRST=.FALSE.
C
C------ Initialize cuts on the first call
C
        NFRFT=NAMIND('FRFT')
        NFRTL=NAMIND('FRTL')
        NFTCL=NAMIND('FTCL')
        NTPCO=NAMIND('TPCO')
C
        KTCT0  = NLINK('TCT0',0)
        IF (KTCT0.GT.0) THEN
          NTRCT    = IW(KTCT0+1)
          CUTLM(1) = RW(KTCT0+2)
          CUTLM(2) = RW(KTCT0+3)
          CUTD0    = RW(KTCT0+4)
          CUTZ0    = RW(KTCT0+5)
          CUTRI    = RW(KTCT0+6)
          NHCUT    = IW(KTCT0+7)
          IF (LOUTRL.GT.0) WRITE(LOUTRL,100)
     +      NTRCT,CUTLM(1),CUTLM(2),CUTD0,CUTZ0,CUTRI,
     +      NHCUT
 100      FORMAT(/
     +      '  TPC T0 MONITOR initialized on first call        '/,
     +      '  -----------                                     '/,
     +      '  TPC-T0 : Cuts found on cards                    '/,
     +      '  1) min. number of fitted tracks on one side.... ',
     +      I10/,
     +      '  2) min./max. lamda for a track (degrees)....... ',
     +      F10.3,' / ',F10.3/,
     +      '  3) max. allowed d0 (cm)........................ ',
     +      F10.3/,
     +      '  4) max. allowed z0 (cm)........................ ',
     +      F10.3/,
     +      '  5) max. invers radius.......................... ',
     +      F10.5/,
     +      '  6) number of required hits on a track.......... ',
     +      I10)
        ELSE
          NTRCT    = 2
          CUTLM(1) = 0.
          CUTLM(2) = 50.
          CUTD0    = 2.
          CUTZ0    = 10.
          CUTRI    = 0.002
          NHCUT    = 10
          IF (LOUTRL.GT.0) WRITE(LOUTRL,200)
     +      NTRCT,CUTLM(1),CUTLM(2),CUTD0,CUTZ0,CUTRI,
     +      NHCUT
 200      FORMAT(/
     +      '  TPC T0 MONITOR initialized on first call        '/,
     +      '  -----------                                     '/,
     +      '  TPC-T0 : Default cuts used **********           '/,
     +      '  1) min. number of fitted tracks on one side.... ',
     +      I10/,
     +      '  2) min./max. lamda for a track (degrees)....... ',
     +      F10.3,' / ',F10.3/,
     +      '  3) max. allowed d0 (cm)........................ ',
     +      F10.3/,
     +      '  4) max. allowed z0 (cm)........................ ',
     +      F10.3/,
     +      '  5) max. invers radius.......................... ',
     +      F10.5/,
     +      '  6) number of required hits on a track.......... ',
     +      I10)
        ENDIF
      ENDIF
      IER = 1
      DT = 999999.
      KFRFT = IW(NFRFT)
      KFRTL = IW(NFRTL)
      IF (KFRFT.LE.0 .OR. KFRTL.LE.0) GOTO 999
      KFTCL = IW(NFTCL)
      KTPCO = IW(NTPCO)
      IF (KFTCL.LE.0 .OR. KTPCO.EQ.0) GOTO 999
      CALL TPDVEL ( ' ', DVSA, DVSB, IER1)
      IF ( IER1.NE.0 ) GOTO 999
      VD = 0.5*(DVSA(3) + DVSB(3))
      IF ( VD.LE.0. ) GOTO 999
C
      NTRKS = LROWS(KFRFT)
      IF(NTRKS.LT.(2*NTRCT)) GOTO 999
C
      DO 10 I=1,2
        NTR(I) = 0
   10 ZV(I) = 0.0
C
C-----Loop over tracks, selecting suitable ones.
C
      DO 20 I=1,NTRKS
        NTPC=ITABL(KFRTL,I,JFRTNT)
        IF (NTPC.EQ.0)                                      GOTO 21
        ALAMDA = RADEG * ATAN(RTABL(KFRFT,I,JFRFTL))
        IF(ABS(ALAMDA).LT.CUTLM(1))                         GOTO 20
        IF(ABS(ALAMDA).GT.CUTLM(2))                         GOTO 20
        D0 = RTABL(KFRFT,I,JFRFD0)
        IF(ABS(D0) .GT.CUTD0 )                              GOTO 20
        Z0 = RTABL(KFRFT,I,JFRFZ0)
        IF(ABS(Z0) .GT.CUTZ0 )                              GOTO 20
        RI = RTABL(KFRFT,I,JFRFIR)
        IF(ABS(RI) .GT.CUTRI )                              GOTO 20
        IF(NTPC.LT.NHCUT)                                   GOTO 20
C
C------- Take only tracks with all coordinates in 1 TPC end
C
        NEND(1)=0
        NEND(2)=0
        IOFF=KFTCL+LMHLEN+ITABL(KFRTL,I,JFRTIT)
        DO 17 JJ=1,NTPC
          IC=IW(IOFF+JJ)
          ID=ITABL(KTPCO,IC,JTPCIN)
          IROW=ID/100000
          ISLOT=(ID-IROW*100000)/1000
          JEND=IENDTP(ISLOT)
          NEND(JEND)=NEND(JEND)+1
   17   CONTINUE
        IF (NEND(1).NE.0 .AND. NEND(2).NE.0)                GOTO 20
C
        IF (NEND(1).GT.0) THEN
          ISIDE = 1
        ELSE
          ISIDE = 2
        ENDIF
        NTR(ISIDE) = NTR(ISIDE) + 1
        ZV(ISIDE) = ZV(ISIDE) + Z0
C
   20 CONTINUE
   21 CONTINUE
      IF ((NTR(1).GE.NTRCT) .AND. (NTR(2).GE.NTRCT)) THEN
        DZE   = ZV(1)/FLOAT(NTR(1)) - ZV(2)/FLOAT(NTR(2))
        DT = DZE/VD
C
C--      Accumulate sums in TMONIT for printout at end of job
C
        NT0STM=NT0STM+1
        T0SHTM=T0SHTM+DT
        T0S2TM=T0S2TM+DT**2
      ENDIF
      IER=0
C
  999 CONTINUE
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tpct0
d57 2
a58 16
          IF (LOUTRL.GT.0) WRITE(LOUTRL,'(/
     +      ''  TPC T0 MONITOR initialized on first call        ''/
     +      ''  -----------                                     ''/
     +      ''  TPC-T0 : Cuts found on cards                    ''/
     +      ''  1) min. number of fitted tracks on one side.... '',
     +      I10/
     +      ''  2) min./max. lamda for a track (degrees)....... '',
     +      F10.3,'' / '',F10.3/
     +      ''  3) max. allowed d0 (cm)........................ '',
     +      F10.3/
     +      ''  4) max. allowed z0 (cm)........................ '',
     +      F10.3/
     +      ''  5) max. invers radius.......................... '',
     +      F10.5/
     +      ''  6) number of required hits on a track.......... '',
     +      I10)') NTRCT,CUTLM(1),CUTLM(2),CUTD0,CUTZ0,CUTRI,
d60 16
d84 2
a85 16
          IF (LOUTRL.GT.0) WRITE(LOUTRL,'(/
     +      ''  TPC T0 MONITOR initialized on first call        ''/
     +      ''  -----------                                     ''/
     +      ''  TPC-T0 : Default cuts used **********           ''/
     +      ''  1) min. number of fitted tracks on one side.... '',
     +      I10/
     +      ''  2) min./max. lamda for a track (degrees)....... '',
     +      F10.3,'' / '',F10.3/
     +      ''  3) max. allowed d0 (cm)........................ '',
     +      F10.3/
     +      ''  4) max. allowed z0 (cm)........................ '',
     +      F10.3/
     +      ''  5) max. invers radius.......................... '',
     +      F10.5/
     +      ''  6) number of required hits on a track.......... '',
     +      I10)') NTRCT,CUTLM(1),CUTLM(2),CUTD0,CUTZ0,CUTRI,
d87 16
@


1.1.1.1
log
@import julia 300
@
text
@@
