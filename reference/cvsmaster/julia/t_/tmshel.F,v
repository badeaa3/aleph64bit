head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.3
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	99.10.27.12.27.42;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	98.09.28.11.51.45;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	97.12.05.13.40.11;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.42.19;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.04;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.05;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@For julia 310
@
text
@      SUBROUTINE TMSHEL(NAME,NPT,LIST,IOPT,VV0,EE0,CHI2)
C-----**************************************************---------C
C! FAST FITTING ROUTINE FOR SCATTERED HELICES IN THE TPC         C
C!    AUTHORS:  N. CHERNOV, G. OSOSKOV & M. POPPE                C
C!    Modified: M.Cattaneo 97/12/05
C!              Protect against divide by zero when DENOM=0.0
C!    Modified: M.Cattaneo 98/09/28
C!              Protect against divide by zero when DENOM=0.0, again...
C!    Modified: D.Smith    99/10/27 Double precision fixes for Linux
C!    INPUT: NAME  = NAME OF THE BANK CONTAINING COORDINATES     C
C!            NPT  = NUMBER OF POINTS TO BE FITTED               C
C!            LIST = LIST OF POINTS TO BE FITTED                 C
C!            IOPT = 0 -> OBSOLETE                               C
C!                   1 -> WEIGHTED WITH 1/SIMA(R*PHI)**2         C
C!                   2 -> ERROR MATRIX CALCULATED                C
C!                   3 -> 3-DIMENSIONAL ITERATION                C
C!  OUTPUT:   VV0 = 1/R*CHARGE   [1/CM]  POS. IF CLOCKWISE       C
C!                  TAN(LAMBDA)  {=DZ/DS}TAN(ANGLE TO X,Y PLANE) C
C!                  PHI0         {0,2PI} ANGLE TO X-AXIS         C
C!                  D0*SIGN      [CM]    MINIMAL DIST. TO Z-AXIS,C
C!                                       POS. IF AXIS ENCIRCLED  C
C!                  Z0           [CM]    Z POS AT R=D0           C
C!            EE0 = ERROR MATRIX IN TRIANG. FORM                 C
C!            CHI2= CHI SQUARED = SUM (DEVIATIONS/ERRORS)**2     C
C!  NOTE: DEGREES OF FREEDOM = 2*NPT-5                           C
C!**WARNING***WARNING***WARNING***WARNING***WARNING***WARNING****C
C!THIS SUBROUTINE IS NOT PROTECTED AGAINNST MISSING INPUT BANKS  C
C!**WARNING***WARNING***WARNING***WARNING***WARNING***WARNING****C
C                                                                C
C----------------------------------------------------------------C
C     BASED ON  SUBROUTINE CIRCLE                                C
C     REFERENCE:  COMPUTER PHYSICS COMMUNICATIONS VOL 33,P329    C
C?
C!======================================================================
#ifndef DOC
#include "bcs.h"
      PARAMETER (EPS = 1.0E-16, ITMAX =15, MPT=40)
      REAL   PF(MPT),RF(MPT),PC(MPT),SP2(MPT),VV0(*),EE0(*),VV1(5),
     1       DEL(MPT),SXY(MPT),ZF(MPT),WZF(MPT),SS0(MPT),EEE(MPT),
     2       DELZ(MPT),GRAD(5),COV(15),DV(5),GGRAD(5),DRPHI(*),
     3       DZ(*),DCHI2(*),DELN(MPT),DELZN(MPT)
      DOUBLE PRECISION XF(MPT),YF(MPT),WF(MPT),XMID,YMID
      DOUBLE PRECISION ALF,ALM,A0,A1,A2,A22,BEM,BET,CUR,
     1   DD,DEN,DET,DY,D2,F,FACT,FG,F1,G,GAM,GAM0,GMM,G1,
     2   H,H2,P2,Q2,RM,RN,ROOT,
     3   XA,XB,XD,XI,XM,XX,XY,X1,X2,DEN2,
     4   YA,YB,YD,YI,YM,YY,   Y1,Y2,WN,SA2B2,DD0,CU2,PHIC
      INTEGER LIST(*)
      CHARACTER*4 NAME
      LOGICAL FIRST
      DATA FIRST/.TRUE./
      DATA SCACO /0.0160/
C     MEAN ANGLE OF DEFLECTION FOR ARGON, B=1.5 TESLA, AND
C     ALL RADII IN CM. ( <- MULTIPLE SCATTERING )
C
C     OFFSET FOR COORDINATE "IJ" IN 'TPCO'
      KKTPCO(IJ) = KTPCO+2+(IJ-1)*(IW(KTPCO+1))
C     OFFSET FOR COORDINATE "IJ" IN 'TPCO'
      IF(FIRST) THEN
          PI    = 2.0*ASIN(1.0)
          PIO2  = 0.5*PI
          PIT2  = 2.0*PI
          NTPCO = NAMIND('TPCO')
          FIRST =.FALSE.
      END IF
      DO 1   I=1,15
  1     EE0(I)=0.0
      DO 2   I=1,5
        GRAD(I)=0.0
        VV0(I) =0.0
  2   CONTINUE
      CHI2=0.0
      N   = NPT
      IF(N.GT.MPT) RETURN
      IF(N.LT.3)   RETURN
C
C-----> INPUT DATA
C
          KTPCO=IW(NTPCO)
      DO 10 I=1,N
        KSTRT = KKTPCO(LIST(I))
        XF(I)  = RW(KSTRT+2)*COS(RW(KSTRT+3))
        YF(I)  = RW(KSTRT+2)*SIN(RW(KSTRT+3))
        RF(I)  = RW(KSTRT+2)
        PF(I)  = RW(KSTRT+3)
        WF(I)  = (RW(KSTRT+5)+0.000000001)**(-1)
        SP2(I) = WF(I)*(RF(I)*RF(I))
        ZF(I)  = RW(KSTRT+4)
        WZF(I) = 1.0/(RW(KSTRT+6)+0.000001)
   10 CONTINUE
C***************************************************************C
C                                                               C
C           CIRCLE FIT IN THE [X,Y] PLANE                       C
C           =============================                       C
C                                                               C
C***************************************************************C
      WSUM= 0.0
      RSS = 0.0
      PRO = 0.0
      XM = 0D0
      YM = 0D0
      WN = 0D0
      DO 100 I= 1, N
        XM = XM + XF(I)*WF(I)
        YM = YM + YF(I)*WF(I)
        WN = WN + WF(I)
  100 CONTINUE
      RN = 1.D0/WN
C **
      XM = XM * RN
      YM = YM * RN
      X2 = 0D0
      Y2 = 0D0
      XY = 0D0
      XD = 0D0
      YD = 0D0
      D2 = 0D0
      DO 102 I= 1, N
         XI = XF(I) - XM
         YI = YF(I) - YM
         XX = XI**2
         YY = YI**2
         X2 = X2 + XX*WF(I)
         Y2 = Y2 + YY*WF(I)
         XY = XY + XI*YI*WF(I)
         DD = XX + YY
         XD = XD + XI*DD*WF(I)
         YD = YD + YI*DD*WF(I)
         D2 = D2 + DD**2*WF(I)
  102 CONTINUE
C **
      X2 = X2*RN
      Y2 = Y2*RN
      XY = XY*RN
      D2 = D2*RN
      XD = XD*RN
      YD = YD*RN
      F = 3.D0*X2 + Y2
      G = 3.D0*Y2 + X2
      FG = F*G
      H = XY + XY
      H2 = H**2
      P2 = XD**2
      Q2 = YD**2
      GAM0 = X2 + Y2
         FACT = GAM0**2
      A2 = (FG-H2-D2)/FACT
         FACT = FACT*GAM0
      A1 = (D2*(F+G) - 2.D0*(P2+Q2))/FACT
         FACT = FACT*GAM0
      A0 = (D2*(H2-FG) + 2.D0*(P2*G + Q2*F) - 4.D0*XD*YD*H)/FACT
      A22 = A2 + A2
      YB = 1.0D30
      ITER = 0
      XA = 1.D0
C **                MAIN ITERATION
  103 YA = A0 + XA*(A1 + XA*(A2 + XA*(XA-4.D0)))
      IF (ITER .GE. ITMAX)                      GO TO 105
      DY = A1 + XA*(A22 + XA*(4.D0*XA - 12.D0))
      XB = XA - YA/DY
      IF (ABS(YA).GT.ABS(YB)) XB=0.5D0*(XB+XA)
      IF (ABS(XA-XB) .LT. DBLE(EPS))            GO TO 105
      XA = XB
      YB = YA
      ITER = ITER + 1
      GO TO 103
C **
  105 CONTINUE
      ROOT = XB
      GAM = GAM0*XB
      F1 = F - GAM
      G1 = G - GAM
      X1 = XD*G1 - YD*H
      Y1 = YD*F1 - XD*H
      DET = F1*G1 - H2
      DEN2= 1.D0/(X1**2 + Y1**2 + GAM*DET**2)
      IF(DEN2.LE.0.D0)                GO TO 999
      DEN = DSQRT(DEN2)
      CUR = DET*DEN                  + 0.0000000001D0
      ALF = -(XM*DET + X1)*DEN
      BET = -(YM*DET + Y1)*DEN
      RM = XM**2 + YM**2
      GAM = ((RM-GAM)*DET + 2.D0*(XM*X1 + YM*Y1))*DEN*0.5D0
C
C--------> CALCULATION OF STANDARD CIRCLE PARAMETERS
C          NB: CUR IS ALWAYS POSITIVE
      RR0=CUR
      ASYM = BET*XM-ALF*YM
      SST = 1.0
      IF(ASYM.LT.0.0) SST=-1.0
      RR0 = SST*CUR
      IF((ALF*ALF+BET*BET).LE.0.D0)              GO TO 999
      SA2B2 = 1.D0/DSQRT(ALF*ALF+BET*BET)
      DD0 = (1.D0-1.D0/SA2B2)/CUR
      VV0(1) = RR0
      VV0(4) = DD0
      CHECK=SST*RR0*DD0
      IF(CHECK.EQ.1.) THEN
        DD0=DD0-.007D0
        VV0(4)=DD0
      ENDIF
C***************************************************************C
C                                                               C
C           STRAIGHT LINE FIT IN THE [S,Z] PLANE                C
C           ====================================                C
C                                                               C
C***************************************************************C
      DO 120 I=1,N
        EEE(I) = 0.5*VV0(1)
     1          *SQRT(ABS( (RF(I)*RF(I)-VV0(4)*VV0(4))
     2                /(1.0-SST*VV0(1)*VV0(4))     ) )
        SXY(I)=2.0*EEE(I)*(1.0+0.166667*EEE(I)*EEE(I))/RR0
CD      IF(EEE(I).GT.0.99990)  EEE(I)= 0.99990
CD      IF(EEE(I).LT.-0.99990) EEE(I)= -0.99990
CD      SXY(I)=2.0*ASIN(EEE(I))/RR0
  120 CONTINUE
      SUMS  = 0.0
      SUMSS = 0.0
      SUMZ  = 0.0
      SUMSZ = 0.0
      SUMW  = 0.0
      DO 130 I=1,N
        SUMW  = SUMW  +                 WZF(I)
        SUMS  = SUMS  + SXY(I)        * WZF(I)
        SUMSS = SUMSS + SXY(I)*SXY(I) * WZF(I)
        SUMZ  = SUMZ  + ZF(I)         * WZF(I)
        SUMSZ = SUMSZ + ZF(I)*SXY(I)  * WZF(I)
  130 CONTINUE
      DENOM = SUMW*SUMSS - SUMS*SUMS
      IF( DENOM .EQ. 0.0 ) GOTO 999
      DZDS  = (SUMW*SUMSZ-SUMS*SUMZ) /DENOM
      VV0(2)= DZDS
C***************************************************************C
C                                                               C
C              MULTIPLE SCATTERING ERRORS                       C
C              ==========================                       C
C                                                               C
C***************************************************************C
       PSI0  = SCACO * COS( ATAN(DZDS) ) * CUR
       XL = 0.0
       DO 140 I=2,N
         DDR = RF(I) - RF(I-1)
         IF(DDR.EQ.0.) GOTO 140
         DDX = XF(I) - XF(I-1)
         DDY = YF(I) - YF(I-1)
         DDZ = ZF(I) - ZF(I-1)
         XL  = XL + SQRT( DDX*DDX + DDY*DDY + DDZ*DDZ )
         SNA = DDR/SQRT( DDX*DDX + DDY*DDY )
         SNB = DDR/SQRT( DDR*DDR + DDZ*DDZ )
         WF(I)  = WF(I) / (1.D0 + WF(I)*XL*(XL*PSI0/SNA)**2 )
         SP2(I) = WF(I)*RF(I)*RF(I)
         WZF(I) = WZF(I)/ (1.D0+DBLE(WZF(I)*XL*(XL*PSI0/SNB)**2))
  140 CONTINUE
C***************************************************************C
C                                                               C
C          SECOND CIRCLE FIT IN THE [X,Y] PLANE                 C
C          ====================================                 C
C                                                               C
C***************************************************************C
      WSUM= 0.0
      RSS = 0.0
      PRO = 0.0
      XM = 0D0
      YM = 0D0
      WN = 0D0
      DO 201 I= 1, N
        XM = XM + XF(I)*WF(I)
        YM = YM + YF(I)*WF(I)
        WN = WN + WF(I)
  201 CONTINUE
      RN = 1.D0/WN
C **
      XM = XM * RN
      YM = YM * RN
      X2 = 0D0
      Y2 = 0D0
      XY = 0D0
      XD = 0D0
      YD = 0D0
      D2 = 0D0
      DO 202 I= 1, N
         XI = XF(I) - XM
         YI = YF(I) - YM
         XX = XI**2
         YY = YI**2
         X2 = X2 + XX*WF(I)
         Y2 = Y2 + YY*WF(I)
         XY = XY + XI*YI*WF(I)
         DD = XX + YY
         XD = XD + XI*DD*WF(I)
         YD = YD + YI*DD*WF(I)
         D2 = D2 + DD**2*WF(I)
  202 CONTINUE
C **
      X2 = X2*RN
      Y2 = Y2*RN
      XY = XY*RN
      D2 = D2*RN
      XD = XD*RN
      YD = YD*RN
      F = 3.D0*X2 + Y2
      G = 3.D0*Y2 + X2
      FG = F*G
      H = XY + XY
      H2 = H**2
      P2 = XD**2
      Q2 = YD**2
      GAM0 = X2 + Y2
         FACT = GAM0**2
      A2 = (FG-H2-D2)/FACT
         FACT = FACT*GAM0
      A1 = (D2*(F+G) - 2.D0*(P2+Q2))/FACT
         FACT = FACT*GAM0
      A0 = (D2*(H2-FG) + 2.D0*(P2*G + Q2*F) - 4.D0*XD*YD*H)/FACT
      A22 = A2 + A2
      YB = 1.0D30
      ITER = 0
      XA = 1.D0
C **                MAIN ITERATION
  203 YA = A0 + XA*(A1 + XA*(A2 + XA*(XA-4.D0)))
      IF (ITER .GE. ITMAX)                      GO TO 205
      DY = A1 + XA*(A22 + XA*(4.D0*XA - 12.D0))
      XB = XA - YA/DY
      IF (ABS(YA).GT.ABS(YB)) XB=0.5D0*(XB+XA)
      IF (ABS(XA-XB) .LT. DBLE(EPS))            GO TO 205
      XA = XB
      YB = YA
      ITER = ITER + 1
      GO TO 203
C **
  205 CONTINUE
      ROOT = XB
      GAM = GAM0*XB
      F1 = F - GAM
      G1 = G - GAM
      X1 = XD*G1 - YD*H
      Y1 = YD*F1 - XD*H
      DET = F1*G1 - H2
      DEN2= 1.D0/(X1**2 + Y1**2 + GAM*DET**2)
      IF(DEN2.LE.0.D0)                GO TO 999
      DEN = DSQRT(DEN2)
      CUR = DET*DEN                  + 0.0000000001D0
      ALF = -(XM*DET + X1)*DEN
      BET = -(YM*DET + Y1)*DEN
      RM = XM**2 + YM**2
      GAM = ((RM-GAM)*DET + 2.D0*(XM*X1 + YM*Y1))*DEN*0.5D0
C
C--------> CALCULATION OF STANDARD CIRCLE PARAMETERS
C          NB: CUR IS ALWAYS POSITIVE
C
      RR0=CUR
      ASYM = BET*XM-ALF*YM
      SST = 1.0
      IF(ASYM.LT.0.0) SST=-1.0
      RR0 = SST*CUR
      IF((ALF*ALF+BET*BET).LE.0.D0)              GO TO 999
      SA2B2 = 1.D0/DSQRT(ALF*ALF+BET*BET)
      DD0 = (1.D0-1.D0/SA2B2)/CUR
      PHIC = DASIN(ALF*SA2B2)+PIO2
      IF(BET.GT.0)    PHIC=PIT2-PHIC
      PH0 = PHIC+PIO2
      IF(RR0.LE.0)    PH0=PH0-PI
      IF(PH0.GT.PIT2) PH0=PH0-PIT2
      IF(PH0.LT.0.0)  PH0=PH0+PIT2
      VV0(1) = RR0
      VV0(3) = PH0
      VV0(4) = DD0
      CHECK=SST*RR0*DD0
      IF(CHECK.EQ.1.) THEN
        DD0=DD0-.007D0
        VV0(4)=DD0
      ENDIF
C
C-----> CALCULATE PHI DISTANCES TO MEASURED POINTS
C
      AA0 =SST
      OME =RR0
      GG0 = OME*DD0-AA0
      HH0 = 0.0000000001
      IF(ABS(GG0).LT.(1.0/HH0)) HH0=1.0/GG0
      HH0=1.0/GG0
      DO 210 I=1,N
        ASYM   = BET*XF(I)-ALF*YF(I)
        SS0(I) =1.0
        IF(ASYM.LT.0.0) SS0(I)=-1.0
        FF0   = OME*(RF(I)*RF(I)-DD0*DD0)/(2.0*RF(I)*GG0) + DD0/RF(I)
C
        IF(FF0.LT.-1.0) FF0 = -1.0
        IF(FF0.GT.1.0)  FF0 = 1.0
C
        DEL(I)= PH0 + (SS0(I)-AA0)*PIO2 + SS0(I)*ASIN(FF0) - PF(I)
        IF(DEL(I).GT.PI) DEL(I)=DEL(I)-PIT2
        IF(DEL(I).LT.-PI)DEL(I)=DEL(I)+PIT2
  210 CONTINUE
C***************************************************************C
C                                                               C
C          SECOND SRAIGHT LINE FIT IN THE [S,Z] PLANE           C
C          ==========================================           C
C                                                               C
C***************************************************************C
      DO 220 I=1,N
        EEE(I) = 0.5*VV0(1)
     1          *SQRT(ABS( (RF(I)*RF(I)-VV0(4)*VV0(4))
     2                /(1.0-AA0*VV0(1)*VV0(4))     ) )
C
        IF(EEE(I).GT.0.99990)  EEE(I)= 0.99990
        IF(EEE(I).LT.-0.99990) EEE(I)= -0.99990
C
        SXY(I)=2.0*ASIN(EEE(I))/OME
  220 CONTINUE
      SUMS  = 0.0
      SUMSS = 0.0
      SUMZ  = 0.0
      SUMZZ = 0.0
      SUMSZ = 0.0
      SUMW  = 0.0
      DO 230 I=1,N
        SUMW  = SUMW  +                 WZF(I)
        SUMS  = SUMS  + SXY(I)        * WZF(I)
        SUMSS = SUMSS + SXY(I)*SXY(I) * WZF(I)
        SUMZ  = SUMZ  + ZF(I)         * WZF(I)
        SUMZZ = SUMZZ + ZF(I)*ZF(I)   * WZF(I)
        SUMSZ = SUMSZ + ZF(I)*SXY(I)  * WZF(I)
  230 CONTINUE
      DENOM = SUMW*SUMSS - SUMS*SUMS
      IF( DENOM .EQ. 0.0 ) GOTO 999
      DZDS  = (SUMW*SUMSZ-SUMS*SUMZ) /DENOM
      ZZ0   = (SUMSS*SUMZ-SUMS*SUMSZ)/DENOM
      VV0(2)= DZDS
      VV0(5)= ZZ0
C
C-----> CALCULATION CHI**2
C
      DO 370 I=1,N
        DELZ(I)= ZZ0+DZDS*SXY(I)-ZF(I)
        CHI2   = CHI2  + SP2(I)*DEL(I)*DEL(I)
     1                 + WZF(I)*DELZ(I)*DELZ(I)
  370 CONTINUE
      IF(IOPT.LT.2)                          RETURN
CCC   IF(CHI2.GT.5000.0)                     RETURN
C***************************************************************C
C                                                               C
C                     ERROR MATRIX                              C
C                     ============                              C
C                                                               C
C***************************************************************C
      DO 380 I=1,N
        FF0 = OME*(RF(I)*RF(I)-DD0*DD0)/(2.0*RF(I)*GG0) + DD0/RF(I)
        IF(FF0.GT. 0.99990)  FF0=  0.99990
        IF(FF0.LT.-0.99990)  FF0= -0.99990
        ETA = SS0(I)/SQRT(ABS((1.0+FF0)*(1.0-FF0)))
        DFD = (1.0+HH0*HH0*(1.0-OME*OME*RF(I)*RF(I)))/(2.0*RF(I))
        DFO = -AA0*(RF(I)*RF(I)-DD0*DD0)*HH0*HH0/(2.0*RF(I))
        DPD = ETA*DFD
        DPO = ETA*DFO
C-----> DERIVATIVES OF Z COMPONENT
        GGG = EEE(I)/SQRT(ABS( (1.0+EEE(I))*(1.0-EEE(I))))
        DZA = SXY(I)
        CHECK=RF(I)*RF(I)-VV0(4)*VV0(4)
        IF(CHECK.EQ.0.) CHECK=2.*.007
        DZD = 2.0*( VV0(2)/VV0(1) ) * ABS( GGG )
     1       *(  0.5*AA0*VV0(1)/( 1.0-AA0*VV0(4)*VV0(1) )
     2           -VV0(4)/CHECK    )
        DZO = -VV0(2)*SXY(I)/VV0(1)
     1        +VV0(2)* GGG/( VV0(1)*VV0(1))
     2         *( 2.0+ AA0*VV0(1)*VV0(4)/(1.0-AA0*VV0(1)*VV0(4)) )
C-----> ERROR MARTIX
        EE0(1) = EE0(1) + SP2(I)*  DPO*DPO  + WZF(I) * DZO*DZO
        EE0(2) = EE0(2)                     + WZF(I) * DZA*DZO
        EE0(3) = EE0(3)                     + WZF(I) * DZA*DZA
        EE0(4) = EE0(4) + SP2(I)*  DPO
        EE0(5) = 0.0
        EE0(6) = EE0(6) + SP2(I)
        EE0(7) = EE0(7) + SP2(I)*  DPO*DPD  + WZF(I) * DZO*DZD
        EE0(8) = EE0(8)                     + WZF(I) * DZA*DZD
        EE0(9) = EE0(9) + SP2(I)*      DPD
        EE0(10)= EE0(10)+ SP2(I)*  DPD*DPD  + WZF(I) * DZD*DZD
        EE0(11)= EE0(11)                    + WZF(I) * DZO
        EE0(12)= EE0(12)                    + WZF(I) * DZA
        EE0(13)= 0.0
        EE0(14)= EE0(14)                    + WZF(I) * DZD
        EE0(15)= EE0(15)                    + WZF(I)
C-----> GRADIENT VECTOR
        GRAD(1)=GRAD(1) - DEL(I) *SP2(I)*DPO - DELZ(I)*WZF(I)*DZO
        GRAD(2)=GRAD(2) -                      DELZ(I)*WZF(I)*DZA
        GRAD(3)=GRAD(3) - DEL(I) *SP2(I)
        GRAD(4)=GRAD(4) - DEL(I) *SP2(I)*DPD - DELZ(I)*WZF(I)*DZD
        GRAD(5)=GRAD(5) -                      DELZ(I)*WZF(I)
  380 CONTINUE
C
      IF(IOPT.LT.3)                          RETURN
C***************************************************************C
C                                                               C
C         NEWTONIAN ITERATION IN 5 PARAMETERS                   C
C         ===================================                   C
C                                                               C
C***************************************************************C
      DO 401 I=1,15
  401   COV(I)=EE0(I)
      CALL SMINV(COV,VV1,5,0,NRANK)
      CALL SMAV(DV,COV,GRAD,5)
      DO 402 I=1,5
  402   VV1(I)=VV0(I)+DV(I)
C------>  NEW DIFFERENCES IN PHI AND Z
      GG0 = VV1(1)*VV1(4)-AA0
      DO 410 I=1,N
        FF0    = VV1(1)*(RF(I)*RF(I)-VV1(4)**2)
     1          /(2.0*RF(I)*GG0) + VV1(4)/RF(I)
C
        IF(FF0.GT.1.0)  FF0 = 1.0
        IF(FF0.LT.-1.0) FF0 = -1.0
C
        DELN(I) = VV1(3) + (SS0(I)-AA0)*PIO2+SS0(I)*ASIN(FF0)-PF(I)
        IF(DELN(I).GT.PI) DELN(I)=DELN(I)-PIT2
        IF(DELN(I).LT.-PI)DELN(I)=DELN(I)+PIT2
        EEE(I) = 0.5*VV1(1)
     1          *SQRT(ABS( (RF(I)*RF(I)-VV1(4)*VV1(4))
     2                /(1.0-AA0*VV1(1)*VV1(4))     ))
        IF(EEE(I).GT.0.99990)  EEE(I)= 0.99990
        IF(EEE(I).LT.-0.99990) EEE(I)= -0.99990
        SXY(I) = 2.0*ASIN(EEE(I))/VV1(1)
        DELZN(I)= VV1(5)+VV1(2)*SXY(I)-ZF(I)
  410 CONTINUE
C-----> CALCULATION CHI**2
      CHI1 = 0.0
      DO 420 I=1,N
        CHI1   = CHI1  + SP2(I)*DELN(I)*DELN(I)
     1                 + WZF(I)*DELZN(I)*DELZN(I)
  420 CONTINUE
      IF(CHI1.LT.CHI2) THEN
         DO 430 I=1,5
  430    VV0(I) = VV1(I)
         CHI2 = CHI1
      END IF
      RETURN
  999 CONTINUE
C------> JUMP HERE IF SOMETHING GOES CRAZY
      CHI2 = 1.0E30
      RETURN
      ENTRY TMSHED(DRPHI,DZ)
C-----**********************-------------------------------------C
C      OUTPUTS THE DIFFERENCES IN R*PHI AND Z FOR THE            C
C      COORDINATES FITTED BY THE LAST CALL OF TFTHEL  [CM]       C
C----------------------------------------------------------------C
      DO 500 I=1,N
        DRPHI(I) = RF(I)*DEL(I)
  500   DZ(I)    = DELZ(I)
      RETURN
      ENTRY TMSHEC(DCHI2)
C-----**********************-------------------------------------C
C      OUTPUTS THE CHI**2 CONTRIBUTIONS OF ALL POINTS            C
C----------------------------------------------------------------C
      DO 600 I=1,N
        DCHI2(I)  = SP2(I)*DEL(I)*DEL(I)
     1             +WZF(I)*DELZ(I)*DELZ(I)
  600 CONTINUE
      RETURN
      ENTRY TMSCHI(DRPHI,DZ)
C-----**********************-------------------------------------C
C      OUTPUTS THE DIFFERENCES IN R*PHI AND Z NORMALISED         C
C      TO THE ERRORS ON COORDINATES + MULTIPLE SCATTERING  OF    C
C      ALL COORDINATES FITTED BY THE LAST CALL OF TFTHEL  [CM]   C
C----------------------------------------------------------------C
      DO 700 I=1,N
        DRPHI(I) = DEL(I)  * SQRT(SP2(I))
  700   DZ(I)    = DELZ(I) * SQRT(WZF(I))
      RETURN
      END
#endif
@


1.4
log
@julia 308.01
@
text
@d9 1
d100 3
a102 3
      XM = 0.
      YM = 0.
      WN=0.0
d112 6
a117 6
      X2 = 0.
      Y2 = 0.
      XY = 0.
      XD = 0.
      YD = 0.
      D2 = 0.
d153 1
a153 1
      YB = 1.0E30
d162 1
a162 1
      IF (ABS(XA-XB) .LT. EPS)                  GO TO 105
d199 1
a199 1
        DD0=DD0-.007
d252 1
a252 1
         WZF(I) = WZF(I) / (1.D0 + WZF(I)*XL*(XL*PSI0/SNB)**2 )
d263 3
a265 3
      XM = 0.
      YM = 0.
      WN=0.0
d275 6
a280 6
      X2 = 0.
      Y2 = 0.
      XY = 0.
      XD = 0.
      YD = 0.
      D2 = 0.
d316 1
a316 1
      YB = 1.0E30
d325 1
a325 1
      IF (ABS(XA-XB) .LT. EPS)                  GO TO 205
d370 1
a370 1
        DD0=DD0-.007
@


1.3
log
@Changes in Julia for xlum
@
text
@d7 2
d424 1
a425 1
      DENOM = SUMW*SUMSS - SUMS*SUMS
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d5 2
d227 1
d422 1
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tmshel
@


1.1.1.1
log
@import julia 300
@
text
@@
