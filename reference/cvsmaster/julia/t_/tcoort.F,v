head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.5
	jul309:1.5
	jul308_6:1.5
	jul308_5:1.5
	jul308_4:1.5
	jul308_3:1.5
	jul308_2:1.5
	jul308_1:1.5
	jul308:1.5
	jul307_4:1.5
	jul307_3:1.5
	jul307_2:1.5
	jul307_1:1.5
	jul307:1.5
	jul306_3:1.5
	jul306_2:1.5
	jul306_1:1.5
	jul306:1.5
	jul305_4:1.5
	jul305_3:1.5
	jul305_2:1.5
	jul305_1:1.5
	jul305:1.5
	jul304_3:1.5
	jul304_2:1.5
	jul304_1:1.5
	jul304:1.5
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	97.08.19.15.02.48;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.03.06.09.55.11;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.40.02;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.07;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.19.54;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.19.55;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@modifs for julia 304
@
text
@      SUBROUTINE TCOORT(IER)
C----------------------------------------------------------------------
C! Calculate corrected coordinates from initial track fit and initial
C! coordinate bank
C!
C!    Author:    D. Cinabro  6-12-89
C!    Modified:  R. Johnson 19-10-90
C!            D. Casper  25-04-95  Support for wire corrections to TPC
C!                                 coordinates. (Disable with TNLC card)
C!            D. Casper  09-06-95  Support for Gaussian charge estimator
C!                                 for pad dE/dx. (Disable with TNGS card).
C!            D. Casper  24-04-96  Correct subpulses for shaping effects
C!            D. Casper  07-06-96  Add wire coordinates, unless a TWNZ
C!                                 card is present.
C!                       05-08-97  Replace call to THPFDG with new routine
C!                                 THPCOR, to correct 1 half-pad coordinates
C!                                 too.
C!
C!    Output:   IER      /I     Return code=0 if all is OK
C!
C!---------------------------------------------------------------------
#ifndef DOC
C
#include "alcons.h"
#include "rparac.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tsrljj.h"
#include "tpcojj.h"
#include "tbcojj.h"
#include "tspujj.h"
#include "tscljj.h"
#include "tcrljj.h"
#include "thpljj.h"
#include "thrpjj.h"
#include "tclujj.h"
#include "twzzjj.h"
#include "rlunit.h"
#include "bcs.h"
#include "tpatel.h"
#include "tpccon.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "tflags.h"
#include "tpccut.h"
#include "tgftjj.h"
C
      COMMON/TCRTWB/ ITSCLW,ITSPUW
C
      DIMENSION ZCUT(LTPDRO)
      DIMENSION RPULS(LMXPCL),RTIME(LMXPCL),ERRM(3)
      CHARACTER TEXT*35
      LOGICAL BAD,FIRST
      DATA FIRST/.TRUE./
      SAVE NTSCL,NTSPU,NTPCO,NTGFT,NTWRP,NTWZZ,KTNGS,KTNWZ,KTNLC
C
C----------------------------------------------------------------------
C
#include "bmacro.h"
C
C----------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        ITSCLW=0
        ITSPUW=0
        NTSCL=NAMIND('TSCL')
        NTSPU=NAMIND('TSPU')
        NTPCO=NAMIND('TPCO')
        NTGFT=NAMIND('TGFT')
        NTWZZ=NAMIND('TWZZ')
        KTNLC=IW(NAMIND('TNLC'))
        KTNGS=IW(NAMIND('TNGS'))
        KTNWZ=IW(NAMIND('TNWZ'))
      ENDIF
C
C Is there a TPCO bank with number greater than 0?
C If not, forget the whole thing.
C
      KTPCO = IW(NTPCO)
      IF (KTPCO.LE.0) GOTO 999
      NUM = IW(KTPCO-2)
      IF (NUM.LE.0) THEN
        KTPCO=IW(KTPCO-1)
        IF (KTPCO.EQ.0) GOTO 999
        NUM = IW(KTPCO-2)
      ENDIF
C
C Drop the output bank if it already exists
C
      IND=NLINK('TPCO',0)
      IF (IND.NE.0) IND=NDROP('TPCO',0)
C
C If there are no tracks, just rename the existing bank
C
      KTGFT=IW(NTGFT)
      IF (KTGFT.EQ.0) THEN
        IW(KTPCO-2)=0
        GOTO 997
      ENDIF
C
C Make a new one, number = 0
C
      LEN = IW(KTPCO)
      CALL AUBOS('TPCO',0,LEN,KNTPCO,IGARB)
      IF (IGARB.EQ.2) GOTO 998
      IF (IGARB.EQ.1) KTPCO = NLINK('TPCO',NUM)
      IW(KNTPCO+LMHCOL) = LTPCOA
      IW(KNTPCO+LMHROW) = LROWS(KTPCO)
      KTGFT = IW(NTGFT)
C
C Link to the subcluster banks
C
      KTSCL=IW(NTSCL)
      IF (KTSCL.EQ.0) GOTO 999
      CALL BWIND(IW,'TSCL',LTSECT,ITSCLW)
C
C Link to the subpulse banks
C
      KTSPU=NAMIND('TSPU')
      IF (KTSPU.EQ.0) GOTO 999
      CALL BWIND(IW,'TSPU',LTSECT,ITSPUW)
C
C Loop over the existing coordinates
C
      DO 10 ICO = 1,LROWS(KTPCO)
C
C Skip coordinates not on the first loop of a track
C
        ITK = ITABL(KTPCO,ICO,JTPCTN)
        IF (ITK.LE.0) GOTO 100
C
C Skip fake coordinates or those already done by this routine
C
        IF (MOD(ITABL(KTPCO,ICO,JTPCOF),10).GE.4) GOTO 100
C
C Get the sector slot number
C
        IND = ITABL(KTPCO,ICO,JTPCIN)
        IROW = IND/100000
        ISLOT = IND/1000 - IROW*100
        ISTYP=ITPTYP(ISLOT)
        IF (ISTYP.EQ.1) THEN
          IROW=IROW
        ELSE
          IROW=IROW-NTPDRW(1)
        ENDIF
C
C Get the subcluster number and link to the TSCL and TSPU banks.
C
        IC = ITABL(KTPCO,ICO,JTPCCN)
        IF (ISLOT.GT.IW(ITSCLW)) THEN
          KTSCL=0
        ELSE
          KTSCL=IW(ITSCLW+ISLOT)
        ENDIF
        IF (KTSCL.EQ.0) THEN
          WRITE(TEXT,359) ISLOT
  359     FORMAT('TSCL bank missing for sector ',I2)
          CALL RERROR('TCOORT',3,TEXT(1:31))
          GOTO 100
        ENDIF
        IF (ISLOT.GT.IW(ITSPUW)) THEN
          KTSPU=0
        ELSE
          KTSPU=IW(ITSPUW+ISLOT)
        ENDIF
        IF (KTSPU.EQ.0) THEN
          WRITE(TEXT,360) ISLOT
  360     FORMAT('TSPU bank missing for sector ',I2)
          CALL RERROR('TCOORT',4,TEXT(1:31))
          GOTO 100
        ENDIF
C
C Find number of half pads
C
        CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
C
C Call routine to calculate track parameters at the padrow
C
        KCO = KROW(KTPCO,ICO)
        KTR = KROW(KTGFT,ITK)
        CALL TFILPA(KCO,KTR,PADCRO,WIRCRO)
C
C If this is a part of a twin coordinate or a coordinate from TSAPAT
C (small angle) then only recalculate the error estimates.
C
        NCOR = ITABL(KTSCL,IC,JTSCNC)
        IF (NCOR.GT.1) GOTO 101
        IF (MOD(ITABL(KTPCO,ICO,JTPCOF),10).EQ.2) GOTO 101
        IF (MOD(ITABL(KTPCO,ICO,JTPCOF),10).EQ.3) GOTO 101
C
C Only if the cluster is of 2 or 3 pads will the coordinate
C be recalculated.  Else simply recalculate the errors.
C
        NSUB=ITABL(KTSCL,IC,JTSCNS)
C       IF (NSUB.NE.2.AND.NSUB.NE.3) GOTO 101
C
C Find which time and charge estimators to use.
C
        IALGW=ITABL(KTSCL,IC,JTSCAW)
        IQE=IALGW/1000
        IF (IQE.EQ.0) GOTO 100
        ITE=IALGW-1000*IQE
        IF (ITE.EQ.0) GOTO 100
C
C  Get the track angle
C
        TANL = RTABL(KTGFT,ITK,JTGFTL)
C
C Make lists of charge and time estimates for the subpulses.  Here
C we also handle the problem of half pads by adding them together,
C if possible, to give corresponding full pads.
C
        CALL TGETQT(IROW,KTSCL,IC,KTSPU,IQE,ITE,TANL,RPULS,
     &              RTIME,NSPL,JP1,IFLG)
C        CALL TGETQT(IROW,KTSCL,IC,KTSPU,IQE,RPULS,RTIME,NSPL,JP1,IFLG)
        IF (IFLG.NE.0) GO TO 100
C
        IPDMN=ITABL(KTSCL,IC,JTSCFP)
C
C Remove edge pulses which are too small.  In 3-pad clusters, remove
C the smallest pulse only if the two side ones are not balanced.
C
        CALL TRMVEP(KTSCL,IC,KTSPU,RPULS,JP1,NSPL)
        IPDMN=IPDMN+JP1-1
C
C Average the time estimates to give z for the cluster in buckets.
C
        CALL TSZCOR(ITE,RTIME(JP1),RPULS(JP1),NSPL,ZB)
C
C Apply the appropriate coordinate algorithm for r*phi (in pad units
C
        ZDRFT=(ZB-TVOFFS(ISLOT))*TVDRFT(IENDTP(ISLOT))
        PRFS2=TPRF2(ZDRFT,ISLOT,NSUB,PADCRO,WIRCRO)
        CALL TCOALG(ISLOT,IROW,IQW,NSPL,RPULS(JP1),PRFS2,IPDMN,RPHIP,
     &     QCO,IFLG)
        IF (IFLG.NE.0) THEN
          GO TO 100
        ENDIF
C
C Update charge in the TSCL bank (for pad dE/dx)
C
        IF(KTNGS.EQ.0)IW(KROW(KTSCL,IC)+JTSCTC) = QCO
C
C Apply a fudge in the case that half pads are used
C
        IF (NHALF.GT.0) THEN
          CALL THPCOR(NHALF,IPDMN,ISLOT,IROW,RPHIP,RFUDG,IFLG)
          IF (IFLG.NE.0) THEN
            GO TO 100
          ENDIF
          RPHIP=RFUDG
        ENDIF
        GO TO 200
  100   CONTINUE
C
C Here coordinates without tracks.  Copy them without change
C
        CALL UCOPY(IW(KROW(KTPCO,ICO)+JTPCIN),
     &             IW(KROW(KNTPCO,ICO)+JTPCIN),LTPCOA)
        GOTO 10
C
C Here coordinates with tracks for which we do not want to recalculate
C the position but just the error
C
  101   CONTINUE
        CALL UCOPY(IW(KROW(KTPCO,ICO)+JTPCIN),
     &             IW(KROW(KNTPCO,ICO)+JTPCIN),LTPCOA)
        TALA = RTABL(KTGFT,ITK,JTGFTL)
        Z = RTABL(KTPCO,ICO,JTPCZV)
        CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
        CALL TERPAR(PADCRO,Z,TALA,NHALF,0,SGRPHI,SIGZ)
        RW(KROW(KNTPCO,ICO)+JTPCSR)=SGRPHI**2
        RW(KROW(KNTPCO,ICO)+JTPCSZ)=SIGZ**2
        GOTO 10
  200   CONTINUE
C
        CALL TSCOOR(ISLOT,IROW,RPHIP,ZB,RS,RPHIS,ZS)
C
        IF (ISTYP.EQ.1) THEN
          IROWG=IROW
        ELSE
          IROWG=IROW+NTPDRW(1)
        ENDIF
C
C Transform the coordinate to the ALEPH frame of reference,
C including all necessary alignment corrections.
C
        IF (FTPC90) THEN
          R=RS
          PHI=RPHIS/RS
          IF (PHI.LT.0.) PHI=PHI+TWOPI
          RPHI=R*PHI
          Z=ZS
        ELSE
          CALL TCTGLB(ISLOT,RS,RPHIS,ZS,R,RPHI,Z)
        ENDIF
C
C For coordinates, make an estimate of the uncertainty.
C
        TALA = RTABL(KTGFT,ITK,JTGFTL)
        CALL TERPAR(PADCRO,Z,TALA,NHALF,0,SGRPHI,SIGZ)
C
C Correct coordinate z for time-of-flight
C
        CALL TCRTOF(BFIELD,R,Z,ITK,'TGFT',ZCR)
        Z=ZCR
C
C Correct coordinates for drift field distortions
C
        PHI= RPHI/R
        IF (FFCORR) THEN
          MODE=0
          IF (FFMODE) MODE=1
          CALL TLACOR(R,PHI,Z,RCR,PHICR,ZCR,MODE)
          R=RCR
          PHI=PHICR
          Z=ZCR
        ENDIF
        IF (FECORR) THEN
          CALL TCRTRN(ISLOT,R,PHI,Z,RCR,PHICR,ZCR)        
          R=RCR
          PHI=PHICR
          Z=ZCR
        ENDIF
C
C++     Correct for z distortions measured by VDET
C
        CALL TZCRVD(IENDTP(ISLOT),R,Z,ZCR)
        Z=ZCR
        CALL TZCSVD(ISLOT,R,PHI,Z,ZCR)
        Z=ZCR
C
C++   Correct for Residual field distortions
C
        CALL TCORES(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
        R   =RCR
        PHI =PHICR
        Z   =ZCR
        CALL TFICOR(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
        R   =RCR
        PHI =PHICR
        Z   =ZCR
C
C Fill the results into the appropriate banks
C
        IW(KROW(KNTPCO,ICO)+JTPCIN)=ITABL(KTPCO,ICO,JTPCIN)
        RW(KROW(KNTPCO,ICO)+JTPCRV)=R
        RW(KROW(KNTPCO,ICO)+JTPCPH)=PHI
        RW(KROW(KNTPCO,ICO)+JTPCZV)=Z
        RW(KROW(KNTPCO,ICO)+JTPCSR)=SGRPHI**2
        RW(KROW(KNTPCO,ICO)+JTPCSZ)=SIGZ**2
        IW(KROW(KNTPCO,ICO)+JTPCOF)=10*(ITABL(KTPCO,ICO,JTPCOF)/10)+4
        IW(KROW(KNTPCO,ICO)+JTPCTN)=ITABL(KTPCO,ICO,JTPCTN)
        IW(KROW(KNTPCO,ICO)+JTPCCN)=IC
        IW(KROW(KNTPCO,ICO)+JTPCIT)=ITABL(KTPCO,ICO,JTPCIT)
        RW(KROW(KNTPCO,ICO)+JTPCRR)=RPHIS
        RW(KROW(KNTPCO,ICO)+JTPCRZ)=ZS
C
   10 CONTINUE
C
C So that's it.  Drop the old TPCO bank
C
      KDUM = MDROP(IW,'TPCO',IW(KTPCO-2))
C
C  Now do corrections for wires
C
      IER = 0
      IF(KTNLC.EQ.0 .OR. KTNWZ.EQ.0) THEN
        CALL TWIREZ(IER)
C
C  Reprocess TPCO
C
        IF(IER.EQ.0)THEN
          KTWZZ = IW(NTWZZ)
          DO 20 ICO = 1, LROWS(KNTPCO)
            ICORRW = ITABL(KNTPCO,ICO,JTPCOF)/10
C
C  Only coordinates changed by the wires will be processed again
C
            IF (ICORRW .NE. 0)THEN
              ITK = ITABL(KNTPCO,ICO,JTPCTN)
              IND = ITABL(KNTPCO,ICO,JTPCIN)
              IROW = IND/100000
              IROWG = IROW
              ISLOT = IND/1000 - IROW*100
              ISTYP = ITPTYP(ISLOT)
              IF(ISTYP.NE.1) IROW = IROW - NTPDRW(1)
              IC = ITABL(KNTPCO,ICO,JTPCCN)
              IF(ISLOT.GT.IW(ITSCLW))THEN
                KTSCL = 0
              ELSE
                KTSCL = IW(ITSCLW+ISLOT)
              ENDIF
              IF (KTSCL.EQ.0)THEN
                WRITE(TEXT,359)ISLOT
                CALL RERROR('TCOORT',3,TEXT(1:31))
                GO TO 20
              ENDIF
C
C Get quantities needed to recalculate the error
C
              CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
              KCO = KROW(KNTPCO,ICO)
              KTR = KROW(KTGFT,ITK)
              CALL TFILPA(KCO,KTR,PADCRO,WIRCRO)
C
C For coordinates, make an estimate of the uncertainty.
C
              Z = RTABL(KNTPCO,ICO,JTPCZV)
              TALA = RTABL(KTGFT,ITK,JTGFTL)
              CALL TERPAR(PADCRO,Z,TALA,NHALF,ICORRW,SGRPHI,SIGZ)
              SIGZ2 = SIGZ**2
C
C Get (newly adjusted) pad coordinate values in sector frame.
C
              RS = TPPROW(IROWG)
              RPHIS = RTABL(KNTPCO,ICO,JTPCRR)
              ZS = RTABL(KNTPCO,ICO,JTPCRZ)
C
C Average in a wire coordinate, if available
C
              IWCO = ICORRW/100
              IF (IWCO.GT.0 .AND. KTNWZ.EQ.0 .AND. KTWZZ.GT.0) THEN
                ITWZZ = KROW(KTWZZ,IWCO)
                DZW = RW(ITWZZ+JTWZDZ)
                SZW2 = RW(ITWZZ+JTWZSZ)
                ZW = ZS + DZW
                WTPAD = 1./SIGZ2
                WTWIR = 1./SZW2
                ZS = (WTPAD*ZS+WTWIR*ZW)/(WTPAD+WTWIR)
                SIGZ2 = SIGZ2*SZW2/(SIGZ2+SZW2)
C                type *,sqrt(1./wtpad),sqrt(szw2),sqrt(sigz2)
              ENDIF
C
C Transform the coordinate to the ALEPH frame of reference,
C including all necessary alignment corrections.
C
              IF (FTPC90) THEN
                R=RS
                PHI=RPHIS/RS
                IF (PHI.LT.0.) PHI=PHI+TWOPI
                RPHI=R*PHI
                Z=ZS
              ELSE
                CALL TCTGLB(ISLOT,RS,RPHIS,ZS,R,RPHI,Z)
              ENDIF
C
C Correct coordinate z for time-of-flight
C
              CALL TCRTOF(BFIELD,R,Z,ITK,'TGFT',ZCR)
              Z=ZCR
C
C Correct coordinates for drift field distortions
C
              PHI= RPHI/R
              IF (FFCORR) THEN
                MODE=0
                IF (FFMODE) MODE=1
                CALL TLACOR(R,PHI,Z,RCR,PHICR,ZCR,MODE)
                R=RCR
                PHI=PHICR
                Z=ZCR
              ENDIF
              IF (FECORR) THEN
                CALL TCRTRN(ISLOT,R,PHI,Z,RCR,PHICR,ZCR)
                PHI=PHICR
                R=RCR
                Z=ZCR
              ENDIF
C
C++     Correct for z distortions measured by VDET
C
              CALL TZCRVD(IENDTP(ISLOT),R,Z,ZCR)
              Z=ZCR
              CALL TZCSVD(ISLOT,R,PHI,Z,ZCR)
              Z=ZCR
C
C++   Correct for Residual field distortions
C
              CALL TCORES(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
              R   =RCR
              PHI =PHICR
              Z   =ZCR
              CALL TFICOR(IENDTP(ISLOT),IROWG,R,PHI,Z,RCR,PHICR,ZCR)
              R   =RCR
              PHI =PHICR
              Z   =ZCR
C
C Fill the results into the appropriate banks
C
              RW(KROW(KNTPCO,ICO)+JTPCRV)=R
              RW(KROW(KNTPCO,ICO)+JTPCPH)=PHI
              RW(KROW(KNTPCO,ICO)+JTPCZV)=Z
              RW(KROW(KNTPCO,ICO)+JTPCSR)=SGRPHI**2
              RW(KROW(KNTPCO,ICO)+JTPCSZ)=SIGZ2
            ENDIF
   20     CONTINUE
        ENDIF
      ENDIF
C
  997 CONTINUE
      IER=0
      GOTO 1000
C
  998 CALL RERROR('TCOORT',1,'Not enough room in BOS for named bank')
      IER=1
C
  999 CALL RERROR('TCOORT',2,
     &           'Input TPCO, TSPU or TSCL banks not found')
      IER=2
 1000 CONTINUE
      CALL WDROP(IW,ITSCLW)
      CALL WDROP(IW,ITSPUW)
      RETURN
      END
#endif
@


1.4
log
@Tracking upgrade
@
text
@d15 3
d246 1
a246 1
C Apply a fudge in the case that two half pads are used
d248 2
a249 2
        IF (NHALF.EQ.2) THEN
          CALL THPFDG(IPDMN,ISLOT,IROW,RPHIP,RFUDG,IFLG)
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d9 1
a9 1
C!                                 coordinates.
d11 4
a14 1
C!                                 for pad dE/dx
d34 1
d52 1
a52 1
      SAVE NTSCL,NTSPU,NTPCO,NTGFT,NTWRP,NTNGS
d68 4
a71 2
        NTWRP=NAMIND('TWRP')
        NTNGS=NAMIND('TNGS')
d132 1
a132 1
        IF (ITABL(KTPCO,ICO,JTPCOF).GE.4) GOTO 100
d187 2
a188 2
        IF (ITABL(KTPCO,ICO,JTPCOF).EQ.2) GOTO 101
        IF (ITABL(KTPCO,ICO,JTPCOF).EQ.3) GOTO 101
d194 1
a194 1
        IF (NSUB.NE.2.AND.NSUB.NE.3) GOTO 101
d204 4
d212 3
a214 1
        CALL TGETQT(IROW,KTSCL,IC,KTSPU,IQE,RPULS,RTIME,NSPL,JP1,IFLG)
d241 1
a241 1
        IF(IW(NTNGS).EQ.0)IW(KROW(KTSCL,IC)+JTSCTC) = QCO
d318 6
a323 3
        IF (FECORR) CALL TCRTRA(IENDTP(ISLOT),R,PHI,Z,RCR,PHICR)
        PHI=PHICR
        R=RCR
d351 1
a351 1
        IW(KROW(KNTPCO,ICO)+JTPCOF)=4
d367 1
a367 1
      IF(IW(NTWRP).NE.0) THEN
d373 1
d411 1
d413 1
a413 1
C Get (newly adjusted) coordinate values in sector frame.
d419 15
d463 6
a468 3
              IF (FECORR) CALL TCRTRA(IENDTP(ISLOT),R,PHI,Z,RCR,PHICR)
              PHI=PHICR
              R=RCR
d494 1
a494 1
              RW(KROW(KNTPCO,ICO)+JTPCSZ)=SIGZ**2
@


1.2
log
@julia version 279
@
text
@a0 1
*DK tcoort
@


1.1
log
@Initial revision
@
text
@d9 4
d49 1
d65 2
d78 1
d106 3
a108 3
        KTSCL=IW(NTSCL)
        IF (KTSCL.EQ.0) GOTO 999
        CALL BWIND(IW,'TSCL',LTSECT,ITSCLW)
d112 3
a114 3
        KTSPU=NAMIND('TSPU')
        IF (KTSPU.EQ.0) GOTO 999
        CALL BWIND(IW,'TSPU',LTSECT,ITSPUW)
d167 10
a184 6
C Call routine to calculate track parameters at the padrow
C
        KCO = KROW(KTPCO,ICO)
        KTR = KROW(KTGFT,ITK)
        CALL TFILPA(KCO,KTR,PADCRO,WIRCRO)
C
d223 1
a223 1
     &     IFLG)
d228 4
a233 1
        CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
d246 1
a246 1
          CALL UCOPY(IW(KROW(KTPCO,ICO)+JTPCIN),
d248 1
a248 1
          GOTO 10
d254 1
a254 1
          CALL UCOPY(IW(KROW(KTPCO,ICO)+JTPCIN),
d256 7
a262 7
          TALA = RTABL(KTGFT,ITK,JTGFTL)
          Z = RTABL(KTPCO,ICO,JTPCZV)
          CALL TNHLFP(ISLOT,IROW,KROW(KTSCL,IC),NHALF)
          CALL TERPAR(PADCRO,Z,TALA,NHALF,SGRPHI,SIGZ)
          RW(KROW(KNTPCO,ICO)+JTPCSR)=SGRPHI**2
          RW(KROW(KNTPCO,ICO)+JTPCSZ)=SIGZ**2
          GOTO 10
d289 1
a289 1
        CALL TERPAR(PADCRO,Z,TALA,NHALF,SGRPHI,SIGZ)
d349 117
@


1.1.1.1
log
@import julia 300
@
text
@@
