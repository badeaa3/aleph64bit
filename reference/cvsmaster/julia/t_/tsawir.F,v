head	1.5;
access;
symbols
	jul313_3:1.5
	jul313_2:1.5
	jul313_1:1.5
	jul313:1.5
	jul312_1:1.5
	jul312:1.5
	jul311:1.5
	jul310_1:1.5
	jul310:1.5
	jul309_1:1.5
	jul309:1.5
	jul308_6:1.5
	jul308_5:1.5
	jul308_4:1.5
	jul308_3:1.5
	jul308_2:1.5
	jul308_1:1.5
	jul308:1.5
	jul307_4:1.5
	jul307_3:1.5
	jul307_2:1.5
	jul307_1:1.5
	jul307:1.5
	jul306_3:1.5
	jul306_2:1.5
	jul306_1:1.5
	jul306:1.5
	jul305_4:1.5
	jul305_3:1.5
	jul305_2:1.5
	jul305_1:1.5
	jul305:1.5
	jul304_3:1.5
	jul304_2:1.5
	jul304_1:1.5
	jul304:1.5
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.5
date	97.08.19.15.02.55;	author cattanem;	state Exp;
branches;
next	1.4;

1.4
date	97.03.06.09.55.23;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.45.55;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.34;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.18;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.19;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@modifs for julia 304
@
text
@      SUBROUTINE TSAWIR
C----------------------------------------------------------------------
C!
C!   Created by Mermikides            26-SEP-1989
C!   Modified:  D. Casper 09-06-95    Support for pad dE/dx in TCOALG
C!              D. Casper 26-02-97    Fix grotesque bugs in field/alignment
C!                                    correction.
C!                        05-08-97    Replace call to THPFDG with new routine
C!                                    THPCOR, to correct 1 half-pad coordinates
C!                                    too.
C!
C!   Purpose   : To associate wires with pads for z-coord. refinement
C!   Inputs    : Banks TPCO,TBCO, JTPHCL,JTHPHI
C!   Outputs   : Workbank JTNWCO (see common /TSAWRK/)
C!
C!   Called by : TSAPAT
C!   Calls     : TPADPO,TWINDO,TSAWTK,UTLSLF
C!
C----------------------------------------------------------------------
#ifndef DOC
#include "tpcojj.h"
#include "tbcojj.h"
#include "tscljj.h"
#include "bcs.h"
#include "rlunit.h"
#include "alcons.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "tpgeow.h"
#include "tpccon.h"
#include "tsawrk.h"
#include "tflags.h"
C
      DIMENSION WIRE(50),BUCK(50),R0(50),BK(50),ITIND(50),WT(50)
      DIMENSION SIGT(50),RS(50),VAR(3)
      DIMENSION RPULS(LMXPCL),RTIME(LMXPCL),ERRM(3)
C
      LOGICAL LFRST
      SAVE NTPCO,NTBCO
C
      DATA LFRST/.TRUE./
      DATA NTNWC/50/
      DATA CHMAX/10./
C
#include "bmacro.h"
C
      IF (LFRST) THEN
         LFRST=.FALSE.
         NTPCO=NAMIND('TPCO')
         NTBCO=NAMIND('TBCO')
      ENDIF
      KTPCO = IW(NTPCO)
      KTBCO = IW(NTBCO)
C Create coordinate work bank
      CALL WBANK(IW,JTNWCO,LMHLEN+NTNWC*LNWCOA,*800)
      IW(JTNWCO+LMHCOL) = LNWCOA
      IW(JTNWCO+LMHROW) = 0
      IW(JTNWCO-3) = INTCHA('JTP4')
C
      IF (LROWS(JTHPHI).LE.1) GO TO 999
C
C  Loop over clusters        <=================================
      DO 30 I=1,LROWS(JTPHCL)
         NC = ITABL(JTPHCL,I,3)
C  Skip clusters with less than 3 entries
         IF (NC.LT.3) GO TO 30
         IOFF = ITABL(JTPHCL,I,4)
C  Loop over coordinates in each cluster  <====================
C  (These are assumed to be sorted in increasing row number)
         DO 60 JC = 1,NC
            IC = ITABL(JTHPHI,IOFF+JC,3)
            ISEC = ITABL(JTHPHI,IOFF+JC,5)
            ITYPE = ITPTYP(ISEC)
C  Good coordinates
            IF (IC.GT.0) THEN
               ZZ = RTABL(KTPCO,IC,JTPCZV)
               PHI = RTABL(KTPCO,IC,JTPCPH)
               S2RP = RTABL(KTPCO,IC,JTPCSR)
               RR = RTABL(KTPCO,IC,JTPCRV)
               DZ = SQRT(RTABL(KTPCO,IC,JTPCSZ))
               IRS = ITABL(KTPCO,IC,JTPCIN)
            ELSE
C  Bad coordinates
               ZZ = RTABL(KTBCO,-IC,JTBCZV)
               PHI = RTABL(KTBCO,-IC,JTBCPH)
C  For r-phi error store no of pads
               S2RP = ITABL(KTBCO,-IC,JTBCRW)
               RR = RTABL(KTBCO,-IC,JTBCRV)
C  For z error take length of pulse
               DZ = ITABL(KTBCO,-IC,JTBCZW)
               IRS = ITABL(KTBCO,-IC,JTBCIN)
            ENDIF
            IROW = IRS/100000
            IROWG = IROW
            ISTYP=ITPTYP(ISEC)
            IF (ISTYP.NE.1) THEN
              IROW=IROW-NTPDRW(1)
            ENDIF
            IPAD = MOD(IRS,1000)
            DZDR = ABS(ZZ/RR)
            CALL TPADPO(ISEC,IROW,IPAD,RPAD,PHIS,PWID)
C
C Get time and wire # window using geometry. (We could also get
C this information from TCLU/TSCL)
C Range of wires to use
            R1 = RPAD - 3.2
            R2 = RPAD + 3.2
            ZD1 = ZTPCMX - ABS(ZZ) + 3.2*DZDR
            ZD2 = ZTPCMX - ABS(ZZ) - 3.2*DZDR
C Time window
            IT1 = ZD1/TVDRFT(IENDTP(ISEC)) + TVOFFS(ISEC)
            IT2 = ZD2/TVDRFT(IENDTP(ISEC)) + TVOFFS(ISEC)
            R01 = R1*COS(PHIS)
            R02 = R2*COS(PHIS)
            RM = 0.5*(R01+R02)
            TINT = (IT1+IT2)/2.
            TGRD = -DZDR/(TVDRFT(IENDTP(ISEC))*COS(PHIS))
            TIS2 = 5.E-4
            TSG2 = DZ*DZ/TVDRFT(IENDTP(ISEC))**2
            ZGLB = ZZ
C Get wires in time and R0 window
            CALL TWINDO(ISEC,R01,R02,IT1,IT2,NWIR,WIRE,BUCK,50,SIGT)
C
C Look for tracks in wire hits
C NTRK = No of track candidates found
C ITIND = Track candidate pointer for eack hit
C
            CALL TSAWTK(NWIR,WIRE,BUCK,NTCAN,ITIND)
C
C  If we can't find any candidates among wire data, just store original
C  TPCO hit (Don't use TBCO in this case).
C
            IF (NTCAN.EQ.0) THEN
               IF (IC.LT.0) GO TO 60
               IF (LFRROW(JTNWCO).LT.1) THEN
                  NDAT = IW(JTNWCO) + 20*LCOLS(JTNWCO)
                  CALL WBANK(IW,JTNWCO,NDAT,*800)
               ENDIF
               IW(KNEXT(JTNWCO)+JTNWIC) = IC
               IW(KNEXT(JTNWCO)+JTNWNW) = NWIR
               RW(KNEXT(JTNWCO)+JTNWRM) = RM
               RW(KNEXT(JTNWCO)+JTNWTG) = TGRD
               RW(KNEXT(JTNWCO)+JTNWTI) = TINT
               RW(KNEXT(JTNWCO)+JTNWZZ) = ZZ
               RW(KNEXT(JTNWCO)+JTNWD2) = TIS2
               RW(KNEXT(JTNWCO)+JTNWG2) = TSG2
               RW(KNEXT(JTNWCO)+JTNWNN) = 999.
               RW(KNEXT(JTNWCO)+JTNWRR) = RR
               RW(KNEXT(JTNWCO)+JTNWPH) = PHI
               RW(KNEXT(JTNWCO)+JTNWS2) = S2RP
               IW(KNEXT(JTNWCO)+JTNWQW) = I*1000 + IT
               IW(KNEXT(JTNWCO)+JTNWZO) = 0
               IW(KNEXT(JTNWCO)+JTNWIR) = IROW
               RW(KNEXT(JTNWCO)+JTNWPS)=RTABL(KTPCO,IC,JTPCRR)
               RW(KNEXT(JTNWCO)+JTNWZS)=RTABL(KTPCO,IC,JTPCRZ)
               IW(JTNWCO+LMHROW) = IW(JTNWCO+LMHROW) + 1
               GO TO 60
            ENDIF
C
C  Loop over track candidates from wires  <===========
C
            NSTOR = 0
            DO 70 IT=1,NTCAN
               NW = 0
               DO 75 II = 1,NWIR
                  IF(ITIND(II).NE.IT) GO TO 75
                  NW = NW + 1
                  BK(NW) = BUCK(II)
                  R0(NW) = WIRE(II)
                  RS(NW) = WIRE(II) - RM
                  WT(NW) = 1./SIGT(II)**2
   75          CONTINUE
C
C  Obtain time at centre of wire group by fitting wire pulses
C
               CALL UTLSLF(RS,BK,WT,NW, A,B,CHISQ,VAR)
C
               IF (CHISQ/FLOAT(NW-2).LE.CHMAX) THEN
                  TGRD = A
                  TINT = B
                  TIS2 = VAR(1)
                  TSG2 = VAR(3)
C  Skip if we have a poor wire fit on a bad coord
               ELSE
                  IF(IC.LT.0) GO TO 70
               ENDIF
C
               ZDRFT=(B-TVOFFS(ISEC))*TVDRFT(IENDTP(ISEC))
C
C If ZFIT is outside the TPC, redefine R, Z and Z error at endplate
               IF (ZDRFT.LT.0) THEN
                  DRR = ZDRFT/ABS(DZDR)
                  ZDRFT = 0.
               ELSE
                  DRR = 0.
               ENDIF
C
C  If we are dealing with a bad coordinate try to recompute phi.
C  (Skip if unsucessful)
C
               IF (IC.LT.0) THEN
                  KTSPU = NLINK('TSPU',ISEC)
                  KTSCL = NLINK('TSCL',ISEC)
                  ISUB = ITABL(KTBCO,-IC,JTBCSC)
C  If pointer is negative, it means that we don't have good
C  sub-clusters.
                  IF (ISUB.LT.0) GO TO 60
C  Skip subcluster with saturated pulses
                  IQW=IW(KROW(KTSCL,ISUB)+JTSCQU)
                  IF (IQW.GE.100000) GO TO 60
                  IALGW=ITABL(KTSCL,ISUB,JTSCAW)
                  IQE=IALGW/1000
                  IF (IQE.EQ.0) GO TO 60
                  ITE = IALGW - 1000*IQE
C
C  Make lists of charge and time estimates for the subpulses.  Here
C
                  TANL = (ZTPCMX-ZDRFT)/RM
                  CALL TGETQT(IROW,KTSCL,ISUB,KTSPU,IQE,ITE,TANL,
     &                         RPULS,RTIME,NSPL,JP1,IFLG)
                  IF (IFLG.NE.0) GO TO 60
C
                  IPDMN = ITABL(KTSCL,ISUB,JTSCFP)
C  Apply the appropriate coordinate algorithm for r*phi (in pad units)
                  PRFS2=TPRF2(ZDRFT,ISEC,0,0.,0.)
                  CALL TCOALG(ISEC,IROW,IQW,NSPL,RPULS(JP1),PRFS2,
     &                        IPDMN,RPHIP,QCO,IFLG)
                  IF (IFLG.NE.0) GO TO 60
C
C  Apply a fudge in the case that half pads are used
C
                  CALL TNHLFP(ISEC,IROW,KROW(KTSCL,ISUB),NHALF)
                  IF (NHALF.GT.2) THEN
                    CALL THPCOR(NHALF,IPDMN,ISEC,IROW,RPHIP,RFUDG,IFLG)
                    IF (IFLG.NE.0) THEN
                      GO TO 60
                    ENDIF
                    RPHIP=RFUDG
                  ENDIF
C  Convert from pad units to sector coordinates, for phi
                  CALL TSCOOR(ISEC,IROW,RPHIP,B,RSEC,RPHIS,ZSEC)
C  Add the possible correction calculated above for RR, and use the
C  value for z calculated from the wires.
                  RSEC= RSEC + DRR
                  ZSEC= ZDRFT
C  Convert to global coordinates, with all alignment corrections
                  CALL TCTGLB(ISEC,RSEC,RPHIS,ZSEC,RGLB,RPHIG,ZGLB)
                  PHIG = RPHIG/RGLB
C  Correct z for time-of-flight
                  CALL TCRTOF(BFIELD,RGLB,ZGLB,0,' ',ZCR)
                  ZGLB=ZCR
C  Correct for drift field distortions
                  IF (FFCORR) THEN
                    MODE=0
                    IF (FFMODE) MODE=1
                    CALL TLACOR(RGLB,PHIG,ZGLB,RCR,PHICR,ZCR,MODE)
                    PHIG=PHICR
                    RGLB=RCR
                    ZGLB=ZCR
                  ENDIF
C  Correct for alignment of E and B fields (transverse drift)
                  IF (FECORR) THEN
                    CALL TCRTRN(ISEC,RGLB,PHIG,ZGLB,RCR,PHICR,ZCR)
                    RGLB=RCR
                    PHIG=PHICR
                    ZGLB=ZCR
                  ENDIF
C
C  Correct for z distortions measured by VDET
C
                  CALL TZCRVD(IENDTP(ISEC),RGLB,ZGLB,ZCR)
                  ZGLB=ZCR
                  CALL TZCSVD(ISEC,RGLB,PHIG,ZGLB,ZCR)
                  ZGLB=ZCR
C
C++   Correct for Residual field distortions
C
                  CALL TCORES(IENDTP(ISEC),IROWG,RGLB,PHIG,ZGLB,
     >                                           RCR,PHICR,ZCR)
                  RGLB =RCR
                  PHIG =PHICR
                  ZGLB =ZCR
                  CALL TFICOR(IENDTP(ISEC),IROWG,RGLB,PHIG,ZGLB,
     >                                           RCR,PHICR,ZCR)
                  RGLB =RCR
                  PHIG =PHICR
                  ZGLB =ZCR
C
C  Get the error estimate for the coordinate
                  MSPL=ITABL(KTSCL,ISUB,JTSCNS)
                  WPS=RTABL(KTSCL,ISUB,JTSCSP)
                  WZS=RTABL(KTSCL,ISUB,JTSCSB)
                  IQS=ITABL(KTSCL,ISUB,JTSCTC)
                  CALL TCOERR(ERRM,MSPL,WPS,WZS,IQS)
                  S2RP = ERRM(1)
               ELSE
C
C  For good coordinates, we just have to apply all transformations and
C  corrections to the new z value.  Get R and RPHI in sector system.
C
                  RSEC= TPDRBG(ISTYP)+(IROW-1)*TPDRST(ISTYP)
                  RPHIS= RTABL(KTPCO,IC,JTPCRR)
C  Now transform to global system, using the new z drift length
                  CALL TCTGLB(ISEC,RSEC,RPHIS,ZDRFT,RGLB,RPHIG,ZGLB)
C  Correct z for time-of-flight
                  CALL TCRTOF(BFIELD,RGLB,ZGLB,0,' ',ZCR)
                  ZGLB=ZCR
C  Correct for drift-field distortions.  
                  IF (FFCORR) THEN
                    PHIG=RPHIG/RGLB
                    MODE=0
                    IF (FFMODE) MODE=1
                    CALL TLACOR(RGLB,PHIG,ZGLB,RCR,PHICR,ZCR,MODE)
                    RGLB=RCR
                    PHIG=PHICR
                    ZGLB=ZCR
                  ENDIF
                  IF (FECORR) THEN
                    CALL TCRTRN(ISEC,RGLB,PHIG,ZGLB,
     &                                      RCR,PHICR,ZCR)
                    PHIG = PHICR
                    RGLB = RCR
                    ZGLB = ZCR
                  ENDIF
C
C  Correct for z distortions measured by VDET
C
                  CALL TZCRVD(IENDTP(ISEC),RGLB,ZGLB,ZCR)
                  ZGLB=ZCR
                  CALL TZCSVD(ISEC,RGLB,PHIG,ZGLB,ZCR)
                  ZGLB=ZCR
C
C++   Correct for Residual field distortions
C
                  CALL TCORES(IENDTP(ISEC),IROWG,RGLB,PHIG,ZGLB,
     >                                           RCR,PHICR,ZCR)
                  RGLB =RCR
                  PHIG =PHICR
                  ZGLB =ZCR
                  CALL TFICOR(IENDTP(ISEC),IROWG,RGLB,PHIG,ZGLB,
     >                                           RCR,PHICR,ZCR)
                  RGLB =RCR
                  PHIG =PHICR
                  ZGLB =ZCR
C
C  Add the radial correction determined from the wires.
C
                  RGLB = RGLB + DRR
               ENDIF
C  Here we store coordinate
               IF (LFRROW(JTNWCO).LT.1) THEN
                  NDAT = IW(JTNWCO) + 20*LCOLS(JTNWCO)
                  CALL WBANK(IW,JTNWCO,NDAT,*800)
               ENDIF
C
               IW(KNEXT(JTNWCO)+JTNWIC) = IC
               IW(KNEXT(JTNWCO)+JTNWNW) = NW
               RW(KNEXT(JTNWCO)+JTNWRM) = RM
               RW(KNEXT(JTNWCO)+JTNWTG) = A
               RW(KNEXT(JTNWCO)+JTNWTI) = B
               RW(KNEXT(JTNWCO)+JTNWZZ) = ZGLB
               RW(KNEXT(JTNWCO)+JTNWD2) = VAR(1)
               RW(KNEXT(JTNWCO)+JTNWG2) = VAR(3)
               RW(KNEXT(JTNWCO)+JTNWNN) = CHISQ/FLOAT(NW-2)
               RW(KNEXT(JTNWCO)+JTNWRR) = RGLB
               RW(KNEXT(JTNWCO)+JTNWPH) = PHIG
               RW(KNEXT(JTNWCO)+JTNWS2) = S2RP
               IW(KNEXT(JTNWCO)+JTNWQW) = I*1000 + IT
               IW(KNEXT(JTNWCO)+JTNWZO) = 0
               IW(KNEXT(JTNWCO)+JTNWIR) = IROW
               RW(KNEXT(JTNWCO)+JTNWPS)=RPHIS
               RW(KNEXT(JTNWCO)+JTNWZS)=ZDRFT
               IW(JTNWCO+LMHROW) = IW(JTNWCO+LMHROW) + 1
C Store a maximum of two good fits
               NSTOR = NSTOR + 1
               IF (NSTOR.EQ.2) GO TO 60
C
C End of loop over "wire track" candidates     ===============>
   70       CONTINUE
C End of loop over coordinates in cluster  ===================>
   60    CONTINUE
C End of loop over clusters ==================================>
   30 CONTINUE
C
C  Compress JTNWCO workbank
      IF (LROWS(JTNWCO).LE.0) GO TO 999
      CALL WBANK(IW,JTNWCO,LMHLEN+LCOLS(JTNWCO)*LROWS(JTNWCO),*800)
  999 RETURN
C
  800 CALL RERROR('TSAWIR',4,'Error extending work bank JTNWCO')
      END
#endif
@


1.4
log
@Tracking upgrade
@
text
@d8 3
d232 1
a232 1
C  Apply a fudge in the case that two half pads are used
d235 2
a236 2
                  IF (NHALF.EQ.2) THEN
                    CALL THPFDG(IPDMN,ISEC,IROW,RPHIP,RFUDG,IFLG)
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d6 2
d18 3
a20 1
C
a28 3
#include "tpcojj.h"
#include "tbcojj.h"
#include "tscljj.h"
d213 1
d217 2
a218 1
                  CALL TGETQT(IROW,KTSCL,ISUB,KTSPU,IQE,
d261 6
a266 4
                  IF (FECORR) CALL TCRTRA(IENDTP(ISEC),RGLB,PHIG,ZGLB,
     &                                    RCR,PHICR)
                  RR=RCR
                  PHI=PHICR
d270 1
a270 1
                  CALL TZCRVD(IENDTP(ISEC),RR,ZGLB,ZCR)
d272 1
a272 1
                  CALL TZCSVD(ISEC,RR,PHI,ZGLB,ZCR)
d277 1
a277 1
                  CALL TCORES(IENDTP(ISEC),IROWG,RR,PHI,ZGLB,
d279 2
a280 2
                  RR   =RCR
                  PHI  =PHICR
d282 1
a282 1
                  CALL TFICOR(IENDTP(ISEC),IROWG,RR,PHI,ZGLB,
d284 2
a285 2
                  RR   =RCR
                  PHI  =PHICR
d307 1
a307 2
C  Correct for drift-field distortions.  The transverse drift correction
C  never applies to z, so we ignore that here.
d313 2
d317 7
d327 1
a327 1
                  CALL TZCRVD(IENDTP(ISEC),RR,ZGLB,ZCR)
d329 1
a329 1
                  CALL TZCSVD(ISEC,RR,PHI,ZGLB,ZCR)
d334 1
a334 1
                  CALL TCORES(IENDTP(ISEC),IROWG,RR,PHI,ZGLB,
d336 2
a337 2
                  RR   =RCR
                  PHI  =PHICR
d339 1
a339 1
                  CALL TFICOR(IENDTP(ISEC),IROWG,RR,PHI,ZGLB,
d341 2
a342 2
                  RR   =RCR
                  PHI  =PHICR
d347 1
a347 1
                  RR = RR + DRR
d364 2
a365 2
               RW(KNEXT(JTNWCO)+JTNWRR) = RR
               RW(KNEXT(JTNWCO)+JTNWPH) = PHI
@


1.2
log
@julia version 279
@
text
@a0 1
*DK tsawir
@


1.1
log
@Initial revision
@
text
@d6 1
d224 1
a224 1
     &                        IPDMN,RPHIP,IFLG)
@


1.1.1.1
log
@import julia 300
@
text
@@
