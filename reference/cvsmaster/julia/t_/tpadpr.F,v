head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.42.31;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.06;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.07;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TPADPR(IRLST,LEN,ICLDR,ICLST,IFLNK,IOPEN,IORD,NCLUS)
C
C----------------------------------------------------------------------
C! Pad cluster pat. recognition
C! Reference: ALEPH Note 159  24-4-86
C!
C!   Author:   P.S.Marrocchesi    1-07-85
C!   Modified: R. Johnson        18-12-86
C!
C!   Input:
C!  - IRLST( hit_addr )  =  Rowlist array containing valid HITS
C!                          information coded in 32 bit words .
C!  - LEN                =  Length of the ROWLIST in longwords :
C!                          total number of hits in the pad row
C!  - IFLNK,IOPEN        =  Work space for this routine.
C!
C!   Output:
C!  - NCLUS              =  Number of reconstructed clusters
C!  - list buffer           This is internal to the LISPAK and is
C!                          accessed when LISPAK routines are called
C!                          to get the cluster lists.
C!  - ICLDR              =  Pointer to cluster directory (for LISPAK)
C!                          This points to a list of cluster indices
C!                          for valid clusters.  These indices then
C!                          are to be used for ICLST(ic).
C!  - ICLST(ic)          =  Pointers to the list of pulses for each
C!                          cluster.
C!  - IORD(ic)           =  Order flag for each cluster.
C!                          0 = cluster is in order
C!                          1 = cluster must be ordered later
C!
C!  - Dim. of ICLST,     =  max number of clusters in one PADROW :
C!            IFLNK,        this number can be as high as
C!            IOPEN,        2048 x 3 since the  maximum number
C!                          of TPD modules in a row  is 3 and
C!                          and the hitlist memory size
C!                          is 2k longwords per module.
C!                          Set at least as large as the number of
C!                          pulses in the row (LEN).
C!  - Parameters:
C!                 NLAP  =  pulses from two adjacent pads are
C!                          said to " overlap in time " when
C!                          they have _ at least _ NLAP samples
C!                          in common .
C!                 ITHRE =  threshold value for overlap parame-
C!                          ter F to define a " backward link ".
C!
C!    Called by TISLND
C!
C!    Routines used:
C!      This program makes use of the LISPAK routines in order to
C!      form and manipulate linked lists of pointers into the rowlist
C!      for the pulses in each cluster.  At the finish, there should be
C!      one such linked list for each cluster, and the pointer to
C!      the beginning of a list may be found in ICLIST(ic) in common
C!      TCLIST.  LISPAK must be used to access the lists themselves.
C!
C!    Description
C!    ===========
C!      This routine loops over the pulses in the TPAD rowlist in
C!      order and forms clusters as it goes along by adding to lists
C!      maintained by LISPAK.  Two pulses are considered part of a
C!      cluster if they are on adjacent pads and overlap in time
C!      by at least NLAP buckets.  No pulse height information is
C!      used.  When a pulse is found to overlap with two existing
C!      clusters, then the two clusters are merged together by a
C!      call to a LISPAK routine.
C!----------------------------------------------------------------------
#ifndef DOC
C
      DIMENSION IRLST(LEN)
      INTEGER IORD(*),ICLST(*),IFLNK(2,*),IOPEN(2,*)
      DATA NLAP/1/, ITHRE/1/
C
C---------------------------------------------------------------
C
C  initialize cluster lists and cluster directory
C
      IPNT = ICLDR
      IF( IPNT.EQ.0 ) GO TO 2
    1 CALL TLNEXT(IPNT,ICL)
      IF( IPNT.NE.0 ) THEN
        CALL TLSCRA( ICLST(ICL) )
        GO TO 1
      ENDIF
      CALL TLSCRA(ICLDR)
C
C  initialize service variables
C
 2    NCLUS = 0
      IPHIT= 1
      LNKFW = 0
      INDEX  = 2
C
C--  start ROWLIST scan :   get channel number
C
      ICHAN=IBITS(IRLST(IPHIT),24,8)
C
C--  non adjacent channel : new stripe
C
 50   ICOLD = ICHAN
      LNKFW = 0
C
C-- same channel : open a new cluster
C
 80   NCLUS = NCLUS + 1
      IORD(NCLUS)=0
      CALL TLCONS( IPHIT,ICLST(NCLUS))
      LNKFW=LNKFW+1
      IFLNK(3-INDEX,LNKFW) = IPHIT
      IOPEN(3-INDEX,LNKFW) = NCLUS
C
C--  continue scan of the rowlist :
C
C     open new clusters until channel number changes
C
 81   IPHIT = IPHIT + 1
      IF( IPHIT.GT.LEN ) GO TO 250
      ICHAN=IBITS(IRLST(IPHIT),24,8)
      IDEL = IABS(ICHAN - ICOLD) - 1
C
      IF ( IDEL) 80,85,50
C
C-- contiguous channel : loop on parent links
C
C
 85   ICOLD = ICHAN
      LINKF = LNKFW
      LNKFW = 0
C
C         swap r/w buffers ( parent links and forward links )
C
C         read buffer  :      INDEX    parent  links
C         write buffer :  3 - INDEX    forward links
C
      INDEX = 3 - INDEX
C
      LNK=0
      LINKB = 0
C
C--  Loop on parent links :
C
 88   LNK=LNK + 1
      IF( LNK.GT.LINKF ) GO TO 211
C
      GO TO 91
C
C  rowlist scan :
C
C
 90   IPHIT = IPHIT + 1
      IF(IPHIT.GT.LEN) GO TO 250
C
      ICHAN=IBITS(IRLST(IPHIT),24,8)
      IDEL = IABS(ICHAN - ICOLD) - 1
C
      IF ( IDEL ) 91,85,50
C
C  same channel : apply overlap criterion
C
C
 91   CONTINUE
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C*********************
C    OVERLAP TEST    *
C*********************
C
C--  unpack 2 rowlist longwords
C
      LEN1=IBITS(IRLST(IFLNK(INDEX,LNK)),16,8)
      IT01=IBITS(IRLST(IFLNK(INDEX,LNK)),0,9)
      LEN2=IBITS(IRLST(IPHIT),16,8)
      IT02=IBITS(IRLST(IPHIT),0,9)
C
      IOVL=1
      IT = IT02 - IT01
      IFFF = IT + LEN2 - LEN1
C
      IF(IT.GT.0) THEN
      IF( IT .GT. ( LEN1 - NLAP ) ) IOVL = 0
      ELSE
      IF( -IT .GT. ( LEN2 - NLAP ) ) IOVL = 0
      ENDIF
C
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      IF( IOVL.EQ.1 ) THEN
C
C--      overlap found
C
C      IFFF <= 0           :  continue rowlist scan    ( same parent lin
C
C      0 < IFFF <= ITHRE  :  continue rowlist scan    ( next forward lin
C
C      IFFF >  ITHRE      :  backward link
C
C
C--  current hit belongs to cluster ICL
C
      ICL = IOPEN(INDEX,LNK)
C
      IF( LINKB.EQ.0 ) GO TO 92
C
      IF( LINKB.EQ.ICL ) THEN
      LINKB=0
      GO TO 90
      ENDIF
C
C
C-- check whether the two clusters collapse into one :
C
C     . current hit overlaps with an element of cluster ICL
C
C     . the same hit was found to overlap with the preceding
C       forward link ( which belongs to cluster LINKB )
C
C-- merge the two clusters into one :
C
C     . add LINKB list to ICL list
C
C     . scratch LINKB list
C
C     . update the total number of clusters found
C
      CALL TLADD( ICLST(LINKB),ICLST(ICL) )
      CALL TLSCRA(ICLST(LINKB))
      IOPEN( 3-INDEX,LNKFW ) = ICL
      IORD(ICL)=1
      LINKB = 0
      GO TO 93
C
 92   CALL TLCONS( IPHIT,ICLST(ICL))
C
C  store :   - current hit as a forward link
C            - corresponding cluster identifier
C
      LNKFW = LNKFW + 1
      IFLNK( 3-INDEX,LNKFW ) = IPHIT
      IOPEN( 3-INDEX,LNKFW ) = ICL
C
 93      IF( IFFF.GT.ITHRE ) THEN
C       . flag occurrence of a backward link
C       . next parent link
C
         LINKB = ICL
         GO TO 88
         ENDIF
C
         IF( IFFF.LE.0 ) GO TO 90
C
C--  continue scan  :  -  next parent link
C                      -  next rowlist hit
C
         LNK=LNK+1
         IF( LNK.GT.LINKF ) GO TO 211
         GO TO 90
C
      ENDIF
C
C--   OVERLAP CRITERION NOT MET  ( IOVL = 0 )
C
C     IFFF <= 0     : CONTINUE scan ( same forward link )
C     IFFF >  0     : STOP     scan ( next forward link )
C
C
          IF( LINKB.NE.0 ) THEN
          LINKB = 0
          GO TO 90
          ENDIF
C
      IF( LNK.EQ.LINKF .OR. IFFF.LE.0 ) THEN
C
C--      open a new cluster
C
          NCLUS=NCLUS+1
          IORD(NCLUS)=0
          CALL TLCONS(IPHIT,ICLST(NCLUS))
C
          LNKFW=LNKFW+1
          IFLNK(3-INDEX,LNKFW)=IPHIT
          IOPEN(3-INDEX,LNKFW)=NCLUS
C
      ENDIF
C
      IF( IFFF.LE.0 ) GO TO 90
      GO TO 88
C
 211  CONTINUE
C
C  continue scan of the rowlist
C
      GO TO 81
C
  250 CONTINUE
C
C     End of rowlist:  set up clusters directory
C
      NC=0
      DO 300 I=1,NCLUS
        IPNT=ICLST(I)
        IF (IPNT.EQ.0) GO TO 300
        CALL TLCONS(I,ICLDR)
        NC=NC+1
  300 CONTINUE
      NCLUS=NC
C
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tpadpr
@


1.1.1.1
log
@import julia 300
@
text
@@
