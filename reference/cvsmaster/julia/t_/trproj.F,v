head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.45.13;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.15;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.16;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TRPROJ
C
C---------------------------------------------------------------*
C! Projects chain to find more hits                             *
C!                                                              *
C!   Author:     M. Mermikides    06-10-86                      *
C!   Modified:   R. Johnson       19-01-88                      *
C!   Modified:   M. Mermikides    19-08-89
C!                                                              *
C!   Called by TRKFND                                           *
C!                                                              *
C!  Road width is Min(TDZSTR,TDZMAX)*Min(TDWSTR,TDWMAX)         *
C!  The chain is extended iteratively until there are no more   *
C!  hits that can be added.                                     *
C---------------------------------------------------------------*
#ifndef DOC
C
#include "rparac.h"
#include "alcons.h"
#include "tparac.h"
#include "tpgpar.h"
#include "tchajj.h"
#include "tpcojj.h"
#include "tclujj.h"
#include "tlrljj.h"
#include "tpuljj.h"
#include "tcrljj.h"
#include "bcs.h"
#include "rflags.h"
#include "rlunit.h"
#include "tchain.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "trfdct.h"
#include "tcbins.h"
C
C  JROAD holds hits for each semicircle
C
      DIMENSION JROAD(21),IRSAV(21),IHSAV(21),PSAVE(23)
      DIMENSION D2SAV(21),MHSAV(21),SROAD(21)
      DIMENSION V(4,2)
C
      LOGICAL TURN,FIRST
      DATA FIRST/.TRUE./
C
C----------------------------------------------------------------------
C
#include "bmacro.h"
#include "tsfunc.h"
C
C----------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        NTPCO=NAMIND('TPCO')
        NTCRL=NAMIND('TCRL')
      ENDIF
C
      IF (ISTCHA.EQ.0) GO TO 999
C
C   Skip if we already have full track
C
  200 IF(NHCHAI.EQ.NTPROW) GO TO 999
C
      KTPCO = IW(NTPCO)
      IF (KTPCO.EQ.0) GO TO 999
      KTCRL = IW(NTCRL)
      IF (KTCRL.EQ.0) GO TO 999
C
      RHO = ABS(PCHAIN(1))
      Q = SIGN(1.,PCHAIN(1))
      TANL = PCHAIN(JTCHTL)
      PHI0 = PCHAIN(JTCHP0)
      D0 = PCHAIN(JTCHD0)
      DMAX = 2.*RHO - D0
      TURN = .FALSE.
      IF(DMAX.LE.RTPCMX) TURN=.TRUE.
C
C  Get first and last padrow to be looked at.  For straight-through trac
C  we consider range covered by extending present chain length in both
C  directions
C
      IF(.NOT.TURN) THEN
         JSPAN = IRCHAI(1)-IRCHAI(NHCHAI)+1
         IF (JSPAN.GE.8) THEN
            IR1 = 1
            IR2 = NTPROW
         ELSE
            IR1 = MAX(IRCHAI(NHCHAI)-JSPAN, 1)
            IR2 = MIN(IRCHAI(1) + JSPAN, NTPROW)
         ENDIF
C
C  Case of spiral. Go up to furthest point of approach.
C
      ELSE
         DMIN = ABS(D0)
         IR1 = INT((DMIN-TPPROW(1))/TPDRST(1)) + 1
         IR1 = MAX(IR1,1)
         IR2 = INT((DMAX-TPPROW(1))/TPDRST(1)) + 1
         IR2 = MIN(IR2,NTPROW)
C
C  Return if we have all hits
C
         IF (NHCHAI.GT.IR2-IR1+1) GO TO 999
      ENDIF
C
C  Save initial chain in case fit fails
C
      NSAVE = NHCHAI
      CALL UCOPY(IRCHAI(1),IRSAV,NHCHAI)
      CALL UCOPY(IHCHAI(1),IHSAV,NHCHAI)
      CALL UCOPY(MCHAIN(1),MHSAV,NHCHAI)
      CALL UCOPY(D2CHAI(1),D2SAV,NHCHAI)
      CALL UCOPY(PCHAIN(1),PSAVE,NPARCH)
      ISTSV = ISTCHA
C
C  Get z road width allowing for track inclination
C
      DELZ = TDZSTR*SQRT(1. + TANL*TANL)
      IF(DELZ.GT.TDZMAX)    DELZ=TDZMAX
      PHIC = PHI0 - Q*PIBY2
      RC = RHO - D0
      XC = RC*COS(PHIC)
      YC = RC*SIN(PHIC)
C
C  Get hits in initial chain
C
      CALL VFILL(JROAD,21,-1)
      DO 40 M=1,NHCHAI
         JROAD(IRCHAI(M))=IHCHAI(M)
         SROAD(IRCHAI(M))=D2CHAI(M)
 40   CONTINUE
      NXTR1 = 0
C
C   Look at unused padrows for more hits
C
      DO 20 K = IR1,IR2
C
         NCOR = ITABL(KTCRL,K,JTCRNC)
         IF (NCOR.LE.0) GO TO 20
C
C  Don't look at padrow where we already have hit
C
         IF (JROAD(K).NE.-1)  GO TO 20
C
C   Find intersection of orbit with padrow K
C
         RAD = TPPROW(K)
         CALL TRHLX2(RAD,PCHAIN(1),V,IERR)
         IF (IERR.NE.0) GO TO 20
         ZP1 = V(3,1)
C
C   Skip padrow if intersection is unphysical or outside in Z
C
         IF (ABS(ZP1).GT.ZTPCMX+DELZ) GO TO 20
C
C   Get angle-dependent phi tolerance
C
         PHI1 = V(4,1)
         BETA = ATAN2(-(V(1,1)-XC), V(2,1)-YC )
         IF (BETA.LT.0.) BETA=BETA+TWOPI
         BETA = TRPHDI(PHI1,BETA)
         COSB = COS(BETA)
         SINB = SIN(BETA)
         DELW = TDWSTR/ABS(COSB)
         IF (DELW.GT.TDWMAX)  DELW=TDWMAX
         NFND1 = 0
C
C   Find the appropriate phi bin, and loop over all hits in it
C
         IBIN= IXWRAP(INT(TCOFFS+PHI1/TC2DEL))
         IPTR= IBNPTR(IBIN,K)
C
C   Search for hits over 1st semicircle
C
  814    IF (IPTR.EQ.0) GO TO 815
            IC= ITABL(INDBIN,IPTR,JNDBCO)
            JJ = KROW(KTPCO,IC)
            PHI = RW(JJ + JTPCPH)
            Z   = RW(JJ + JTPCZV)
            DPHI = TRPHDI(PHI1,PHI)
            DW = ABS(RAD*DPHI)
            IF (DW.GT.DELW) THEN
              IPTR=ITABL(INDBIN,IPTR,JNDBFW)
              GO TO 814
            ENDIF
            DZ = ABS(ZP1-Z)
            IF (DZ.GT.DELZ) THEN
              IPTR=ITABL(INDBIN,IPTR,JNDBFW)
              GO TO 814
            ENDIF
            NFND1 = NFND1 + 1
            IF (NFND1.GT.1) GO TO 815
            ISAV1 = IPTR
            SAGER2=RW(JJ+JTPCSR)*COSB*COSB + 0.1875*SINB*SINB
C
            IPTR=ITABL(INDBIN,IPTR,JNDBFW)
            GO TO 814
  815    CONTINUE
C
C  Accept only 1 candidate in each semicircle
C
         IF (NFND1.EQ.1) THEN
            NXTR1 = NXTR1 + 1
            JROAD(K) = ISAV1
            SROAD(K) = SAGER2
         ENDIF
C
 20   CONTINUE
C
       IF (FDEBRF .AND. JDBDRF(JULTP).GE.9 .AND. NXTR1.GT.0) THEN
          WRITE(LDEBRL,556) NXTR1
  556     FORMAT(' +++TRPROJ+++ ',I3,' more hits')
          WRITE(LDEBRL,557) (JROAD(M),M=1,21)
  557     FORMAT(/(2X,21I5))
      ENDIF
C
      IF (NXTR1.GT.0) THEN
         NEW = 0
         DO 50 M = NTPROW,1,-1
            IF (JROAD(M).LT.0) GO TO 50
            NEW = NEW + 1
            IHCHAI(NEW) = JROAD(M)
            IRCHAI(NEW) = M
            D2CHAI(NEW) = SROAD(M)
   50    CONTINUE
         NHCHAI = NEW
C
C  Refit
C
         ISTCHA = 0
         CALL TRFTCH
C
C  If fit is unsuccessful, restore original chain
C
         IF (ISTCHA.EQ.0) THEN
            CALL UCOPY(IRSAV,IRCHAI(1),NSAVE)
            CALL UCOPY(IHSAV,IHCHAI(1),NSAVE)
            CALL UCOPY(MHSAV,MCHAIN(1),NSAVE)
            CALL UCOPY(D2SAV,D2CHAI(1),NSAVE)
            CALL UCOPY(PSAVE,PCHAIN(1),NPARCH)
            ISTCHA = ISTSV
            NHCHAI=NSAVE
            IF (FDEBRF .AND. JDBDRF(JULTP).GE.9) THEN
               WRITE(LDEBRL,558) NEW
            ENDIF
  558       FORMAT(' +++TRPROJ+++ Fit of TRPROJ. chain  nextr =',
     &             I3,' failed')
            NXTR1 = 0
         ENDIF
      ENDIF
C
C  If extra hits have been found, project again until full length is
C  covered.  Skip curlers.
C
      IF (TURN) GO TO 999
      IF (ISTSV.EQ.ISTCHA) GO TO 999
C
      IF(JSPAN.LT.8)  GO TO 200
C
  999 RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK trproj
@


1.1.1.1
log
@import julia 300
@
text
@@
