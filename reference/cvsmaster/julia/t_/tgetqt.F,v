head	1.4;
access;
symbols
	jul313_3:1.4
	jul313_2:1.4
	jul313_1:1.4
	jul313:1.4
	jul312_1:1.4
	jul312:1.4
	jul311:1.4
	jul310_1:1.4
	jul310:1.4
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.4
	jul307_4:1.4
	jul307_3:1.4
	jul307_2:1.4
	jul307_1:1.4
	jul307:1.4
	jul306_3:1.4
	jul306_2:1.4
	jul306_1:1.4
	jul306:1.4
	jul305_4:1.4
	jul305_3:1.4
	jul305_2:1.4
	jul305_1:1.4
	jul305:1.4
	jul304_3:1.4
	jul304_2:1.4
	jul304_1:1.4
	jul304:1.4
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.3
	jul303:1.4
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.4
date	97.05.21.15.26.27;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	97.03.06.09.55.17;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.41.24;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.01;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.02;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.4
log
@add some protections to Julia
@
text
@      SUBROUTINE TGETQT(IROW,KTSCL,IC,KTSPU,IQE,ITE,TANL,RPULS,
     &                                RTIME,NPUL,K1,IFLG)
C
C-----------------------------------------------------------------------
C! Make charge and time lists for coordinates
C!
C!    Author:    R. Johnson  03-08-87
C!    Modified:  R. Johnson  08-04-88
C!               D. Casper   25-04-96   Support for shaping correction
C!                           20-05-97   Restrict tan(lambda) to range +/-3
C!
C!    Input:
C!       - IROW      /I     Sector row number
C!       - KTSCL     /I     Pointer to subcluster bank in BOS
C!       - IC        /I     Row number of the subcluster in TSCL
C!       - KTSPU     /I     Pointer to subpulse bank in BOS
C!       - IQE       /I     Charge algorithm; see ChargeAlg of TLCT
C!       - ITE       /I     Time algorithm
C!       - TANL      /I     tan(lambda) for shaping correction
C!    Output:
C!       - RPULS     /R     List of charge estimates
C!       - RTIME     /R     List of time estimates
C!       - NPUL      /I     Number of values of RPULS and RTIME
C!       - K1        /I     First pulse in RPULS and RTIME
C!       - IFLG      /I     Quality flag   =0 for a good subcluster
C!                          600  : Cluster of two half pads only.
C!                          601  : Long cluster with two half pads.
C!                          602  : Outer half pad has larger ph. than
C!                                 the inner one.
C!
C!    Called by TCOOR
C!
C!---------------------------------------------------------------------
#ifndef DOC
#include "tparac.h"
#include "tpgpar.h"
#include "bcs.h"
#include "tspujj.h"
#include "tscljj.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "tpccut.h"
#include "tshpco.h"
C
      DIMENSION RPULS(*),RTIME(*)
C
C--------------- Statement Function Definitions -----------------------
C
#include "bmacro.h"
C
C----------------------------------------------------------------------
C
      IFLG=0
C
C++   Get the sector location and type
C
      ISLOT=IW(KTSCL-2)
      ISTYP=ITPTYP(ISLOT)
C
C++   Get coefficients for shaping correction, if needed
C
      IF (ITE.EQ.1)THEN
        X    = MIN(ABS(TANL),3.)
C -     pad pulse correction term is independent of 1st moment
        SHP0 = TSHPCN(1)*EXP(-0.5*((X-TSHPCN(2))/TSHPCN(3))**2)
     &        +TSHPCN(4)+TSHPCN(5)*X+TSHPCN(6)*X**2
C -     pad-pulse correction term proportional to first moment
        SHP1 = TSHPSL(1)*EXP(-0.5*((X-TSHPSL(2))/TSHPSL(3))**2)
     &        +TSHPSL(4)+TSHPSL(5)*X+TSHPSL(6)*X**2
      ELSE
        SHP0 = 0.
        SHP1 = 0.
      ENDIF
C
C++   Check whether there are any half pads in the cluster.  First
C++   consider the case of having two half pads in the cluster.
C
      NSPL=ITABL(KTSCL,IC,JTSCNS)
      IOFSP=ITABL(KTSCL,IC,JTSCPO)
      IPDMN=ITABL(KTSCL,IC,JTSCFP)
      IPDMX=IPDMN+NSPL-1
      NTPAD=NTPDPR(IROW,ISTYP)+2
      IF (IPDMN.EQ.1 .OR. IPDMX.EQ.NTPAD) THEN
C
C++     Reject clusters composed of two half pads and only two.
C
        IF (NSPL.EQ.2) THEN
          IFLG=600
          GO TO 999
        ENDIF
C
C++     Reject long clusters which include both half pads, since
C++     these probably are broken across a sector boundary.
C
        IF (NSPL.GT.NPHPTP) THEN
          IFLG=601
          GO TO 999
        ENDIF
C
C++     Add the half pad pulses and average their times.
C
        NPUL=NSPL-1
        IF (IPDMN.EQ.1) THEN
          K1=2
          JOUT=1
          JIN=2
          JFST=3
          JLST=NSPL
        ELSE
          K1=1
          JOUT=NSPL
          JIN=NSPL-1
          JFST=1
          JLST=NSPL-2
        ENDIF
        IF (IQE.EQ.1) THEN
          PHO=RTABL(KTSPU,IOFSP+JOUT,JTSPPC)
          PHI=RTABL(KTSPU,IOFSP+JIN,JTSPPC)
        ELSE
          PHO=FLOAT(ITABL(KTSPU,IOFSP+JOUT,JTSPTC))
          PHI=FLOAT(ITABL(KTSPU,IOFSP+JIN,JTSPTC))
        ENDIF
        IF (PHO.GT.PHI) THEN
          IFLG=602
          GO TO 999
        ELSE
          RPULS(JIN)=THPADD(PHI,PHO)
          TCIN = SHP0 + SHP1 * RTABL(KTSPU,IOFSP+JIN,JTSPIT)
          TCOUT = SHP0 + SHP1 * RTABL(KTSPU,IOFSP+JOUT,JTSPIT)
          RTIME(JIN)= (PHO*(RTABL(KTSPU,IOFSP+JOUT,JTSPPT)+TCOUT)
     &                 + PHI*(RTABL(KTSPU,IOFSP+JIN,JTSPPT)+TCIN))
     &               / (PHI+PHO)
        ENDIF
C
C++   Then consider the case of only one half pad in the cluster.
C
      ELSEIF (IPDMN.EQ.2) THEN
        K1=1
        NPUL=NSPL
        JFST=2
        JLST=NSPL
        IF (IQE.EQ.1) THEN
          PHI=RTABL(KTSPU,IOFSP+1,JTSPPC)
        ELSE
          PHI=FLOAT(ITABL(KTSPU,IOFSP+1,JTSPTC))
        ENDIF
        RTIME(1)=RTABL(KTSPU,IOFSP+1,JTSPPT) +
     &    SHP0+SHP1*RTABL(KTSPU,IOFSP+1,JTSPIT)
        RPULS(1)=THPADD(PHI,0.)
      ELSEIF (IPDMX.EQ.(NTPAD-1)) THEN
        K1=1
        NPUL=NSPL
        JFST=1
        JLST=NSPL-1
        IF (IQE.EQ.1) THEN
          PHI=RTABL(KTSPU,IOFSP+NSPL,JTSPPC)
        ELSE
          PHI=FLOAT(ITABL(KTSPU,IOFSP+NSPL,JTSPTC))
        ENDIF
        RTIME(NSPL)=RTABL(KTSPU,IOFSP+NSPL,JTSPPT) +
     &    SHP0+SHP1*RTABL(KTSPU,IOFSP+NSPL,JTSPIT)
        RPULS(NSPL)=THPADD(PHI,0.)
C
C++   Or else set up the pointers for the case of no half pads.
C
      ELSE
        K1=1
        NPUL=NSPL
        JFST=1
        JLST=NSPL
      ENDIF
C
C++   Now we are through dealing with half pads and can go on to
C++   handle the normal pads.
C
      DO 100 JSTOR=JFST,JLST
        ISP=IOFSP+JSTOR
        RTIME(JSTOR)=RTABL(KTSPU,ISP,JTSPPT) +
     &    SHP0 + SHP1 * RTABL(KTSPU,ISP,JTSPIT)
        IF (IQE.EQ.1) THEN
          RPULS(JSTOR)=RTABL(KTSPU,ISP,JTSPPC)
        ELSE
          RPULS(JSTOR)=FLOAT(ITABL(KTSPU,ISP,JTSPTC))
        ENDIF
  100 CONTINUE
C
  999 CONTINUE
      RETURN
      END
#endif
@


1.3
log
@Tracking upgrade
@
text
@d10 1
d63 1
a63 1
        X    = ABS(TANL)
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d1 1
a1 1
      SUBROUTINE TGETQT(IROW,KTSCL,IC,KTSPU,IQE,RPULS,
d9 1
d17 2
a33 1
C
d42 1
d59 15
d127 4
a130 2
          RTIME(JIN)= (PHO*RTABL(KTSPU,IOFSP+JOUT,JTSPPT)
     &                 + PHI*RTABL(KTSPU,IOFSP+JIN,JTSPPT))
d146 2
a147 1
        RTIME(1)=RTABL(KTSPU,IOFSP+1,JTSPPT)
d159 2
a160 1
        RTIME(NSPL)=RTABL(KTSPU,IOFSP+NSPL,JTSPPT)
d177 2
a178 1
        RTIME(JSTOR)=RTABL(KTSPU,ISP,JTSPPT)
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tgetqt
@


1.1.1.1
log
@import julia 300
@
text
@@
