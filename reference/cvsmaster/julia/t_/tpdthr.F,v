head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.43.05;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.09;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.10;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TPDTHR
C
C-------------------------------------------------------------------
C! Unpack TPD bad channels
C!
C!    Author:   R. Johnson  8-04-88
C!
C!    Input banks:  TCLB and TKAP banks from TPC online.
C!    Input common: TPGEOM global geometry constants for TPC.
C!                  TPGEOP pad geometry constants for TPC
C!    Output banks:
C!            THPL -  list of bad pads and associated thresholds
C!            THRP -  pointers into THPL for each sector and row
C!
C!    Called by TINIRU
C!
C-------------------------------------------------------------------
#ifndef DOC
C
#include "bcs.h"
#include "tpgpar.h"
#include "thrpjj.h"
#include "thpljj.h"
#include "tclbjj.h"
#include "tpgeom.h"
#include "tpgeop.h"
C
      COMMON/TPDTHW/ ISORTW
C
      LOGICAL FIRST
      DATA FIRST/.TRUE./
C
C-------------------- Statement Functions --------------------------
C
#include "bmacro.h"
C
C-------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        NTHRP=NAMIND('THRP')
        NTHPL=NAMIND('THPL')
        NTKAP=NAMIND('TKAP')
        NTCLB=NAMIND('TCLB')
        ISORTW=0
      ENDIF
C
C++   Check whether there is any input
C
      KTKAP=IW(NTKAP)
      IF (KTKAP.LE.0) GO TO 999
      KTCLB=IW(NTCLB)
      IF (KTCLB.LE.0) GO TO 999
C
C++   Count the total number of bad channels and max. per sector
C
      MXBAD=0
      NBAD=0
      DO 1 I=1,LROWS(KTCLB)
        NT=ITABL(KTCLB,I,JTCLNT)
        MXBAD=MAX(MXBAD,NT)
        NBAD=NBAD+NT
    1 CONTINUE
      IF (NBAD.EQ.0) GO TO 999
C
C++   Get rid of any output banks still floating around
C
      IF (IW(NTHRP).NE.0) CALL BDROP(IW,'THRP')
      IF (IW(NTHPL).NE.0) CALL BDROP(IW,'THPL')
C
C++   Create a workbank for sorting
C
      LEN=MXBAD*3
      IW(1)=1
      CALL WBANK(IW,ISORTW,LEN,*999)
      IW(ISORTW-3)=INTCHA('WSRT')
C
C++   Create bank for list of bad channels
C
      LEN=NBAD*LTHPLA+LMHLEN
      IW(1)=1
      CALL AUBOS('THPL',0,LEN,KTHPL,IGARB)
      IF (IGARB.EQ.2) GO TO 999
      IW(KTHPL+LMHCOL)=LTHPLA
      IW(KTHPL+LMHLEN)=0
      CALL BLIST(IW,'C+','THRPTHPL')
C
C++   Loop over all sectors with threshold banks
C
      KTCLB=IW(NTCLB)
      KTKAP=IW(NTKAP)
      IOFF=LMHLEN
      DO 501 ISLOT=1,LROWS(KTCLB)
        NBAD=ITABL(KTCLB,ISLOT,JTCLNT)
        NBADP=0
        DO 700 I=1,NBAD
          IWORD=IW(KTKAP+IOFF+I)
          JSLOT=IBITS(IWORD,24,8)
          IF (ISLOT.NE.JSLOT) THEN
            CALL RERROR('TPDTHR',1,'Bank TCLB is not in sequence'
     &                             //' with bank TKAP.')
            GO TO 888
          ENDIF
          IROW=IBITS(IWORD,8,8)
          IF (IROW.LT.0 .OR. IROW.GT.LTPDRO) THEN
            CALL RERROR('TPDTHR',2,'Padrow number out of range'
     &                             //' in bank TKAP.')
            GO TO 888
          ENDIF
          IF (IROW.LT.1) GO TO 700
          NBADP=NBADP+1
          IPADN=IBITS(IWORD,0,8)
          IW(ISORTW+NBADP)=IROW
          IW(ISORTW+NBAD+NBADP)=IPADN
  700   CONTINUE
C
        IF (NBADP.GT.0) THEN
          ISTYP=ITPTYP(ISLOT)
          LEN=NTPDRW(ISTYP)*LTHRPA+LMHLEN
          IW(1)=1
          CALL AUBOS('THRP',ISLOT,LEN,KTHRP,IGARB)
          IF (IGARB.EQ.2) GO TO 999
          IF (IGARB.EQ.1) THEN
            KTCLB=IW(NTCLB)
            KTKAP=IW(NTKAP)
            KTHPL=IW(NTHPL)
          ENDIF
          IW(KTHRP+LMHCOL)=LTHRPA
          IW(KTHRP+LMHROW)=NTPDRW(ISTYP)
          CALL VZERO(IW(KTHRP+LMHLEN+1),LTHRPA*NTPDRW(ISTYP))
C
C++       Sort the bad channels by padrow number
C
          CALL SORTZV(IW(ISORTW+1),IW(ISORTW+2*NBAD+1),NBADP,-1,0,0)
C
C++       Fill output banks for this sector, one padrow at a time
C
          IROLD=-1
          DO 780 I=1,NBADP
            IDX=IW(ISORTW+2*NBAD+I)
            IROW=IW(ISORTW+IDX)
            IF (IROW.NE.IROLD) THEN
              IROLD=IROW
              IW(KROW(KTHRP,IROW)+JTHRPT)=LROWS(KTHPL)
            ENDIF
            IW(KROW(KTHRP,IROW)+JTHRNB)=ITABL(KTHRP,IROW,JTHRNB)+1
            IW(KTHPL+LMHROW)=LROWS(KTHPL)+1
            NTHP=LROWS(KTHPL)
            IW(KROW(KTHPL,NTHP)+JTHPPN)=IW(ISORTW+NBAD+IDX)
            IWORD=IW(KTKAP+IOFF+I)
            IW(KROW(KTHPL,NTHP)+JTHPTH)=IBITS(IWORD,16,8)
  780     CONTINUE
C
C++       Go back through and sort all entries per row by pad number
C
          DO 840 IROW=1,LROWS(KTHRP)
            N=ITABL(KTHRP,IROW,JTHRNB)
            IF (N.EQ.0) GO TO 840
            IOF=ITABL(KTHRP,IROW,JTHRPT)
            DO 820 I=1,N
              IW(ISORTW+I)=ITABL(KTHPL,IOF+I,JTHPPN)
              IW(ISORTW+N+I)=ITABL(KTHPL,IOF+I,JTHPTH)
  820       CONTINUE
            CALL SORTZV(IW(ISORTW+1),IW(ISORTW+2*N+1),N,-1,0,0)
            DO 830 I=1,N
              IDX=IW(ISORTW+2*N+I)
              IW(KROW(KTHPL,IOF+I)+JTHPPN)=IW(ISORTW+IDX)
              IW(KROW(KTHPL,IOF+I)+JTHPTH)=IW(ISORTW+N+IDX)
  830       CONTINUE
  840     CONTINUE
        ENDIF
        IOFF=IOFF+NBAD
  501 CONTINUE
C
  999 CONTINUE
C
C++   Set lengths of name banks
C
      CALL AUBPRS('THPLTHRP')
C
C++   Drop the workbank
C
      CALL WDROP(IW,ISORTW)
      RETURN
C
C++   Drop output banks in case of an error
C
  888 CONTINUE
      CALL BDROP(IW,'THPLTHRP')
      CALL WDROP(IW,ISORTW)
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tpdthr
@


1.1.1.1
log
@import julia 300
@
text
@@
