head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	98.08.24.15.02.01;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.46.37;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.22;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.23;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@mods for julia 307.4
@
text
@      SUBROUTINE TTWODX(IER)
C----------------------------------------------------------------------
C!  - Calculate dE/dx for overlapping TPC tracks
C!
C!   Author   :- D.Cinabro             30-NOV-1989
C!   Modified :- R.Johnson             12-APR-1991
C!               fixed bug in addition of non-overlapping samples and
C!               changed truncation mean scheme to match that in TRKELS
C!               G.Taylor               9-SEP-1991
C!               fixed many bugs-->1st tested, working version
C!   Modified :- M.Cattaneo            24-AUG-1998
C!               Bank T2XS was not being extended a second time if necessary
C!
C!   Inputs: TGFT,TWTB,TWOL
C!
C!   Outputs: T2XS
C!
C!   Libraries required: BOS,JULIA
C!
C!   Description
C!   ===========
C!   Calculate the truncated mean for TPC tracks which overlap with
C!   one other TPC track.  The output is stored in T2XS.
C?
C!======================================================================
#ifndef DOC
C
#include "bcs.h"
#include "tflags.h"
#include "tpgpar.h"
#include "tgftjj.h"
#include "twirct.h"
#include "twircl.h"
#include "tpgeow.h"
#include "twtbjj.h"
#include "twoinc.h"
#include "t2xsjj.h"
#include "twoljj.h"
C
      DIMENSION NCLST(LTSECT),SPLST(LTSECT),SZLST(LTSECT)
      DIMENSION SLLST(LTSECT),NHTOT(LTSECT)
      LOGICAL FIRST,BANK
      DATA FIRST /.TRUE./
C
#include "bmacro.h"
C
      IF (FIRST) THEN
        FIRST = .FALSE.
        NTGFT = NAMIND('TGFT')
        NTWTB = NAMIND('TWTB')
        NTWOL = NAMIND('TWOL')
        NT2XS = NAMIND('T2XS')
        ITSORT = 0
      ENDIF
C
      KTGFT = IW(NTGFT)
      KTWTB = IW(NTWTB)
      KTWOL = IW(NTWOL)
      IF (KTGFT.EQ.0.OR.KTWTB.EQ.0.OR.KTWOL.EQ.0) GOTO 999
C
C Get rid of the output bank if it is still  hanging around
C
      KT2XS = IW(NT2XS)
      IF (KT2XS.NE.0) CALL BDROP(IW,'T2XS')
C
C Loop over all track pairs in TWOL
C
      BANK = .FALSE.
      CINT=1.0-SLOPCL*ALOG(TWSTEP(1))
      NENT = 0
      DO 10 IPR = 1,LROWS(KTWOL)
        ITK1 = ITABL(KTWOL,IPR,JTWOT1)
        ITK2 = ITABL(KTWOL,IPR,JTWOT2)
C
C Make a workbank of the overlapping hits
C
        CALL TTWOSH(ITK1,ITK2)
        IF (IRELHT.EQ.0) GOTO 10
C
C These two tracks have enough shared hits to make the calculation
C of double track dE/dx worthwhile.
C
C So I have the list of shared pulses and logical list that tells me
C in which sectors there are shared pulses.
C OK I have all the lists I need now start summing.  The following
C is copied as faithfully as possible from TRKELS.
C
C Create a workbank for sorting the dE/dx samples
C
        NSAMP = LROWS(IRELHT)
        CALL WBANK(IW,ITSORT,2*NSAMP,*998)
        IW(ITSORT-3) = INTCHA('WTST')
C
C The first time through a named bank must be created for the output.
C
        IF (.NOT.BANK) THEN
          BANK = .TRUE.
          LEN = LMHLEN + 7*LROWS(KTGFT)
          CALL AUBOS('T2XS',0,LEN,KT2XS,IGARB)
          IF (IGARB.EQ.2) GOTO 997
          KTGFT = IW(NTGFT)
          KTWTB = IW(NTWTB)
          KTWOL = IW(NTWOL)
          IW(KT2XS+LMHCOL) = 7
          IW(KT2XS+LMHROW) = LROWS(KTGFT)
        ENDIF
C
C Make a list for sorting the dE/dx values.
C Keep track of the number of values in each sector and the total
C track length.  Apply the same corrections for sample length as
C in TRKELS.
C
        SMP0 = RTABL(KTWTB,ITABL(IRELHT,1,1),JTWTSL)
        SMPL = ALOG(SMP0)
        CALL VZERO(NHTOT(1),LTSECT)
        DO 20 IWR = 1,LROWS(IRELHT)
          ITW=ITABL(IRELHT,IWR,1)
          SMP = RTABL(KTWTB,ITW,JTWTSL)
          RNCR = (SMP-SMP0)/SMP0
          IF (ABS(RNCR).LT.RNCRTW) THEN
            SMPL = SMPL + (1. - 0.5*RNCR)*RNCR
          ELSE
            SMPL = ALOG(SMP)
          ENDIF
          DEDX = RTABL(KTWTB,ITABL(IRELHT,IWR,1),JTWTCE)/
     &            SMP/(CINT+SLOPCL*SMPL)
          IDD=ITABL(KTWTB,ITW,JTWTWI)
          ISLOT=IDD/65536
C
C++       Make a non-linear correction for sample length
C
          ZTK=RTABL(KTWTB,ITW,JTWTPN)
          Q=RTABL(KTWTB,ITW,JTWTCE)/(CINT+SLOPCL*SMPL)
          IF (GRNMCL.GT.0.) THEN
            QCNL=GRNMCL*(Q/SMP + (1.-(TWSTEP(1)/SMP))*RNLNCL)
     &                                           / (1.+ADSPCL*ZTK)
          ELSE
            QCNL=Q/SMP
          ENDIF
          RW(ITSORT+IWR)=QCNL
          NHTOT(ISLOT)=NHTOT(ISLOT)+1
          SMP0=SMP
   20   CONTINUE
C
C Sort the dE/dx values
C
        CALL SORTZV(RW(ITSORT+1),IW(ITSORT+NSAMP+1),NSAMP,1,0,0)
C
C Calculate the truncated sum of dE/dx and the average drift
C separately for each sector.
C
        CALL VZERO(NCLST(1),LTSECT)
        CALL VZERO(SZLST(1),LTSECT)
        CALL VZERO(SPLST(1),LTSECT)
        CALL VZERO(SLLST(1),LTSECT)
        NTRNK=NSAMP*JTRNCL/100
        IF (FSRTDX) THEN
          DO 368 ISLOT=1,LTSECT
            NHTOT(ISLOT)=NHTOT(ISLOT)*JTRNCL/100
  368     CONTINUE
          NLOOP=NSAMP
        ELSE
          NLOOP=NSAMP*JTRNCL/100
        ENDIF
        DO 40 K=1,NLOOP
            IPT=IW(ITSORT+NSAMP+K)
            ITW=ITABL(IRELHT,IPT,1)
            IDD=ITABL(KTWTB,ITW,JTWTWI)
            ISLOT=IDD/65536
            IF (FSRTDX) THEN
              IF (NCLST(ISLOT).GE.NHTOT(ISLOT)) GO TO 40
            ENDIF
            ZPUL=RTABL(KTWTB,ITW,JTWTPN)
            NCLST(ISLOT)=NCLST(ISLOT) + 1
            SPLST(ISLOT)=SPLST(ISLOT) + RW(ITSORT+IPT)
            SZLST(ISLOT)=SZLST(ISLOT) + ZPUL
            SLLST(ISLOT)=SLLST(ISLOT) + RTABL(KTWTB,ITW,JTWTSL)
   40   CONTINUE
C
C An entry into PT2X
C
        NSECT = 0
        DO 50 ISLOT=1,LTSECT
          IF (NCLST(ISLOT).EQ.0) GO TO 50
          NENT = NENT + 1
C
C Extend T2XS if it might run out of space
C
          IF (LROWS(KT2XS).EQ.NENT) THEN
            LEN= IW(KT2XS) + 5*7
            CALL AUBOS('T2XS',0,LEN,KTEXS,IGARB)
            IF (IGARB.EQ.2) GO TO 997
            IF (IGARB.NE.0) THEN
              KTGFT = IW(NTGFT)
              KTWTB = IW(NTWTB)
              KTWOL = IW(NTWOL)
            ENDIF
            IW(KT2XS+LMHROW) = IW(KT2XS+LMHROW) + 5
          ENDIF
          NSECT=NSECT+1
C
          RTRNK=FLOAT(NCLST(ISLOT))
          IW(KROW(KT2XS,NENT)+JT2XSI)=ISLOT
          RW(KROW(KT2XS,NENT)+JT2XTM)=SPLST(ISLOT)/RTRNK
          RW(KROW(KT2XS,NENT)+JT2XTL)=SLLST(ISLOT)
          IW(KROW(KT2XS,NENT)+JT2XNS)=NCLST(ISLOT)
          RW(KROW(KT2XS,NENT)+JT2XAD)=SZLST(ISLOT)/RTRNK
          IW(KROW(KT2XS,NENT)+JT2XT1)=ITK1
          IW(KROW(KT2XS,NENT)+JT2XT2)=ITK2
   50   CONTINUE
C
C Drop the workbanks for this track pair
C
        CALL WDROP(IW,IRELHT)
        CALL WDROP(IW,ITSORT)
   10 CONTINUE
C
C Drop TWOL
C
      CALL BDROP(IW,'TWOL')
C
C Set size of T2XS
C
      IF (NENT.NE.0) THEN
        IW(KT2XS+LMHROW) = NENT
        CALL AUBPRS('T2XS')
      ENDIF
      IER=0
      GOTO 999
C
  997 CONTINUE
      CALL RERROR('TTWODX',1,'No room in BOS for named bank')
      IER=1
      GOTO 999
C
  998 CONTINUE
      CALL RERROR('TTWODX',2,'No room in BOS for workbank')
      IER=2
C
  999 RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d11 2
d198 1
@


1.1
log
@Initial revision
@
text
@a0 1
*DK ttwodx
@


1.1.1.1
log
@import julia 300
@
text
@@
