head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.44.21;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.13;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.14;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE TREFCH(KTPCH,JGARB)
C
C--------------------------------------------------------------------
C! Reference between clusters, coordinates and MC hits
C!
C!    Author:   R. Johnson    22-10-87
C!    Modified: R. Johnson    19-01-87
C!
C!    Output:
C!       - KTPCH    /I       BOS pointer to cross reference bank
C!                           for coordinates
C!       - JGARB    /I       Set to one if a garbage collection
C!                           has occured.  Set to two if no space
C!                           was available in BOS
C!
C!    Called by TPHIST
C!
C!    Note that tracks traveling almost parallel to the padrow can
C!    leave ionization in one sector padrow without ever passing over
C!    the center of the padrow.  These cases can produce coordinates
C!    with no MC reference.
C!
C!-------------------------------------------------------------------
#ifndef DOC
C
#include "tpgpar.h"
#include "bcs.h"
#include "tpgeom.h"
#include "tpgeop.h"
#include "tcluct.h"
#include "tpccon.h"
#include "tzcorr.h"
#include "tphtjj.h"
#include "tpcojj.h"
#include "tclujj.h"
#include "trcljj.h"
#include "tmcljj.h"
#include "tscljj.h"
#include "tpchjj.h"
#include "tflags.h"
C
      COMMON/TREFWK/ ITSCLW
      DIMENSION IRLST(2,LTPDRO)
      LOGICAL FIRST
      DATA FIRST/.TRUE./
C
C------------------ statement functions -----------------------------
C
#include "bmacro.h"
C
C--------------------------------------------------------------------
C
      IF (FIRST) THEN
        FIRST=.FALSE.
        NTPCO=NAMIND('TPCO')
        NTCLU=NAMIND('TCLU')
        NTSCL=NAMIND('TSCL')
        NTPHT=NAMIND('TPHT')
        NTPCH=NAMIND('TPCH')
        ITSCLW=0
      ENDIF
      JGARB=0
C
      KTPCH=0
      KTPCO=IW(NTPCO)
      IF (KTPCO.EQ.0) GO TO 999
      KTCLU=IW(NTCLU)
      IF (KTCLU.EQ.0) GO TO 999
      KTSCL=IW(NTSCL)
      IF (KTSCL.EQ.0) GO TO 999
C
C++   Make a row list for the TPHT bank
C
      KTPHT=IW(NTPHT)
      IF (KTPHT.EQ.0) GO TO 999
      ILAST=-1
      CALL VZERO(IRLST,2*LTPDRO)
      DO 50 IHT=1,IW(KTPHT+LMHROW)
        IROW= ITABL(KTPHT,IHT,JTPHCI)/100000
        IF (IROW.NE.ILAST) THEN
          ILAST=IROW
          IRLST(2,IROW)=IHT-1
        ENDIF
        IRLST(1,IROW)=IRLST(1,IROW)+1
   50 CONTINUE
C
C++   Create the bank for hit association
C
      NDATA = LTPCHA*IW(KTPCO+LMHROW) + LMHLEN
      IW(1)=1
      CALL AUBOS('TPCH',0,NDATA,KTPCH,IGARB)
      IF (IGARB.NE.0) JGARB=1
      IF (IGARB.EQ.2) GO TO 998
      IW(KTPCH+LMHCOL) = LTPCHA
      IW(KTPCH+LMHROW) = IW(KTPCO+LMHROW)
      CALL BLIST(IW,'T+','TMCLTPCHTRCL')
C
      KTCLU=IW(NTCLU)
      KTPCO=IW(NTPCO)
      KTPHT=IW(NTPHT)
      CALL BWIND(IW,'TSCL',50,ITSCLW)
C
C++   Loop over all clusters in all sectors
C
   85 IF (KTCLU.EQ.0) GO TO 800
        ISLOT=IW(KTCLU-2)
        ISTYP=ITPTYP(ISLOT)
C
C++     Create cluster cross reference banks
C
        NDATA= LTRCLA*LROWS(KTCLU)+LMHLEN
        IW(1)=1
        CALL AUBOS('TRCL',ISLOT,NDATA,KTRCL,IGARB)
        IF (IGARB.NE.0) JGARB=1
        IF (IGARB.EQ.2) GO TO 998
        IF (IGARB.EQ.1) THEN
          KTCLU=NLINK('TCLU',ISLOT)
          CALL BWIND(IW,'TSCL',50,ITSCLW)
          KTPCO=IW(NTPCO)
          KTPHT=IW(NTPHT)
          KTPCH=IW(NTPCH)
        ENDIF
        IW(KTRCL+LMHCOL)=LTRCLA
        IW(KTRCL+LMHROW)=LROWS(KTCLU)
C
        NDATA= LTMCLA*LROWS(KTPHT)+LMHLEN
        IW(1)=1
        CALL AUBOS('TMCL',ISLOT,NDATA,KTMCL,IGARB)
        IF (IGARB.NE.0) JGARB=1
        IF (IGARB.EQ.2) GO TO 998
        IF (IGARB.EQ.1) THEN
          KTRCL=NLINK('TRCL',ISLOT)
          KTCLU=NLINK('TCLU',ISLOT)
          CALL BWIND(IW,'TSCL',50,ITSCLW)
          KTPCO=IW(NTPCO)
          KTPHT=IW(NTPHT)
          KTPCH=IW(NTPCH)
        ENDIF
        IW(KTMCL+LMHCOL)=LTMCLA
        IW(KTMCL+LMHROW)=0
C
        DO 700 ICL=1,LROWS(KTCLU)
          IW(KROW(KTRCL,ICL)+JTRCNH)=0
          IW(KROW(KTRCL,ICL)+JTRCOH)=LROWS(KTMCL)
C
C++       Get minimum and maximum extents of cluster in both directions
C
          IBMN=ITABL(KTCLU,ICL,JTCLFB)
          IBMX=ITABL(KTCLU,ICL,JTCLLB)
          IPMN=ITABL(KTCLU,ICL,JTCLFP)
          IPMX=ITABL(KTCLU,ICL,JTCLLP)
          IROW=ITABL(KTCLU,ICL,JTCLPN)
          IF (ISTYP.EQ.1) THEN
            IROWG=IROW
          ELSE
            IROWG=IROW+NTPDRW(1)
          ENDIF
C
C++       Apply Z offset correction according to tan(lambda)
C
          Z0= ZTPCMX-(FLOAT(IBMN)-TVOFFS(ISLOT))
     &                         * TVDRFT(IENDTP(ISLOT))
          TANL= Z0/TPPROW(IROWG)
          IF (TANL.LT.RTLCTL) THEN
            JTANL=1
          ELSE
            JTANL=2
          ENDIF
          ZBMN= FLOAT(IBMN) + TZOFFS(ITLCTA(JTANL))
          ZBMX= FLOAT(IBMX) + TZOFFS(ITLCTA(JTANL))
          RPMN= FLOAT(IPMN) - 0.5
          RPMX= FLOAT(IPMX) + 0.5
C
C++       Change pad and bucket numbers to centimeters
C
          CALL TSCOOR(ISLOT,IROW,RPMN,ZBMN,RS,RPSMN,ZSMN)
          CALL TSCOOR(ISLOT,IROW,RPMX,ZBMX,RS,RPSMX,ZSMX)
C
C++       Transform these coordinates to the global frame
C
          IF (FTPC90) THEN
            R=RS
            RPHG1=RPHMN
            ZG1=ZSMN
            RPHG2=RPSMX
            ZG2=ZSMX
          ELSE
            CALL TCTGLB(ISLOT,RS,RPSMN,ZSMN,R,RPHG1,ZG1)
            CALL TCTGLB(ISLOT,RS,RPSMX,ZSMX,R,RPHG2,ZG2)
          ENDIF
          RPHMN=AMIN1(RPHG1,RPHG2)
          RPHMX=AMAX1(RPHG1,RPHG2)
          ZMN=AMIN1(ZG1,ZG2)
          ZMX=AMAX1(ZG1,ZG2)
C
C++       Search all MC hits in this row for those within the cluster.
C++       Note that it is possible for a group of pads to fire without
C++       the track ever even crossing the CENTER of the padrow, so
C++       we expect some clusters (from low pt tracks) with no MC hits.
C
          DO 600 II=1,IRLST(1,IROWG)
            IHT= II + IRLST(2,IROWG)
            ID= ITABL(KTPHT,IHT,JTPHCI)
            IF ((MOD(ID,100000)/1000).NE.ISLOT) GO TO 600
            RPHMC= RTABL(KTPHT,IHT,JTPHPH) * R
            IF (RPHMC.LT.RPHMN) GO TO 600
            IF (RPHMC.GT.RPHMX) GO TO 600
            ZMC= RTABL(KTPHT,IHT,JTPHZV)
            IF (ZMC.LT.ZMN) GO TO 600
            IF (ZMC.GT.ZMX) GO TO 600
            IW(KROW(KTRCL,ICL)+JTRCNH)=ITABL(KTRCL,ICL,JTRCNH)+1
            IW(KTMCL+LMHROW)=LROWS(KTMCL)+1
            IW(KROW(KTMCL,LROWS(KTMCL))+JTMCPT)=IHT
  600     CONTINUE
  601     CONTINUE
C
C++       Loop over all subclusters in this cluster
C
          IF (ISLOT.LE.IW(ITSCLW)) THEN
            KTSCL=IW(ITSCLW+ISLOT)
          ELSE
            GO TO 700
          ENDIF
          IF (KTSCL.EQ.0) GO TO 700
          DO 650 ISC=1,IW(KTSCL+LMHROW)
            IF (ITABL(KTSCL,ISC,JTSCCL).NE.ICL) GO TO 650
C
C++         For each coordinate, find the closest MC hit.
C
            DO 635 JJ=1,ITABL(KTSCL,ISC,JTSCNC)
              IC= JJ + ITABL(KTSCL,ISC,JTSCCO)
              RPHIC= RTABL(KTPCO,IC,JTPCRV)*RTABL(KTPCO,IC,JTPCPH)
              ERPHI= RTABL(KTPCO,IC,JTPCSR)
              ZC= RTABL(KTPCO,IC,JTPCZV)
              EZ= RTABL(KTPCO,IC,JTPCSZ)
              DO 620 IMC=1,ITABL(KTRCL,ICL,JTRCNH)
                IHT= IW(KTMCL+LMHLEN+ITABL(KTRCL,ICL,JTRCOH)+IMC)
                RPMC= RTABL(KTPCO,IC,JTPCRV)*RTABL(KTPHT,IHT,JTPHPH)
                ZMC= RTABL(KTPHT,IHT,JTPHZV)
                CHI2= (RPMC-RPHIC)**2/ERPHI + (ZMC-ZC)**2/EZ
                IF (IMC.EQ.1 .OR. CHI2.LT.CHIMN) THEN
                  CHIMN=CHI2
                  IHTMC=IHT
                ENDIF
  620         CONTINUE
C
              IF (ITABL(KTRCL,ICL,JTRCNH).EQ.0) IHTMC=0
              IW(KROW(KTPCH,IC)+JTPCIH)= IHTMC
              IW(KROW(KTPCH,IC)+JTPCNH)= ITABL(KTRCL,ICL,JTRCNH)
C
  635       CONTINUE
  650     CONTINUE
  700   CONTINUE
C
C++     Set the final length of the TMCL bank
C
        NDATA=LROWS(KTMCL)*LCOLS(KTMCL)+LMHLEN
        CALL AUBOS('TMCL',ISLOT,NDATA,KTMCL,IGARB)
C
        KTCLU=IW(KTCLU-1)
        GO TO 85
  800 CONTINUE
      GO TO 999
C
  998 CONTINUE
      JGARB=2
  999 CONTINUE
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK trefch
@


1.1.1.1
log
@import julia 300
@
text
@@
