head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.3
	jul305:1.3
	jul304_3:1.3
	jul304_2:1.3
	jul304_1:1.3
	jul304:1.3
	jul303_7:1.3
	jul303_6:1.3
	jul303_5:1.3
	jul303_4:1.3
	jul303_3:1.3
	jul303_2_mc1:1.3
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	97.03.06.09.55.24;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.46.05;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.19;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.20;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Tracking upgrade
@
text
@      SUBROUTINE TSCFIL(ICLUS,KTSCL,KTSPU)
C
C-----------------------------------------------------------------------
C! Fill subpulse and subcluster banks
C!
C!    Author:    R. Johnson   11-01-88
C!
C!    Modified:  D. Casper    05-06-96    Replace algorithm 1 with new code:
C!                                        same as #2, except first moment of
C!                                        pulse wrt the midpoint of the edges
C!                                        is used to correct the z value.
C!                                        Load the value of the first moment
C!                                        in an unused location of TSPU.
C!
C! Input:
C!     - ICLUS        /I     Cluster number in the bank KTCLU
C!     - KTSCL        /I     BOS index of the subcluster bank
C!     - KTSPU        /I     BOS index of the subpulse bank
C!
C! Called by TCLCOR
C!
C! Description
C! ===========
C! In this routine the information from the temporary workbanks ISCLUS
C! and ITSPUW is used to fill the subclusters for the current cluster
C! into the TSCL bank.  The TSPU bank is filled, and in doing so
C! the charge and time estimates for each subpulse are found using
C! the algorithms specified in ISCLUS.
C!
C!---------------------------------------------------------------------
#ifndef DOC 
#include "tspujj.h"
#include "tscljj.h"
C
#include "bcs.h"
#include "tparac.h"
#include "tclcow.h"
#include "tcluct.h"

      LOGICAL INIT/.TRUE./
C
#include "bmacro.h"
C
C---------------------------------------------------------------------
C
C++   Loop over all subclusters found for this cluster
C
      DO 500 ISC=1,LROWS(ISCLUS)
C
C++     Skip subclusters with only one subpulse
C
        IF (ITABL(ISCLUS,ISC,JICLNS).LT.2) GO TO 500
        IW(KTSCL+LMHROW)=IW(KTSCL+LMHROW)+1
        NSCL=IW(KTSCL+LMHROW)
        IW(KROW(KTSCL,NSCL)+JTSCNS)= ITABL(ISCLUS,ISC,JICLNS)
        IW(KROW(KTSCL,NSCL)+JTSCPO)= IW(KTSPU+LMHROW)
        IW(KROW(KTSCL,NSCL)+JTSCFP)= ITABL(ISCLUS,ISC,JICLPN)
        IW(KROW(KTSCL,NSCL)+JTSCNC)= 0
        IW(KROW(KTSCL,NSCL)+JTSCCO)= 0
        IQALG=ITABL(ISCLUS,ISC,JICLCA)
        ITALG=ITABL(ISCLUS,ISC,JICLTA)
        IW(KROW(KTSCL,NSCL)+JTSCAW)= 1000*IQALG + ITALG
        IW(KROW(KTSCL,NSCL)+JTSCQU)= ITABL(ISCLUS,ISC,JICLQF)
        RW(KROW(KTSCL,NSCL)+JTSCSP)= SQRT(RTABL(ISCLUS,ISC,JICLRW))
        RW(KROW(KTSCL,NSCL)+JTSCSB)= SQRT(RTABL(ISCLUS,ISC,JICLZW))
        RW(KROW(KTSCL,NSCL)+JTSCCR)= RTABL(ISCLUS,ISC,JICLCV)
     &         / RTABL(KTSCL,NSCL,JTSCSP) / RTABL(KTSCL,NSCL,JTSCSB)
        IW(KROW(KTSCL,NSCL)+JTSCCL)= ICLUS
C
C++     Loop over all subpulses in this subcluster
C
        ICHT=0
        DO 400 J=1,ITABL(ISCLUS,ISC,JICLNS)
          ISP= IW(ITPRTW+J+ITABL(ISCLUS,ISC,JICLOF))
          ICHT=ICHT + ITABL(ITSPUW,ISP,JSPWTC)
C
          IW(KTSPU+LMHROW)=IW(KTSPU+LMHROW)+1
          NSP=IW(KTSPU+LMHROW)
          IW(KROW(KTSPU,NSP)+JTSPTC)= ITABL(ITSPUW,ISP,JSPWTC)
          IW(KROW(KTSPU,NSP)+JTSPQF)= ITABL(ITSPUW,ISP,JSPWQF)
          IP=ITABL(ITSPUW,ISP,JSPWPU)
          IW(KROW(KTSPU,NSP)+JTSPPN)= ITABL(ITPADW,IP,JTPDTP)
          IW(KROW(KTSPU,NSP)+JTSPSC)= NSCL
C
C++       For bad subclusters, store some simple values for the
C++       time and charge estimates.  These values will not be
C++       useful for coordinate calculation.
C
          ITOFF= ITABL(ITSPUW,ISP,JSPWT0)-1
          IPOFF= ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)
          IF (ITABL(KTSCL,NSCL,JTSCQU).GE.100) THEN
            PHMAX=FLOAT(IW(IPOFF+ITABL(ITSPUW,ISP,JSPWPK)))
            T1= FLOAT(ITABL(ITSPUW,ISP,JSPWT0))
            T2= FLOAT(ITOFF+ITABL(ITSPUW,ISP,JSPWNS))
            TLEAD = T1
            TMAX= FLOAT(ITOFF+ITABL(ITSPUW,ISP,JSPWPK))
          ELSE
C
C++         Parabola algorithm for peak height and/or peak time
C
            IF (IQALG.EQ.1) THEN
              TOFF= FLOAT(ITOFF+ITABL(ITSPUW,ISP,JSPWPK))
              CALL TPARAB(TOFF,IW(IPOFF+ITABL(ITSPUW,ISP,JSPWPK)-1),
     &                                                TMAX,PHMAX)
            ELSEIF (IQALG.NE.1) THEN
              PHMAX=FLOAT(IW(IPOFF+ITABL(ITSPUW,ISP,JSPWPK)))
            ENDIF
C
C++         Interpolation of leading and trailing edges.  Time
C++         estimate is the average of the two interpolations.
C
            IF (ITALG.EQ.1 .OR. ITALG.EQ.2) THEN
C
C++           Threshold is a constant fraction of the average ph.
C
              THRSH=RTLCFT*FLOAT(ITABL(ITSPUW,ISP,JSPWTC))
     &                          / FLOAT(ITABL(ITSPUW,ISP,JSPWNS))
              IF (THRSH.LT.RTLCPT) THEN
                IS1=1
                IS2=ITABL(ITSPUW,ISP,JSPWNS)
                THRSH=RTLCPT
              ELSE
                IHRSH=INT(THRSH)
C
C++             Find the initial threshold crossing
C
                DO 76 IS1=1,ITABL(ITSPUW,ISP,JSPWNS)
                  IPHL2= IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)+IS1)
                  IF (IPHL2.GT.IHRSH) GO TO 77
   76           CONTINUE
   77           CONTINUE
C
C++             Find the final threshold crossing
C
                DO 86 IS2=ITABL(ITSPUW,ISP,JSPWNS),1,-1
                  IPHT2= IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)+IS2)
                  IF (IPHT2.GT.IHRSH) GO TO 87
   86           CONTINUE
   87           CONTINUE
              ENDIF
C
C++           Linearly interpolate to find the threshold crossings
C
              IF (IS1.EQ.1) THEN
                IF (ITABL(ITSPUW,ISP,JSPWOF)
     &             .GT. ITABL(ITPADW,IP,JTPDOF)) THEN
                  IPH1= IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF))
                ELSE
                  IPH1= 0
                ENDIF
              ELSE
                IPH1=IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)+IS1-1)
              ENDIF
              IF (IPHL2.EQ.IPH1) THEN
                T1=FLOAT(ITOFF+IS1)
              ELSE
                T1= FLOAT(ITOFF+IS1-1)
     &              + (THRSH-FLOAT(IPH1))/FLOAT(IPHL2-IPH1)
              ENDIF
              IF (IS2.EQ.ITABL(ITSPUW,ISP,JSPWNS)) THEN
                IPLST= ITABL(ITPADW,IP,JTPDOF)+ITABL(ITPADW,IP,JTPDNS)
                IS= ITABL(ITSPUW,ISP,JSPWOF)+ITABL(ITSPUW,ISP,JSPWNS)
                IF (IS.NE.IPLST) THEN
                  IPH1= IW(ITPDIW+IS+1)
                ELSE
                  IPH1= 0
                ENDIF
              ELSE
                IPH1=IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)+IS2+1)
              ENDIF
              IF (IPHT2.EQ.IPH1) THEN
                T2= FLOAT(ITOFF+IS2+1)
              ELSE
                T2= FLOAT(ITOFF+IS2+1)
     &              - (THRSH-FLOAT(IPH1))/FLOAT(IPHT2-IPH1)
              ENDIF
              TMAX= 0.5*(T1+T2)
              IF (ITALG.EQ.1) THEN
C
C++  Calculate first moment of pulse w.r.t. the midpoint of the edges
C
                NSAMP = ITABL(ITSPUW,ISP,JSPWNS)
                SUMT0 = 0.
                SUMT1 = 0.
                DO IS=1,NSAMP
                  IQSAMP = IW(ITPDIW+ITABL(ITSPUW,ISP,JSPWOF)+IS)
                  SUMT0 = SUMT0 + IQSAMP
                  SUMT1 = SUMT1 + IQSAMP*(ITOFF+IS-TMAX)
                ENDDO
                TLEAD = SUMT1/SUMT0
              ELSE
                TLEAD = T1
              ENDIF
            ELSE
C
C++           Weighted mean for the time estimate
C
              IF (ITALG.EQ.3) THEN
                TMAX= FLOAT(JFSTBK) + FLOAT(ITABL(ITSPUW,ISP,JSPWSZ))
     &                             / FLOAT(ITABL(ITSPUW,ISP,JSPWTC))
              ENDIF
              T1= FLOAT(ITABL(ITSPUW,ISP,JSPWT0))
              T2= FLOAT(ITOFF+ITABL(ITSPUW,ISP,JSPWNS))
              TLEAD = T1
            ENDIF
          ENDIF
          RW(KROW(KTSPU,NSP)+JTSPT1)= T1
          RW(KROW(KTSPU,NSP)+JTSPT2)= T2
          RW(KROW(KTSPU,NSP)+JTSPIT)= TLEAD
          RW(KROW(KTSPU,NSP)+JTSPPT)= TMAX
          RW(KROW(KTSPU,NSP)+JTSPPC)= PHMAX
  400   CONTINUE
C
        IW(KROW(KTSCL,NSCL)+JTSCTC)=ICHT
  500 CONTINUE
C
      RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d8 7
d31 3
a33 1
#ifndef DOC
d35 1
a36 3
#include "bcs.h"
#include "tspujj.h"
#include "tscljj.h"
d39 2
a40 2
C
C------------------------- Statement Function Definitions ------------
d95 1
d101 1
a101 1
            IF (IQALG.EQ.1 .OR. ITALG.EQ.1) THEN
d112 1
a112 1
            IF (ITALG.EQ.2) THEN
d178 16
d204 1
d209 1
a209 1
          RW(KROW(KTSPU,NSP)+JTSPIT)= T1
@


1.1
log
@Initial revision
@
text
@a0 1
*DK tscfil
@


1.1.1.1
log
@import julia 300
@
text
@@
