head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	99.10.27.12.27.56;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.47.50;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.29;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.30;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@For julia 310
@
text
@      SUBROUTINE UXSFIT(PARI,NHITS,XYZ,SIGXY,SIGZ,RSCAT,XCON,BFIEL,
     &                  NIT,CHISQ,NPAR,PARF,ERM2)
C--------------------------------------------------------------------*
C! Track helix fitter with multiple scattering                       *
C                                                                    *
C  Author:   M.E.Mermikides  2 April 1987                            *
C  Modified: D.Smith         991027  Double precision fixes for Linux
C                                                                    *
C   INPUT:                                                           *
C          PARI   = 1st estimate of track parameters                 *
C             (1) = Signed track radius in x-y plane                 *
C             (2) = Point of closest approach (d0)                   *
C             (3) = Azimuth at d0                                    *
C             (4) = Z coordinate at d0  (z0)                         *
C             (5) = Tan. of helix dip angle                          *
C             (6) = Scatt. angle                                     *
C           RSCAT = Radius of scattering layer                       *
C           NHITS = No of measured coordinates                       *
C           XYZ(NHITS) = (x,y,z) coordinates of measurements         *
C           SIGXY(NHITS) = (x,y) error of each hit                   *
C           SIGZ(NHITS) = z error of each hit                        *
C           RSCAT = Radius of equivalent m/s layer                   *
C           XCON = m/s constant = 0.015*sqrt(l), where l is          *
C                  the thickness of the scattering layer in          *
C                  radiation lengths                                 *
C           BFIEL = value of magnetic field in kG                    *
C                                                                    *
C   OUTPUT:                                                          *
C          NIT  = Number of iterations (<0 if fit failed)            *
C          CHISQ  = chisquared of fit                                *
C          NPAR = No. of parameters fitted                           *
C          PARF(NPAR) = fitted track parameters                      *
C                       (N.B. The number of degrees of freedom is    *
C                         given by 2*NHITS - NPAR)                   *
C          ERM2(NDIM) = error matrix in triangular form.             *
C                         Dimensionality NDIM = NPAR*(NPAR+1)/2      *
C                                                                    *
C                    k   do  phi0  z0  tdip theta                    *
C                   -----------------------------                    *
C                k | 1   2    4    7   11    16  |                   *
C               d0 |     3    5    8   12    17  |                   *
C             phi0 |          6    9   13    18  |                   *
C               z0 |              10   14    19  |                   *
C             tdip |                   15    20  |                   *
C            theta |                         21  |                   *
C                   -----------------------------                    *
C                                                                    *
C   Description:                                                     *
C   ===========                                                      *
C                                                                    *
C       The method is based on the formalism by D.H. Saxon           *
C   (NIM A234 (1985) 258-266), generalised to 3-dimensions for       *
C   use with the ALEPH TPC.   The procedure is to minimise the       *
C   deviations of points from the track helix. In the x-y plane      *
C   and in z, the distances are given by:                            *
C                                                                    *
C       d(xy) = 0.5*K*(r**2 - d0**2)                                 *
C               + x*sin(phi0) - y*cos(phi0) + Q*d0**2                *
C               - theta*(r - rs)   (for r > rs)                      *
C                                                                    *
C       d(z) = z - z0 - Q*tdip*delta*(1 - KQd0)/K                    *
C                                                                    *
C       delta = arcos{1-K**2*(r**2 - d0**2)/2(1- KQd0)}              *
C           r = sqrt(x**2 + y**2)                                    *
C                                                                    *
C   We form  chi**2 = Sum(d(xy)**2/err**2) + Sum(d(z)**2/erz**2)     *
C                            + (theta/theta0)**2                     *
C     (last term is operative only if there are at least 3 hits      *
C      before scattering radius, rs)                                 *
C   and derivatives with respect to the helix parameters v(i)        *
C                                                                    *
C       G(a) = d(chi**2)/dv(a)  = 2*SUM{d(i)*d'(a)/err(i)**2}        *
C                               + 2*theta/theta0**2 * d'(theta)      *
C                                                                    *
C       GG(a,b) = d2(chi**2)/dv(a)dv(b)                              *
C                                                                    *
C               =2*SUM{d(i)*d''(a,b) +d'(a)*d'(b)}                   *
C                  + 2*theta/theta0**2 * d''(theta)                  *
C                                                                    *
C      (d'(a) = d(d)/dv(a), d''(a,b) = d2(d)/dv(a)dv(b)              *
C      (d'(theta) = d(theta)/dv(a), d''(theta) = d(theta)/dv(a)dv(b) *
C                                                                    *
C   The iterative fit proceeds according to                          *
C                                                                    *
C          v(N+1) = v(N) - GG(-1)*G                                  *
C                                                                    *
C   and the error matrix at convergence is 2*GG(-1)                  *
C                                                                    *
C--------------------------------------------------------------------*
#ifndef DOC
#include "uxwork.h"
      DIMENSION PARI(6),XYZ(3,NHITS),SIGXY(NHITS),SIGZ(NHITS)
      DIMENSION PARF(6),ERM2(21)
C
      DIMENSION CUT(4)
      DOUBLE PRECISION CHISQO,CHISQN,DRES1,DRES2
      DOUBLE PRECISION STPMAX(6),HS,HS2
C Cuts and max. step sizes
      DATA NITMAX/10/
      DATA CUT/0.03, 0.01, 5.0, -0.03/
      DATA STPMAX/0.1D0, 0.1D0, 0.1D0, .2D0, 0.1D0, 0.1D0/
C Set up parameters
      CHARGE = SIGN(1.0, PARI(1))
      TRACK(1) = -CHARGE/(ABS(PARI(1)-PARI(2)))
      TRACK(2) = PARI(2)
      TRACK(3) = PARI(3)
      TRACK(4) = PARI(4)
      TRACK(5) = PARI(5)
      TRACK(6) = PARI(6)
C
C  Transfer hits to double precision work arays
C
      NSCAT = 0
      DO 100 IH = 1,NHITS
         XHIT(IH) = XYZ(1,IH)
         YHIT(IH) = XYZ(2,IH)
         ZHIT(IH) = XYZ(3,IH)
         RHIT(IH) = SQRT(XHIT(IH)**2 + YHIT(IH)**2)
         IF (RHIT(IH).LT.RSCAT) NSCAT = NSCAT + 1
         DSHIT(IH) = SIGXY(IH)
         DZHIT(IH) = SIGZ(IH)
  100 CONTINUE
C
      NPAR = 5
      IF (NSCAT.GT.3) NPAR = 6
      NDIM = NPAR*(NPAR+1)/2
      DO 5 I=1,NDIM
         ERM2(I) = -1.
    5 CONTINUE
C
C  Get number of degrees of freedom. Exit if there aren't enough points
C  (Each point has 2 contributions to chisq)
C
      CHISQO = 1.D 10
      NIT = 0
C
C  Start of iteration             <<----------------------------
C
  200 NIT = NIT + 1
C
C  Define chisq and derivative matrix
C
      CALL UXSMAT(NHITS,NPAR,RSCAT,XCON,BFIEL)
C
C  Inhibit steps in Z0, tanl (for when we are doing only circle fit)
C
C      G(4) = 0.
C      G(5) = 0.
C      DO 293 K=1,NPAR
C         DO 292 L=1,NPAR
C            IF(K.EQ.4.OR.K.EQ.5) GO TO 294
C            IF(L.NE.4.AND.L.NE.5) GO TO 292
C  294       IF(K.EQ.L) GG(K,L) = 1.
C            IF(K.NE.L) GG(K,L) = 0.
C  292    CONTINUE
C  293 CONTINUE
C
C  Invert matrix and compute correction vector for track parameters
C
      DO 21 J=1,MPAR
      DO 21 K=1,MPAR
         GGINV(K,J) = GG(K,J)
   21 CONTINUE
      CALL UMXINV(GGINV(1,1),MPAR,MPAR,NPAR,KFLG)
C
      IF (KFLG.NE.0) THEN
         NIT = -1
         GO TO 999
      ENDIF
      CHISQN = CHISQ8
      DO 410 K=1,NPAR
         XS(K) = 0D0
         DO 400 L=1,NPAR
            XS(K) = XS(K) - GGINV(K,L)*G(L)
  400    CONTINUE
         CHISQN = CHISQN + 0.5D0*G(K)*XS(K)
  410 CONTINUE
C
C  Test for convergence and adjust step size
C
      HS = 1D0
      DRES1 = CHISQO - CHISQ8
      DRES2 = CHISQ8 - CHISQN
      IF (DRES2.LT.CUT(4)) HS = 2D0
      IF (DRES2.GT.CHISQ8) THEN
         HS2 = DRES2/CHISQ8
         IF(HS.LT.HS2) HS = HS2
      ENDIF
C
      DO 420 K=1,NPAR
         HS2 = XS(K)/STPMAX(K)
         IF(HS2.LE.0D0) HS2 = - HS2
         IF(HS2.GT.HS) HS = HS2
  420 CONTINUE
      DO 430 K=1,NPAR
         XS(K) = XS(K)/HS
  430 CONTINUE
C
C  Fit has converged
C
      IF(DRES1.LT.CUT(1).AND.DRES1.GT.CUT(4)) THEN
         GO TO 500
C
C  Too many iterations
C
      ELSE IF(NIT.GE.NITMAX) THEN
         CHISQN = CHISQ8
         IF(CHISQ8.LT.CUT(3).OR.CUT(3).LE.0.0) THEN
            CHISQ8 = CHISQN
         ELSE
            NIT = - NITMAX
         ENDIF
         GO TO 500
      ELSE
C
C  Fit hasn't converged yet.  Update track parameters and go for
C  another iteration.
C
          DO 450 K=1,NPAR
             TRACK(K) = TRACK(K) + XS(K)
  450     CONTINUE
C                                     ----------------->>
          CHISQO = CHISQ8
          GO TO 200
C
      ENDIF
C
C   Save final track parameters and error matrix
C
  500 K = 0
      PARF(1) = -1D0/TRACK(1) +  CHARGE*TRACK(2)
      PARF(2) = TRACK(2)
      PARF(3) = TRACK(3)
      PARF(4) = TRACK(4)
      PARF(5) = TRACK(5)
      IF(NPAR.EQ.6) PARF(6) = TRACK(6)
      DO 710 I = 1,NPAR
         DO 700 J = 1,I
            K = K + 1
            ERM2(K) = 0.5D0*GG(I,J)
  700    CONTINUE
  710 CONTINUE
      CHISQ = CHISQ8
C
  999 RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d6 2
a7 1
C  Author: M.E.Mermikides    2 April 1987                            *
d101 1
a101 1
      DATA STPMAX/0.1, 0.1, 0.1, .2, 0.1, 0.1/
d172 1
a172 1
         XS(K) = 0.
d176 1
a176 1
         CHISQN = CHISQN + 0.5*G(K)*XS(K)
d181 1
a181 1
      HS = 1.0
d184 1
a184 1
      IF (DRES2.LT.CUT(4)) HS = 2.0
d192 1
a192 1
         IF(HS2.LE.0.) HS2 = - HS2
d231 1
a231 1
      PARF(1) = -1./TRACK(1) +  CHARGE*TRACK(2)
d240 1
a240 1
            ERM2(K) = 0.5*GG(I,J)
@


1.1
log
@Initial revision
@
text
@a0 1
*DK uxsfit
@


1.1.1.1
log
@import julia 300
@
text
@@
