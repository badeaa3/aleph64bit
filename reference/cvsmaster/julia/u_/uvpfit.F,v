head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	99.10.27.12.27.53;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.15.47.45;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.28;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.29;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@For julia 310
@
text
@      SUBROUTINE UVPFIT(NTRA,TRPAR,ERRX,ERRZ,NPAR,
     &                         NIT,NDF,CHISQ,VXP,ERRVX)
C--------------------------------------------------------------------*
C! 3-D vertex fitter                                                 *
C  Author:   M.E.Mermikides  27 May 1987                             *
C  Modified: D.Smith         991027  Double precision fixes for Linux
C                                                                    *
C   INPUT:                                                           *
C           NTRA = Number of tracks to be fitted                     *
C           TRPAR(6*NTRA) = Array of parameters of each track        *
C                            (rho,d0,phi0,zo,tanl,Theta)             *
C           ERRX(NTRA) = Errors on track deviation from vertex in    *
C                        (x,y) plane. (For tracks coming from near   *
C                        the origin this corresponds closely to the  *
C                        error on d0)                                *
C           ERRZ(NTRA) = Errors on track deviation from vertex in    *
C                        z plane. (For tracks coming from near       *
C                        the origin this corresponds closely to the  *
C                        error on z0)                                *
C           NPAR = No of parameters to be fitted (2 -> xy, 3 -> xyz) *
C                                                                    *
C   OUTPUT:                                                          *
C          NIT  = Number of iterations (<0 if fit failed)            *
C          CHISQ  = chisquared of fit                                *
C          NDF = number of degrees of freedom                        *
C          VXP(NPAR) = fitted vertex coordinates {x,y(,z)}           *
C          ERRVX(NDIM) = Error matrix (=Inverse covariance matrix)   *
C                 of fitted vertex position in triangular form:      *
C                {xx,xy,yy(,xz,yz.zz)};    (NDIM = NPAR*(NPAR+1)/2)  *
C                                                                    *
C      CHISQ IS CALCULATED, 1ST DERIVATIVES IN G(3), 2ND IN GG(3,3)  *
C                                                                    *
C   Description:                                                     *
C   ===========                                                      *
C                                                                    *
C       The method is based on the formalism by D.H. Saxon           *
C   (NIM A234 (1985) 258-266), generalised to 3-dimensions for       *
C   use with the ALEPH tracking detectors.   The procedure is to     *
C   minimise the deviations of the tracks from the common vertex     *
C   at the coordinates (A,B,C).                                      *
C                                                                    *
C       In the x-y plane and in z, the deviations of a track         *
C   from the vertex point (A,B,C) are given by:                      *
C                                                                    *
C       d(xy) = s - rho                                              *
C                                                                    *
C       d(z) = z - C - rho*tdip*delta                                *
C                                                                    *
C       where                                                        *
C          s =sqrt[(A-xc)**2 - (B-yc)**2]                            *
C          rho = radius of curvature of track circle                 *
C          tdip = tangent of track helix dip angle                   *
C          delta = 2*arcsin{sqrt[(xt-x0)**2 + (yt-y0)**2]/(2*rho)}   *
C          xt = xc +/- rho*(A-xc)/s                                  *
C          yt = yc +/- rho*(B-xc)/s                                  *
C          x0,y0 = coordinates at point of closest approach of track *
C                  to origin (d0)                                    *
C                                                                    *
C    Fitting is done using a matrix inversion method on the vector   *
C    (A,B,C)                                                         *
C                                                                    *
C   Chisq = d(xy)**2/SIGX**2 + d(z)**2/SIGZ**2                       *
C                                                                    *
C--------------------------------------------------------------------*
#ifndef DOC
C
#include "uvpwrk.h"
      DIMENSION TRPAR(6*NTRA),ERRX(NTRA),ERRZ(NTRA),VXP(3),ERRVX(6)
C
      DOUBLE PRECISION DRES1,DRES2,CUT(4)
      DOUBLE PRECISION D0,PHI0,PHIC, STPMAX,STEP,ST
C
C
      PARAMETER (PI=3.141592653589, PIBY2=PI/2.)
C
      DATA CUT/0.03D0,0.01D0,0D0,-0.03D0/
      DATA NITMAX/10/
      DATA STPMAX/2D0/
C
      VXP(1) = 0.0001
      VXP(2) = 0.0001
      VXP(3) = 0.0001
      NDIM = NPAR*(NPAR+1)/2
      DO 50 I=1,NDIM
         ERRVX(I) = 0.
   50 CONTINUE
C
C Starting values for vertex position (A,B,C)
C
      XV(1) = 0.0001D0
      XV(2) = 0.0001D0
      XV(3) = 0.0001D0
      NTK = MIN(NTRA,MXTRA)
C No of degrees of freedom
      NDF = (NPAR-1)*NTK - NPAR
C
C Loop over tracks to get centre, radius and errors
C
      DO 100 I = 1,NTK
         IND = (I-1)*6
         D0 = TRPAR(IND+2)
         PHI0 = TRPAR(IND+3)
         Q(I) = SIGN(1.,TRPAR(IND+1))
         RADI(I) = ABS(TRPAR(IND+1))
         PHIC = PHI0 - Q(I)*DBLE(PIBY2)
         CPHC(I) = DCOS(PHIC)
         SPHC(I) = DSIN(PHIC)
C Coordinates of circle centre (xc(i),yc(i))
         XYI(1,I) = (RADI(I) - D0)*CPHC(I)
         XYI(2,I) = (RADI(I) - D0)*SPHC(I)
C Coordinates at D0
         X0(I) = - D0*CPHC(I)
         Y0(I) = - D0*SPHC(I)
         Z0(I) = TRPAR(IND+4)
         TDIP(I) = TRPAR(IND + 5)
C Errors
         SIGX(I) = ERRX(I)
         SIGZ(I) = ERRZ(I)
  100 CONTINUE
C
      CHISQO = 1.D10
      NIT = 0
C
C  Start of iteration       <-------------------------------------
  200 NIT = NIT + 1
C
C Compute derivatives and matrices
C
      CALL UVPMAT(NTRA,NPAR)
C
      DO 11 J=1,3
      DO 11 K=1,3
         GGINV(K,J)= GG(K,J)
   11 CONTINUE
      CALL UMXINV(GGINV(1,1),3,3,NPAR,KFLG)
      IF (KFLG.NE.0) THEN
         NIT = -1
         GO TO 999
      ENDIF
C
C  CHISQO = Chisq of previous iteration
C  CHISQ8 = Current value of chi squared
C  CHISQN = Updated chisq using current corrections
C
      CHISQN = CHISQ8
      DO 410 K=1,NPAR
         XS(K) = 0D0
         DO 400 L=1,NPAR
            XS(K) = XS(K) - GGINV(K,L)*G(L)
  400    CONTINUE
         CHISQN = CHISQN + 0.5D0*G(K)*XS(K)
  410 CONTINUE
C
C  Test for convergence and adjust step size
C
      DRES1 = CHISQO - CHISQ8
      DRES2 = CHISQ8 - CHISQN
      STEP = 1D0
      IF(DRES2.LT.CUT(4)) STEP=0.5D0
C Step cut
      IF(DRES2.GE.CHISQ8) STEP = CHISQ8/DRES2
      DO 414 K = 1,NPAR
         ST = XS(K)*STEP
         IF(K.EQ.3) ST = ST * 0.25D0
         IF(ST.LE.0D0) ST = -ST
         IF(ST.GE.STPMAX) STEP = STEP*STPMAX/ST
  414 CONTINUE
      IF(STEP.NE.1D0) THEN
         DO 412 K = 1,3
            XS(K) = XS(K)*STEP
  412    CONTINUE
      ENDIF
C
C Convergence test 1:  Change in chisq within given limits
C
      IF(DRES1.LT.CUT(1).AND.DRES1.GT.CUT(4)) GOTO 500
C
C Update parameter vector
C
      DO 450 K = 1,NPAR
         XV(K) = XV(K) + XS(K)
  450 CONTINUE
C
C Convergence test 2:  Chisq correction for full step below given limit
C
      IF(DRES2.LT.CUT(2).AND.STEP.EQ.1D0) THEN
         CHISQ8 = CHISQN
         GO TO 500
      ENDIF
C
      CHISQO = CHISQ8
C
C Do another iteration   ------------------------------->
C
      IF(NIT.LT.NITMAX) GOTO 200
C
C Stop after NITMAX iterations, keep best chisq
C
      IF(CHISQ8.LT.CUT(3).OR.CUT(3).LE.0D0) CHISQ8 = CHISQN
C
C   Save final parameters and error matrix
C
  500 VXP(1) = XV(1)
      VXP(2) = XV(2)
      VXP(3) = XV(3)
      CHISQ = CHISQ8
      ERRVX(1) = 0.5D0*GG(1,1)
      ERRVX(2) = 0.5D0*GG(1,2)
      ERRVX(3) = 0.5D0*GG(2,2)
      IF (NPAR.EQ.3) THEN
         ERRVX(4) = 0.5D0*GG(3,1)
         ERRVX(5) = 0.5D0*GG(3,2)
         ERRVX(6) = 0.5D0*GG(3,3)
      ENDIF
C
  999 RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d5 2
a6 1
C  Author: M.E.Mermikides    27 May 1987                             *
d76 1
a76 1
      DATA CUT/0.03,0.01,0.,-0.03/
d78 1
a78 1
      DATA STPMAX/2./
d90 3
a92 3
      XV(1) = 0.0001
      XV(2) = 0.0001
      XV(3) = 0.0001
d105 1
a105 1
         PHIC = PHI0 - Q(I)*PIBY2
d147 1
a147 1
         XS(K) = 0.
d151 1
a151 1
         CHISQN = CHISQN + 0.5*G(K)*XS(K)
d158 2
a159 2
      STEP = 1.
      IF(DRES2.LT.CUT(4)) STEP=0.5
d164 2
a165 2
         IF(K.EQ.3) ST = ST * 0.25
         IF(ST.LE.0.0) ST = -ST
d168 1
a168 1
      IF(STEP.NE.1.0) THEN
d186 1
a186 1
      IF(DRES2.LT.CUT(2).AND.STEP.EQ.1.0) THEN
d199 1
a199 1
      IF(CHISQ8.LT.CUT(3).OR.CUT(3).LE.0.0) CHISQ8 = CHISQN
d207 3
a209 3
      ERRVX(1) = 0.5*GG(1,1)
      ERRVX(2) = 0.5*GG(1,2)
      ERRVX(3) = 0.5*GG(2,2)
d211 3
a213 3
         ERRVX(4) = 0.5*GG(3,1)
         ERRVX(5) = 0.5*GG(3,2)
         ERRVX(6) = 0.5*GG(3,3)
@


1.1
log
@Initial revision
@
text
@a0 1
*DK uvpfit
@


1.1.1.1
log
@import julia 300
@
text
@@
