head	1.4;
access;
symbols
	jul313_3:1.4
	jul313_2:1.4
	jul313_1:1.4
	jul313:1.4
	jul312_1:1.4
	jul312:1.4
	jul311:1.4
	jul310_1:1.4
	jul310:1.4
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.4
	jul307_4:1.4
	jul307_3:1.4
	jul307_2:1.4
	jul307_1:1.4
	jul307:1.4
	jul306_3:1.4
	jul306_2:1.4
	jul306_1:1.4
	jul306:1.4
	jul305_4:1.4
	jul305_3:1.4
	jul305_2:1.4
	jul305_1:1.4
	jul305:1.4
	jul304_3:1.4
	jul304_2:1.4
	jul304_1:1.4
	jul304:1.4
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.4
	jul285:1.4
	jul284_1:1.4
	jul284:1.4
	jul283_1:1.4
	jul283:1.4
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.4
date	96.09.10.15.00.18;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.48.03;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.56;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.30;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.31;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replace explicit BOS macro decln. by bmacrod.h
@
text
@      SUBROUTINE VCBFIT (BP, BPVEC, BPERR)
C----------------------------------------------------------------------
C!  - Close form beamspot fit
C!
C!
C!   Inputs:
C!        - BP(2)           R   Input Beam Position
C!
C!   Outputs:
C!        - BPVEC(2)        R   Output Beam Position
C!        _ BPERR(2)        R   Output Beam Position Error
C!
C!   Author   :- D. Brown               8-APR-1993
C!
C!   Modified: Steve Wasserbaech, April 1995
C!   Take beam size from ALLR instead of data statement
C!   Modified: Pere Comas, July 1995
C!   Protect RSINV against an error return
C!   Modified: SW, 18 October 1995
C!   Take beam size from VBSCOM; allow customized chunks; return
C!   zeros in case of failure.
C?
C!======================================================================
#ifndef DOC
C     IMPLICIT NONE
      SAVE SIGX0L, SIGY0L
#include "bcs.h"
#include "rlunit.h"
#include "vbscom.h"
C
      REAL BP(2), BPVEC(3), BPERR(3)
C
      INTEGER ICOR, JCOR, NDOF, IBUF, IP
      INTEGER ITRK, IERR, JCHOP
      REAL CP, SP, SIGMA2, D0FIT2, D0, PHI, SD02, CHISQ, ALPHA
      REAL ARRAY(3,3), VEC(3)
      REAL SIGX0L, SIGY0L
      DATA SIGX0L / -1. /
      DATA SIGY0L / -1. /
C
#include "bmacrod.h"
#include "bmacro.h"
C----------------------------------------------------------------------
C
C  Zero the arrays:
C
      CALL VZERO(BPVEC,3)
      CALL VZERO(BPERR,3)
      ALPHA = 0.
      CALL VZERO(VEC,3)
      CALL VZERO(ARRAY,9)
C
C  Print a message if the beam size has changed:
C
      IF ((SIGX0 .NE. SIGX0L) .OR. (SIGY0 .NE. SIGY0L)) THEN
        WRITE (LOUTRL,'(A,2F8.4)')
     >       ' Vcbfit>  Using beam size parameters', SIGX0, SIGY0
        SIGX0L = SIGX0
        SIGY0L = SIGY0
      ENDIF
C
C  Loop over the tracks, removing outlyers:
C
      NDOF = 0
      DO IBUF=1,NBSBUF
        IP = IBSTRK(IBUF)
        DO ITRK=1,LROWS(IP)
          IF (NCHOP .EQ. 0) THEN
            JCHOP = 0
          ELSE
            JCHOP = MOD(ITABL(IP,ITRK,4)-1,NCHOP) + 1
          ENDIF
          IF (ICHOP .EQ. JCHOP) THEN
            D0 = RTABL(IP,ITRK,1)
            PHI = RTABL(IP,ITRK,2)
            SD02 = AMAX1(RTABL(IP,ITRK,3), S2MIN)
            SP = SIN(PHI)
            CP = COS(PHI)
            SIGMA2 = (SIGX0*SP)**2 + (SIGY0*CP)**2 + SD02
            D0FIT2 = (D0 - (BP(1)*SP - BP(2)*CP))**2
            IF (D0FIT2 .LE. BSD0SCUT*SIGMA2) THEN
C
C  Increment the sums:
C
              ALPHA = ALPHA + D0**2/SIGMA2
              ARRAY(1,1) = ARRAY(1,1) + SP**2/SIGMA2
              ARRAY(2,2) = ARRAY(2,2) + CP**2/SIGMA2
              ARRAY(3,3) = ARRAY(3,3) + 1./SIGMA2
              ARRAY(1,2) = ARRAY(1,2) - SP*CP/SIGMA2
              ARRAY(1,3) = ARRAY(1,3) + SP/SIGMA2
              ARRAY(2,3) = ARRAY(2,3) - CP/SIGMA2
C
              VEC(1) = VEC(1) + SP*D0/SIGMA2
              VEC(2) = VEC(2) - CP*D0/SIGMA2
              VEC(3) = VEC(3) +    D0/SIGMA2
C
              NDOF = NDOF + 1
            ENDIF
          ENDIF
        ENDDO
      ENDDO
C
C  Symmetrize the array:
C
      ARRAY(2,1) = ARRAY(1,2)
      ARRAY(3,1) = ARRAY(1,3)
      ARRAY(3,2) = ARRAY(2,3)
C
C  Invert the matrix:
C
      CALL RSINV(3,ARRAY,3,IERR)
      IF (IERR .NE. 0) GO TO 100
C
C  Solve for the beamspot and chisquared
C
      CHISQ = ALPHA
      DO ICOR=1,3
        BPVEC(ICOR) = 0.
        DO JCOR=1,3
          BPVEC(ICOR) = BPVEC(ICOR) + ARRAY(ICOR,JCOR)*VEC(JCOR)
          CHISQ = CHISQ - ARRAY(ICOR,JCOR)*VEC(JCOR)*VEC(ICOR)
        ENDDO
      ENDDO
C
C  Get the errors:
C
      DO ICOR=1,3
        BPERR(ICOR) = SQRT(MAX(ARRAY(ICOR,ICOR),0.))
      ENDDO
C
C  Done:
C
 100  CONTINUE
      RETURN
      END
#endif
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d41 1
a41 4
C     BOS macro declarations:
      INTEGER ID,NRBOS,L,KI,KI1,KI2
      INTEGER LCOLS,LROWS,KNEXT,KROW,LFRWRD,LFRROW,ITABL
      REAL RTABL
@


1.2
log
@julia version 279
@
text
@a0 1
*DK vcbfit
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
      SUBROUTINE VCBFIT(BP,BPVEC,BPERR)
d16 7
d26 2
d29 1
a30 1
      DIMENSION BP(2), BPVEC(3), BPERR(3)
d32 1
a32 1
C  Local variables
d34 12
a45 5
      INTEGER ICOR,JCOR
      INTEGER IBSBUF,ITRK,IERR
      REAL CP,SP,SIGMA2,D0FIT2
      REAL XJ/.011/,YJ/.0005/ ! beamspot size
      DIMENSION ARRAY(3,3),VEC(3)
d49 1
a49 1
C  Zero the arrays
d51 14
a64 7
      ALPHA = 0.0
      DO ICOR=1,3
        VEC(ICOR) = 0.0
        DO JCOR=1,3
          ARRAY(ICOR,JCOR) = 0.0
        END DO
      END DO
d66 1
a66 1
C  Loop over the tracks, removing outlyers
d69 1
a69 1
      DO IBUF = 1 , NBSBUF
d71 35
a105 28
        DO ITRK = 1 , LROWS(IP)
          D0    = RTABL(IP,ITRK,1)
          PHI   = RTABL(IP,ITRK,2)
          SD02  = RTABL(IP,ITRK,3)
          SP = SIN(PHI)
          CP = COS(PHI)
          SIGMA2 = (XJ*SP)**2 + (YJ*CP)**2 + SD02
          D0FIT2 = (D0 -( BP(1)*SP - BP(2)*CP) )**2
          IF(D0FIT2 .LE. BSD0SCUT*SIGMA2)THEN
C
C  Increment the sums
C
            ALPHA = ALPHA + D0**2/SIGMA2
            ARRAY(1,1) = ARRAY(1,1) + SP**2/SIGMA2
            ARRAY(2,2) = ARRAY(2,2) + CP**2/SIGMA2
            ARRAY(3,3) = ARRAY(3,3) + 1./SIGMA2
            ARRAY(1,2) = ARRAY(1,2) - SP*CP/SIGMA2
            ARRAY(1,3) = ARRAY(1,3) + SP/SIGMA2
            ARRAY(2,3) = ARRAY(2,3) - CP/SIGMA2
C
            VEC(1) = VEC(1) + SP*D0/SIGMA2
            VEC(2) = VEC(2) - CP*D0/SIGMA2
            VEC(3) = VEC(3) +    D0/SIGMA2
C
            NDOF=NDOF+1
          END IF
        END DO
      END DO
d107 1
a107 1
C  Symmetrize the array
d113 1
a113 1
C  Invert the matrix
d116 1
d122 1
a122 1
        BPVEC(ICOR) = 0.0
d126 2
a127 2
        END DO
      END DO
d129 1
a129 1
C  Get the errors
d133 1
a133 1
      END DO
d135 1
a135 1
C  Done
d137 1
@


1.1.1.1
log
@import julia 300
@
text
@@
