head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.3
	jul305:1.3
	jul304_3:1.3
	jul304_2:1.3
	jul304_1:1.3
	jul304:1.3
	jul303_7:1.3
	jul303_6:1.3
	jul303_5:1.3
	jul303_4:1.3
	jul303_3:1.3
	jul303_2_mc1:1.3
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.03.12.15.48.29;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.21.16;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.34;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.35;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE VDMPIN
C----------------------------------------------------------------------
C!  - Unpack VDET mapping and module banks used in hit reconstruction
C!
C
C  This subroutine is responsible for reading in the database files
C  which contain the module maping information of the ALEPH silicon
C  vertex detector, and translating these into a form usefull in the
C  reconstruction.  D. Brown, 10-4-90
C  Modified March 1995 D. Brown, A. Bonissent, M. Thulasidas
C                 reorganise and debug,
C                 use geom. package for Vdet 91 or 95
C  Modified June 1995 A. Bonissent
C                 VMGN was changed to contain also first and last
C                 channel in a region
C                 would work only with DAF > 198
C
C?
C!======================================================================
#ifndef DOC
#include "vrecon.h"
#include "vmgnjj.h"
#include "vmpcjj.h"
#include "vpecjj.h"
#include "vganjj.h"
C
C  Global includes
C
#include "bcs.h"
C
C  Functions
C
      INTEGER NBANK
      INTEGER NAMIND
      INTEGER VNSCRM, VNELRM, VDYEAR
C
C  Local variables
C
      INTEGER NAVMRE,NAVMGN,NVMRE,NVREG,NVMPC,NVPEC,NVGAN,IVMRE
      INTEGER NAVMPC
      INTEGER IROMD,IRONX,IVMPC,IVMGN,NEWMD
      INTEGER KVMRE,KVMPC,KVMGN
      INTEGER NWRD,NVMGN,MROW
      INTEGER IADDR,ILAY,IWFF,IFAC,IVIEW
      INTEGER ICHAN,NCHAN,LCHAN
      INTEGER KVREG,KVPEC,KVGAN

      LOGICAL FIRST
      DATA FIRST /.TRUE./
#include "bmacro.h"
      IF(FIRST)THEN
         FIRST=.FALSE.
         NAVMPC = NAMIND('VMPC')
         NAVMGN = NAMIND('VMGN')
      ENDIF
C
        CALL VUNADD(IADDR,NCHAN,ILAY,IWFF,IFAC,IVIEW,ICHAN)
        CALL VUNADD(IADDR,NCHAN,ILAY,IWFF,IFAC,IVIEW,ICHAN)
        CALL VUNADD(IADDR,NCHAN,ILAY,IWFF,IFAC,IVIEW,ICHAN)
C Build VMRE bank, depending on year
C
      IF(VDYEAR().EQ.91)THEN
        CALL VMKR90
      ELSE
        CALL VMKR95
      ENDIF
C
C  Find the banks
C
      KVMPC = IW(NAVMPC)
      KVMGN = IW(NAVMGN)
      IF( KVMPC .EQ. 0 )THEN
        CALL RERROR('VDMPIN',1,'Cant find database banks')
        GOTO 999
      END IF
C
C  Peculiar channel bank creation
C
      NVMPC = LROWS(KVMPC)
      IF(NVMPC.NE.0)THEN
        IADDR = ITABL(KVMPC,1,JVMPCA)
        CALL VUNADD(IADDR,NCHAN,ILAY,IWFF,IFAC,IVIEW,ICHAN)
        CALL VAENWA(IROMD,ILAY,IWFF,IFAC,IVIEW)
        NEWMD=1
      ENDIF
      DO IVMPC=1,NVMPC
        IF(NEWMD.EQ.1)THEN
          KVPEC = NBANK('VPEC',IROMD,LMHLEN+NVMPC*LVPECA)
          IF(KVPEC .EQ. 0)THEN
            CALL RERROR('VDMPIN',2,'Out of BOS space')
            GOTO 999
          END IF
          IW(KVPEC+LMHCOL) = LVPECA
          IW(KVPEC+LMHROW) = 0
          NEWMD=0
        END IF
        IW(KNEXT(KVPEC)+JVPECA) = ICHAN+1
        IW(KNEXT(KVPEC)+JVPESF) = ITABL(KVMPC,IVMPC,JVMPSF)
        IW(KVPEC+LMHROW) = LROWS(KVPEC) + 1
        IF(IVMPC.LT.NVMPC)THEN
          IADDR = ITABL(KVMPC,IVMPC+1,JVMPCA)
          CALL VUNADD(IADDR,NCHAN,ILAY,IWFF,IFAC,IVIEW,ICHAN)
          CALL VAENWA(IRONX,ILAY,IWFF,IFAC,IVIEW)
        ENDIF
        IF(IRONX.NE.IROMD.OR.IVMPC.EQ.NVMPC)THEN
          NVPEC = LROWS(KVPEC)
          KVPEC = NBANK('VPEC',IROMD,LMHLEN+NVPEC*LVPECA)
          IROMD=IRONX
          NEWMD=1
        END IF
      END DO
C
C  The same for the module gains.  The format of the separate
C  banks is however slightly different from the original
C
      IF(MCEVNT) GOTO 999
      IF(KVMGN .EQ. 0)THEN
        CALL RERROR('VDMPIN',1,'Cant find database banks')
        GOTO 999
      END IF
      NVMGN = LROWS(KVMGN)
      IF(NVMGN.NE.0)THEN
        IROMD = ITABL(KVMGN,1,JVMGWA)
        CALL VADEWA(IROMD,ILAY,IWFF,IFAC,IVIEW)
        LCHAN = ITABL(KVMGN,1,JVMGLC)+1
        IF(LCHAN.GT.VNELRM(IVIEW))LCHAN = VNELRM(IVIEW)
        ICHAN = ITABL(KVMGN,1,JVMGFC)+1
        IF(ICHAN.LT.1)ICHAN = 1
        NEWMD=1
      ENDIF
      DO IVMGN=1,NVMGN
        IF(NEWMD.EQ.1)THEN
            KVGAN = NBANK('VGAN',IROMD,LMHLEN+NVMGN*LVGANA)
            IF(KVGAN .EQ. 0)THEN
              CALL RERROR('VDMPIN',2,'Out of BOS space')
              GOTO 999
            END IF
            IW(KVGAN+LMHCOL) = LVGANA
            IW(KVGAN+LMHROW) = 0
            NEWMD=0
        END IF
        IW(KNEXT(KVGAN)+JVGAFS) = ICHAN
        IW(KNEXT(KVGAN)+JVGALS) = LCHAN
        RW(KNEXT(KVGAN)+JVGAWG) = RTABL(KVMGN,IVMGN,JVMGWG)
        IW(KVGAN+LMHROW) = LROWS(KVGAN) + 1
        IF(IVMGN.LT.NVMGN)THEN
          IRONX = ITABL(KVMGN,IVMGN+1,JVMGWA)
          CALL VADEWA(IRONX,ILAY,IWFF,IFAC,IVIEW)
          LCHAN = ITABL(KVMGN,IVMGN+1,JVMGLC)+1
          IF(LCHAN.GT.VNELRM(IVIEW))LCHAN = VNELRM(IVIEW)
          ICHAN = ITABL(KVMGN,IVMGN+1,JVMGFC)+1
          IF(ICHAN.LT.1)ICHAN = 1
        ENDIF
        IF(IRONX.NE.IROMD.OR.IVMGN.EQ.NVMGN)THEN
          NVGAN = LROWS(KVGAN)
          KVGAN = NBANK('VGAN',IROMD,LMHLEN+NVGAN*LVGANA)
          IROMD=IRONX
          NEWMD=1
        END IF
      ENDDO
C
C  Cleanup the BOS array- this is necessary, as a lot of named-bank
C  space has been moved around.
C
      CALL BDROP(IW,'VMPCVMGN')
      CALL BGARB(IW)
C
 999  CONTINUE
      RETURN
      END
#endif
@


1.2
log
@julia version 279
@
text
@a0 1
*DK vdmpin
@


1.1
log
@Initial revision
@
text
@d11 7
d22 1
a22 2
#include "implicit.h"
#include "vdimpl.h"
d25 2
a26 1
#include "vmrejj.h"
a30 4
#include "vdflgs.h"
#include "vdnamc.h"
#include "vrecon.h"
#include "vdmods.h"
d35 2
d40 11
a50 15
      INTEGER IVMRE,IVMPC,IVMGN
      INTEGER NWRD,NREG,NPEC,NSTRP
      INTEGER IADDR,ILAY,IWAF,IPHI,IVIEW,ISTRP
      INTEGER IREG,IPEC,MREG,MPEC,MIND
      INTEGER BNUMB,MVREG,MVPEC
      INTEGER NMOD,IMOD
C
C  Variables for inline functions
C
#include "vdbmcr.h"
      INTEGER J,K
      LOGICAL SAMWF
C
C  Inline functions
C
d52 16
a67 12
      SAMWF(J,K) = IAND(J,VMADDR).EQ.IAND(K,VMADDR)
C
C  Start of code
C
C  Get strip co-ordinate center from geometry, and
C  the strip pitch; this is an ALEPHLIB routine
C
      CALL VSTRIP(WSCENT,IBFLAG)
C
C  If MC data, this is all that's needed
C
      IF(MCEVNT)RETURN
d71 3
a73 4
      IVMRE = IW(NAVMRE)
      IVMPC = IW(NAVMPC)
      IVMGN = IW(NAVMGN)
      IF(IVMRE .EQ. 0 .OR. IVMPC .EQ. 0 .OR. IVMGN .EQ. 0)THEN
d75 1
a75 15
        RETURN
      END IF
C
C  Regions first- loop over the big bank and break it down into
C  separate banks for each wafer.
C
      NWRD = LCOLS(IVMRE)
      NREG = LROWS(IVMRE)
      IADDR = ITABL(IVMRE,1,JVMRFC)
      CALL VADDUN(IADDR,NSTRP,ILAY,IWAF,IPHI,IVIEW,ISTRP)
      CALL VAENWA(BNUMB,ILAY,IWAF,IPHI,IVIEW)
      MVREG = NBANK('VREG',BNUMB,LMHLEN+NREG*NWRD)
      IF(MVREG .EQ. 0)THEN
        CALL RERROR('VDMPIN',2,'Out of BOS space')
        RETURN
a76 3
      IW(MVREG+LMHCOL) = NWRD
      IW(MVREG+LMHROW) = 0
      DO 20 IREG=1,NREG
d78 1
a78 1
C  Check if this is a new wafer
d80 11
a90 15
        IF(.NOT.SAMWF(IADDR,ITABL(IVMRE,IREG,JVMRFC)))THEN
C
C  Re-make the bank size of the previous wafer
C
          MREG = LROWS(MVREG)
          MVREG = NBANK('VREG',BNUMB,LMHLEN+MREG*NWRD)
C
C  Make a bank for the new wafer- maximum possible size
C  Decode the address
C
          IADDR = ITABL(IVMRE,IREG,JVMRFC)
          CALL VADDUN(IADDR,NSTRP,ILAY,IWAF,IPHI,IVIEW,ISTRP)
          CALL VAENWA(BNUMB,ILAY,IWAF,IPHI,IVIEW)
          MVREG = NBANK('VREG',BNUMB,LMHLEN+NREG*NWRD)
          IF(MVREG .EQ. 0)THEN
d92 1
a92 1
            RETURN
d94 17
a110 2
          IW(MVREG+LMHCOL) = NWRD
          IW(MVREG+LMHROW) = 0
d112 1
d114 2
a115 2
C  Pack in the new region, masking as needed to remove the higher-order
C  strip address.
d117 4
a120 23
        IW(KNEXT(MVREG)+JVMRFC) = IAND(ITABL(IVMRE,IREG,JVMRFC),VMSTRP)
        IW(KNEXT(MVREG)+JVMRLC) = IAND(ITABL(IVMRE,IREG,JVMRLC),VMSTRP)
        IW(KNEXT(MVREG)+JVMRCS) = ITABL(IVMRE,IREG,JVMRCS)
        IW(KNEXT(MVREG)+JVMRRF) = ITABL(IVMRE,IREG,JVMRRF)
        IW(MVREG+LMHROW) = IW(MVREG+LMHROW) + 1
   20 CONTINUE
C
C  Remake the size of the last bank
C
      MREG = LROWS(MVREG)
      MVREG = NBANK('VREG',BNUMB,LMHLEN+MREG*NWRD)
C
C  Peculiar strip bank creation
C
      NWRD = LCOLS(IVMPC)
      NPEC = LROWS(IVMPC)
      IADDR = ITABL(IVMPC,1,JVMPCA)
      CALL VADDUN(IADDR,NSTRP,ILAY,IWAF,IPHI,IVIEW,ISTRP)
      CALL VAENWA(BNUMB,ILAY,IWAF,IPHI,IVIEW)
      MVPEC = NBANK('VPEC',BNUMB,LMHLEN+NPEC*NWRD)
      IF(MVPEC .EQ. 0)THEN
        CALL RERROR('VDMPIN',2,'Out of BOS space')
        RETURN
d122 38
a159 22
      IW(MVPEC+LMHCOL) = NWRD
      IW(MVPEC+LMHROW) = 0
      DO 21 IPEC=1,NPEC
        IF(.NOT.SAMWF(IADDR,ITABL(IVMPC,IPEC,JVMPCA)))THEN
C
C  Re-make the bank size of the previous wafer
C
          MPEC = LROWS(MVPEC)
          MVPEC = NBANK('VPEC',BNUMB,LMHLEN+MPEC*NWRD)
C
C  Make a bank for the new wafer- maximum possible size
C
          IADDR = ITABL(IVMPC,IPEC,JVMPCA)
          CALL VADDUN(IADDR,NSTRP,ILAY,IWAF,IPHI,IVIEW,ISTRP)
          CALL VAENWA(BNUMB,ILAY,IWAF,IPHI,IVIEW)
          MVPEC = NBANK('VPEC',BNUMB,LMHLEN+NPEC*NWRD)
          IF(MVPEC .EQ. 0)THEN
            CALL RERROR('VDMPIN',2,'Out of BOS space')
            RETURN
          END IF
          IW(MVPEC+LMHCOL) = NWRD
          IW(MVPEC+LMHROW) = 0
d161 1
a161 22
C
C  Pack in the new strip, masking as needed to remove the higher-order
C  strip address.
C
        IW(KNEXT(MVPEC)+JVMPCA) = IAND(ITABL(IVMPC,IPEC,JVMPCA),VMSTRP)
        IW(KNEXT(MVPEC)+JVMPSF) = ITABL(IVMPC,IPEC,JVMPSF)
        IW(MVPEC+LMHROW) = IW(MVPEC+LMHROW) + 1
   21 CONTINUE
C
C  Remake the size of the last bank
C
      MPEC = LROWS(MVPEC)
      MVPEC = NBANK('VPEC',BNUMB,LMHLEN+MPEC*NWRD)
C
C  Module gain
C
      NMOD = LROWS(IVMGN)
      DO 23 IMOD=1,NMOD
        IADDR = ITABL(IVMGN,IMOD,JVMGWA)
        CALL VADEWA(IADDR,ILAY,IWAF,IPHI,IVIEW)
        WGAINS(ILAY,IWAF,IPHI,IVIEW) = RTABL(IVMGN,IMOD,JVMGWG)
 23   CONTINUE
d166 1
a166 1
      CALL BDROP(IW,'VMREVMPCVMGN')
d169 1
@


1.1.1.1
log
@import julia 300
@
text
@@
