head	1.4;
access;
symbols
	jul313_3:1.4
	jul313_2:1.4
	jul313_1:1.4
	jul313:1.4
	jul312_1:1.4
	jul312:1.4
	jul311:1.4
	jul310_1:1.4
	jul310:1.4
	jul309_1:1.4
	jul309:1.4
	jul308_6:1.4
	jul308_5:1.4
	jul308_4:1.4
	jul308_3:1.4
	jul308_2:1.4
	jul308_1:1.4
	jul308:1.4
	jul307_4:1.4
	jul307_3:1.4
	jul307_2:1.4
	jul307_1:1.4
	jul307:1.4
	jul306_3:1.4
	jul306_2:1.4
	jul306_1:1.4
	jul306:1.4
	jul305_4:1.4
	jul305_3:1.4
	jul305_2:1.4
	jul305_1:1.4
	jul305:1.4
	jul304_3:1.4
	jul304_2:1.4
	jul304_1:1.4
	jul304:1.4
	jul303_7:1.4
	jul303_6:1.4
	jul303_5:1.4
	jul303_4:1.4
	jul303_3:1.4
	jul303_2_mc1:1.4
	jul303_2:1.4
	jul303_1_mc1:1.4
	jul303_1:1.4
	jul303_v:1.4
	jul303:1.4
	jul302_6:1.4
	jul302_5:1.4
	jul302_4:1.4
	jul302_3:1.4
	jul302_2:1.4
	jul302_1:1.4
	jul302:1.4
	jul285_1:1.4
	jul285:1.4
	jul284_1:1.4
	jul284:1.4
	jul283_1:1.4
	jul283:1.4
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.3
	jul281_2:1.3
	jul281_1:1.3
	jul281:1.3
	jul280_1:1.3
	jul280:1.3
	jul279:1.2
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.4
date	96.09.10.15.00.13;	author cattanem;	state Exp;
branches;
next	1.3;

1.3
date	96.03.12.15.47.58;	author flr;	state Exp;
branches;
next	1.2;

1.2
date	95.11.29.17.20.48;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.20.30;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.20.31;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replace explicit BOS macro decln. by bmacrod.h
@
text
@      SUBROUTINE VBSINR
C----------------------------------------------------------------------
C!  - Initialise Beam Spot position computation for the run
C!
C!   Author   :- E. Lancon             29-APR-1993
C!   Modified :- E. Lancon             24-JUN-1994
C!        Create working bank only once
C!   Modified: Steve Wasserbaech, April 1995
C!   Always clear the work banks (number of rows = 0)
C!   Get ALLR from daf
C!   Modified: SW, 18 October 1995
C!   Switch to ALRP and VBPC; introduce VBSP card.
C?
C!======================================================================
#ifndef DOC
C     IMPLICIT NONE
      SAVE FIRST, WORK, NAALRP, NAVBPC, NAVBSP
#include "alpbjj.h"
#include "alrpjj.h"
#include "bcs.h"
#include "rcurnt.h"
#include "vbscom.h"
C
      INTEGER IBUF, IGT, LEN, KALPB, IGARB, LUNDB
      INTEGER NAVBPC, KVBPC, NVBPC
      INTEGER NAVBSP, KVBSP
      INTEGER NAALRP, KALRP, NALRP, IALRP
      INTEGER NLINK, INTCHA, NAMIND, GTSTUP, JUNIDB, MDARD
      LOGICAL FIRST, WORK
      LOGICAL ALLEP1
      DATA FIRST / .TRUE. /
      DATA WORK / .FALSE. /
C
#include "bmacrod.h"
#include "bmacro.h"
C----------------------------------------------------------------------
C
C   Initialize a few things:
C
      IVBPC = -1
      ICHOP = 0
      NCHOP = 0
      XBMC = 0.
      YBMC = 0.
      SIGX0 = 1.
      SIGY0 = 1.
C
      IF (FIRST) THEN
        FIRST = .FALSE.
        NAALRP = NAMIND('ALRP')
        NAVBPC = NAMIND('VBPC')
        NAVBSP = NAMIND('VBSP')
      ENDIF
C
C   Do nothing for MC unless VBSP card is present:
C
      KVBSP = IW(NAVBSP)
      IF (FMCRUN .AND. (KVBSP .LE. 0)) GO TO 999
C
C    Create buffering work banks:
C
      IF (.NOT. WORK) THEN
        WORK = .TRUE.
        DO IBUF=1,NBSBUF
          IBSTRK(IBUF) = 0
        ENDDO
        DO IBUF=1,NBSBUF
          CALL WBANK(IW, IBSTRK(IBUF), LMHLEN+500*LBPTRK, *820)
          IW(IBSTRK(IBUF)+LMHCOL) = LBPTRK
          IW(IBSTRK(IBUF)+LMHROW) = 0
          IW(IBSTRK(IBUF)-3) = INTCHA('WAPB')
        ENDDO
      ENDIF
C
C    Clear the work banks:
C
      DO IBUF=1,NBSBUF
        IW(IBSTRK(IBUF)+LMHROW) = 0
      ENDDO
C
C    Get constants:
C
      LUNDB = JUNIDB(0)
      IGT = MDARD(IW,LUNDB,'VBPC',0)
      IF (IGT .LE. 0) GO TO 800
      KVBPC = IW(NAVBPC)
      IF (KVBPC .LE. 0) GO TO 800
      NVBPC = LROWS(KVBPC)
      IGT = MDARD(IW,LUNDB,'ALRP',0)
      IF (IGT .LE. 0) GO TO 830
      KALRP = IW(NAALRP)
      IF (KALRP .LE. 0) GO TO 830
      NALRP = LROWS(KALRP)
C
C  Get the row number in VBPC = LEP energy regime number:
C
      IF (ALLEP1(IRUNRC)) THEN
        IVBPC = 1
      ELSE
        IVBPC = 2
      ENDIF
      IF (IVBPC .GT. NVBPC) GO TO 840
C
C  Get the row number in ALRP = BE setup code:
C
      IALRP = GTSTUP('BE',IRUNRC)
      IF ((IALRP .LT. 1) .OR. (IALRP .GT. NALRP)) GO TO 850
C
C  Get the nominal beam size:
C
      SIGX0 = RTABL(KALRP,IALRP,JALRXS)
      SIGY0 = RTABL(KALRP,IALRP,JALRYS)
C
C    Create ALPB bank for this run:
C
      CALL BDROP(IW,'ALPB')
      LEN = LALPBA + LMHLEN
      CALL AUBOS('ALPB',IRUNRC,LEN,KALPB,IGARB)
      IF (IGARB .EQ. 2) GO TO 810
      IW(KALPB+LMHCOL) = LALPBA
      IW(KALPB+LMHROW) = 1
      IW(KROW(KALPB,1)+JALPFE) = 1
C
      IBSFEV = 1
      IBSBUF = 1
      JBSBUF = 2
C
C   If a fixed number of chunks are desired (for special studies),
C   the number may be given as a token on the VBSP card.  If no token
C   is given, we make one big chunk.  This feature is not used in
C   normal julia operations.  (NCHOP = 0 means normal mode.)
C
      IF (KVBSP .GT. 0) THEN
        NCHOP = 1
        IF (IW(KVBSP) .GT. 0) THEN
          NCHOP = IW(KVBSP+1)
          IF (NCHOP .LT. 1) GO TO 860
        ENDIF
      ENDIF
C
      GO TO 999
C
C   Errors
C
  800 CALL RERROR ('VBSINR', -1, 'VBPC bank not found on daf!')
      GO TO 999
C
  810 CALL RERROR ('VBSINR', -2, 'No space to book ALPB!')
      GO TO 999
C
  820 CALL RERROR ('VBSINR', -3, 'No space to book work bank!')
      GO TO 999
C
  830 CALL RERROR ('VBSINR', -4, 'ALRP bank not found on daf!')
      GO TO 999
C
  840 CALL RERROR ('VBSINR', -5, 'VBPC row number out of range!')
      GO TO 999
C
  850 CALL RERROR ('VBSINR', -6, 'ALRP row number out of range!')
      GO TO 999
C
  860 CALL RERROR ('VBSINR', -7, 'Invalid token on VBSP card!')
      GO TO 999
C
  999 RETURN
      END
#endif
@


1.3
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@d34 1
a34 4
C     BOS macro declarations:
      INTEGER ID,NRBOS,L,KI,KI1,KI2
      INTEGER LCOLS,LROWS,KNEXT,KROW,LFRWRD,LFRROW,ITABL
      REAL RTABL
@


1.2
log
@julia version 279
@
text
@a0 1
*DK vbsinr
@


1.1
log
@Initial revision
@
text
@d9 5
a13 1
C!
d17 4
a22 2
#include "alcbjj.h"
#include "alpbjj.h"
d24 8
a31 3
      INTEGER  ALGTDB, GTSTUP, NLINK, MDARD, AGETDB
      LOGICAL FIRST
      SAVE FIRST
d33 6
d42 1
a42 1
C?  Do Nothing For MC
d44 7
a50 1
      IF (FMCRUN) GOTO 999
d52 1
a52 1
      IF( FIRST ) THEN
d54 15
a68 1
        DO IBUF = 1 , NBSBUF
d71 7
d79 1
a79 1
C?   Create buffering working banks
d81 24
a104 6
        DO IBUF = 1 , NBSBUF
          CALL WBANK (IW, IBSTRK(IBUF), LMHLEN+1000*LBPTRK, *820)
          IW (IBSTRK(IBUF)+LMHCOL) = LBPTRK
          IW (IBSTRK(IBUF)+LMHROW) = 0
          IW (IBSTRK(IBUF)-3)      = INTCHA('WAPB')
        ENDDO
d106 6
d113 1
d115 2
a116 2
C?   Get Run Number and constants for this run
C?   and  create ALPB bank for this run
d118 4
a121 5
      IVS  = GTSTUP ('VD',IRUNRC)
      IGT  = AGETDB('ALCB',-IVS)
      IF (IGT.EQ.0) GOTO 800
      CALL BDROP (IW,'ALPB')
      LEN  = LALPBA + LMHLEN
d123 1
a123 1
      IF ( IGARB.EQ.2 ) GOTO 810
d126 1
a126 1
      IW(KROW(KALPB,1)+JALPFE)   = 1
d132 25
a156 1
      GOTO 999
d158 2
a159 1
C?  Errors
d161 2
a162 2
  800 CALL RERROR ('VBSINR', -1, 'ALCB bank NOT FOUND on DAf!!')
      GOTO 999
d164 2
a165 2
  810 CALL RERROR ('VBSINR', -2, 'No Space to book ALPB !!')
      GOTO 999
d167 2
a168 2
  820 CALL RERROR ('VBSINR', -3, 'No Space to book Working Bank')
      GOTO 999
@


1.1.1.1
log
@import julia 300
@
text
@@
