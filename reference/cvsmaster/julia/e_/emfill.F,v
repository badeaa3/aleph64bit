head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.14.56.34;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.59;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.00;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@      SUBROUTINE EMFILL(IEMSK,EMIN,DCOST,ITRAC)
C=======================================================================
C!    Fills EMSK bank with minimum ionizing particle
C-
C-    Authors : M.N. Minard , M. Pepe       26/02/89
C-
C-    Input: IEMSK      track index
C-           EMIN (5)   estimated min ionizing energy per stack
C-           DCOST(3,5) direction cosines of extrapolated track/stack
C-           ITRAC      number & addresses of crossed cells
C
C?
C!======================================================================
#ifndef DOC
#include "alcons.h"
#include "ecnmsk.h"
#include "esdajj.h"
#include "hsdajj.h"
#include "ectejj.h"
#include "hctejj.h"
#include "bcs.h"
      DIMENSION EMIN(5),DCOST(3,5),ITRAC(5,5),EVIS(5)
      DIMENSION ECUS(4,5) ,SECUS(5) , EVISC(4,5)
      CHARACTER*4 NAME,CHAINT
      DATA NAECTE/0/
#include "bmacro.h"
C
C     Set pointers
C
      IF (NAECTE.EQ.0) THEN
        NAECTE = NAMIND ('ECTE')
        NAHCTE = NAMIND ('HCTE')
        NAEMSK = NAMIND ('EMSK')
      ENDIF
      KECTE = IW(NAECTE)
      KHCTE = IW(NAHCTE)
      NECTE = 0
      IF (KECTE.NE.0) NECTE = LROWS (KECTE)
      NHCTE = 0
      IF (KHCTE.NE.0) NHCTE = LROWS(KHCTE)
      KEMSK = IW(NAEMSK)
      JEMSK = KROW(KEMSK,IEMSK)
C
C
C-    Initialize counter
C
      CALL VZERO ( EVIS ,5 )
      CALL VZERO ( SECUS,5 )
      CALL VZERO ( ECUS ,20)
      CALL VZERO ( EVISC,20)
C
C-    loop on ESDA
C
      KESDA = IW (NAESDA)
      NESDA = 0
      IF (KESDA.GT.0) THEN
        NESDA = LROWS(KESDA)
        DO 10 IESDA = 1,NESDA
          JESDA  = KROW(KESDA,IESDA)
          IK     = IW (JESDA+JESDDK)
          NC     = ITRAC(1,IK)
          IF ( NC.NE.0 ) THEN
            EN     = RW ( JESDA+JESDME)
            ITOW   = IW ( JESDA+JESDIO)
C
C-      Loop on cells crossed by track
C
            DO  5 I = 1,NC
              IF (ITRAC(1+I,IK).EQ.ITOW) THEN
C
C-           Store energy available along track..
C-        ...per stack
C
                EVIS (IK  ) = EVIS(IK)+EN
C
C-        ...per cell
C
                EVISC(I,IK) = EN
C
C-           Loop on ECTE , calculate available energy
C            if ECTE does not exist then NECTE=0
                DO 4 IECTE = 1,NECTE
                  IF ( ITOW.EQ.ITABL(KECTE,IECTE,JECTCA) )THEN
C
C-              Energy already used per cell..
C
                    ECUS (I,IK) = RTABL (KECTE,IECTE,JECTCE)
C
C-           ...per stack
C
                    SECUS(IK  ) = SECUS(IK)+ECUS(I,IK)
                  ENDIF
    4           CONTINUE
              ENDIF
    5       CONTINUE
          ENDIF
   10   CONTINUE
      ENDIF
C
C-    loop on HSDA
C
      KHSDA = IW (NAHSDA)
      NHSDA = 0
      IF (KHSDA.GT.0) THEN
        NHSDA = LROWS(KHSDA)
        DO 30 IHSDA = 1,NHSDA
          JHSDA  = KROW(KHSDA,IHSDA)
          IK     = IW (JHSDA+JHSDSN)
          NC     = ITRAC(1,IK+3)
          IF ( NC.NE.0 ) THEN
            IPHI   = IW ( JHSDA+JHSDPI )
            ITET   = IW ( JHSDA+JHSDTI )
            EN     = RW ( JHSDA+JHSDDE )
            ITOW   = (ITET-1) * 256 + (IPHI-1) * 2 + IK - 1
C
C-      Loop on cell crossed by track
C
            DO 25 I = 1,NC
              IF (ITRAC(1+I,IK+3).EQ.ITOW) THEN
C
C-
                EVIS(IK+3) = EVIS(IK+3)+EN
                EVISC (I,IK+3) = EN
C
C-           Loop on HCTE , calculate available energy
C            if HCTE does not exist NHCTE=0
                DO 24 IHCTE = 1,NHCTE
                  IF ( ITOW.EQ.ITABL(KHCTE,IHCTE,JHCTCA)) THEN
                    ECUS(I,IK+3) = RTABL (KHCTE,IHCTE,JHCTCE)
                    SECUS(IK+3)  = SECUS(IK+3)+ECUS(I,IK+3)
                  ENDIF
   24           CONTINUE
              ENDIF
   25       CONTINUE
          ENDIF
   30   CONTINUE
      ENDIF
      IF(NESDA.EQ.0.AND.NHSDA.EQ.0) GO TO 50
C
C
C-       Now estimate energy to subtract
C
      DO 40 IK=1,5
C
C-       Available energy per stack
C
        ELEFT = EVIS(IK)-SECUS(IK)
        IF(ELEFT.LT.0.01) GO TO 40
C
C-       Compare left over energy to min. ionizing expected deposition
C
        EREM = EMIN (IK)
        IF (ELEFT.LT.EMIN(IK)) EREM = ELEFT
C
C-       Calculate average per cell to be removed
C
        IF(ITRAC(1,IK).GT.0) THEN
          ERCEL = EREM/ITRAC(1,IK)
        ENDIF
C
C-       Loop on track elements
C
        NC = ITRAC(1,IK)
        IF(NC.EQ.0) GO TO 40
        EREMS = EREM
C
        DO 35 IC = 1,NC
          IF ( EVISC(IC,IK).LT.0.001 ) GO TO 35
          ELEFC = EVISC(IC,IK)-ECUS(IC,IK)
          IF (ELEFC.GT.ERCEL) ELEFC=ERCEL
          EREMS = EREMS-ELEFC
C
C-       Fill corresponding ECTE , HCTE BANK
C
C-       Update corresponding HCTE , ECTE cell
C
          KKCTE = IW(NAECTE)
          IF(IK.GT.3) KKCTE = IW(NAHCTE)
          IF (ECUS(IC,IK) .LE. 0.) THEN
            IF (LFRROW(KKCTE).LT.1) THEN
              LENN=IW(KKCTE)+LCOLS(KKCTE)
              NAME = CHAINT (IW(KKCTE-3))
              CALL AUBOS(NAME,0,LENN,KKCTE,IGARB)
              IF(IGARB.EQ.2) GOTO 50
              KECTE = IW(NAECTE)
              KHCTE = IW(NAHCTE)
            ENDIF
            JKCTE = KNEXT(KKCTE)
            IW(JKCTE+ JHCTCA) = ITRAC(1+IC,IK)
            RW(JKCTE+ JHCTCE) = ELEFC
            IW(KKCTE+ LMHROW) = IW(KKCTE+LMHROW)+1
          ELSE
            JKCTE = 0
            DO 33 IKCTE = 1,LROWS(KKCTE)
              IF(ITABL(KKCTE,IKCTE,JHCTCA).EQ.ITRAC(IC+1,IK)) THEN
                JKCTE = KROW(KKCTE,IKCTE)
                RW(JKCTE+JHCTCE) = RW(JKCTE+JHCTCE)+ELEFC
              ENDIF
   33       CONTINUE
          ENDIF
   35   CONTINUE
C-
C
C     Fill energy
C
        IND = (IK-1)*3
        RW ( JEMSK + IND +1 ) = EREM-EREMS
C
C-    Calculate angles
C
        RST = SQRT(DCOST(1,IK)**2+DCOST(2,IK)**2)
        RW(JEMSK+IND+2) = ATAN2(RST,DCOST(3,IK))
        DPHI = ATAN2(DCOST(2,IK),DCOST(1,IK))
        IF ( DPHI.GT.TWOPI) DPHI = DPHI-TWOPI
        IF ( DPHI.LT. 0.)   DPHI = DPHI+TWOPI
        RW ( JEMSK+IND+3) = DPHI
   40 CONTINUE
   50 CONTINUE
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK emfill
@


1.1.1.1
log
@import julia 300
@
text
@@
