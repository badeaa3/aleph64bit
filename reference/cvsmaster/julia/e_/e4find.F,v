head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.14.46.20;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.34;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.17.35;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@      SUBROUTINE E4FIND(IERR)
C----------------------------------------------------------------------
C!  - R2 ESTIMATOR CALCULATION : GIVE 3X4 CENTERED STOREYS
C!
C!    AUTHOR  : D. PALLIN
C!    MODIFIED:
C!
C!
C?
C!======================================================================
#ifndef DOC
#include "e4com0.h"
#include "e4com1.h"
#include "rlunit.h"
#include "rflags.h"
#include "rparac.h"
      DIMENSION APOIN(3),PARAM(6)
      INTEGER EFNDMD,EFNDSC
      EXTERNAL EFNDMD,EFNDSC,FRACST
C
      IERR=0
      CALL VZERO(XTOW,NETRA*NTOWMX*3)
      DO 1 I=1,3
      A(I)=0
      B(I)=0
      C(I)=0
 1    D(I)=0
CXX ENTRY POINT DETERMINATION   (PARAM(1..3)) AND COS DIRECTORS
CXX OF THE EXTRAPOLED LINE AT THIS POINT(PARAM(4..6))
C
      CALL E4XYZ0(PARAM,IERR)
      IF ( IERR.NE.0) THEN
           IERR = - IERR
           RETURN
      ENDIF
C
CXX WE REACH CALO IN STACK 1(ALWAYS!) SO XTOW(ITRCL,1,I) CORRESPOND
CXX TO THE ENTRY POINT IN CALO
      NTOW(ITRCL)=1
      KSINT=1
      INDI=1
      DO 2 I=1,3
      DROITE(ITRCL,I)=PARAM(I+3)
      XTOW(ITRCL,NTOW(ITRCL),I)=PARAM(I)
 2    CONTINUE
      IF(DROITE(ITRCL,1).EQ.0.)THEN
           IERR=1
           CALL RERROR('E4FIND',-1,'DROITE(ITRCL,1)=0.!!!')
           RETURN
      ENDIF
C
CXX EQUATIONS PARAMETERS  A B C D (1,2)
C   EQ DTE (Y-Y0)/CY=(Z-Z0)/CZ=(X-X0)/CX ==> 2 EQ: F(X,Y)=0 G(Z,X)=0
      A(1)=DROITE(ITRCL,2)/DROITE(ITRCL,1)
      B(1)=-1
      C(1)=0
      D(1)=XTOW(ITRCL,1,2)-A(1)*XTOW(ITRCL,1,1)
      A(2)=DROITE(ITRCL,3)/DROITE(ITRCL,1)
      B(2)=0
      C(2)=-1
      D(2)=XTOW(ITRCL,1,3)-A(2)*XTOW(ITRCL,1,1)
C
CXX   WHAT IS THE NEXT PLAN TO INTERSECT ?
CXX   INDI=1 WE SHOULD INTERSECT WITH LAST PLAN  STACK KSINT
CXX   INDI=2 WE SHOULD INTERSECT WITH FIRST PLAN STACK KSINT
CXX   INDI=3 OVERLAP ZONE(WE STOP AT THE END OF BARREL OR START
CXX          AT THE ENTRANCE IN EC
CXX   INDI=4 NO MORE INTERSECTION WITH STACKS CALO
C
 40   IF(INDI.NE.3)THEN
        KSINT=KSINT+(INDI-1)
        IF(KSINT.GT.3)THEN
                    INDI=4
                    GOTO 30
                    ENDIF
        DO 3 I=1,3
 3      APOIN(I)=XTOW(ITRCL,NTOW(ITRCL),I)
        ISUB=EFNDSC(APOIN)
        IMOD=EFNDMD(ISUB,APOIN)
      ELSE
C       WE JUMP (!) FROM BARREL TO ENDCAP
        KSINT=1
        INDI=2
        ISUB=ISUB2
      ENDIF
      SK=FLOAT(KSINT)+FRACST(KSINT,INDI)
C
      JFIRST=0
 10   CONTINUE
      IF(IGOT.EQ.3)THEN
C       CORR 20/07/90 FIRST PLAN OUTSIDE BARREL
C       WE JUMP (!) FROM BARREL TO ENDCAP
        KSINT=1
        INDI=2
        ISUB=ISUB2
        SK=FLOAT(KSINT)+FRACST(KSINT,INDI)
      ENDIF
      JFIRST=JFIRST+1
      IF(JFIRST.GT.100)THEN
        IERR=1
        RETURN
      ENDIF
      A(3)=0
      B(3)=0
      C(3)=0
      D(3)=0
CXX WE FIND THE EQ OF THE CONSIDERED PLAN= EITHER ENTRY, OUTER PLAN OF
CXX STACK KSINT, OR EDGE PLANOF BARREL IF NECESSAIRY
      IF(INDI.NE.3)THEN
                   CALL E4GTPL(A(3),B(3),C(3),D(3),ISUB,IMOD,SK)
                   ELSE
                   CALL E4GTBR(A(3),B(3),C(3),D(3))
                   ENDIF
CXX WE INTERSECT  PLAN WITH STRAIGHT LINE
      CALL E4RES3(A,B,C,D,XI,YI,ZI,IERROR)
      IF(JDBDRF(JULEC).GT.8)
     &WRITE(LDEBRL,*)'XI YI ZI IERR',XI,YI,ZI,IERROR
CXX WE CHECK IF WE ARE OUT OF CONSIDERED VOLUME
CXX IF OK WE GO TO NEXT PLAN
CXX IF NOT WE INTERSECT WITH  PLAN OF THIS NEW VOLUME
CXX IF OVERLAP REGION WE INTERSECT WITH THE EDGE PLAN
CXX IF ENDCAP REGION  SPECAL TEST WHEN TRACK REACH TOP PLAN OF EC(E4FNEC
C
      CALL E4TSTL(IGOT)
      IF(JDBDRF(JULEC).GT.8)
     &WRITE(LDEBRL,*)'IGOT',IGOT
      GOTO(10,20,20)IGOT
C
 20   IF(ISUB.NE.2)CALL E4FNEC
      NTOW(ITRCL)=NTOW(ITRCL)+1
      XTOW(ITRCL,NTOW(ITRCL),1)=XI
      XTOW(ITRCL,NTOW(ITRCL),2)=YI
      XTOW(ITRCL,NTOW(ITRCL),3)=ZI
      IF(IGOT.EQ.3)THEN
        NTOW(ITRCL)=NTOW(ITRCL)+1
        XTOW(ITRCL,NTOW(ITRCL),1)=XI
        XTOW(ITRCL,NTOW(ITRCL),2)=YI
        XTOW(ITRCL,NTOW(ITRCL),3)=ZI
      ENDIF
C
      IF(INDI.NE.4)GOTO 40
 30   CALL E4FDIJ
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK e4find
@


1.1.1.1
log
@import julia 300
@
text
@@
