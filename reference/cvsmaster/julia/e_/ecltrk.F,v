head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.14.50.02;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.45;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.17.46;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@      SUBROUTINE ECLTRK(IER)
C
C***********************************************************************
C!ASSOCIATE CLUSTERS TO TRACKS                                         *
C!                                                                     *
C!  AUTHOR   : J.P. ALBANESE 860615                                    *
C!  MODIFIED : A. BONISSENT  861108                                    *
C!                                                                     *
C!                                                                     *
C!  BANKS :                                                            *
C!    INPUT   : NONE                                                   *
C!    OUTPUT  : EFET                                                   *
C!    CREATED : NONE                                                   *
C!                                                                     *
C! PERFORM ASSOCIATION BETWEEN TPC_TRACKS AND EC_CLUSTERS;             *
C!                      ACTIONS>>>                                     *
C!  GET TRACKS                                                         *
C!  LOOP ON TRACKS                                                     *
C!    INITIALIZE TRACK FOR EXTRAPOLATION                               *
C!    LOOP ON EXTRAPOLATION STEPS                                      *
C!       EXTRAPOLATE TRACK TO NEXT POINT (CALL EHLIX)                  *
C!       FIND STOREY IN WICH POINTS LAY (CALL ECDIGI)                  *
C!       FIND CLUSTERS NEARBY WITH AN ALGORITHM SIMILAR TO CLUSTERING  *
C!                    (CALL NEIGHB)                                    *
C!    ENDLOOP                                                          *
C    UPDATE TRACK-CLUSTER RELATIONSHIP (EINSRL)                        *
C!  ENDDOLOOP                                                          *
C1                                                                     *
C!                                                                     *
C!       IER = return code ( 0 if normal)                              *
C!                                                                     *
C***********************************************************************
#ifndef DOC
C
      REAL  XXX(8),XXXM(8)
#include "etp1jj.h"
#include "bcs.h"
#include "ectcom.h"
#include "rparac.h"
#include "ecnamc.h"
#include "bmacro.h"
      IER=0
C
C?   INITIALIZE TRACK-CLUSTER RELATION
C?
      CALL EINIRL(IER)
      IF(IER.NE.0)GO TO 998
C
C
C?   GET TPC TRACKS (LAST POINT)
C?
      CALL EGTTKS(NTRAK,IER)
      IF(IER.NE.0)GO TO 998
C
C?  LOOP ON TRACKS
C?
      DO 60 IDTPC=1,NTRAK
       IEXTR=1
C?
C?  SAY THAT WE HAVE NEVER BEEN IN THE OVERLAP REGION FOR THIS TRACK
C?
      IDEAD=0
C?
C?  INITIALISE TRACK FOR EXTRAPOLATION
C?
      CALL EINITK(IDTPC,IFLG2,XXX)
C?
C?  KEEEP COORDINATES OF TPC EXIT POINT
C?
      DO 61 IDATA=1,8
   61 XXXM(IDATA)=XXX(IDATA)
      IF (IFLG2.EQ.0)GO TO 60
C
C   INITIALISE STEP SIZE
C
         STEP=STPKEC
         CALL EINHLX(STEP,1,XXX)
C
         IFLAG=0
         ISTLD=0
C
         DRUN=0.
   30    CALL EHLIX(XXX)
         DRUN=DRUN+STEP
C
C? Stop a track which spirals for more than 2 m
C
         IF(DRUN.GT.200.)GO TO 60
C
C? For low momentum tracks, be more severe : 50 cm
C
         IF(XXX(7).LT.0.5.AND.DRUN.GT.50.)GO TO 60
         IFLPR=IFLAG
C?
C?      ECDIGI, WILL FIND THE STOREY IN WHICH WE ARE
C?
         CALL ECDIGI(XXX,IFLAG,ISTAD,IROSE)
C
C?  IF POINT IN ACTIVE REGION THEN
C
      IF(IFLAG.EQ.2)THEN
C?
C?     IF SAME STOREY, EXIT (ALREADY DONE
C?
         IF(ISTAD.NE.ISTLD) THEN
C
            ISTLD=ISTAD
C
C?          FIND NEARBY CLUSTERS
C?
            CALL ENIGHB(ISTAD,IROSE,IDTPC)
         ENDIF
C
C?  ELSEIF CURRENT POINT IN BARREL-ENDCAP DEAD REGION
C?          FOR THE FIRST TIME THEN
C?     IF PREVIOUS POINT WAS BEFORE ECAL,THEN
C?       SAY THAT WE HAVE BEEN IN THE OVERLAP REGION
C?       LOOP 51
C?         DIVIDE STEP BY 2,
C?         REINITIALISE HELIX
C?       LOOP 50
C?         MAKE ONE STEP
C?         FIND WHERE NEW POINT IS
C?       IF BEFORE ECAL, GO TO LOOP 51
C?       ELSEIF IN DEAD REGION (OVERLAP) THEN
C?         IF STEP LARGE ENOUGH, THEN
C?           GO TO LOOP 50
C?         ELSE
C?           RESET STEP
C?           REINITIALISE HELIX TO PRESENT POINT
C?         ENDIF
C?       ELSEIF IN ACTIVE REGION
C?         FIND NEIGHBOURS
C?         RESET STEP
C?         REINITIALISE HELIX TO PRESENT POINT
C?       ENDIF
C?     ENDIF
C?  ENDIF
C
      ELSEIF(IFLAG.EQ.1.AND.IDEAD.EQ.0)THEN
         IF(IFLPR.EQ.0)THEN
            IDEAD=1
   50       STEP=STEP*0.5
            CALL EINHLX(STEP,1,XXXM)
   51       CALL EHLIX(XXX)
            CALL ECDIGI(XXX,IFLAG,ISTAD,IROSE)
            IF(IFLAG.EQ.0)THEN
               GO TO 51
            ELSEIF(IFLAG.EQ.1)THEN
               IF(STEP.GT.STMNEC)GO TO 50
               STEP=STPKEC
               CALL EINHLX(STEP,1,XXX)
            ELSE
               CALL ENIGHB(ISTAD,IROSE,IDTPC)
               STEP=STPKEC
               CALL EINHLX(STEP,1,XXX)
            ENDIF
         ENDIF
      ENDIF
C
C?- FIND NEXT POINT EXCEPT IF WE ARE OUTSIDE OF ECAL
C?
       IF(IFLAG.EQ.4) GO TO 70
C
C?  STOP IF PARTICLE RETURNS INSIDE THE CENTRAL DEAD VOLUME
C
       IF(IFLAG.EQ.0.AND.IFLPR.EQ.2) THEN
                IEXTR=0
                GO TO 70
       ENDIF
      GO TO 30
   70 CONTINUE
C
C?  ELSE (IE OUTSIDE ECAL), GO TO NEXT TRACK
C?
C?
C?  FILL LAST POINT IN BANK EFET OF EC EXIT
      KEFET=IW(NAEFET)
      KTRAK=KROW(KEFET,IDTPC)
      DO 40 IDATA=1,6
      RW(KTRAK+IDATA)=XXX(IDATA)
   40 CONTINUE
       IW(KTRAK+JETPEF)=IEXTR
C? NEXT TRACK
   60 CONTINUE
C?
C?     TERMINATE THE RELATION
C?
      CALL ECLORL
  999 CONTINUE
      RETURN
  998 CONTINUE
      IER=1
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK ecltrk
@


1.1.1.1
log
@import julia 300
@
text
@@
