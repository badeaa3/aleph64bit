head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.3
	jul305:1.3
	jul304_3:1.3
	jul304_2:1.3
	jul304_1:1.3
	jul304:1.3
	jul303_7:1.3
	jul303_6:1.3
	jul303_5:1.3
	jul303_4:1.3
	jul303_3:1.3
	jul303_2_mc1:1.3
	jul303_2:1.3
	jul303_1_mc1:1.3
	jul303_1:1.3
	jul303_v:1.3
	jul303:1.3
	jul302_6:1.3
	jul302_5:1.3
	jul302_4:1.3
	jul302_3:1.3
	jul302_2:1.3
	jul302_1:1.3
	jul302:1.3
	jul285_1:1.3
	jul285:1.3
	jul284_1:1.3
	jul284:1.3
	jul283_1:1.3
	jul283:1.3
	jul282_1:1.3
	jul282:1.3
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	96.07.22.13.17.56;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.14.55.11;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.55;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.17.56;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Replace LENOCC by LNBLNK
@
text
@      SUBROUTINE EGETDS
C******************************************************************
C!  GET DEAD STOREY INFORMATION FROM THE DBASE   (EDDB BANK)
C!  AND CREATE EDST BANK
C!
C!  AUTHOR  :  C. BENCHOUK 890529
C!  MODIFIED:  JP ALBANESE 890915
C!   Modified :- E. Lancon              4-DEC-1990
C!   Modified :- E. Lancon              7-OCT-1992
C!     Use GTDBBK common deck to access run header/ daf setup dep. banks
C!
C!  BANKS:
C!    INPUT  : EDDB , EKLS , EGLO
C!    OUTPUT : EDST
C!    CREATED: EDST
C?
C!======================================================================
#ifndef DOC
#include "bcs.h"
#include "rlunit.h"
#include "rcurnt.h"
#include "ecnamc.h"
#include "edstjj.h"
#include "eddbjj.h"
#include "eglojj.h"
#include "eklsjj.h"
#include "edkbjj.h"
#include "egnrec.h"
#include "eclcom.h"
#include "rparac.h"
#include "rflags.h"
      INTEGER ALGTDB, GTSTUP
      EXTERNAL ALGTDB, GTSTUP
      PARAMETER( NBK = 3 , NBKL = 4*NBK )
      CHARACTER DET*2,LIST*(NBKL)
      DIMENSION IMIS (NBK)
      CHARACTER*4 BKLIS (NBK)
C
C?   EKLS : ECAL killed storeys in the ROC
C?   EDDB : ECAL Dead storeys
C?   EKPL : ECAL killed planes in the ROC
C
      DATA BKLIS /  'EKLS', 'EDDB', 'EKPL' /
      DATA IROLD / 0 /
      DATA DET   / 'EC' /
C
#include "bmacro.h"
C
      ENDEAD = 0.0001
      NTOTW  = LMHLEN
      NBAD   = 0
      NKILL  = 0
      NGLO   = 0
      CALL VZERO(IDRRAY,6144)
C
C-    For 94 running drop EKLS EKPL wrong on the header
C
      CALL EFIXI94
C
C
C?   Is there some banks missing on Run Header
C
      NMIS = 0
      DO 30 IB =  1,  NBK
        IF ( IW(NAMIND(BKLIS(IB))).EQ.0 ) THEN
          WRITE (LOUTRL,'(A)') '    '//BKLIS(IB)//
     &      ' NOT found on Run Header'
          NMIS = NMIS + 1
          IMIS (NMIS) = IB
        ELSE
          WRITE (LOUTRL,'(A)') '    '//BKLIS(IB)//
     &      '     found on Run Header'
        ENDIF
   30 CONTINUE
C
C?   Try to get missing banks from DAF
C
      IF ( NMIS.NE.0 ) THEN
        LIST = BKLIS( IMIS(1) )
        IF ( NMIS.GT.1 ) THEN
          DO 20 IBK =  2,  NMIS
            LIST  = LIST(1:LNBLNK(LIST)) // BKLIS ( IMIS(IBK) )
   20     CONTINUE
        ENDIF
#include "gtdbbk.h"
        DO 23 IB =  1,  NMIS
          KLIST = IW( NAMIND(BKLIS(IMIS(IB))) )
          IF ( KLIST.EQ.0 ) THEN
            WRITE (LOUTRL,'(A)') ' No '//BKLIS(IMIS(IB))//
     &          ' bank found on DataBase '
          ELSE
            WRITE (LOUTRL,'(A)') '    '//BKLIS(IMIS(IB))//
     &        ' taken from DataBase '
          ENDIF
   23   CONTINUE
      ENDIF
C
C?   Redefine bank indices
C
      KEDDB = IW( NAMIND('EDDB') )
      KEKLS = IW( NAMIND('EKLS') )
      KEKPL = IW( NAMIND('EKPL') )
C
      NRDDB = IW(KEDDB-2)
      NBAD  = LROWS (KEDDB)
      WRITE (LOUTRL,'(5X,I6,A)') NBAD  ,
     &  ' Dead   Storeys (EDDB) Read In'
C
C --- CREATE THE EDST BANK
C
      IF(KEDDB.NE.0) THEN
        NTOTW=LEDSTA*NBAD  +LMHLEN
        CALL AUBOS('EDST',0,NTOTW,KEDST,IGARB)
        IF(IGARB.EQ.2) GOTO 999
C
C IN CASE OF GARBAGE COLLECTION
        KEDDB = NLINK('EDDB',NRDDB)
        IW(KEDST+LMHCOL) = LEDSTA
        IW(KEDST+LMHROW) = NBAD
C
C
        DO 10 IB=1,NBAD
          INDSB = KROW (KEDST,IB)
          IADDI = ITABL (KEDDB,IB,JEDDAD)
          IADDS = ICASWT(IADDI,IRUNRC)
          JVAL = IBITS(IADDS,16,8)
          IVAL = IBITS(IADDS,2,9)
          KVAL = IBITS(IADDS,26,2)
          IW(INDSB+JEDSTJ) = JVAL
          IW(INDSB+JEDSFI) = IVAL
          IW(INDSB+JEDSDK) = KVAL
C
          CALL ECINIT(IVAL,JVAL,KVAL,IORG,NDIR)
          IW(INDSB+JEDSIO) = IORG
          IW(INDSB+JEDSDI) = NDIR
          CALL ECMOD(IVAL,JVAL,IMOD)
          IW(INDSB+JEDSER) = IMOD
          IW(INDSB+JEDSSC) = NUMREG(JVAL)
          IW(INDSB+JEDSES) = 0
          RW(INDSB+JEDSME) = ENDEAD
C
C
          IA    = (IORG-1) / 73728
          IR    =  IORG - 73728*IA
          IMT2  = (IR-1) / 6144
          IMT1  =  IR - 6144*IMT2
C
          IF(IDRRAY(IMT1).EQ.0) THEN
            IDRRAY(IMT1)=IB
            IW(INDSB+JEDSED)=0
          ELSE
C THERE IS ANOTHER STOREY AT THE SAME POSITION IN ITS BANANA
            IW(INDSB+JEDSED)=IDRRAY(IMT1)
            IDRRAY(IMT1)=IB
          ENDIF
   10   CONTINUE
C
      ENDIF
C! Read dead channels from  EDKB...(ROC)
      KEKLS = IW(NAMIND('EKLS'))
      NKILL = IW(KEKLS+LMHROW)
      WRITE (LOUTRL,'(5X,I6,A)') NKILL,
     &  ' Killed Storeys (EKLS) Read In'
      IF (KEKLS .EQ. 0) GOTO 12
C Expand EDST
      CALL AUBOS('EDST',0,NTOTW+NKILL*LEDSTA,KEDST,IGARB)
      IF (IGARB .EQ. 2) GOTO 999
      KEKLS = IW(NAMIND('EKLS'))
      IW(KEDST+LMHCOL) = LEDSTA
      IW(KEDST+LMHROW) = NBAD + NKILL
C
      DO 11 IB = NBAD + 1, NBAD + NKILL
        IB1 = IB - NBAD
        INDSB = KROW (KEDST,IB)
        IADDS = ITABL (KEKLS,IB1,JEKLAD)
        JVAL = IBITS(IADDS,16,8)
        IVAL = IBITS(IADDS,2,9)
        KVAL = IBITS(IADDS,26,2)
        IF(KVAL.EQ.0) KVAL = IBITS(IADDS,0,2)
        IW(INDSB+JEDSTJ) = JVAL
        IW(INDSB+JEDSFI) = IVAL
        IW(INDSB+JEDSDK) = KVAL
C
        CALL ECINIT(IVAL,JVAL,KVAL,IORG,NDIR)
        IW(INDSB+JEDSIO) = IORG
        IW(INDSB+JEDSDI) = NDIR
        CALL ECMOD(IVAL,JVAL,IMOD)
        IW(INDSB+JEDSER) = IMOD
        IW(INDSB+JEDSSC) = NUMREG(JVAL)
        IW(INDSB+JEDSES) = 0
        RW(INDSB+JEDSME) = ENDEAD
C
C
        IA    = (IORG-1) / 73728
        IR    =  IORG - 73728*IA
        IMT2  = (IR-1) / 6144
        IMT1  =  IR - 6144*IMT2
C
        IF(IDRRAY(IMT1).EQ.0) THEN
          IDRRAY(IMT1) = IB
          IW(INDSB+JEDSED) = 0
        ELSE
C THERE IS ANOTHER STOREY AT THE SAME POSITION IN ITS BANANA
          IW(INDSB+JEDSED) = IDRRAY(IMT1)
          IDRRAY(IMT1) = IB
        ENDIF
   11 CONTINUE
C
   12 CONTINUE
C
C-     Call routine to kill ECAL  boxes
C
      IREADB = ALGTDB (LRCONS,'EDKB',IRUNRC)
      CALL EBOXKI
      KEDKB=IW(NAMIND('EDKB'))
      IF (KEDKB .EQ. 0) GOTO 22
      NKILB = IW(KEDKB+LMHROW)
C Expand EDST
      CALL AUBOS('EDST',0,NTOTW+(NKILL+NKILB)*LEDSTA,KEDST,IGARB)
      IF (IGARB .EQ. 2) GOTO 999
      KEDKB = IW(NAMIND('EDKB'))
      IW(KEDST+LMHCOL) = LEDSTA
      IW(KEDST+LMHROW) = NBAD + NKILL
      NUM1 = NBAD   + NKILL
C
      IB0 = NUM1
      IBC = IB0 + 1
      DO 21 IB = NUM1+1, NUM1+NKILB
        IB1 = IB-NUM1
        INDDB = KEDKB+LMHLEN+(IB1-1)*LEDKBA
        INDSB = KEDST+LMHLEN+(IBC-1)*LEDSTA
        IADDS = IW(INDDB+JEDKAD)
        JVAL = IBITS(IADDS,16,8)
        IVAL = IBITS(IADDS,2,9)
        KVAL = IBITS(IADDS,26,2)
        IF(KVAL.EQ.0) KVAL = IBITS(IADDS,0,2)
C
C-    Check not yet in dead list
C
        CALL EDLIST (JVAL,IVAL,KVAL,IB0,IOK)
        IF ( IOK .NE. 0 )  GO TO 21
        IBC = IBC + 1
        IW(INDSB+JEDSTJ) = JVAL
        IW(INDSB+JEDSFI) = IVAL
        IW(INDSB+JEDSDK) = KVAL
C
        CALL ECINIT(IVAL,JVAL,KVAL,IORG,NDIR)
        IW(INDSB+JEDSIO) = IORG
        IW(INDSB+JEDSDI) = NDIR
        CALL ECMOD(IVAL,JVAL,IMOD)
        IW(INDSB+JEDSER) = IMOD
        IW(INDSB+JEDSSC) = NUMREG(JVAL)
        IW(INDSB+JEDSES) = 0
        RW(INDSB+JEDSME) = ENDEAD
C
C
        IA    = (IORG-1) / 73728
        IR    =  IORG - 73728*IA
        IMT2  = (IR-1) / 6144
        IMT1  =  IR - 6144*IMT2
C
        IF(IDRRAY(IMT1).EQ.0) THEN
          IDRRAY(IMT1) = IBC-1
          IW(INDSB+JEDSED) = 0
        ELSE
C THERE IS ANOTHER STOREY AT THE SAME POSITION IN ITS BANANA
          IW(INDSB+JEDSED) = IDRRAY(IMT1)
          IDRRAY(IMT1) = IBC-1
        ENDIF
   21 CONTINUE
      IW(KEDST+LMHROW) = IBC-1
      CALL AUBPRS ('EDST')
C
   22 CONTINUE
      RETURN
C
  999 CALL RERROR('EGETDS',2,

     1  '   BOS memory full. EDST bank not created')
      RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@d82 1
a82 1
            LIST  = LIST(1:LENOCC(LIST)) // BKLIS ( IMIS(IBK) )
@


1.1
log
@Initial revision
@
text
@a0 1
*DK egetds
@


1.1.1.1
log
@import julia 300
@
text
@@
