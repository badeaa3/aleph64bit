head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.14.54.27;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.52;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.17.53;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@      SUBROUTINE EFICV(IER)
C***********************************************************************
C!FIND CREATION VERTEX                                                 *
C!                                                                     *
C!                                                                     *
C!  AUTHOR   : A. BONISSENT  861128                                    *
C!  MODIFIED : DENIS COURVOISIER  890418                               *
C!                                                                     *
C!                                                                     *
C!  BANKS :                                                            *
C!    INPUT   : KINE,FKIN,PART,ETP1                                    *
C!    OUTPUT  : ETP1                                                   *
C!    CREATED : ETP1                                                   *
C!                                                                     *
C!    INPUT  : NONE                                                    *
C!    OUTPUT : NONE                                                    *
C!                                                                     *
C!   GET NUMBER OF TRACKS IN EVENT                                     *
C!   CREATE ETP1 BANK WITH CORRECT SIZE                                *
C!   DO FOR ALL TRACKS :                                               *
C!      GET KINEMATIC DATA AT CREATION VERTEX                          *
C!      FIND IF TRACK IS RELEVANT FOR ECAL EXTRAPOLATION               *
C!      FILL ONE LINE IN ETP1 BANK                                     *
C!    ENDDO                                                            *
C!    ETP1 BANK IS NOW FILLED WITH INFORMATIONS AT VERTEX OF CREATION  *
C!                                                                     *
C!
C!       IER = return code ( 0 if normal)                              *
C!
C***********************************************************************
#ifndef DOC
#include "bcs.h"
C
#include "fkinjj.h"
#include "etp1jj.h"
#include "rlunit.h"
C
      DIMENSION XXX(3,2)
#include "bmacro.h"
C
      NFLDE= 0
      IER=0
      LHEV3=3
      KKINE=NAMIND('KINE')
C       choose FKIN bank if KINE do not exist
      IF(IW(KKINE).EQ.0)THEN
        WRITE(LDEBRL,*)'EFICV --> BANKS KINE DO NOT EXIST'
        NFLDE= 1
        KFKIN= NLINK('FKIN',0)
        IF (KFKIN.LE.0) GO TO 997
      ENDIF
      IF (NFLDE.EQ.0) THEN
        KKINE=KKINE+1
C?
C?  COUNT NUMBER OF KINE OR FKIN BANKS
C?
        KCNT=KKINE
        NTRAK=-1
   30   KCNT=IW(KCNT-1)
        NTRAK=NTRAK+1
        IF(KCNT.NE.0)GO TO 30
      ELSE
        NTRAK= LROWS(KFKIN)
      ENDIF
C?
C?  CREATE ETP1 BANK
C?
      CALL AUBOS('ETP1',0,NTRAK*LETP1A+LMHLEN,KETP1,IGARB)
      IF (IGARB.EQ.2) GOTO 998
      CALL BLIST(IW,'E+','ETP1')
C
C  FILL MINIHEADER
C
      IW(KETP1+LMHCOL)=LETP1A
      IW(KETP1+LMHROW)=NTRAK
C?
C?    RELINK ON KINE BANK, IN CASE OF A GARBAGE COLLECTION
C?
      IF(IGARB.EQ.1.AND.NFLDE.EQ.0)KKINE=NAMIND('KINE')+1
      IF(IGARB.EQ.1.AND.NFLDE.EQ.1)KFKIN=NAMIND('FKIN')+1
C
      ITRAK=0
      KPART=NLINK('PART',0)
      IF(KPART.EQ.0)THEN
        WRITE(LDEBRL,*)'EFICV --> BANKS PART DO NOT EXIST'
        GOTO 997
      ENDIF
C
C  LOOP ON TRACKS
C
 10   ITRAK= ITRAK+1
      IF (NFLDE.EQ.0) THEN
        KKINE=IW(KKINE-1)
        IF(KKINE.LE.0) GO TO 999
        IKINE=KKINE+LHEV3
C
C   GET PARTICLE NUMBER AND CHARGE
C
        IPART=IW(KKINE+LHEV3+5)
C?
C?   FILL MOMENTUM
C?
        PX=RW(IKINE+1)
        PY=RW(IKINE+2)
        PZ=RW(IKINE+3)
C?
C?  GET NUMBER OF VERTICES ON THE TRACK
C?
        NVERT=IW(KKINE+LHEV3)
C?
C?  ESLCT WILL DECIDE IF TRACK SHOULD BE EXTRAPOLATED IN ECAL
C?
        CALL VZERO(XXX,6)
        CALL ESLCT(XXX,NVERT,KKINE,IFLAG)
C                if not KINE, use FKIN bank
      ELSE
          IF (ITRAK.GT.NTRAK) GO TO 999
          IPART= ITABL(KFKIN,ITRAK,JFKIPA)
          PX= RTABL(KFKIN,ITRAK,JFKIPX)
          PY= RTABL(KFKIN,ITRAK,JFKIPY)
          PZ= RTABL(KFKIN,ITRAK,JFKIPZ)
          CALL ESLCTF(XXX,ITRAK,IFLAG)
      ENDIF
C
C  FILL CHARGE
C
        INDLO=KROW(KETP1,ITRAK)
        RW(INDLO+JETPCH)=RTABL(KPART,IPART,7)
        P=SQRT(PX*PX+PY*PY+PZ*PZ)
        PX=PX/P
        PY=PY/P
        PZ=PZ/P
        RW(INDLO+JETPP3)=PX
        RW(INDLO+JETPP3+1)=PY
        RW(INDLO+JETPP3+2)=PZ
        RW(INDLO+JETPPT)=P
        IW(INDLO+JETPEF)=IFLAG
C
C   NEUTRALS SHOULD NOT BE EXTRAPOLATED
C
        IF(RW(INDLO+JETPCH).EQ.0.)IW(INDLO+JETPEF)=0
C
C?
C?   FILL X,Y,Z COORDINATES
C?
        DO 20 I=1,3
   20   RW(INDLO+I+JETPX3-1)=XXX(I,1)
        GO TO 10
C
  999 CONTINUE
      RETURN
  998 CONTINUE
      CALL RERROR('EFICV',3,' ABORT')
      IER=1
  997 CONTINUE
C
C   Create empty etp1 bank, in case kine or part are missing
C
      NTRAK=0
      CALL AUBOS('ETP1',0,NTRAK*LETP1A+LMHLEN,KETP1,IGARB)
      IF (IGARB.EQ.2) GOTO 998
      CALL BLIST(IW,'E+','ETP1')
C
C  FILL MINIHEADER
C
      IW(KETP1+LMHCOL)=LETP1A
      IW(KETP1+LMHROW)=NTRAK
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK eficv
@


1.1.1.1
log
@import julia 300
@
text
@@
