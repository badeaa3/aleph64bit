head	1.3;
access;
symbols
	jul313_3:1.3
	jul313_2:1.3
	jul313_1:1.3
	jul313:1.3
	jul312_1:1.3
	jul312:1.3
	jul311:1.3
	jul310_1:1.3
	jul310:1.3
	jul309_1:1.3
	jul309:1.3
	jul308_6:1.3
	jul308_5:1.3
	jul308_4:1.3
	jul308_3:1.3
	jul308_2:1.3
	jul308_1:1.3
	jul308:1.3
	jul307_4:1.3
	jul307_3:1.3
	jul307_2:1.3
	jul307_1:1.3
	jul307:1.3
	jul306_3:1.3
	jul306_2:1.3
	jul306_1:1.3
	jul306:1.3
	jul305_4:1.3
	jul305_3:1.3
	jul305_2:1.3
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.3
date	97.12.18.07.59.47;	author cattanem;	state Exp;
branches;
next	1.2;

1.2
date	96.03.12.14.49.29;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.17.43;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.17.44;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Mod to eclamp for jul305.2
@
text
@      SUBROUTINE ECLAMP
C----------------------------------------------------------------------
C!  - Clean ECAL looking to amplificator noise
C!
C!                       AUTHOR : M.N MINARD 25.11.90
C!  Modified: M.N.Minard 971218
C!        Rescale cut to effective threshold. Affects MonteCarlo only
C!
C!    Bank used EWHE , ETDI
C!    Bank of killed channels done  ETKC
C?
C!======================================================================
#ifndef DOC
#include "etkcjj.h"
#include "etdijj.h"
#include "ecnamc.h"
#include "bcs.h"
      PARAMETER (NSTOR=3,LENW1=5,LENW2=2,NMISC=12)
      PARAMETER (ETHRES=0.050 , THDEC = 0.8)
      PARAMETER (NMINS=5 , FRACS=0.6)
      DIMENSION ECATOW(36),EWIRE(36),SIGM(3)
      DIMENSION EITH(3,3),THREF(3,3)
      COMMON /CECLAM/ JCETDI, JWETDI, JRiETDI
      DATA SIGM /0.015,0.015,0.025/
      DATA THREF / 28. , 44., 60.,
     &             15. , 15., 30.,
     &             28. , 44., 60./
#include "bmacro.h"
C
C-    INITIALISE ARRAY
C
      CALL VZERO (ECATOW,36)
      CALL VZERO (EWIRE,36)
C
C-    Initialise pointers
C
      JWETDI = 0
      JRETDI = 0
      JCETDI = 0
      KETDI = IW(NAETDI)
      IF (KETDI.EQ.0) GO TO 900
      NETDI = LROWS(KETDI)
      NLEN = NSTOR*NETDI*LENW1+LMHLEN
      CALL WBANK(IW,JWETDI,NLEN,*999)
      NLEN1 = NSTOR*NETDI*LENW2+LMHLEN
      CALL WBANK(IW,JRETDI,NLEN1,*999)
      IW(JWETDI+LMHCOL) = LENW1
      IW(JRETDI+LMHCOL) = LENW2
C
C-  Get threshold PAD
C
C
C
C     Initialise threshold  EITH (Stack,SubComponent) in MeV !
C
      CALL EBTZTH (EITH,IRC)
C
C-  Initialise the working bank 
C
      NSTDI = NSTOR*NETDI
      DO IWETDI=1,NSTDI
        KWETDI = KROW(JWETDI,IWETDI)
        CALL VZERO(IW(KWETDI),LENW1)
        KRETDI = KROW(JRETDI,IWETDI)
        CALL VZERO(IW(KRETDI),LENW2)
      ENDDO
      IRETDI= 0
      IWETDI = 0
C
C-    First calculate energy in module
C
      DO 100 IETDI = 1,NETDI
        JETDI = KROW(KETDI,IETDI)
      ITOW=ITABL(KETDI,IETDI,1)
      ITETA = IBITS(ITOW,16,8)
      IPHI = IBITS(ITOW,2,9)
      CALL ECSCMD(IPHI,ITETA,IMOD,ISC)
      IGMOD = (ISC-1)*NMISC+IMOD
      IF (IGMOD.LT.1.OR.IGMOD.GT.36) GO TO 100
      DO 50 IK =1,3
      ECATOW(IGMOD)=ECATOW(IGMOD)+FLOAT(ITABL(KETDI,IETDI,IK+1))/1.E6
 50   CONTINUE
 100  CONTINUE
C
C-     Calculate wire energy
C
      NAEWHE = NAMIND('EWHE')
      KEWHE = IW(NAEWHE)
      DO 110 IEWHE = 1,LROWS(KEWHE)
      IGMOD = ITABL(KEWHE,IEWHE,2)
      IF (IGMOD.LT.1.OR.IGMOD.GT.36) GO TO 110
      EWIRE (IGMOD) = FLOAT(ITABL(KEWHE,IEWHE,1))/1.E6
 110  CONTINUE
C
C-    Loop on storeys to built structuture
C-    Cleaning performed only for pad/wire descrepency
C
      DO 150  IETDI = 1,NETDI
      JETDI = KROW(KETDI,IETDI)
      ITOW = ITABL(KETDI,IETDI,1)
      ITETA = IBITS(ITOW,16,8)
      IPHI = IBITS(ITOW,2,9)
      CALL ECSCMD(IPHI,ITETA,IMOD,ISC)
      IGMOD = (ISC-1)*NMISC+IMOD
      IF (IGMOD.LT.1.OR.IGMOD.GT.36) GO TO 150
      IF (EWIRE(IGMOD).LT.ETHRES) GO TO 150
      DECAL = ECATOW(IGMOD)-EWIRE(IGMOD)
      IF (DECAL.LT.AMIN1(0.1*EWIRE(IGMOD),THDEC))GO TO 150
      CALL ECDAMP (ITOW,IAMP)
C
C-    Search for amplificator in working bank
C
      DO 130 IK =1,3
      IAMPK  =  IAMP*NSTOR+IK-1
        IFI= 0
      DO 120 IWJ=1,IWETDI
      IF (ITABL(JWETDI,IWJ,1 ).NE.IAMPK) GO TO 120
C
C-    Look in chain
C
      IJETDI = ITABL(JWETDI,IWJ,5)
 115  IF (ITABL(JRETDI,IJETDI,2).EQ.0) THEN
        IFI= IWJ
         IRETDI = IRETDI+1
         IW(KROW(JRETDI,IJETDI)+2) = IRETDI
         IW(KROW(JRETDI,IRETDI)+1) = (IETDI-1)*4+1+IK
         GO TO 121
      ENDIF
      IJETDN = ITABL(JRETDI,IJETDI,2)
      IJETDI = IJETDN
      GO TO 115
 120  CONTINUE
  121   IF ( IFI.EQ.0) THEN
        IWETDI = IWETDI +1
        IW(KROW(JWETDI,IWETDI)+1) = IAMPK
        IW(KROW(JWETDI,IWETDI)+5) = IRETDI+1
        IRETDI = IRETDI+1
        IW(KROW(JRETDI,IRETDI)+1) = (IETDI-1)*4+1+IK
          IFI = IWETDI
      ENDIF
C
C-    Now store quantities to calculate mean & averges
C
      ES = FLOAT(IW(JETDI+1+IK))/1.E6
          JCUR = KROW(JWETDI,IFI)
      RW(JCUR+2) = RW(JCUR+2)+ES
      RW(JCUR+3) = RW(JCUR+3)+1.
      RW(JCUR+4) = RW(JCUR+4)+ES**2
 130  CONTINUE
 150  CONTINUE
C
C-    Now loop over bank to create new structure
C
C     Copy ETDI in a working bank
C
      KETDI = IW(NAETDI)
      NLEN = NETDI*LETDIA+LMHLEN
      CALL WBANK(IW,JCETDI,NLEN,*999)
      CALL BKTOW(IW,'ETDI',0,IW,JCETDI,*999)
C
C-    Calculate Means  & Dispersion
C
      DO 200 IWJ= 1,IWETDI
      JCUR = KROW(JWETDI,IWJ)
      IF (RW(JCUR+3).LE. 1) THEN
          RW(JCUR+4) = 0.
          GO TO 200
      ENDIF
      IAMPK = IW(JCUR+1)
      IK = MOD(IAMPK,NSTOR)+1
      RW(JCUR+2) = RW(JCUR+2)/RW(JCUR+3)
C
C     Calculate dispersion
C
      RW(JCUR+4) = RW(JCUR+4)/RW(JCUR+3)
      N1SIG = 0
      IJETDI = IW(JCUR+5)
230   IETDI = ITABL(JRETDI,IJETDI,1)
      ITOW = IW(KETDI+LMHLEN-IK+IETDI)
      ITETA = IBITS(ITOW,16,8)
      IPHI = IBITS(ITOW,2,9)
      CALL ECSCMD(IPHI,ITETA,IMOD,ISC)
      ES = FLOAT(IW(KETDI+LMHLEN+IETDI))/1.E6
      IF (ABS(ES-RW(JCUR+2)).LT.EITH(IK,ISC)*SIGM(IK)/THREF(IK,ISC))
     & N1SIG = N1SIG +1
      IJETDN = ITABL(JRETDI,IJETDI,2)
      IF ( IJETDN.NE.0) THEN
        IJETDI = IJETDN
        GO TO 230
      ENDIF
C
C-    Decide to remove amplificator
C
      IF(RW(JCUR+3).GT.NMINS.AND.N1SIG.GT.FRACS*FLOAT(NMINS)) THEN
           RW(JCUR+4) = -100.
      ELSE
           RW(JCUR+4) = 0.
      ENDIF
C
C-    Remove energy in working bank
C
      IF (RW(JCUR+4).LT.-50.) THEN
        IJETDI = IW(JCUR+5)
240     IETDI = ITABL(JRETDI,IJETDI,1)
        IW(JCETDI+LMHLEN+IETDI)= 0.
        IJETDN = ITABL(JRETDI,IJETDI,2)
        IF ( IJETDN.NE.0) THEN
          IJETDI = IJETDN
          GO TO 240
        ENDIF
      ENDIF
200   CONTINUE
C
C-    Drop working banks related to ampli
C
      CALL WDROP(IW,JWETDI)
      CALL WDROP(IW,JRETDI)
C
C-    Built bank of killed storeys
C
      NLEN = NETDI*LETKCA+LMHLEN
      CALL AUBOS('ETKC',0,NLEN,KETKC,IGARB)
      IF (IGARB.EQ.2) GO TO 999
      CALL BLIST(IW,'E+','ETKC')
      IF (IGARB.EQ.1) KETDI = IW(NAETDI)
      IW(KETKC+LMHCOL) = LETKCA
      IW(KETKC+LMHROW) = 0
C
C-    Update ETDI & ETKC
C
C
C-    Update ETDI if needed
C
      IKILL = 0
      ICOPY = 0
      DO 400 IETDI = 1,NETDI
      JETDI = KROW(JCETDI,IETDI)
      ITOW = IW(JETDI+1)
      IGOO = 0
      ITETA = IBITS(ITOW,16,8)
      IPHI = IBITS(ITOW,2,9)
      CALL ECSCMD(IPHI,ITETA,IMOD,ISC)
      DO 370 IK=1,3
        IF (IW(JETDI+1+IK).LT.EITH(IK,ISC )*1000.) GO TO 370
        IGOO = IGOO +1
 370  CONTINUE
      IF(IGOO.NE.0) THEN
        ICOPY = ICOPY +1
        JETDIO = KROW(KETDI,ICOPY)
        CALL UCOPY(IW(JETDI+1),IW(JETDIO+1),4)
      ELSE
        IKILL = IKILL +1
        JETKC = KROW(KETKC,IKILL)
        CALL UCOPY(IW(JETDI+1),IW(JETKC+1),4)
        IW(JETKC+5) = 10
      ENDIF
 400  CONTINUE
C
C-    Delete working banks & Compress new banks
C
      IW(KETDI + LMHROW) = ICOPY
      IW(KETKC + LMHROW) = IKILL
      CALL AUBPRS('ETDIETKC')
      CALL WDROP(IW,JCETDI)
 900  CONTINUE
      RETURN
 999  CONTINUE
      CALL RERROR('ECLAMP',2,' BOS MEMORY FULL NO NOISE CLEANING')
      RETURN
      END
#endif
@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@d6 2
d22 2
a23 2
      DIMENSION EITH(3,3)
      COMMON /CECLAM/ JCETDI, JWETDI, JRETDI
d25 3
d49 18
d179 4
d184 2
a185 1
      IF (ABS(ES-RW(JCUR+2)).LT.SIGM(IK)) N1SIG = N1SIG +1
a230 3
C     Initialise threshold  EITH (Stack,SubComponent) in MeV !
C
      CALL EBTZTH (EITH,IRC)
d244 2
a245 2
      IF (IW(JETDI+1+IK).LT.EITH(IK,ISC )*1000.) GO TO 370
          IGOO = IGOO +1
@


1.1
log
@Initial revision
@
text
@a0 1
*DK eclamp
@


1.1.1.1
log
@import julia 300
@
text
@@
