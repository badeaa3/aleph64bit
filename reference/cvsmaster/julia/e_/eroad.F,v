head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.14.58.05;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.03;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.04;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
 Modified Files:
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
@
text
@      SUBROUTINE EROAD ( NESDA , PMOM , VEXTR , ITRACK , ER )
C=======================================================================
C!    Calculates energy inside road in Ecal
C!    Fills temporary working bank ECTE
C-
C-     Authors : M.N. Minard , M. Pepe       26/02/89
C-
C- Input :  NESDA          = Relative address for storey in ESDA bank
C-          PMOM           = Track momemtum measured by TPC
C-          VEXTR (1->3)   = Extrapolated point in stack
C-          ITRACK(1)      = Nb. of storeys crossed by track in stack
C-          ITRACK(2->5)   = Address of storey crossed by track
C- Output   ER (1->3)      = Energy vector to be removed in inner region
C-             (4->6)      =   "      "     "  "    "     " outer "
C-             (7)         = Energy of storey crossed by track
C?
C!======================================================================
#ifndef DOC
#include "ecnmsk.h"
#include "esdajj.h"
#include "eclujj.h"
#include "alcons.h"
#include "emskpa.h"
#include "bcs.h"
      DIMENSION COSI(8) , DX (3) , DEX(3) , EVECT(4)
      DIMENSION VEXTR (3),ITRACK (5) , ER (7)
C
#include "bmacro.h"
C
C-    If no storeys are intercepted by track go away
C
        CALL VZERO (ER ,7)
      IF ( ITRACK(1).EQ.0) GO TO 300
C
C-    Set pointers
C
      KESDA = IW (NAESDA)
      JESDA = KROW(KESDA,NESDA)
C
C-    Determine storey coordinates
C
      IK   = IW ( JESDA+JESDDK)
      IPHI = IW ( JESDA+JESDFI)
      ITHE = IW ( JESDA+JESDTJ)
      EN   = RW ( JESDA+JESDME)
      ITOW = IW ( JESDA+JESDIO)
C
C
C-   Cell center coordinates
C
      CALL ESRBC('ALEPH',ITHE,IPHI,IK,COSI)
C
C-    Calculate storey distance to the track impact
C
      DR = 0.
      DO 100 IX =1,3
       DR = DR + COSI(IX)**2
 100  CONTINUE
      CANG2 = VDOTN(VEXTR,COSI,3)
      IF (ABS(CANG2).GT.1.) CANG2 = SIGN(1.,CANG2)
      ANG2  = ACOS(CANG2)
      RANG2 = SIN(ANG2)*SQRT(DR)
      XVAR  = ABS(RANG2)/XNORM(IK)
C
C-    Establish whether storey is in road
C
C-    Determine region IR and maximum energy allowed EMAX
C
      IR = 2
      IF (XVAR.LT.0.5*ZON(IK)) IR = 1
      IF (XVAR.GT.ZON(IK))     IR = 0
      IF (CANG2.LT.0.)         IR = 0
      IF (IR.EQ.0 ) GO TO 300
      EMAX  = PMOM * EZON(IK,IR)
C
C-    Check if cell not already partially removed
C
      NAECTE = NAMIND ('ECTE')
      KECTE  = IW(NAECTE)
      IF ( KECTE.EQ.0 ) THEN
         CALL RERROR('EROAD',1,'Problem no ECTE bank exists')
         GO TO 300
      ENDIF
      NECTE = IW (KECTE + LMHROW )
      EPREV = 0.
      JECTE = 0
      IF ( NECTE . NE. 0 ) THEN
         DO 200 IECTE = 1,NECTE
         JETCA = KROW(KECTE,IECTE)
         IF ( IW(JETCA+1).EQ.ITOW) THEN
            JECTE = JETCA
            EPREV = RW(JECTE+2)
         ENDIF
 200     CONTINUE
      ENDIF
C
      IF(JECTE.EQ.0) THEN
C
C-    First time that storey is included in mask
C
         IW (KECTE+2) = IW(KECTE+2) + 1
         JECTE = KECTE+NECTE*IW(KECTE+1)+LMHLEN
         CALL VZERO (IW (JECTE+1) , IW(KECTE+1))
      ENDIF
C
C-    Now compare to energy already removed
C
      INDI = (IR-1) * 3
      IF ( EMAX .GT.EN-EPREV) THEN
C-    Remove everything unless...
         ER(INDI + 1) = EN-EPREV
C-    ..energy has already been completely removed
         IF (ER(INDI+1).LT.0.) ER(INDI+1)= 0.
      ELSE
         ER(INDI + 1) = EMAX
      ENDIF
      CALL ECOS(ER(INDI+1),IPHI,ITHE,IK,EVECT)
C
C-    Tower address
      IW ( JECTE+1) = ITOW
C-    Removed energy
      RW ( JECTE+2) = EPREV + EVECT(4)
C
      CALL UCOPY (EVECT(1),ER(INDI+1),3)
C
 300  CONTINUE
C
      RETURN
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK eroad
@


1.1.1.1
log
@import julia 300
@
text
@@
