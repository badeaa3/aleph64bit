head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.1
	jul303_7:1.1
	jul303_6:1.1
	jul303_5:1.1
	jul303_4:1.1
	jul303_3:1.1
	jul303_2_mc1:1.1
	jul303_2:1.1
	jul303_1_mc1:1.1
	jul303_1:1.1
	jul303_v:1.1
	jul302:1.1
	jul303:1.1
	jul302_6:1.1
	jul302_5:1.1;
locks; strict;
comment	@c @;


1.2
date	97.10.01.07.09.42;	author cattanem;	state Exp;
branches;
next	1.1;

1.1
date	97.04.15.15.00.08;	author cattanem;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fixes for Linux
@
text
@      subroutine YKInit
C----------------------------------------------------------------
C! Initialize the cuts used in the Kink analysis
C
C     Uses banks YKCI and YKSP
C
C       Author: Paul Rensing    08/04/97
C
C----------------------------------------------------------------
#ifndef DOC

      implicit none

#include "bcs.h"
#include "yknkcm.h"
#include "ykcijj.h"
#include "ykspjj.h"

      integer NAMIND, ALGTDB
      external NAMIND, ALGTDB

      integer indYKCI, indYKSP, namYKCI, namYKSP
      integer i, irun, ievt, dum, JUNIDB, iret

#include "bmacrod.h"

#include "bmacro.h"
      DATA namYKCI / 0 /

      if (namYKCI .eq. 0) then
        namYKCI = NAMIND('YKCI')
        namYKSP = NAMIND('YKSP')
      endif

      call ABRUEV(irun, ievt)

      iret = ALGTDB(JUNIDB(DUM),'YKCIYKSP',irun)
      indYKCI = IW(namYKCI)
      if (indYKCI .le. 0) then
         call RERROR('YKINIT', 2, ' Missing YKCI bank')
         return
      end if
      indYKSP = IW(namYKSP)
      if (indYKSP .le. 0) then
         call RERROR('YKINIT', 2, ' Missing YKSP bank')
         return
      end if
      if (LCOLS(indYKSP) .lt. LYKSPA) then
         call RERROR('YKINIT', 2, ' Missing YKSP bank')
         return
      end if
      ykNSpec = LROWS(indYKSP)
      if (ykNSpec .gt. YKMXSPEC) then
         call RERROR('YKINIT', 3, ' Too many rows in YKSP bank')
         ykNSpec = YKMXSPEC
      end if
         
      fidInnerRad = RTABL(IndYKCI, 1, JYKCFI)
      fidOuterRad = RTABL(IndYKCI, 1, JYKCFO)
      fidMaxZ = RTABL(IndYKCI, 1, JYKCFZ)
      
      minDistXYCut = RTABL(IndYKCI, 1, JYKCMX)
      minDistZCut = RTABL(IndYKCI, 1, JYKCMZ)
      maxBadHits = ITABL(IndYKCI, 1, JYKCNB)
      firstChgCut = RTABL(IndYKCI, 1, JYKCCC)
      
C max chi^2 per dof on track fits
      chi2TrkCut = RTABL(IndYKCI, 1, JYKCTC)
      chi2VtxCut = RTABL(IndYKCI, 1, JYKCVC)
      
      vdetChiCut = RTABL(IndYKCI, 1, JYKCVD)
      vdetChiDiff = RTABL(IndYKCI, 1, JYKCV2)
C
C Kink Species and mass window cuts
C
      do i = 1, ykNSpec
         YKParM(i) = RTABL(indYKSP, i, JYKSPM)
         YKDauM(i) = RTABL(indYKSP, i, JYKSDM)
         YKNeutM(i) = RTABL(indYKSP, i, JYKSNM)
         YKTagC(i) = RTABL(indYKSP, i, JYKSTC)
         YKMCut(i) = RTABL(indYKSP, i, JYKSMC)
      end do

C Make sure that the VGLOB package is initialized
C      call vginit

      return
      end
      
#endif
@


1.1
log
@Add kinks to JULIA
@
text
@d19 2
a20 2
      integer NAMIND
      external NAMIND
d23 1
a23 1
      integer i, irun, ievt, dum, JUNIDB
d37 1
a37 1
      CALL ALGTDB(JUNIDB(DUM),'YKCIYKSP',irun)
@
