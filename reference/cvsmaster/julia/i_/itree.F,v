head	1.2;
access;
symbols
	jul313_3:1.2
	jul313_2:1.2
	jul313_1:1.2
	jul313:1.2
	jul312_1:1.2
	jul312:1.2
	jul311:1.2
	jul310_1:1.2
	jul310:1.2
	jul309_1:1.2
	jul309:1.2
	jul308_6:1.2
	jul308_5:1.2
	jul308_4:1.2
	jul308_3:1.2
	jul308_2:1.2
	jul308_1:1.2
	jul308:1.2
	jul307_4:1.2
	jul307_3:1.2
	jul307_2:1.2
	jul307_1:1.2
	jul307:1.2
	jul306_3:1.2
	jul306_2:1.2
	jul306_1:1.2
	jul306:1.2
	jul305_4:1.2
	jul305_3:1.2
	jul305_2:1.2
	jul305_1:1.2
	jul305:1.2
	jul304_3:1.2
	jul304_2:1.2
	jul304_1:1.2
	jul304:1.2
	jul303_7:1.2
	jul303_6:1.2
	jul303_5:1.2
	jul303_4:1.2
	jul303_3:1.2
	jul303_2_mc1:1.2
	jul303_2:1.2
	jul303_1_mc1:1.2
	jul303_1:1.2
	jul303_v:1.2
	jul303:1.2
	jul302_6:1.2
	jul302_5:1.2
	jul302_4:1.2
	jul302_3:1.2
	jul302_2:1.2
	jul302_1:1.2
	jul302:1.2
	jul285_1:1.2
	jul285:1.2
	jul284_1:1.2
	jul284:1.2
	jul283_1:1.2
	jul283:1.2
	jul282_1:1.2
	jul282:1.2
	jul281_3:1.2
	jul281_2:1.2
	jul281_1:1.2
	jul281:1.2
	jul280_1:1.2
	jul280:1.2
	jul279:1.1.1.1
	v300:1.1.1.1
	flr:1.1.1;
locks; strict;
comment	@c @;


1.2
date	96.03.12.15.08.34;	author flr;	state Exp;
branches;
next	1.1;

1.1
date	94.12.07.14.18.46;	author aljul;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	94.12.07.14.18.47;	author aljul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@import jul280 from historian
Modified Files:
	aamain.F aboldr.F ajmmcl.F almmcl.F altime.F aulpol.F
	bccrun.F bcpack.F binijo.F biniru.F bmsum.F bpreda.F bprsum.F
	bslowc.F
	cabook.F calrec.F calrel.F calrep.F calsup.F cashet.F casmp.F
	casneu.F casnmp.F cclorl.F cctrmi.F ccutpe.F cdang.F cdths.F
 	cegclu.F cencch.F cencne.F cesclu.F cexcob.F cexhis.F cfpass.F
 	cfpmip.F cfpnmp.F cgrunc.F chclu.F chgclu.F chsclu.F cinijo.F
 	cinirl.F cinpar.F cinsrl.F cisgam.F cishit.F cludis.F cmoni.F
 	cnighb.F coslst.F cpadwr.F cparad.F cpotcr.F cpoteh.F cpotlc.F
 	cptcom.F crcalo.F crchrl.F crcjob.F crcpar.F crhclu.F cthclu.F
 	ctkchg.F ctrmip.F ctrpar.F ctrtoc.F cvrify.F
 	e1bpei.F e2bpei.F e3bpei.F e4bary.F e4cosz.F e4dead.F e4deij.F
 	e4fdij.F e4fide.F e4find.F e4fnec.F e4frac.F e4gtbr.F e4gtpl.F
 	e4gtso.F e4gtst.F e4gttw.F e4indi.F e4lea1.F e4ovrl.F e4pal.F
 	e4r1r2.F e4r2r3.F e4r3r4.F e4radc.F e4res2.F e4res3.F e4tstl.F
 	e4xyz0.F eautop.F ebegid.F eboxki.F ecalig.F ecblda.F ecboba.F
	ecbook.F eccaob.F ecchkb.F ecclco.F ecclus.F ecdamp.F ecdebg.F
 	ecdete.F ecdigi.F ecener.F eceras.F ecfclu.F ecfils.F ecfmip.F
 	ecfobj.F ecgflw.F ecgmix.F echarg.F echcgl.F echedc.F echiba.F
 	echist.F echtag.F ecinit.F ecinrv.F eclamp.F eclana.F ecleib.F
 	eclgeo.F eclope.F eclorl.F eclost.F ecltag.F ecltrk.F ecltyp.F
 	ecluar.F ecmesp.F ecmod.F ecmopl.F ecncob.F ecobnk.F ecoent.F
 	ecoidp.F ecos.F ecpasr.F ecplm.F ecprin.F ecprlo.F ecrcob.F
 	ecre4d.F ecreib.F ecrmip.F ecrndx.F ecrpei.F ecrtr.F ecrunq.F
 	ecscmd.F ecst.F ecsupp.F ecsw1093.F ecsw94.F ectemp.F ecthre.F
 	ectopo.F ectpc.F ectrap.F ectrea.F ecxmod.F edisal.F edlist.F
 	efaxe.F efbook.F eferrr.F eficlp.F eficv.F efiecp.F efieib.F
 	efijob.F efix.F efixi94.F eflcst.F efolmk.F efpard.F eftiel.F
 	egacst.F egaest.F egetds.F egfcst.F egttks.F ehcflo.F ehlix.F
 	ehreg.F eidedx.F eident.F eieffl.F einhlx.F einijo.F einirl.F
 	einiru.F einitk.F einsrl.F eipard.F eithr.F eknewb.F eknewe.F
 	elecid.F elongi.F emfill.F emskei.F emskev.F emskf.F emski.F
 	emskji.F emskmu.F enfmsk.F enighb.F enoise.F enprox.F enstat.F
 	epadcl.F epatrn.F epcalo.F epchg.F epneu.F epreda.F eproba.F
 	eprsto.F eprsum.F eprtpc.F ereset.F eroad.F escdef.F escoun.F
 	esfil.F eslas.F eslct.F eslctf.F eslowc.F estag.F esveto.F
 	eswpst.F etdifp.F ethres.F etrdev.F ewdifp.F ewircl.F ex3ijk.F
 	fawian.F ffield.F fidhea.F fidrot.F finiru.F fitall.F fitwri.F
 	fkink.F fkkpar.F floweh.F flowfi.F flowtr.F fmuid.F fpiden.F
 	frefit.F ftpcer.F ftrack.F
 	gambnk.F gapeco.F gasteer.F
 	hcalib.F hcalrd.F hcatow.F hcbhis.F hcfclu.F hchist.F hclcra.F
 	hcltst.F hclufi.F hcos.F hcsimm.F hdgdeb.F hdgfil.F hdgpot.F
 	hdgsum.F hdprec.F hdspre.F hflnoi.F hinijo.F hiniru.F hmener.F
 	hmfind.F hmroad.F hnoise.F hnoisy.F hpatco.F hphnoi.F hplink.F
 	hprana.F hpranp.F hprdig.F hpreda.F hprpot.F hprsum.F hprunc.F
 	hrcomp.F hrcpat.F hrdcal.F hroad.F hslink.F hslowc.F hspare.F
 	hsptre.F hstofi.F htrack.F htubfi.F htwcr.F
 	iasign.F iattma.F ibnkin.F icaswt.F icftoi.F iclimb.F icrcco.F
 	ideadw.F idigpr.F ienang.F ifind1.F ifind2.F ifitp.F iftrak.F
 	igetti.F igettp.F igicha.F iheler.F iinijo.F iiniru.F iintrk.F
 	imatch.F inigap.F insect.F intrak.F ipakdi.F ipdsti.F iphcor.F
 	ipreda.F iprsum.F ipstat.F irefin.F ireopd.F isave.F ishuff.F
 	ishufl.F islowc.F isrch.F itbook.F itccut.F itcopr.F itcrec.F
 	itcrep.F itctpc.F itctrk.F itcxng.F iterr.F itextn.F ithist.F
 	itidy1.F itidy2.F itlnk1.F itlnk2.F itpcan.F itrak.F itrecf.F
 	itreci.F itree.F itrkci.F itrkeq.F itrkzr.F itrmca.F
@
text
@      SUBROUTINE ITREE(ITRY,MODE,IERR)
C-----------------------------------------------------------------------
C! ITC: form tree
C!
C!    Author      :- J. Sedgbeer 88/03/29
C!    Modified    :- I. Tomalin  89/02/28
C!
C!   Input:
C!     ITRY   /I : Search type flag.
C!     MODE   /I : = 1 if in TPC track extension phase.
C!                 = 2 if in ITC stand alone phase.
C!      commons:     /BCS/
C!                   /ITGAPC/
C!                   /ITRKER/
C!                   /IWBNKT/
C!
C!   Output:
C!      IERR  /I : IERR = 0 if ITREE ran correctly.
C!                 IERR = 1 if no elementary trees were found.
C!                 IERR = 2 if a more serious problem occured.
C!      commons:     /IWBNKT/
C!      work banks:  INNXIW,IOFNIW,INXLIW
C!
C!   called by : IGICHA and ITRAK
C!   calls     : none
C!
C!   Libraries required: none
C!
C!======================================================================
#ifndef DOC
#include "rparac.h"
#include "rflags.h"
#include "rlunit.h"
C-----------------------------------------------------------------------
C I/O Commons etc.
#include "bcs.h"
#include "itgapc.h"
#include "itrker.h"
#include "iwbnkt.h"
C-----------------------------------------------------------------------
C Dummy common block to save work bank indices.
      COMMON/IDUMYF/ICLRIW
      LOGICAL SETZ
      DATA SETZ/.TRUE./
C-----------------------------------------------------------------------
#include "bmacro.h"
C----------------------------------------------------------------------
      IERR = 1
      IF (SETZ) THEN
        INNXIW = 0
        IOFNIW = 0
        INXLIW = 0
        ICLRIW = 0
        SETZ = .FALSE.
      END IF
      IF (LROWS(ILNKIW).EQ.0) GOTO 1000
C
C Initialise
C
      KITC0 = NLINK('ITCO',0)
      IF (KITC0.EQ.0) GOTO 1000
      NCO = LROWS(KITC0)
C
      IERR = 0
C
      NOLNK = LROWS(ILNKIW)
C The following bank will give the number of "next" links connected to
C each link.
      IF (INNXIW.GT.0) THEN
        CALL WDROP(IW,INNXIW)
        CALL RERROR('ITREE',1,'INNXIW work bank still exists')
      END IF
      CALL WBANK(IW,INNXIW,LMHLEN+NOLNK,*950)
      IW(INNXIW+LMHCOL) = 1
      IW(INNXIW+LMHROW) = NOLNK
C The following bank will give the offset to these connecting links in
C the INXLIW bank.
      IF (IOFNIW.GT.0) THEN
        CALL WDROP(IW,IOFNIW)
        CALL RERROR('ITREE',2,'IOFNIW work bank still exists')
      END IF
      CALL WBANK(IW,IOFNIW,LMHLEN+NOLNK,*950)
      IW(IOFNIW+LMHCOL) = 1
      IW(IOFNIW+LMHROW) = NOLNK
C The following bank will contain a list of the "next" links connecting
C to each link. It is pointed to by the IOFNIW bank. For the moment it
C is set to a sensible length and will be extended later if necessary.
      IF (INXLIW.GT.0) THEN
        CALL WDROP(IW,INXLIW)
        CALL RERROR('ITREE',3,'INNLIW work bank still exists')
      END IF
      CALL WBANK(IW,INXLIW,LMHLEN+NOLNK,*950)
      IW(INXLIW+LMHCOL) = 1
      IW(INXLIW+LMHROW) = 0
C Create coordinate to link relationship work bank.
      IF (ICLRIW.GT.0) THEN
        CALL WDROP(IW,ICLRIW)
        CALL RERROR('ITREE',4,'ICLRIW work bank still exists')
      END IF
      CALL WBANK(IW,ICLRIW,LMHLEN+2*NCO+1,*950)
      IW(ICLRIW+LMHCOL) = 1
      IW(ICLRIW+LMHROW) = 2*NCO + 1
C
      IOFF = ICLRIW + LMHLEN + NCO + 1
C
C Note where each coord. first appears in the link list (if anywhere).
C Use only the 1st coordinate in each link, not the 2nd.
C Also zero the pointer arrays.
      DO 5 I=LROWS(ILNKIW),1,-1
        IPNT = KROW(ILNKIW,I)
C       WRITE(LDEBRL,6001) I,(IW(IPNT+J),J=1,3),RW(IPNT+4)
 6001   FORMAT(' ITREE : Link ',I5,' has coords ',2I5,' IGAP=',I2,
     +  ' and curvature ',E10.3)
        ICO = IW(IPNT+1)
        IW(ICO+IOFF) = I
    5 CONTINUE
C
C Loop over all the links.
      DO 35 JLNK=1,LROWS(ILNKIW)
        JPNT = KROW(ILNKIW,JLNK)
C Find the link "KLNK" which shares a coord. with link JLNK.
        JCO = IW(JPNT+2)
        KLNK = IW(JCO+IOFF)
C If there wasn't one, then give up on link "JLNK".
        IF (KLNK.EQ.0) GOTO 35
        KPNT = KROW(ILNKIW,KLNK)
C Note the offset
        IW(IOFNIW+LMHLEN+JLNK) = LROWS(INXLIW)
C Start of loop over all links "KLNK" sharing coord.'s with link "JLNK".
   10   CONTINUE
C If in the ITC stand-alone phase, then check that links "JLNK" and
C "KLNK" have compatible curvatures.
        IF (MODE.EQ.2) THEN
          TJ = RW(JPNT+4)
          JGAP = IW(JPNT+3)
          TK = RW(KPNT+4)
          KGAP = IW(KPNT+3)
          ERRT = CCRVIT(IOGPIT(JGAP),IIGPIT(JGAP),IIGPIT(KGAP))
          IF (ABS(TJ-TK).GT.SIGNUM(ITRY)*ERRT) GOTO 25
        END IF
C Fill pointers to the next links of the elementary tree.
        IW(INNXIW+LMHLEN+JLNK) = IW(INNXIW+LMHLEN+JLNK) + 1
        IW(KNEXT(INXLIW)+1) = KLNK
        IF(FDEBRF.AND.JDBDRF(JULIT).GE.5) WRITE(LDEBRL,7001)
     +  IW(INNXIW+LMHLEN+JLNK),JLNK,KLNK,IW(JPNT+1),IW(JPNT+2),
     +  IW(KPNT+2),TJ,TK
 7001   FORMAT(' ITREE : Pointers ',6I5,2E13.3)
        IW(INXLIW+LMHROW) = IW(INXLIW+LMHROW) + 1
C Extend work bank if necessary.
        IF(LFRWRD(INXLIW).LE.0) THEN
          LEN = IW(INXLIW)
          IF (LEN.GT.500+50*NOLNK) GOTO 925
          CALL WBANK(IW,INXLIW,LEN+NOLNK,*950)
C Redefine IOFF and JPNT incase there was a garbage collection.
          IOFF = ICLRIW + LMHLEN + NCO + 1
          JPNT = KROW(ILNKIW,JLNK)
        END IF
   25   KLNK = KLNK + 1
        IF (KLNK.GT.NOLNK) GOTO 35
        KPNT = KROW(ILNKIW,KLNK)
        KCO = IW(KPNT+1)
        IF (JCO.EQ.KCO) GOTO 10
   35 CONTINUE
C
C End of loop.
C Compress INXLIW work bank.
      CALL WBANK(IW,INXLIW,LMHLEN+LROWS(INXLIW),*1000)
      GOTO 1000
C
C  Error returns
  925 CONTINUE
      IF(FDEBRF.AND.JDBDRF(JULIT).GE.1) CALL RERROR('ITREE',5,
     +  'Too many elementary trees found.')
      GOTO 975
  950 CONTINUE
      CALL RERROR('ITREE',6,'Insufficient BOS space.')
  975 CONTINUE
      IERR = 2
      IF (INNXIW.NE.0) CALL WDROP(IW,INNXIW)
      IF (IOFNIW.NE.0) CALL WDROP(IW,IOFNIW)
      IF (INXLIW.NE.0) CALL WDROP(IW,INXLIW)
C Normal ending
 1000 CONTINUE
      IF (ICLRIW.NE.0) CALL WDROP(IW,ICLRIW)
      END
#endif
@


1.1
log
@Initial revision
@
text
@a0 1
*DK itree
d71 1
a71 2
        CALL RERROR('ITREE',1,'INNXIW work bank still exists from
     &    earlier.  It should have been dropped.')
d80 1
a80 2
        CALL RERROR('ITREE',2,'IOFNIW work bank still exists from
     &    earlier.  It should have been dropped.')
d90 1
a90 2
        CALL RERROR('ITREE',3,'INNLIW work bank still exists from
     &    earlier.  It should have been dropped.')
d98 1
a98 2
        CALL RERROR('ITREE',4,'ICLRIW work bank still exists from
     &    earlier.  It should have been dropped.')
@


1.1.1.1
log
@import julia 300
@
text
@@
