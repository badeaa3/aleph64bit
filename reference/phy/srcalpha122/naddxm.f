      SUBROUTINE NADDXM(ITK,N,RMASS,QH,RI,NS,TL,RIEXP,SIGMA,IER)
CKEY ALPHA DEDX FROM NANO /INTERNAL
C-----------------------------------------------------------------------
C! NANO-reading version of R. Johnson's QDEDXM subroutine
C! On production, RI, RSIG, TL and NS from TPCSIM are stored.
C!
C!   Author   :- R. Johnson   10-5-90
C!   Modified :- Yves A. Maumary       27-OCT-1992 For SANDY 111
C!   Modified :- Gerrit Graefe         26-APR-1994 For ALPHA with
C!                                                 NanoDst input
C!   Modified :- Gerrit Graefe         10-MAY-1994 Added Dave Caspers bu
C!                                                 fixes for early 92 MC
C!
C! Analyse dE/dx for Monte Carlo events by faking the ionization
C! with a gaussian random number.  If called for real data, the
C! result will be the same as if QDEDX were called.
C!
C!
C!    Input:   ITK      /I       ALPHA track number
C!             N        /I       Number of hypothesis to try
C!             RMASS(n) /R       Mass hypotheses
C!             QH(n)    /R       Charge hypotheses (sign doesn't matter)
C!    Output:  RI       /R       Measured ionization (1.O=minion, Q=1)
C!             NS       /I       Number of useful wire samples on track
C!             TL       /R       Useful length of the track (cm)
C!             RIEXP(n) /R       Expected ionization for the given
C!                               mass hypothesis (1.0=minion, Q=1)
C!             SIGMA(n) /R       Sigma of dE/dx measurement error,
C!                               including the momentum error.
C!                               Note that one can calculate a
C!                               chi-squared with 1 d.o.f. as:
C!                               chi2 = ((RI-RIEXP)/SIGMA)**2
C!             IER      /I       Error return= 0 for success
C!                               1= can't find track bank or not
C!                                  a reconstructed charged track
C!                               3= track has no dE/dx information
C!                               4= can't find calibration banks
C!                                  TC1X, TC2X, and/or TC3X, TC4X
C!                               6= No MC truth
C!   Input to the entry point NMTAIL.  This entry may be called to
C!   -----                    ------   set the parameter TAIL, which
C!                                     otherwise defaults to 999. It
C!                                     only need be called once.
C!             TAIL     /R        If the dE/dx from TPCSIM is more than
C!                                TAIL sigmas from the "true" mean dE/dx
C!                                then the TPCSIM dE/dx will be kept.
C!                                This is to allow one to retain some
C!                                of the simulation of tails, which
C!                                usually arise from track overlap.
C!                                If TAIL is set less than 3.0, then
C!                                the value 3.0 is used. Set to a large
C!                                value if you don't want this feature.
C!
C=======================================================================
      IMPLICIT NONE
      SAVE
C ALPHA Version 122 - Implicit declaration include file : 12 April 1996
      INTEGER LCOLS, LROWS, KROW, KNEXT, ITABL,LFRWRD, LFRROW
      REAL RTABL
      INTEGER ID, NRBOS, L
      REAL ATG
      REAL QQPI,QQE,QQ2PI,QQPIH,QQRADP,QQC,QQH,QQHC,QQIRP,QELEP,QMFLD
      REAL QMFLDC,QTIME,QTIMEI,QTIMEL,QTIMES,QTIMET,QDHEEC,QDHEEL
      REAL QDHEPF,QDHETH,QDHEPH,QDHEEF,QDHEET,QDHET1,QDHEP1,QDHET2
      REAL QDHEP2,QDHEE1,QDHEE2,QDHEE3,QKEVRN,QKEVWT,QVXNOM,QVYNOM
      REAL QVZNOM,QVXNSG,QVYNSG,QVZNSG,QINLUM,QRINLN,QRINLU,QDBOFS
      REAL QEECWI,QVXBOM,QVYBOM,QSILUM,QRSLLU,QRSLBK,QRSLEW,QVTXBP
      REAL QVTEBP,QVTSBP,QSQT,QF,QP,QX,QY,QZ,QE,QM,QCH,QCT,QDB
      REAL QZB,QDBS2,QZBS2,QBC2,QSIG,QSMAT,QSIGX,QSIGY,QSIGZ,QSIGEE
      REAL QSIGE,QSIGPP,QSIGP,QSIGMM,QSIGM,QMCHIF,QPH,QPT,QRDFL,QVX,QVY
      REAL QVZ,QVEM,QVCHIF,QVDIF2,QVDIF3,QMSQ2,QMSQ3,QMSQ4,QM2,QM3,QM4
      REAL QDMSQ,QBETA,QGAMMA,QDOT3,QDOT4,QCOSA,QPPAR,QPPER,QCMASS
      REAL QCCHAR,QCLIFE,QCWIDT,QFRFIR,QFRFTL,QFRFP0,QFRFD0,QFRFZ0
      REAL QFRFAL,QFRFEM,QFRFC2,QFRIPE,QFRIPM,QFRIPI,QFRIPK,QFRIPP
      REAL QFRINK,QTEXTM,QTEXTL,QTEXAD,QEIDRI,QEIDEC,QEIDEI,QHMAED
      REAL QHMACS,QMCADH,QMCADC,QMCAAM,QMCAAC,QMUISR,QMUIDM,QPECER
      REAL QPECE1,QPECE2,QPECTH,QPECPH,QPECEC,QPEPT1,QPEPP1,QPEPT3
      REAL QPEPP3,QPHCER,QPHCTH,QPHCPH,QPHCEC,QEFOWE,QEGPR1,QEGPR2
      REAL QEGPF4,QEGPDM,QPGPR1,QPGPR2,QPGPF4,QPGPDM,QPGPST,QPGPQ1
      REAL QPGPQ2,QPGPM1,QPGPM2,QPGPMA,QPGPER,QPGPTR,QPGPPR,QYV0VX
      REAL QYV0VY,QYV0VZ,QYV0X1,QYV0X2,QYV0C2,QYV0DM,QYV0S1,QYV0S2
      REAL QDECA2,QDECAN,QMASV0,QMCHI2,QMDIFF,QPCHAR,QPLIFE,QPMASS
      REAL QPWIDT,QKBLOK,QPGAEF,QPGAGC,QPGAZS,QPGAPL,QPGAPH
      REAL QLEPPI,QLEPPE
      INTEGER KI, KI1,KI2
      INTEGER KCQDET,KCQFPA,KCQPAR,KCQVEC,KCQVRT,KHE,KHMU,KHPI,KHK,KHP
      INTEGER KHPHOT,KHNHAD,KMONTE,KRECO,KLOCKM,KSOVT,KSCHT,KSIST,KSAST
      INTEGER KSEHT,KSV0T,KSDCT,KSEFT,KSNET,KSGAT,KSJET,KSMCT,KSREV
      INTEGER KSMCV,KUNDEF,KFOVT,KLOVT,KNOVT,KFCHT,KLCHT,KNCHT,KFIST
      INTEGER KLIST,KNIST,KFAST,KLAST,KNAST,KFEHT,KLEHT,KNEHT,KFV0T
      INTEGER KLV0T,KNV0T,KFDCT,KLDCT,KNDCT,KFEFT,KLEFT,KNEFT,KFNET
      INTEGER KLNET,KNNET,KFGAT,KLGAT,KNGAT,KFJET,KLJET,KNJET,KFMCT
      INTEGER KLMCT,KNMCT,KFREV,KLREV,KNREV,KFMCV,KLMCV,KNMCV,KLUST
      INTEGER KLUSV,KFFRT,KLFRT,KFFRV,KLFRV,KNRET,KNCOT,KFFRD,KBIT
      INTEGER KCLACO,KCLAFR,KCLARM,KDEBUG,KEVT,KEXP,KFFILL,KFEOUT
      INTEGER KJOPTN,KLEOUT,KLROUT,KLOCK0,KLOCK1,KLOCK2,KMATIX,KMQFPA
      INTEGER KNEFIL,KNEOUT,KNEVT,KNPAST,KNQDET,KNQFPA,KNQLIN,KNQMTX
      INTEGER KNQPAR,KNQPST,KNREIN,KNREOU,KOQDET,KOQFPA,KOQLIN,KOQMTL
      INTEGER KOQMTS,KOQPAR,KOQPBT,KOQPLI,KOQTRA,KOQVEC,KOQVRT,KQPAR
      INTEGER KQVEC,KQVRT,KQWRK,KQZER,KRUN,KSTATU,KTDROP,KUCARD,KUCONS
      INTEGER KUHIST,KUINPU,KUOUTP,KUPRNT,KUPTER,KDEBU1,KDEBU2,KNWRLM
      INTEGER KEFOPT,KUEDIN,KUEDOU,KURTOX,KUCAR2,KNHDRN,KNBHAB,KSBHAB
      INTEGER KRSLLQ,KRSLNB,INDATA,KRINNE,KRINNF,KRINDC,KRINDQ,KRINNZ
      INTEGER KRINNB,KRINBM,KRINFR,KRINLR,KRINLF,KEVERT,KEVEDA,KEVETI
      INTEGER KEVEMI,KEVETY,KEVEES,KDHEFP,KDHENP,KDHENM,KKEVNT,KKEVNV
      INTEGER KKEVID,KDHENX,KDHENV,KDHENJ,KREVDS,KXTET1,KXTET2,KXTEL2
      INTEGER KXTCGC,KXTCLL,KXTCBN,KXTCCL,KXTCHV,KXTCEN,KCLASW,KERBOM
      INTEGER KBPSTA,KLOCUS,KFRET,KLRET,KFCOT,KLCOT,NAAFID,NAAJOB
      INTEGER NAASEV,NABCNT,NABHIT,NABOMB,NABOME,NABOMP,NABOMR,NABPTR
      INTEGER NADCAL,NADCRL,NADECO,NADEID,NADENF,NADEVT,NADEWI,NADFMC
      INTEGER NADFOT,NADGAM,NADHCO,NADHEA,NADHRL,NADJET,NADMID,NADMJT
      INTEGER NADMUO,NADNEU,NADPOB,NADRES,NADTBP,NADTMC,NADTRA,NADVER
      INTEGER NADVMC,NAECRQ,NAECTE,NAEGID,NAEGPC,NAEIDT,NAEJET,NAERRF
      INTEGER NAETDI,NAETKC,NAEVEH,NAEWHE,NAFICL,NAFKIN,NAFPOI,NAFPOL
      INTEGER NAFRFT,NAFRID,NAFRTL,NAFSTR,NAFTCL,NAFTCM,NAFTOC,NAFTTM
      INTEGER NAFVCL,NAFVER,NAFZFR,NAHCCV,NAHCTE,NAHINF,NAHMAD,NAHPDI
      INTEGER NAHROA,NAHSDA,NAHTUB,NAIASL,NAIPJT,NAIRJT,NAITCO,NAITMA
      INTEGER NAIXTR,NAIZBD,NAJBER,NAJEST,NAJSUM,NAKEVH,NAKINE,NAKJOB
      INTEGER NAKLIN,NAKPOL,NAKRUN,NALIDT,NALOLE,NALUPA,NAMCAD,NAMHIT
      INTEGER NAMTHR,NAMUDG,NAMUEX,NAOSTS,NAPART,NAPASL,NAPCHY,NAPCOB
      INTEGER NAPCOI,NAPCPA,NAPCQA,NAPCRL,NAPECO,NAPEHY,NAPEID,NAPEMH
      INTEGER NAPEPT,NAPEST,NAPEWI,NAPFER,NAPFHR,NAPFRF,NAPFRT,NAPHCO
      INTEGER NAPHER,NAPHHY,NAPHMH,NAPHST,NAPIDI,NAPITM,NAPLID,NAPLPD
      INTEGER NAPLSD,NAPMSK,NAPNEU,NAPPDS,NAPPOB,NAPPRL,NAPRTM,NAPSCO
      INTEGER NAPSPO,NAPSTR,NAPT2X,NAPTBC,NAPTCO,NAPTEX,NAPTMA,NAPTML
      INTEGER NAPTNC,NAPTST,NAPVCO,NAPYER,NAPYFR,NAPYNE,NAQDET,NAQFPA
      INTEGER NAQLIN,NAQMTL,NAQMTS,NAQPAR,NAQPBT,NAQPLI,NAQTRA,NAQVEC
      INTEGER NAQVRT,NAQWRK,NAQZER,NAREVH,NARHAH,NARTLO,NARTLS,NARUNH
      INTEGER NARUNR,NASFTR,NATEXS,NATGMA,NATMTL,NATPCO,NAVCOM,NAVCPL
      INTEGER NAVDCO,NAVDHT,NAVDXY,NAVDZT,NAVERT,NAVFHL,NAVFLG,NAVFPH
      INTEGER NAVHLS,NAVPLH,NAX1AD,NAX1SC,NAX1TI,NAX2DF,NAX3EC,NAX3EW
      INTEGER NAX3HC,NAX3IT,NAX3L2,NAX3LU,NAX3TM,NAX3TO,NAX3TP,NAX3X3
      INTEGER NAXTBN,NAXTBP,NAXTCN,NAXTEB,NAXTOP,NAXTRB,NAYV0V,NAZPFR
      INTEGER NANBIP,NAPGAC,NAPMSC,NAPTHR,NAPDLT,NAPMLT,NAPLJT
      INTEGER NAEFOL,NAMUID,NAPGID,NAPGPC,JQVEQX,JQVEQY,JQVEQZ,JQVEQE
      INTEGER JQVEQM,JQVEQP,JQVECH,JQVETN,JQVESC,JQVEKS,JQVECL,JQVEPA
      INTEGER JQVEQD,JQVENP,JQVESP,JQVEOV,JQVEEV,JQVEND,JQVEDL,JQVENO
      INTEGER JQVEOL,JQVENM,JQVEML,JQVEBM,JQVELK,JQVEDB,JQVEZB,JQVESD
      INTEGER JQVESZ,JQVECB,JQVEEM,JQVECF,JQVEEW,JQVEUS,JQVRVX,JQVRVY
      INTEGER JQVRVZ,JQVRVN,JQVRTY,JQVRIP,JQVRND,JQVRDL,JQVRAY,JQVRAF
      INTEGER JQVREM,JQVRCF,JQVRET,JQDEAF,JQDEAL,JQDENT,JQDEAT,JQDELT
      INTEGER JQDEAE,JQDEAH,JQDEAM,JQDECF,JQDEEC,JQDEHC,JQDEET,JQDEFI
      INTEGER JQDENF,JQDEFL,JQDENE,JQDEEL,JQDENH,JQDEHL,JQDELH,JQDEEF
      INTEGER JQDEPC,JQDEEG,JQDEMU,JQDEDX,JQDEPG,JQPAGN,JQPANA,JQPACO
      INTEGER JQPAMA,JQPACH,JQPALT,JQPAWI,JQPAAN
      INTEGER KJQDET,KCH,KTN,KMC
      INTEGER KBMASK,KCALFL,KCHGD,KCLASS,KDAU,KECAL,KENDV,KFOLLO,KHCAL
      INTEGER KLUNDS,KNCHGD,KNECAL,KNHCAL,KNMOTH,KMOTH,KMTCH,KNDAU
      INTEGER KNMTCH,KORIV,KSAME,KSMTCH,KSTABC,KTPCOD,KRDFL,KVN,KVTYPE
      INTEGER KVINCP,KVNDAU,KVYV0V,KVFVER,KVDAU,KI3,KI4,KFRFDF,KFRFNO
      INTEGER KFRTNV,KFRTNI,KFRTNE,KFRTNT,KFRTNR,KFRIBP,KFRIDZ,KFRIBC
      INTEGER KFRIDC,KFRIQF,KNTEX,KTEXSI,KTEXNS,KEIDIF,KEIDIP,KHMANF
      INTEGER KHMANE,KHMANL,KHMAMH,KHMAIG,KHMAND,KHMAIE,KHMAIT,KHMAIF
      INTEGER KMCANH,KMUIIF,KMUIST,KMUITN,KPECKD,KPECCC,KPECRB,KPECPC
      INTEGER KPHCKD,KPHCCC,KPHCRB,KPHCPC,KEFOTY,KEFOLE,KEFOLT,KEFOLH
      INTEGER KEFOLC,KEFOLJ,KPCQNA,KEGPST,KEGPQU,KEGPPE,KPGPQU,KPGPPE
      INTEGER KYV0K1,KYV0K2,KYV0IC,KSCNEW,KSCOLD,KFPADR,KGLUND,KMCCOD
      INTEGER KCANTI,KCDIR,KCDIRA,KCHT,KIDSAV,KPANTI,KPART,KPDIR,KPDIRA
      INTEGER KTLOR,KTLOR1,KVFITA,KVFITC,KVFITM,KVFITN,KVFITV,KVFTMC
      INTEGER KTLORX,KVGOOD,KVNEW,KVSAVA,KVSAVC,KVSAVE,KPARTX,KPCCOMP
      INTEGER KPGAPN,KPGAFA,KPGAPE,KLEPPA,KLEPJT,KLEPFL,KLEPPO,KLEPCH
      INTEGER KPGAST,KLEPVP,KLEPSP,KLEPLE,KLEPME,KLEPKT,JQDEPD,JQDEPM
      INTEGER KLFJET,KLLJET,KLNJET,KLJTNO
C-------------------- /QCDE/ --- COMMONs, DIMENSIONs, etc. ------------
C Start of QCDESH ----------------------- Description in QDATA ---------
      PARAMETER (KCQDET=34, KCQFPA=8, KCQPAR=10, KCQVEC=73, KCQVRT=30,
     & KHE=1, KHMU=2, KHPI=3, KHK=4, KHP=5, KHPHOT=1, KHNHAD=2,
     & KMONTE=-2, KRECO=-1, KLOCKM=14, KSOVT=1, KSCHT=2, KSIST=3,
     & KSAST=4, KSEHT=5, KSV0T=6, KSDCT=7, KSEFT=8, KSNET=9, KSGAT=10,
     & KSJET=11, KSMCT=12, KSREV=13,
     & KSMCV=14, KUNDEF=-12344321, QQPI=3.141593, QQE=2.718282,
     & QQ2PI=QQPI*2., QQPIH=QQPI/2., QQRADP=180./QQPI, QQC=2.997925E10,
     & QQH=6.582173E-25, QQHC=QQH*QQC, QQIRP=.00029979)
      CHARACTER CQDATE*8, CQDWRK*80, CQFHIS*80, CQFOUT*80, CQFWRK*80,
     & CQHTIT*80, CQSEC*3, CQTIME*8, CQUNPK*30, CQVERS*6, CQRLST*800,
     & CQELST*800
      COMMON /QCDEC/ CQDATE, CQDWRK, CQFHIS, CQFOUT, CQFWRK, CQHTIT,
     & CQSEC(14), CQTIME, CQUNPK, CQVERS, CQRLST, CQELST
      COMMON /QCDE/ QELEP, QMFLD ,QMFLDC, QTIME, QTIMEI, QTIMEL,
     & QTIMES, QTIMET, QDHEEC, QDHEEL, QDHEPF, QDHETH, QDHEPH, QDHEEF,
     & QDHEET, QDHET1, QDHEP1, QDHET2, QDHEP2, QDHEE1, QDHEE2, QDHEE3,
     & QKEVRN, QKEVWT, QVXNOM, QVYNOM, QVZNOM, QVXNSG, QVYNSG, QVZNSG,
     & QINLUM, QRINLN, QRINLU, QDBOFS, QEECWI(36), QVXBOM, QVYBOM,
     & QSILUM, QRSLLU, QRSLBK, QRSLEW , QVTXBP(3), QVTEBP(3), QVTSBP(3)
      COMMON /QCDE/  KFOVT, KLOVT, KNOVT, KFCHT, KLCHT, KNCHT, KFIST,
     & KLIST, KNIST, KFAST, KLAST, KNAST, KFEHT, KLEHT, KNEHT, KFV0T,
     & KLV0T, KNV0T, KFDCT, KLDCT, KNDCT, KFEFT, KLEFT, KNEFT, KFNET,
     & KLNET, KNNET, KFGAT, KLGAT, KNGAT, KFJET, KLJET, KNJET, KFMCT,
     & KLMCT, KNMCT, KFREV, KLREV, KNREV, KFMCV, KLMCV, KNMCV, KLUST,
     & KLUSV, KFFRT, KLFRT, KFFRV, KLFRV, KNRET, KNCOT, KFFRD,
     & KLFJET,KLLJET,KLNJET
      COMMON /QCDE/ KBIT(32), KCLACO(KCQFPA), KCLAFR(KCQFPA), KCLARM
     & (KCQFPA), KDEBUG, KEVT, KEXP, KFFILL, KFEOUT, KJOPTN(2,2),
     & KLEOUT, KLROUT, KLOCK0(KLOCKM,2), KLOCK1(KLOCKM,2), KLOCK2(
     & KLOCKM,2), KMATIX(6,6), KMQFPA, KNEFIL, KNEOUT, KNEVT, KNPAST,
     & KNQDET, KNQFPA, KNQLIN, KNQMTX, KNQPAR, KNQPST, KNREIN, KNREOU,
     & KOQDET, KOQFPA, KOQLIN, KOQMTL, KOQMTS, KOQPAR, KOQPBT, KOQPLI,
     & KOQTRA, KOQVEC, KOQVRT, KQPAR, KQVEC, KQVRT, KQWRK, KQZER, KRUN,
     & KSTATU, KTDROP, KUCARD, KUCONS, KUHIST, KUINPU, KUOUTP, KUPRNT,
     & KUPTER, KDEBU1, KDEBU2, KNWRLM, KEFOPT, KUEDIN, KUEDOU, KURTOX,
     & KUCAR2, KNHDRN, KNBHAB, KSBHAB, KRSLLQ, KRSLNB
      COMMON /QCDE/ INDATA
      COMMON /QCDE/ KRINNE, KRINNF, KRINDC, KRINDQ, KRINNZ, KRINNB,
     & KRINBM, KRINFR, KRINLR, KRINLF
      COMMON /QCDE/ KEVERT, KEVEDA, KEVETI, KEVEMI(4), KEVETY, KEVEES,
     & KDHEFP, KDHENP, KDHENM, KKEVNT, KKEVNV, KKEVID, KDHENX, KDHENV,
     & KDHENJ, KREVDS, KXTET1, KXTET2, KXTEL2, KXTCGC, KXTCLL, KXTCBN,
     & KXTCCL, KXTCHV, KXTCEN, KCLASW, KERBOM, KBPSTA
      DIMENSION KLOCUS(3,14)
      EQUIVALENCE (KLOCUS(1,1),KFOVT), (KFOVT,KFRET), (KLIST,KLRET),
     & (KFIST,KFCOT), (KLAST,KLCOT)
      COMMON /QCDE/ XCOPYJ, XFLIAC, XHISTO, XLREV(2), XLREV2(2), XMCEV,
     & XMINI, XSYNTX, XWREVT, XWRRUN, XFILMC, XFILCH, XFILV0, XFILCO,
     & XFILEF, XFILPC, XFILGA, XFILJE,
     & XPRHIS, XFILL, XVITC, XVTPC, XVECAL, XVLCAL, XVTPCD,
     & XVSATR, XVHCAL, XHVTRG, XSREC, XWMINI, XIOKLU, XIOKSI, XFRF2,
     & XNSEQ, XVDOK, XFRF0, XFMUID, XFILEM, XWNANO, XROKSI, XGETBP,
     & XJTHRU
      LOGICAL XCOPYJ, XFLIAC, XHISTO, XLREV, XLREV2, XMCEV, XMINI,
     & XSYNTX, XWREVT, XWRRUN, XFILMC, XFILCH, XFILV0, XFILCO, XFILEF,
     & XFILPC, XPRHIS, XFILL, XVITC, XVTPC, XVECAL, XVLCAL, XVTPCD,
     & XVSATR, XVHCAL, XHVTRG, XSREC, XWMINI, XIOKLU, XFRF2, XFILJE,
     & XNSEQ, XFILGA, XVDOK, XFRF0, XFMUID, XFILEM, XWNANO, XIOKSI,
     & XROKSI, XGETBP, XJTHRU
C-------------------- /NANCOM/ --- NanoDst steering -------------------
C! XNANO   .TRUE. if input is a NanoDst (in NANO or EPIO format, dependi
C!                   XNANOR)
C!
      LOGICAL XNANO
      COMMON /NANCOM/XNANO
C--------------------- end of NANCOM ----------------------------------
      INTEGER LMHLEN, LMHCOL, LMHROW
      PARAMETER (LMHLEN=2, LMHCOL=1, LMHROW=2)
      INTEGER IW
      REAL RW(10000)
      COMMON /BCS/ IW(10000)
      EQUIVALENCE (RW(1),IW(1))
C------------------ /QCNAMI/ --- name indices -------------------------
      COMMON /QCNAMI/ NAAFID,NAAJOB,NAASEV,NABCNT,NABHIT,NABOMB,
     1 NABOME,NABOMP,NABOMR,NABPTR,NADCAL,NADCRL,NADECO,NADEID,NADENF,
     2 NADEVT,NADEWI,NADFMC,NADFOT,NADGAM,NADHCO,NADHEA,NADHRL,NADJET,
     3 NADMID,NADMJT,NADMUO,NADNEU,NADPOB,NADRES,NADTBP,NADTMC,NADTRA,
     4 NADVER,NADVMC,NAECRQ,NAECTE,NAEGID,NAEGPC,NAEIDT,NAEJET,NAERRF,
     5 NAETDI,NAETKC,NAEVEH,NAEWHE,NAFICL,NAFKIN,NAFPOI,NAFPOL,NAFRFT,
     6 NAFRID,NAFRTL,NAFSTR,NAFTCL,NAFTCM,NAFTOC,NAFTTM,NAFVCL,NAFVER,
     7 NAFZFR,NAHCCV,NAHCTE,NAHINF,NAHMAD,NAHPDI,NAHROA,NAHSDA,NAHTUB,
     8 NAIASL,NAIPJT,NAIRJT,NAITCO,NAITMA,NAIXTR,NAIZBD,NAJBER,NAJEST,
     9 NAJSUM,NAKEVH,NAKINE,NAKJOB,NAKLIN,NAKPOL,NAKRUN,NALIDT,NALOLE,
     A NALUPA,NAMCAD,NAMHIT,NAMTHR,NAMUDG,NAMUEX,NAOSTS,NAPART,NAPASL,
     B NAPCHY,NAPCOB,NAPCOI,NAPCPA,NAPCQA,NAPCRL,NAPECO,NAPEHY,NAPEID,
     C NAPEMH,NAPEPT,NAPEST,NAPEWI,NAPFER,NAPFHR,NAPFRF,NAPFRT,NAPHCO,
     D NAPHER,NAPHHY,NAPHMH,NAPHST,NAPIDI,NAPITM,NAPLID,NAPLPD,NAPLSD,
     E NAPMSK,NAPNEU,NAPPDS,NAPPOB,NAPPRL,NAPRTM,NAPSCO,NAPSPO,NAPSTR,
     F NAPT2X,NAPTBC,NAPTCO,NAPTEX,NAPTMA,NAPTML,NAPTNC,NAPTST,NAPVCO,
     G NAPYER,NAPYFR,NAPYNE,NAQDET,NAQFPA,NAQLIN,NAQMTL,NAQMTS,NAQPAR,
     H NAQPBT,NAQPLI,NAQTRA,NAQVEC,NAQVRT,NAQWRK,NAQZER,NAREVH,NARHAH,
     I NARTLO,NARTLS,NARUNH,NARUNR,NASFTR,NATEXS,NATGMA,NATMTL,NATPCO,
     J NAVCOM,NAVCPL,NAVDCO,NAVDHT,NAVDXY,NAVDZT,NAVERT,NAVFHL,NAVFLG,
     K NAVFPH,NAVHLS,NAVPLH,NAX1AD,NAX1SC,NAX1TI,NAX2DF,NAX3EC,NAX3EW,
     L NAX3HC,NAX3IT,NAX3L2,NAX3LU,NAX3TM,NAX3TO,NAX3TP,NAX3X3,NAXTBN,
     M NAXTBP,NAXTCN,NAXTEB,NAXTOP,NAXTRB,NAYV0V,NAZPFR,NAEFOL,NAMUID,
     N NAPGID,NAPGPC,NAPGAC,NAPMSC,NAPTHR,NANBIP,NAPDLT,NAPMLT,NAPLJT
C--------------------- end of QCNAMI ----------------------------------
C------------------ /QQQQJJ/ --- HAC parameters for ALPHA banks -------
      PARAMETER (JQVEQX= 1,JQVEQY= 2,JQVEQZ= 3,JQVEQE= 4,JQVEQM= 5,
     & JQVEQP= 6,JQVECH= 7,JQVETN= 8,JQVESC= 9,JQVEKS=10,JQVECL=11,
     & JQVEPA=12,JQVEQD=13,JQVENP=14,JQVESP=15,JQVEOV=16,JQVEEV=17,
     & JQVEND=18,JQVEDL=19,JQVENO=20,JQVEOL=21,JQVENM=22,JQVEML=23,
     & JQVEBM=24,JQVELK=38,JQVEDB=39,JQVEZB=40,JQVESD=41,JQVESZ=42,
     & JQVECB=43,JQVEEM=44,JQVECF=54,JQVEEW=55,JQVEUS=56)
      PARAMETER ( JQVRVX=1,JQVRVY=2,JQVRVZ=3,JQVRVN=4,JQVRTY=5,
     1   JQVRIP=6,JQVRND=7,JQVRDL=8,JQVRAY=9,JQVRAF=10,JQVREM=11,
     2   JQVRCF=17,JQVRET=18)
      PARAMETER ( JQDEAF= 1,JQDEAL= 2,JQDENT= 3,JQDEAT= 4,JQDELT= 8,
     &  JQDEAE= 9,JQDEAH=10,JQDEAM=11,JQDECF=12,JQDEEC=13,JQDEHC=14,
     &  JQDEET=15,JQDEFI=16,JQDENF=17,JQDEFL=18,JQDENE=19,JQDEEL=20,
     &  JQDENH=21,JQDEHL=22,JQDELH=23,JQDEEF=24,JQDEPC=25,JQDEEG=26,
     &  JQDEMU=27,JQDEDX=28,JQDEPG=29,JQDEPD=30,JQDEPM=31)
      PARAMETER ( JQPAGN=1, JQPANA=2, JQPACO=5, JQPAMA=6, JQPACH=7,
     & JQPALT=8,JQPAWI=9,JQPAAN=10)
C--------------------- end of QCDESH ----------------------------------
      EXTERNAL CQPART, CQTPN, XCEQAN, XLUMOK, XPEQAN, XPEQOR, XPEQU,
     & XVDEOK, LLUMOK, SLUMOK
      CHARACTER * 12 CQPART, CQTPN
      LOGICAL XCAL, XCEQAN, XCEQOR, XCEQU, XECAL, XEID, XFRF, XHCAL,
     & XHMA, XLOCK, XLOCKN, XMC, XLUMOK, XMCA, XPEO, XPHO, XPEQAN,
     & XPEQOR, XPEQU, XSAME, XSIG, XTEX, XPEC, XPEP, XPHC, XYV0,
     & XFRIQF, XEFO, XPCQ, XEGP, XMUI, XVDEOK, XPGP, LLUMOK, SLUMOK,
     & XPGAC, XLEPTG, XLEPTH
      REAL PI, TWOPI, PIBY2, PIBY3, PIBY4, PIBY6, PIBY8, PIBY12
      REAL RADEG, DEGRA
      REAL CLGHT, ALDEDX
      INTEGER NBITW, NBYTW, LCHAR
      PARAMETER (PI=3.141592653589)
      PARAMETER (RADEG=180./PI, DEGRA=PI/180.)
      PARAMETER (TWOPI = 2.*PI , PIBY2 = PI/2., PIBY4 = PI/4.)
      PARAMETER (PIBY6 = PI/6. , PIBY8 = PI/8.)
      PARAMETER (PIBY12= PI/12., PIBY3 = PI/3.)
      PARAMETER (CLGHT = 29.9792458, ALDEDX = 0.000307)
      PARAMETER (NBITW = 32 , NBYTW = NBITW/8 , LCHAR = 4)
      INTEGER JEFOPX,JEFOPY,JEFOPZ,JEFOEW,JEFOWE,JEFOTY,JEFOLE,JEFOLT,
     +          JEFOLH,JEFOLC,JEFOLJ,LEFOLA
      PARAMETER(JEFOPX=1,JEFOPY=2,JEFOPZ=3,JEFOEW=4,JEFOWE=5,JEFOTY=6,
     +          JEFOLE=7,JEFOLT=8,JEFOLH=9,JEFOLC=10,JEFOLJ=11,
     +          LEFOLA=11)
      INTEGER JEGPPX,JEGPPY,JEGPPZ,JEGPR1,JEGPR2,JEGPF4,JEGPDM,JEGPST,
     +          JEGPQU,JEGPPE,LEGPCA
      PARAMETER(JEGPPX=1,JEGPPY=2,JEGPPZ=3,JEGPR1=4,JEGPR2=5,JEGPF4=6,
     +          JEGPDM=7,JEGPST=8,JEGPQU=9,JEGPPE=10,LEGPCA=10)
      INTEGER JEIDIF,JEIDR1,JEIDR2,JEIDR3,JEIDR4,JEIDR5,JEIDR6,JEIDR7,
     +          JEIDEC,JEIDIP,JEIDE1,JEIDE2,JEIDE3,JEIDFR,JEIDPE,LEIDTA
      PARAMETER(JEIDIF=1,JEIDR1=2,JEIDR2=3,JEIDR3=4,JEIDR4=5,JEIDR5=6,
     +          JEIDR6=7,JEIDR7=8,JEIDEC=9,JEIDIP=10,JEIDE1=11,
     +          JEIDE2=12,JEIDE3=13,JEIDFR=14,JEIDPE=15,LEIDTA=15)
      INTEGER JFRFIR,JFRFTL,JFRFP0,JFRFD0,JFRFZ0,JFRFAL,JFRFEM,JFRFC2,
     +          JFRFDF,JFRFNO,LFRFTA
      PARAMETER(JFRFIR=1,JFRFTL=2,JFRFP0=3,JFRFD0=4,JFRFZ0=5,JFRFAL=6,
     +          JFRFEM=7,JFRFC2=28,JFRFDF=29,JFRFNO=30,LFRFTA=30)
      INTEGER JFRIBP,JFRIDZ,JFRIBC,JFRIDC,JFRIPE,JFRIPM,JFRIPI,JFRIPK,
     +          JFRIPP,JFRINK,JFRIQF,LFRIDA
      PARAMETER(JFRIBP=1,JFRIDZ=2,JFRIBC=3,JFRIDC=4,JFRIPE=5,JFRIPM=6,
     +          JFRIPI=7,JFRIPK=8,JFRIPP=9,JFRINK=10,JFRIQF=11,
     +          LFRIDA=11)
      INTEGER JFRTIV,JFRTNV,JFRTII,JFRTNI,JFRTNE,JFRTIT,JFRTNT,JFRTNR,
     +          LFRTLA
      PARAMETER(JFRTIV=1,JFRTNV=2,JFRTII=3,JFRTNI=4,JFRTNE=5,JFRTIT=6,
     +          JFRTNT=7,JFRTNR=8,LFRTLA=8)
      INTEGER JHMANF,JHMANE,JHMANL,JHMAMH,JHMAIG,JHMAED,JHMACS,JHMAND,
     +          JHMAIE,JHMAIT,JHMAIF,JHMATN,LHMADA
      PARAMETER(JHMANF=1,JHMANE=2,JHMANL=3,JHMAMH=4,JHMAIG=5,JHMAED=6,
     +          JHMACS=7,JHMAND=8,JHMAIE=9,JHMAIT=10,JHMAIF=11,
     +          JHMATN=12,LHMADA=12)
      INTEGER JMCANH,JMCADH,JMCADC,JMCAAM,JMCAAC,JMCATN,LMCADA
      PARAMETER(JMCANH=1,JMCADH=3,JMCADC=5,JMCAAM=7,JMCAAC=8,JMCATN=9,
     +          LMCADA=9)
      INTEGER JMUIIF,JMUISR,JMUIDM,JMUIST,JMUITN,LMUIDA
      PARAMETER(JMUIIF=1,JMUISR=2,JMUIDM=3,JMUIST=4,JMUITN=5,LMUIDA=5)
      INTEGER JPCQNA,JPCQPX,JPCQPY,JPCQPZ,JPCQEN,LPCQAA
      PARAMETER(JPCQNA=1,JPCQPX=2,JPCQPY=3,JPCQPZ=4,JPCQEN=5,LPCQAA=5)
      INTEGER JPDLPA,JPDLJT,JPDLPI,JPDLPE,JPDLVP,JPDLFR,LPDLTA
      PARAMETER (JPDLPA=1,JPDLJT=2,JPDLPI=3,JPDLPE=4,JPDLVP=5,
     &           JPDLFR=6,LPDLTA=6)
      INTEGER JPECER,JPECE1,JPECE2,JPECTH,JPECPH,JPECEC,JPECKD,JPECCC,
     +          JPECRB,JPECPC,LPECOA
      PARAMETER(JPECER=1,JPECE1=2,JPECE2=3,JPECTH=4,JPECPH=5,JPECEC=6,
     +          JPECKD=7,JPECCC=8,JPECRB=9,JPECPC=10,LPECOA=10)
      INTEGER JPEPT1,JPEPP1,JPEPT3,JPEPP3,LPEPTA
      PARAMETER(JPEPT1=1,JPEPP1=2,JPEPT3=3,JPEPP3=4,LPEPTA=4)
      INTEGER JPGAEC,JPGATC,JPGAPC,JPGAR1,JPGAR2,JPGAF4,JPGADM,JPGAST,
     +          JPGAQU,JPGAQ1,JPGAQ2,JPGAM1,JPGAM2,JPGAMA,JPGAER,JPGATR,
     +          JPGAPR,JPGAEF,JPGAGC,JPGAZS,JPGAPL,JPGAPH,JPGAPN,JPGAFA,
     +          JPGAPE,LPGACA
      PARAMETER(JPGAEC=1,JPGATC=2,JPGAPC=3,JPGAR1=4,JPGAR2=5,JPGAF4=6,
     +          JPGADM=7,JPGAST=8,JPGAQU=9,JPGAQ1=10,JPGAQ2=11,
     +          JPGAM1=12,JPGAM2=13,JPGAMA=14,JPGAER=15,JPGATR=16,
     +          JPGAPR=17,JPGAEF=18,JPGAGC=19,JPGAZS=20,JPGAPL=21,
     +          JPGAPH=22,JPGAPN=23,JPGAFA=24,JPGAPE=25,LPGACA=25)
      INTEGER JPGPEC,JPGPTC,JPGPPC,JPGPR1,JPGPR2,JPGPF4,JPGPDM,JPGPST,
     +          JPGPQU,JPGPQ1,JPGPQ2,JPGPM1,JPGPM2,JPGPMA,JPGPER,JPGPTR,
     +          JPGPPR,JPGPPE,LPGPCA
      PARAMETER(JPGPEC=1,JPGPTC=2,JPGPPC=3,JPGPR1=4,JPGPR2=5,JPGPF4=6,
     +          JPGPDM=7,JPGPST=8,JPGPQU=9,JPGPQ1=10,JPGPQ2=11,
     +          JPGPM1=12,JPGPM2=13,JPGPMA=14,JPGPER=15,JPGPTR=16,
     +          JPGPPR=17,JPGPPE=18,LPGPCA=18)
      INTEGER JPHCER,JPHCTH,JPHCPH,JPHCEC,JPHCKD,JPHCCC,JPHCRB,JPHCNF,
     +          JPHCPC,LPHCOA
      PARAMETER(JPHCER=1,JPHCTH=2,JPHCPH=3,JPHCEC=4,JPHCKD=5,JPHCCC=6,
     +          JPHCRB=7,JPHCNF=8,JPHCPC=9,LPHCOA=9)
      INTEGER JPMLFL,JPMLPO,JPMLCH,JPMLSP,JPMLLE,JPMLME,JPMLKT,JPMLFR,
     +          LPMLTA
      PARAMETER (JPMLFL=1,JPMLPO=2,JPMLCH=3,JPMLSP=4,JPMLLE=5,
     &           JPMLME=6,JPMLKT=7,JPMLFR=8,LPMLTA=8)
      INTEGER JTEXSI,JTEXTM,JTEXTL,JTEXNS,JTEXAD,JTEXTN,JTEXSF,LTEXSA
      PARAMETER(JTEXSI=1,JTEXTM=2,JTEXTL=3,JTEXNS=4,JTEXAD=5,JTEXTN=6,
     +          LTEXSA=6)
      INTEGER JYV0K1,JYV0K2,JYV0VX,JYV0VY,JYV0VZ,JYV0VM,JYV0PX,JYV0PY,
     +          JYV0PZ,JYV0PM,JYV0X1,JYV0X2,JYV0XM,JYV0C2,JYV0IC,JYV0P1,
     +          JYV0P2,JYV0EP,JYV0DM,JYV0S1,JYV0S2,LYV0VA
      PARAMETER(JYV0K1=1,JYV0K2=2,JYV0VX=3,JYV0VY=4,JYV0VZ=5,JYV0VM=6,
     +          JYV0PX=12,JYV0PY=13,JYV0PZ=14,JYV0PM=15,JYV0X1=21,
     +          JYV0X2=22,JYV0XM=23,JYV0C2=26,JYV0IC=27,JYV0P1=28,
     +          JYV0P2=31,JYV0EP=34,JYV0DM=55,JYV0S1=56,JYV0S2=57,
     +          LYV0VA=57)
C--------------------- end of QCDE ------------------------------------
C -------- Start of /QNCDE/ Specific commons for the NANO -------------
      INTEGER  KONVEC,KCNVEC,KONDBM,KCNDBM,KONDCL,KCNDCL,KONDDE,KCNDDE,
     &  KONDHE,KCNDHE,KONBIP,KCNBIP,KONDJT,KCNDJT,KONDLV,KCNDLV,KONDMS,
     &  KCNDMS,KONDPH,KCNDPH,KONDTK,KCNDTK,KONDNT,KCNDNT,KONDAR,KCNDAR,
     &  KONDV0,KCNDV0,KONDGC,KCNDGC,KONDEJ,KCNDEJ,KONDOB,KCNDOB,KONEHE,
     &  KCNEHE
      COMMON /NBNKPO/KONVEC,KCNVEC,KONDBM,KCNDBM,KONDCL,KCNDCL,
     +               KONDDE,KCNDDE,KONDHE,KCNDHE,KONBIP,KCNBIP,
     +               KONDJT,KCNDJT,KONDLV,KCNDLV,KONDMS,KCNDMS,
     +               KONDOB,KCNDOB,KONDPH,KCNDPH,KONDTK,KCNDTK,
     +               KONDNT,KCNDNT,KONDAR,KCNDAR,KONDV0,KCNDV0,
     +               KONDGC,KCNDGC,KONDEJ,KCNDEJ,KONEHE,KCNEHE
      INTEGER JNDVHY,JNDVVX,JNDVVY,JNDVVZ,JNDVVM,JNDVTH,JNDVPH,JNDVPP,
     +        JNDVC2,JNDVDL,JNDVTT,LNDV0A
      PARAMETER (JNDVHY=1,JNDVVX=2,JNDVVY=3,JNDVVZ=4,JNDVVM=5,JNDVTH=6,
     +           JNDVPH=7,JNDVPP=8,JNDVC2=11,JNDVDL=12,JNDVTT=13,
     +           LNDV0A=13)
      INTEGER JNDTPX,JNDTPY,JNDTPZ,JNDTDZ,JNDTTA,JNDTTQ,LNDTKA
      PARAMETER(JNDTPX=1,JNDTPY=2,JNDTPZ=3,JNDTDZ=4,JNDTTA=5,JNDTTQ=6,
     +          LNDTKA=6)
      REAL    BJSPCH,BJSPEF,BBSPR1,BBSPR2,BEETT1,BEETT2,BEETM1,BEETM2
      LOGICAL NXHVOK,NXDEOK,NXVDOK,NXMUOK,NXLEPT,NXBJSC,NXBJSF,NXBEES,
     &        NXGAMP,NXQFVX,NXQFOK
      INTEGER MINTRK,NITCUT,NTPCUT,NITCUJ,NTPCUJ,MCOPTI
      REAL    ECHMIN,PCUTMI,PCUTMA,THCCUT,BD0CUT,BZ0CUT,PCUMIJ,PCUMAJ,
     &        THCCUJ,BD0CUJ,BZ0CUJ,BMYCUT,ENEVIS,PHOCUT,V0CHSI,V0CHBO,
     &        PMINMC,REFMIN,RMYCUT
      INTEGER KTNO
      REAL    QV0PCH,QV0NCH
      CHARACTER*2 RECOOP
      CHARACTER*4 NCPROD
      CHARACTER*80 NCLPOT,NCLRUN
      CHARACTER*80 NCLNDS
      COMMON  /QNCDE/BJSPCH,BJSPEF,BBSPR1,BBSPR2,BEETT1,BEETT2,BEETM1,
     &        BEETM2,
     &        NXHVOK,NXDEOK,NXVDOK,NXMUOK,NXLEPT,NXBJSC,NXBJSF,NXBEES,
     &        NXGAMP,NXQFVX,NXQFOK
      COMMON  /QNCDE/ECHMIN,MINTRK,PCUTMI,PCUTMA,THCCUT,NITCUT,NTPCUT,
     &        BD0CUT,BZ0CUT,PCUMIJ,PCUMAJ,THCCUJ,NITCUJ,NTPCUJ,BD0CUJ,
     &        BZ0CUJ,BMYCUT,ENEVIS,PHOCUT,V0CHSI,V0CHBO,MCOPTI,PMINMC,
     &        REFMIN,RMYCUT
      COMMON  /QNCDE/RECOOP,NCPROD,NCLPOT,NCLRUN,NCLNDS
C -------- End of /QNCDE/ Specific commons for the NANO ----------------
      INTEGER JRHAPN,JRHAPD,JRHAPH,JRHAPV,JRHAAV,JRHADV,JRHADD,JRHANI,
     +          JRHANO,JRHACV,JRHANU,LRHAHA
      PARAMETER(JRHAPN=1,JRHAPD=3,JRHAPH=4,JRHAPV=5,JRHAAV=6,JRHADV=7,
     +          JRHADD=8,JRHANI=9,JRHANO=10,JRHACV=11,JRHANU=12,
     +          LRHAHA=12)
C
      INTEGER ITK,NS,IER,IERR1
      REAL    RMASS(*),QH(*),RI,TL,RIEXP(*),SIGMA(*)
      INTEGER I,N,KBESTM
      REAL    Q
C
C    Parameters for correction of number of samples for 1992 MC data.
      INTEGER IGAVER,IJCOR,KRHAH,NAMIND
      REAL    XLO,XMID,XHI,XBK,SCALE_LO,SCALE_HI,XSAMPL
      LOGICAL WIRBUG
      CHARACTER*8 PNAME
      CHARACTER*4 CHAINT
      PARAMETER (XLO = 0.)
      PARAMETER (XMID = 260.)
      PARAMETER (XHI = 340.)
      PARAMETER (SCALE_LO = 1.2)
      PARAMETER (XBK = XLO + (XMID-XLO)/SCALE_LO)
      PARAMETER (SCALE_HI = (XHI-XBK)/(XHI-XMID))
C
C
      INTEGER JUVER,IRUN,JTYP,IMC,IREC
      REAL    TLMN,RPLIM,RMCM,RIEX1,SIGM1,R5,DX,RITRU,SGTRU,BG,SMP,SMPL
      REAL    SEED,SDEN,XRAN,YRAN
      LOGICAL XFIRST
      DATA TLMN/3./,RPLIM/999./,XFIRST/.TRUE./
C
      REAL    TAIL
C
C-------------------- /QMACRO/ --- statement functions ----------------
C - # of words/row in bank with index ID
      LCOLS(ID) = IW(ID+LMHCOL)
C - # of rows in bank with index ID
      LROWS(ID) = IW(ID+LMHROW)
C - index of next row in the bank with index ID
      KNEXT(ID) = ID + LMHLEN + IW(ID+1)*IW(ID+2)
C - index of row # NRBOS in the bank with index ID
      KROW(ID,NRBOS) = ID + LMHLEN + IW(ID+1)*(NRBOS-1)
C - # of free words in the bank with index ID
      LFRWRD(ID) = ID + IW(ID) - KNEXT(ID)
C - # of free rows in the bank with index ID
      LFRROW(ID) = LFRWRD(ID) / LCOLS(ID)
C - Lth integer element of the NRBOSth row of the bank with index ID
      ITABL(ID,NRBOS,L) = IW(ID+LMHLEN+(NRBOS-1)*IW(ID+1)+L)
C - Lth real element of the NRBOSth row of the bank with index ID
      RTABL(ID,NRBOS,L) = RW(ID+LMHLEN+(NRBOS-1)*IW(ID+1)+L)
C-------------------- /QCFUNC/ --- statement functions for ALPHA banks
      KJQDET(KI)=IW(KOQVEC+KI*KCQVEC+JQVEQD)
      QSQT(QF)=SIGN(SQRT(ABS(QF)),QF)
      QP(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQP)
      QX(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQX)
      QY(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQY)
      QZ(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQZ)
      QE(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQE)
      QM(KI)=RW(KOQVEC+KI*KCQVEC+JQVEQM)
      QCH(KI)=RW(KOQVEC+KI*KCQVEC+JQVECH)
      KCH(KI)=NINT (QCH(KI))
      QCT(KI)=QZ(KI)/QP(KI)
      QDB(KI)=RW(KOQVEC+KI*KCQVEC+JQVEDB)
      QZB(KI)=RW(KOQVEC+KI*KCQVEC+JQVEZB)
      QDBS2(KI)=RW(KOQVEC+KI*KCQVEC+JQVESD)
      QZBS2(KI)=RW(KOQVEC+KI*KCQVEC+JQVESZ)
      QBC2(KI)=RW(KOQVEC+KI*KCQVEC+JQVECB)
      QSIG(KI,KI1,KI2)=RW(KOQVEC+KI*KCQVEC+KMATIX(KI1,KI2)+JQVEEM)
      XSIG(KI)=RW(KOQVEC+KI*KCQVEC+JQVEEM).GE.0.
      QSMAT(KI,KI1)=RW(KOQVEC+KI*KCQVEC+KI1+JQVEEM)
      QSIGX(KI)=QSQT(QSMAT(KI,0))
      QSIGY(KI)=QSQT(QSMAT(KI,2))
      QSIGZ(KI)=QSQT(QSMAT(KI,5))
      QSIGEE(KI)=RW(KOQVEC+KI*KCQVEC+JQVEEM+9)
      QSIGE(KI)=QSQT(QSIGEE(KI))
      QSIGPP(KI)=(QX(KI)**2*QSMAT(KI,0)+QY(KI)**2*QSMAT(KI,2)+
     & QZ(KI)**2*QSMAT(KI,5)+2.*(QX(KI)*(QY(KI)*QSMAT(KI,1)+
     & QZ(KI)*QSMAT(KI,3))+QY(KI)*QZ(KI)*QSMAT(KI,4)))/QP(KI)**2
      QSIGP(KI)=QSQT(QSIGPP(KI))
      QSIGMM(KI)=QM(KI)*(QE(KI)**2*QSMAT(KI,9)+QX(KI)**2*QSMAT(KI,0)+
     & QY(KI)**2*QSMAT(KI,2)+QZ(KI)**2*QSMAT(KI,5)+2.*(QX(KI)*(QY(KI)*
     & QSMAT(KI,1)+QZ(KI)*QSMAT(KI,3))+QY(KI)*QZ(KI)*QSMAT(KI,4)-
     & QE(KI)*(QX(KI)*QSMAT(KI,6)+QY(KI)*QSMAT(KI,7)+
     & QZ(KI)*QSMAT(KI,8))))/AMAX1(QM(KI)**3,1.E-16)
      QSIGM(KI)=QSQT(QSIGMM(KI))
      QMCHIF(KI)=RW(KOQVEC+KI*KCQVEC+JQVECF)
      QPH(KI)=ATG(QY(KI),QX(KI))
      QPT(KI)=SQRT(QX(KI)**2+QY(KI)**2)
      KTN(KI)=IW(KOQVEC+KI*KCQVEC+JQVETN)
      KMC(KI)=KCLARM(IW(KOQVEC+KI*KCQVEC+JQVECL))
      KBMASK(KI,KI1)=IW(KOQVEC+KI*KCQVEC+KI1+JQVEBM-1)
      KCALFL(KI)=IW(KJQDET(KI)+JQDECF)
      KCHGD(KI,KI1)=IW(KOQLIN+KI1+IW(KJQDET(KI)+JQDEFL))
      KCLASS(KI)=KCLACO(IW(KOQVEC+KI*KCQVEC+JQVECL))
      KDAU(KI,KI1)=IW(KOQLIN+KI1+IW(KOQVEC+KI*KCQVEC+JQVEDL))
      KECAL(KI,KI1)=IW(KOQLIN+KI1+IW(KJQDET(KI)+JQDEEL))
      KENDV(KI)=IW(KOQVEC+KI*KCQVEC+JQVEEV)
      KFOLLO(KI)=IW(KOQVEC+KI*KCQVEC+JQVENP)
C
      KHCAL(KI,KI1)=IW(KOQLIN+KI1+IW(KJQDET(KI)+JQDEHL))
      KLUNDS(KI)=IW(KOQVEC+KI*KCQVEC+JQVEKS)
      KNCHGD(KI)=IW(KJQDET(KI)+JQDENF)
      KNECAL(KI)=IW(KJQDET(KI)+JQDENE)
      KNHCAL(KI)=IW(KJQDET(KI)+JQDENH)
      KNMOTH(KI)=IW(KOQVEC+KI*KCQVEC+JQVENO)
      KMOTH(KI,KI1)=IW(KOQLIN+KI1+IW(KOQVEC+KI*KCQVEC+JQVEOL))
      KMTCH(KI,KI1)=IW(KOQMTL+KI1+IW(KOQVEC+KI*KCQVEC+JQVEML))
      KNDAU(KI)=IW(KOQVEC+KI*KCQVEC+JQVEND)
      KNMTCH(KI)=IW(KOQVEC+KI*KCQVEC+JQVENM)
      KORIV(KI)=IW(KOQVEC+KI*KCQVEC+JQVEOV)
      KSAME(KI)=IW(KOQVEC+KI*KCQVEC+JQVESP)
      KSMTCH(KI,KI1)=IW(KOQMTS+KI1+IW(KOQVEC+KI*KCQVEC+JQVEML))
      KSTABC(KI)=IW(KOQVEC+KI*KCQVEC+JQVESC)
      KTPCOD(KI)=IW(KOQVEC+KI*KCQVEC+JQVEPA)
      XLOCKN(KI,KI1)=IAND(KBMASK(KI,KI1),KLOCK0(KI1,KMC(KI))).NE.0
      XLOCK(KI)=IW(KOQVEC+KI*KCQVEC+JQVELK).NE.0.OR.XLOCKN(KI,1).OR.
     & XLOCKN(KI,2).OR.XLOCKN(KI,3).OR.XLOCKN(KI,4).OR.
     & XLOCKN(KI,5).OR.XLOCKN(KI,6).OR.XLOCKN(KI,7).OR.
     & XLOCKN(KI,8).OR.XLOCKN(KI,9).OR.XLOCKN(KI,10).OR.
     & XLOCKN(KI,11).OR.XLOCKN(KI,12).OR.XLOCKN(KI,13).OR.
     & XLOCKN(KI,14)
      XMC(KI)=KCLARM(IW(KOQVEC+KI*KCQVEC+JQVECL)).NE.1
      QRDFL(KI,KI1)=RW(KOQVEC+KI*KCQVEC+JQVEUS+KI1-1)
      KRDFL(KI,KI1)=IW(KOQVEC+KI*KCQVEC+JQVEUS+KI1-1)
      XCAL(KI)=IW(KJQDET(KI)+JQDECF).NE.0
      XECAL(KI)=IABS(IW(KJQDET(KI)+JQDECF)).EQ.1
      XHCAL(KI)=IABS(IW(KJQDET(KI)+JQDECF)).EQ.2
C
      QVX(KI)=RW(KOQVRT+KI*KCQVRT+JQVRVX)
      QVY(KI)=RW(KOQVRT+KI*KCQVRT+JQVRVY)
      QVZ(KI)=RW(KOQVRT+KI*KCQVRT+JQVRVZ)
      KVN(KI)=IW(KOQVRT+KI*KCQVRT+JQVRVN)
      KVTYPE(KI)=IW(KOQVRT+KI*KCQVRT+JQVRTY)
      KVINCP(KI)=IW(KOQVRT+KI*KCQVRT+JQVRIP)
      KVNDAU(KI)=IW(KOQVRT+KI*KCQVRT+JQVRND)
      KVYV0V(KI)=IW(KOQVRT+KI*KCQVRT+JQVRAY)
      KVFVER(KI)=IW(KOQVRT+KI*KCQVRT+JQVRAF)
      KVDAU(KI,KI1)=IW(KOQLIN+KI1+IW(KOQVRT+KI*KCQVRT+JQVRDL))
      QVEM(KI,KI1,KI2)=RW(KOQVRT+KI*KCQVRT+KMATIX(KI1,KI2)+JQVREM)
      QVCHIF(KI)=RW(KOQVRT+KI*KCQVRT+JQVRCF)
      QVDIF2(KI1,KI2)=SQRT((QVX(KI1)-QVX(KI2))**2+(QVY(KI1)-
     &QVY(KI2))**2)
      QVDIF3(KI1,KI2)=SQRT((QVX(KI1)-QVX(KI2))**2+(QVY(KI1)-
     &QVY(KI2))**2+ (QVZ(KI1)-QVZ(KI2))**2)
C
      QMSQ2(KI1,KI2)=(QE(KI1)+QE(KI2))**2-(QX(KI1)+QX(KI2))**2-
     & (QY(KI1)+QY(KI2))**2-(QZ(KI1)+QZ(KI2))**2
      QMSQ3(KI1,KI2,KI3)=(QE(KI1)+QE(KI2)+QE(KI3))**2-
     & (QX(KI1)+QX(KI2)+QX(KI3))**2-(QY(KI1)+QY(KI2)+QY(KI3))**2-
     & (QZ(KI1)+QZ(KI2)+QZ(KI3))**2
      QMSQ4(KI1,KI2,KI3,KI4)=(QE(KI1)+QE(KI2)+QE(KI3)+QE(KI4))**2-
     & (QX(KI1)+QX(KI2)+QX(KI3)+QX(KI4))**2-(QY(KI1)+QY(KI2)+
     & QY(KI3)+QY(KI4))**2-(QZ(KI1)+QZ(KI2)+QZ(KI3)+QZ(KI4))**2
      QM2(KI1,KI2)=QSQT(QMSQ2(KI1,KI2))
      QM3(KI1,KI2,KI3)=QSQT(QMSQ3(KI1,KI2,KI3))
      QM4(KI1,KI2,KI3,KI4)=QSQT(QMSQ4(KI1,KI2,KI3,KI4))
      QDMSQ(KI1,KI2)=(QE(KI1)-QE(KI2))**2-(QX(KI1)-QX(KI2))**2-
     & (QY(KI1)-QY(KI2))**2-(QZ(KI1)-QZ(KI2))**2
      QBETA(KI)=QP(KI)/QE(KI)
      QGAMMA(KI)=1./SQRT((1.-QBETA(KI))*(1.+QBETA(KI)))
      QDOT3(KI1,KI2)=QX(KI1)*QX(KI2)+QY(KI1)*QY(KI2)+QZ(KI1)*QZ(KI2)
      QDOT4(KI1,KI2)=QE(KI1)*QE(KI2)-QDOT3(KI1,KI2)
      QCOSA(KI1,KI2)=QDOT3(KI1,KI2)/(QP(KI1)*QP(KI2))
      QPPAR(KI1,KI2)=QDOT3(KI1,KI2)/QP(KI2)
      QPPER(KI1,KI2)=SQRT((QY(KI1)*QZ(KI2)-QZ(KI1)*QY(KI2))**2+
     & (QZ(KI1)*QX(KI2)-QX(KI1)*QZ(KI2))**2+
     & (QX(KI1)*QY(KI2)-QY(KI1)*QX(KI2))**2)/QP(KI2)
      XSAME(KI1,KI2)=IAND(KBMASK(KI1,1),KBMASK(KI2,1)).NE.0.OR.
     & IAND(KBMASK(KI1,2),KBMASK(KI2,2)).NE.0.OR.
     & IAND(KBMASK(KI1,3),KBMASK(KI2,3)).NE.0.OR.
     & IAND(KBMASK(KI1,4),KBMASK(KI2,4)).NE.0.OR.
     & IAND(KBMASK(KI1,5),KBMASK(KI2,5)).NE.0.OR.
     & IAND(KBMASK(KI1,6),KBMASK(KI2,6)).NE.0.OR.
     & IAND(KBMASK(KI1,7),KBMASK(KI2,7)).NE.0.OR.
     & IAND(KBMASK(KI1,8),KBMASK(KI2,8)).NE.0.OR.
     & IAND(KBMASK(KI1,9),KBMASK(KI2,9)).NE.0.OR.
     & IAND(KBMASK(KI1,10),KBMASK(KI2,10)).NE.0
C
      QCMASS(KI)=RW(KOQPAR+KI*KCQPAR+JQPAMA)
      QCCHAR(KI)=RW(KOQPAR+KI*KCQPAR+JQPACH)
      QCLIFE(KI)=RW(KOQPAR+KI*KCQPAR+JQPALT)
      QCWIDT(KI)=RW(KOQPAR+KI*KCQPAR+JQPAWI)
      XCEQOR(KI,KI1)=KTPCOD(KI).EQ.KI1.OR.
     & KTPCOD(KI).EQ.IW(KOQPAR+KI1*KCQPAR+JQPAAN)
      XCEQU(KI,KI1)=KTPCOD(KI).EQ.KI1
C    QCFDET
      XFRF(KI)=IW(KJQDET(KI)+JQDEAF).NE.KQZER
      QFRFIR(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFIR)
      QFRFTL(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFTL)
      QFRFP0(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFP0)
      QFRFD0(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFD0)
      QFRFZ0(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFZ0)
      QFRFAL(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFAL)
      QFRFEM(KI,KI1,KI2)=RW(IW(KJQDET(KI)+JQDEAF)+
     & KMATIX(KI1,KI2)+JFRFEM)
      QFRFC2(KI)=RW(IW(KJQDET(KI)+JQDEAF)+JFRFC2)
      KFRFDF(KI)=IW(IW(KJQDET(KI)+JQDEAF)+JFRFDF)
      KFRFNO(KI)=IW(IW(KJQDET(KI)+JQDEAF)+JFRFNO)
C
      KFRTNV(KI)=IW(IW(KJQDET(KI)+JQDEAL)+JFRTNV)
      KFRTNI(KI)=IW(IW(KJQDET(KI)+JQDEAL)+JFRTNI)
      KFRTNE(KI)=IW(IW(KJQDET(KI)+JQDEAL)+JFRTNE)
      KFRTNT(KI)=IW(IW(KJQDET(KI)+JQDEAL)+JFRTNT)
      KFRTNR(KI)=IW(IW(KJQDET(KI)+JQDEAL)+JFRTNR)
C
      KFRIBP(KI)=IW(IW(KJQDET(KI)+JQDEFI)+JFRIBP)
      KFRIDZ(KI)=IW(IW(KJQDET(KI)+JQDEFI)+JFRIDZ)
      KFRIBC(KI)=IW(IW(KJQDET(KI)+JQDEFI)+JFRIBC)
      KFRIDC(KI)=IW(IW(KJQDET(KI)+JQDEFI)+JFRIDC)
      QFRIPE(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRIPE)
      QFRIPM(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRIPM)
      QFRIPI(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRIPI)
      QFRIPK(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRIPK)
      QFRIPP(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRIPP)
      QFRINK(KI)=RW(IW(KJQDET(KI)+JQDEFI)+JFRINK)
      KFRIQF(KI)=IW(IW(KJQDET(KI)+JQDEFI)+JFRIQF)
      XFRIQF(KI)=KFRIQF(KI).EQ.1.OR.KFRIQF(KI).EQ.3
C
      KNTEX(KI)=IW(KJQDET(KI)+JQDENT)
      XTEX(KI)=IW(KJQDET(KI)+JQDENT).NE.0
      KTEXSI(KI,KI1)=IW(IW(KJQDET(KI)+KI1+JQDENT)+JTEXSI)
      QTEXTM(KI,KI1)=RW(IW(KJQDET(KI)+KI1+JQDENT)+JTEXTM)
      QTEXTL(KI,KI1)=RW(IW(KJQDET(KI)+KI1+JQDENT)+JTEXTL)
      KTEXNS(KI,KI1)=IW(IW(KJQDET(KI)+KI1+JQDENT)+JTEXNS)
      QTEXAD(KI,KI1)=RW(IW(KJQDET(KI)+KI1+JQDENT)+JTEXAD)
C
      XEID(KI)=IW(KJQDET(KI)+JQDEAE).NE.KQZER
      KEIDIF(KI)=IW(IW(KJQDET(KI)+JQDEAE)+JEIDIF)
      QEIDRI(KI,KI1)=RW(IW(KJQDET(KI)+JQDEAE)+KI1+JEIDR1-1)
      QEIDEC(KI)=RW(IW(KJQDET(KI)+JQDEAE)+JEIDEC)
      KEIDIP(KI)=IW(IW(KJQDET(KI)+JQDEAE)+JEIDIP)
      QEIDEI(KI,KI1)=RW(IW(KJQDET(KI)+JQDEAE)+KI1+JEIDE1-1)
C
      XHMA(KI)=IW(KJQDET(KI)+JQDEAH).NE.KQZER
      KHMANF(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMANF)
      KHMANE(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMANE)
      KHMANL(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMANL)
      KHMAMH(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAMH)
      KHMAIG(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAIG)
      QHMAED(KI)=RW(IW(KJQDET(KI)+JQDEAH)+JHMAED)
      QHMACS(KI)=RW(IW(KJQDET(KI)+JQDEAH)+JHMACS)
      KHMAND(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAND)
      KHMAIE(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAIE)
      KHMAIT(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAIT)
      KHMAIF(KI)=IW(IW(KJQDET(KI)+JQDEAH)+JHMAIF)
C
      XMCA(KI)=IW(KJQDET(KI)+JQDEAM).NE.KQZER
      KMCANH(KI,KI1)=IW(IW(KJQDET(KI)+JQDEAM)+KI1+JMCANH-1)
      QMCADH(KI,KI1)=RW(IW(KJQDET(KI)+JQDEAM)+KI1+JMCADH-1)
      QMCADC(KI,KI1)=RW(IW(KJQDET(KI)+JQDEAM)+KI1+JMCADC-1)
      QMCAAM(KI)=RW(IW(KJQDET(KI)+JQDEAM)+JMCAAM)
      QMCAAC(KI)=RW(IW(KJQDET(KI)+JQDEAM)+JMCAAC)
C
      XMUI(KI)=IW(KJQDET(KI)+JQDEMU).NE.KQZER
      KMUIIF(KI)=IW(IW(KJQDET(KI)+JQDEMU)+JMUIIF)
      QMUISR(KI)=RW(IW(KJQDET(KI)+JQDEMU)+JMUISR)
      QMUIDM(KI)=RW(IW(KJQDET(KI)+JQDEMU)+JMUIDM)
      KMUIST(KI)=IW(IW(KJQDET(KI)+JQDEMU)+JMUIST)
      KMUITN(KI)=IW(IW(KJQDET(KI)+JQDEMU)+JMUITN)
C
      XPEC(KI)=IW(KJQDET(KI)+JQDEEC).NE.KQZER
      QPECER(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECER)
      QPECE1(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECE1)
      QPECE2(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECE2)
      QPECTH(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECTH)
      QPECPH(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECPH)
      QPECEC(KI)=RW(IW(KJQDET(KI)+JQDEEC)+JPECEC)
      KPECKD(KI)=IW(IW(KJQDET(KI)+JQDEEC)+JPECKD)
      KPECCC(KI)=IW(IW(KJQDET(KI)+JQDEEC)+JPECCC)
      KPECRB(KI)=IW(IW(KJQDET(KI)+JQDEEC)+JPECRB)
      KPECPC(KI)=IW(IW(KJQDET(KI)+JQDEEC)+JPECPC)
C
      XPEP(KI)=IW(KJQDET(KI)+JQDEET).NE.KQZER
      QPEPT1(KI)=RW(IW(KJQDET(KI)+JQDEET)+JPEPT1)
      QPEPP1(KI)=RW(IW(KJQDET(KI)+JQDEET)+JPEPP1)
      QPEPT3(KI)=RW(IW(KJQDET(KI)+JQDEET)+JPEPT3)
      QPEPP3(KI)=RW(IW(KJQDET(KI)+JQDEET)+JPEPP3)
C
      XPHC(KI)=IW(KJQDET(KI)+JQDEHC).NE.KQZER
      QPHCER(KI)=RW(IW(KJQDET(KI)+JQDEHC)+JPHCER)
      QPHCTH(KI)=RW(IW(KJQDET(KI)+JQDEHC)+JPHCTH)
      QPHCPH(KI)=RW(IW(KJQDET(KI)+JQDEHC)+JPHCPH)
      QPHCEC(KI)=RW(IW(KJQDET(KI)+JQDEHC)+JPHCEC)
      KPHCKD(KI)=IW(IW(KJQDET(KI)+JQDEHC)+JPHCKD)
      KPHCCC(KI)=IW(IW(KJQDET(KI)+JQDEHC)+JPHCCC)
      KPHCRB(KI)=IW(IW(KJQDET(KI)+JQDEHC)+JPHCRB)
      KPHCPC(KI)=IW(IW(KJQDET(KI)+JQDEHC)+JPHCPC)
C
      XEFO(KI)=IW(KJQDET(KI)+JQDEEF).NE.KQZER
      QEFOWE(KI)=RW(IW(KJQDET(KI)+JQDEEF)+JEFOWE)
      KEFOTY(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOTY)
      KEFOLE(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOLE)
      KEFOLT(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOLT)
      KEFOLH(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOLH)
      KEFOLC(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOLC)
      KEFOLJ(KI)=IW(IW(KJQDET(KI)+JQDEEF)+JEFOLJ)
C
      XPCQ(KI)=IW(KJQDET(KI)+JQDEPC).NE.KQZER
      KPCQNA(KI)=IW(IW(KJQDET(KI)+JQDEPC)+JPCQNA)
C
      XEGP(KI)=IW(KJQDET(KI)+JQDEEG).NE.KQZER
      QEGPR1(KI)=RW(IW(KJQDET(KI)+JQDEEG)+JEGPR1)
      QEGPR2(KI)=RW(IW(KJQDET(KI)+JQDEEG)+JEGPR2)
      QEGPF4(KI)=RW(IW(KJQDET(KI)+JQDEEG)+JEGPF4)
      QEGPDM(KI)=RW(IW(KJQDET(KI)+JQDEEG)+JEGPDM)
      KEGPST(KI)=IW(IW(KJQDET(KI)+JQDEEG)+JEGPST)
      KEGPQU(KI)=IW(IW(KJQDET(KI)+JQDEEG)+JEGPQU)
      KEGPPE(KI)=IW(IW(KJQDET(KI)+JQDEEG)+JEGPPE)
C
      XPGP(KI)=IW(KJQDET(KI)+JQDEPG).NE.KQZER.AND.IW(NAPGPC).GT.0
      QPGPR1(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPR1)
      QPGPR2(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPR2)
      QPGPF4(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPF4)
      QPGPDM(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPDM)
      QPGPST(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPST)
      QPGPQ1(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPQ1)
      QPGPQ2(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPQ2)
      QPGPM1(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPM1)
      QPGPM2(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPM2)
      QPGPMA(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPMA)
      QPGPER(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPER)
      QPGPTR(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPTR)
      QPGPPR(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGPPR)
      KPGPQU(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGPQU)
      KPGPPE(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGPPE)
      XPGAC(KI)=IW(KJQDET(KI)+JQDEPG).NE.KQZER.AND.IW(NAPGAC).GT.0
      KPGAST(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGAST)
      QPGAEF(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGAEF)
      QPGAGC(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGAGC)
      QPGAZS(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGAZS)
      QPGAPL(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGAPL)
      QPGAPH(KI)=RW(IW(KJQDET(KI)+JQDEPG)+JPGAPH)
      KPGAPN(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGAPN)
      KPGAFA(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGAFA)
      KPGAPE(KI)=IW(IW(KJQDET(KI)+JQDEPG)+JPGAPE)
C
C
      XYV0(KI)=KVYV0V(KENDV(KI)).NE.0
      KYV0K1(KI)=IW(KVYV0V(KENDV(KI))+JYV0K1)
      KYV0K2(KI)=IW(KVYV0V(KENDV(KI))+JYV0K2)
      QYV0VX(KI)=RW(KVYV0V(KENDV(KI))+JYV0VX)
      QYV0VY(KI)=RW(KVYV0V(KENDV(KI))+JYV0VY)
      QYV0VZ(KI)=RW(KVYV0V(KENDV(KI))+JYV0VZ)
      QYV0X1(KI)=RW(KVYV0V(KENDV(KI))+JYV0X1)
      QYV0X2(KI)=RW(KVYV0V(KENDV(KI))+JYV0X2)
      QYV0C2(KI)=RW(KVYV0V(KENDV(KI))+JYV0C2)
      KYV0IC(KI)=IW(KVYV0V(KENDV(KI))+JYV0IC)
      QYV0DM(KI)=RW(KVYV0V(KENDV(KI))+JYV0DM)
      QYV0S1(KI)=RW(KVYV0V(KENDV(KI))+JYV0S1)
      QYV0S2(KI)=RW(KVYV0V(KENDV(KI))+JYV0S2)
C
      XLEPTG(KI)=IW(KJQDET(KI)+JQDEPD).NE.KQZER
      KLEPPA(KI)=IW(IW(KJQDET(KI)+JQDEPD)+JPDLPA)
      KLEPJT(KI)=IW(IW(KJQDET(KI)+JQDEPD)+JPDLJT)+KLFJET-1
      QLEPPI(KI)=RW(IW(KJQDET(KI)+JQDEPD)+JPDLPI)
      QLEPPE(KI)=RW(IW(KJQDET(KI)+JQDEPD)+JPDLPE)
      KLEPVP(KI)=IW(IW(KJQDET(KI)+JQDEPD)+JPDLVP)
C
      XLEPTH(KI)=IW(KJQDET(KI)+JQDEPM).NE.KQZER
      KLEPFL(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLFL)
      KLEPPO(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLPO)
      KLEPCH(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLCH)
      KLEPSP(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLSP)
      KLEPLE(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLLE)
      KLEPME(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLME)
      KLEPKT(KI)=IW(IW(KJQDET(KI)+JQDEPM)+JPMLKT)
C---------------------  end of QMACRO ---------------------------------
C --------- Start of /QNMACR/ : statement functions for the NANO -------
      KTNO(I)=IAND(IW(KONDTK+LMHLEN+(I-KFCHT)*KCNDTK+JNDTTA),255)
      QV0PCH(I)=FLOAT(IAND(IW(KONDV0+LMHLEN+(I-KFV0T)*KCNDV0+JNDVTT)
     &  ,65335))/10.0
      QV0NCH(I)=FLOAT(IAND(ISHFT(IW(KONDV0+LMHLEN+(I-KFV0T)*KCNDV0
     &  +JNDVTT),-16),65335))/10.0
C ----------- End of /QNMACR/ : statement functions for the NANO -------
C-----------------------------------------------------------------------
      IF(QCH(ITK).EQ.0.)THEN
        IER=1
        RETURN
      ENDIF
C
C If this is not MC then just run NADDX
      IF(KRUN.GT.2000.AND.(.NOT.XMCEV))THEN
        CALL NADDX(ITK,N,RMASS,QH,RI,NS,TL,RIEXP,SIGMA,IER)
        RETURN
      ENDIF
      IF(.NOT.XMCEV)THEN
        IER=6
        RETURN
      ENDIF
C
      IF(XFIRST)THEN
        XFIRST=.FALSE.
C
        WRITE(KUPRNT,8913) IRUN
 8913   FORMAT(/' You are using NADDXM to analyze dE/dx in Monte'/
     &    ' Carlo events.  Note that the only information taken from'/
     &    ' the detailed TPC simulation (TPCSIM) is the number of'/
     &    ' isolated wire hits on each track and the total track'/
     &    ' length corresponding to those hits.  The dE/dx itself is'/
     &    ' simulated by finding the true particle type, using the'/
     &    ' KBESTM routine in ALPHA, and using its mass to derive the'/
     &    ' velocity of the particle.  This WILL NOT be correct for'/
     &    ' tracks which decay in flight or overlap with other tracks,'/
     &    ' so beware.  QDEDXK is called to translate the velocity'/
     &    ' and the number of hits and track length into a mean dE/dx'/
     &    ' and a resolution, using database constants for run ',I8,','/
     &    ' which have been fit to data.  A gaussian random number'/
     &    ' then is used to generate an output dE/dx distributed'/
     &    ' around the expected mean with a width equal to the'/
     &    ' expected resolution.  Keep in mind that this simulation is'/
     &    ' simplistic.  It will be better to use the dE/dx straight'/
     &    ' from TPCSIM once that program is adjusted to give the'/
     &    ' correct resolution and relativistic rise (volunteers?).')
      ENDIF
C
C++   Find the appropriate run number in data to simulate
C
      KRHAH=IW(NARHAH)
      IF (KRHAH.NE.0) THEN
        WIRBUG = .FALSE.
        DO 891 I=1,LROWS(KRHAH)
          PNAME(1:4)=CHAINT(ITABL(KRHAH,I,JRHAPN))
          PNAME(5:8)=CHAINT(ITABL(KRHAH,I,JRHAPN+1))
          IF (PNAME.EQ.'GALEPH')THEN
            IGAVER=ITABL(KRHAH,I,JRHAAV)
          ELSEIF (PNAME.EQ.'JULIA') THEN
            IJCOR=ITABL(KRHAH,I,JRHACV)
            JUVER=ITABL(KRHAH,I,JRHAPV)
          ENDIF
  891   CONTINUE
      ELSE
        IERR1=IERR1+1
        IF(IERR1.LE.10)THEN
          CALL QWMESE
     &  ('+++ NADDXM +++ Can`t find RHAH bank. Will do no corrections')
        ENDIF
      ENDIF
C
C++   Version 252 of JULIA was used starting with the 1991 runs.
C++   The calibration of the earlier runs is very different, so they
C++   need a special simulation, unless they get reprocessed someday.
C
C The 1990 data was reprocessed recently so the latest version
C version of JULIA is now being used for all data.
C
C++   Version 264 of JULIA was used for 1992 data.  This also
C++   requires a different set of constants.
      IRUN=10001
      IF(JUVER.GE.264)THEN
        IRUN=16001
      ELSEIF(JUVER.GE.252)THEN
        IRUN=10001
C      ELSE
C        IRUN=6001
      ENDIF
C
C++   Also, two bugs in the wire reduction code (TWRRED, in ALEPHLIB,
C++   called by GALEPH) and dead pad simulator (TPKILL in JULIA)
C++   resulted in bad wire data for the first 92 production.  The
C++   number of samples must be corrected before before being used
C++   to predict the resolution.  While the corrected distribution
C++   has the right mean and general shape, it is not perfectly
C++   smooth due to binning effects.
      WIRBUG=.FALSE.
      IF (IGAVER.LT.145 .OR. IJCOR.LT.26408) WIRBUG =.TRUE.
C
C++   Get the mass of the true particle.  If there is no MC match,
C++   then call it a pion.
C
      Q = 0.
      RMCM = 0.
C
      IF(ITK.GT.KLCHT.OR.ITK.LT.KFCHT)THEN
        CALL QWMESE('### NADDXM ### ONLY for reconstructed tracks!')
        IER=1
        RETURN
      ENDIF
      IMC=KBESTM(ITK)
      IF(IMC.NE.0)THEN
        Q = QCH(IMC)
        JTYP = KTPCOD(IMC)
        RMCM = QCMASS(JTYP)
      ELSE
        Q = 1.
        JTYP = 8
        RMCM = QPMASS('pi+')
      ENDIF
C
C++   Compare the measured dE/dx with the expected dE/dx
C
      CALL NADDX(ITK,1,RMCM,Q,RI,NS,TL,RIEX1,SIGM1,IER)
      IF(IER.NE.0) RETURN
      R5 = (RI-RIEX1)/SIGM1
C
C++   In case TPCSIM+JULIA put this particle way out on the
C++   tail of the dE/dx, then keep the TPCSIM dE/dx, since the
C++   fake method here will not simulate the tails.  Otherwise
C++   get the dE/dx by smearing by a gaussian.  Don't simulate
C++   the tails past RPLIM here; that is done above.
C
      IF(ABS(R5).LT.RPLIM)THEN
        DX=TL/FLOAT(NS)
C
C++   Due to the problems described above, the number of samples must be
C++   corrected for some 1992 MC data.
C
        IF(WIRBUG)THEN
            XSAMPL = NS
            IF(XSAMPL.GT.XLO .AND. XSAMPL.LT.XHI)THEN
                IF(XSAMPL .LE. XBK)THEN
                    XSAMPL = SCALE_LO * (XSAMPL - XLO) + XLO
                ELSE
                    XSAMPL = XHI - (XHI - XSAMPL)/SCALE_HI
                ENDIF
            ENDIF
            NS = INT(XSAMPL + 0.5)
        ENDIF
C DWC add to make routine always produce same answer for a given track
      SDEN = FLOAT(KRUN)+FLOAT(KEVT)
      IF (SDEN.EQ.0.)  SDEN=FLOAT(KRUN)
      SEED = FLOAT(KTNO(ITK))/SDEN
        CALL RDMIN(SEED)
        CALL RANNOR(XRAN,YRAN)
 8450   CONTINUE
        CALL QDEDXK(IRUN,QP(ITK),Q,RMCM,DX,NS,RI,RITRU,SGTRU)
        R5=(RI-RITRU)/(SGTRU*RITRU)
        IF(ABS(R5).GT.RPLIM) GOTO 8450
        DO 8460 I=1,N
          BG = QP(ITK)/RMASS(I)
          RIEXP(I) = QKBLOK(IRUN,BG,Q)
          SIGMA(I) = SGTRU*RIEXP(I)
 8460   CONTINUE
      ELSE
        CALL NADDX(ITK,N,RMASS,QH,RI,NS,TL,RIEXP,SIGMA,IER)
        IF(IER.NE.0) RETURN
      ENDIF
C
      RETURN
C
      ENTRY NMTAIL(TAIL)
C
C++   Call this entry to set the parameter which determines how much
C++   of the "tail" produced by TPCSIM will be kept.  This is only
C++   relevant for Monte Carlo.
C
      IF(ABS(TAIL).LT.TLMN)THEN
        RPLIM = TLMN
      ELSE
        RPLIM = ABS(TAIL)
      ENDIF
      RETURN
      END
