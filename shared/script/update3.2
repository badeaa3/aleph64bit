#! /bin/csh
#============================================================================
#                             update
#                                                       F.Ranjard
#============================================================================
# procedure to update a given version of a given library from CVSROOT
# to ALROOT
# and to compile it on CSF and SHIFTALEPH making a library
#============================================================================
# call "cvs update" to update an existing source file on ALROOT/sourcexxx
# send a batch job "updlib" on various machines to compile and update the library.
#============================================================================
# P1 -> prog_name i.e: alephio
# P2 -> cycle     i.e.: 214 version no. of the library to be updated
#                           when P1=alephio , P2 is the alephlib version no.
# P3 -> tag       i.e.: alio64 (if not given the tag is built from the mnemonic
#                             stored in script_dir/alib.dir and the cycle no.)
# P4 -> ndays     i.e.: 7 elapse number of days since last updates, all *.F
#                         files modified in the last ndays will recompiled.
#                         (default is <2 days)
# when the prog_name is not part of script_dir all arguments must be given,
# and the mnemonic is assumed to be the prog_name.
#============================================================================
# 960711 - update1.0
# 970613 - update2.0
# add listC for *.c files
# 980901 - remove SAGA
# 981116 - update 2.1
# update the library with *.F and *.h files newer than the library
# 981203 - update3.0
# adapt to /afs
# 990512 - update3.1
# submit lsf batch jobs from dxplus only
# 991001 - update3.2
# add Linux platform
#===========================================================================
#include "~/flr/bin/verbflr.h"
#
set exec_name = "update3.2"
set verbflr = ""
set donot   = ""
set nar = $#argv
if (${nar} != 0) then
  if ($argv[${nar}] == "-v" || $argv[${nar}] == "-n") then
     echo "${exec_name}"
     set verbflr = "-v" 
     set echo on
     if ($argv[${nar}] == "-n") set donot = "-n"     
     set argv[${nar}] = ""
     @ nar = ${nar} - 1
  endif
endif
#
if ( $?ENVIRONMENT ) then
 if (( "$ENVIRONMENT" == "INTERACTIVE" || "$ENVIRONMENT" == "LOGIN") && $1 == "-h") then
  echo " "
  echo "usage: " 
  echo " update <prog_name> <version no.> <tag>"
  echo ""
  echo " some examples:"
  echo " update julia 281 jul281_2"
  echo " makes a cvs update of $ALROOT/jul281 with jul281_2 tag and"
  echo " updates $ALEPH/jul/libjul281.a, _dbx.a with routines modified"
  echo " since the last libjul281.a update"
  echo " "
  echo " update alephio 214 alio64" 
  echo " makes a cvs update of $ALROOT/alephio with alio64 tag and"
  echo " updates $ALEPH/gen/libalephio214.a, _dbx.a with routines modified"
  echo " since the last libalephio214.a last update"
  echo ""
  exit(1)
 endif
endif
#
unset noclobber
set script_dir = "${SHARED}/script"
set alib_dir = "${script_dir}/alib.dir"
set flag = "OK"
 
# =====================================================================
#
#------> get program name from 1st argument
#
if ($1 == "") then
  echo -n "Enter Aleph program name [eg:alephlib <CR>=exit]-> "
   set prog_name = $<
   if (${prog_name} == "") goto exec_end
else
   set prog_name = $1
endif
#
#-------> get version number from 2nd argument
#
if ($2 == "") then
   set string_cr = "<CR>=exit"
   echo -n "Enter version number[${string_cr}]-> "
   set cycle = $<
   if (${cycle} == "") goto exec_end
else
   set cycle = $2
endif
# 
#-------> get idir, mnemonic and src_dir 
#
if (-e ${alib_dir}) then
# - idir -
      set idir = `egrep ^" ${prog_name} " ${alib_dir} | awk '{print $2}'`
      if (${idir} == "") then
         set string_cr = "<CR>=exit"
         echo -n "Enter /aleph sub-directory where to store library[${string_cr}]-> "
         set idir = $<
         if (${idir} == "") goto exec_end
      endif
# - mnemonic -   
   set mnemonic = `egrep ^" ${prog_name} " ${alib_dir} | awk '{print $3}'`
   if (${mnemonic} == "") then
      set mnemonic = ${prog_name}
   endif 
# - src_nam-
   set src_nam  = `egrep ^" ${prog_name} " ${alib_dir} | awk '{print $4}'`
   if (${src_nam} == "") then
      set src_nam = ${mnemonic}${cycle}
   endif
endif 
#
#-------> get tag from 3rd argument or from mnemonic and cycle no.
#
if ($3 != "") then
   set tag = $3
else
   set tag = ${mnemonic}${cycle}
endif
#
#-------> get elapse number of days since last update
#         if NOT given it is set to 2
#
if ($4 != "") then
   set ndays = $4
else
   set ndays = 2
endif
#
#-------> set src_dir and lib_name
#
set src_dir  = "${ALROOT}/${src_nam}"

if (${mnemonic} == "aleph" || ${mnemonic} == "alio") set mnemonic = "alephio" 
set lib_name = "lib${mnemonic}${cycle}"
#
 
# ======================= check existence of src_dir  ==============
# if src_dir does not exist then STOP
 
if ! (-d ${src_dir}) then
   set flag =  "${src_dir} does not exist - STOP"
   goto exec_end
endif
 
# ======================== update src_dir ===============================

cd ${src_dir}

if (${donot} == "") cvs update -P -A -r ${tag}

cd ${src_dir}/inc

################# get a list of updated routines in the past $ndays ###############
#
set listF = `find ../ -name '*.F' -newer ${ALEPH}/${idir}/${lib_name}.a`
set listC = `find ../ -name '*.c' -newer ${ALEPH}/${idir}/${lib_name}.a`
if ("${listF}" == "" && "${listC}" == "") then
   echo " nothing has changed - STOP"
   goto exec_end
endif
#
set v_depend = ""
set listh = `find ../inc -name '*.h' -newer ${ALEPH}/${idir}/${lib_name}.a`
if ("${listh}" == "") then
   echo " the version number has not been updated"
   echo -n " do you want to continue [Y/N][CR=N] -> "
   set YN = $<
   if (${YN} == "Y" || ${YN} == "y") goto upd_lib
   echo " the version number has not been updated - STOP"
   goto exec_end
endif
#
set listd = `ls ../inc/*.d`
set v_depend = `egrep '.F' ${listd}`
#
upd_lib:
set listAllF = "${v_depend} ${listF} ${listC}"
if ("${listAllF}" == "") then
   echo " nothing to update - STOP"
   goto exec_end
endif
#
# =====================================================================
#          compile and update the library on various unix platforms
# =====================================================================
#
cd ${src_dir}
set batch = "${src_dir}/${tag}"
#  

# build the file ${batch}.lsfjob
echo '#\!/bin/csh' > ${batch}.lsfjob
echo '#BSUB -J' "${tag}_${HOST}" >> ${batch}.lsfjob
echo "time ${script_dir}/updlib < ${batch}.input" >> ${batch}.lsfjob
echo 'exec_end:' >> ${batch}.lsfjob
echo 'exit' >> ${batch}.lsfjob
#
# build the file ${batch}.input
echo "${src_dir}" > ${batch}.input
echo "${idir}" >> ${batch}.input
echo "${lib_name}" >> ${batch}.input
echo "${v_depend} ${listF}" >> ${batch}.input
echo "${listC}" >> ${batch}.input
echo "${verbflr}" >> ${batch}.input 
#
chmod +x ${batch}.lsfjob
#

if (${donot} == "-n") goto exec_end

#

### build libraries interactively
${batch}.lsfjob


#
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> spy
spy:
#*******> spy
echo `date` " END of ${exec_name} ${OS} ${user} ${prog_name} ${cycle} ${flag}" >> ${src_dir}/spy
 
# 
# ====================copy on $COREHOME all files created =======
#
#cp2clone ${src_dir}
# 

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> exec_end
exec_end:
 exit
 






