#!/bin/sh
#
# stage tape in for ALEPH
#
#       @(#)stagein	1.5 10/8/91 CERN CN-SW/DC Les Robertson
#       @(#)alstagein	3.0 11/3/93 CERN ALEPH Joel Closier
#
#  Copyright (C) 1992,1993 by ALEPH
#  All rights reserved
#
########
# First special version for Aleph (if environment variable are not defined)
#	Defaults to     -p alephdata
#			-F F -b 32040
#			-f ALDATA
#			-u aleph
#			-s 200
#                       -link /aleph/data
#		  filename VID.fseq.label
#		  fileprot -rwxrwxr-x       
#			-l sl -q 1
########
#
# calling seqence:
#
# stagein 
#   {tpread/tpwrite parameters}
#         -v VSN [-V VID] [-g {CART|TAPE|SMCF}] [-l {sl|nl|al|blp}]
#         [-d {6250|1600}] [-q sequence] [-f fileid] [-F record-format]
#         [-L record-length] [-b block-size] [-N block-count] [-G]
#         [-t retention-period] [-S server]
#   {sfget parameters}
#         [-p pool] [-u user] [-s size] [-r] [-link pathname] filename
#   {assign parameter}
#         [-U fun]
#
#    {other parameters}
#         [ -x ]  debug mode
#         [ -K ]  for Cray compatibility      (ignored)
#
#
#          
###############################################################################
#
# set defaults, initialise variables
#
CMD="alstagein"
VER="4.1"
VSNVID=FALSE
FILENAME=""
NODE=`uname -n`
#
###############################################################################
#
#                  functions
#
###############################################################################
#
usage()
{
  echo "usage: $CMD [-v VSN] [-V VID] [-g {CART|TAPE|SMCF}] [-l {sl|nl|al|blp}]" 1>&2
  echo "       [-d {6250|1600}] [-q sequence] [-f fileid] [-F record-format]" 1>&2
  echo "       [-L record-length] [-b block-size] [-N block-count] [-G]" 1>&2
  echo "       [-t retention-period] [-S server]" 1>&2
  echo "       [-p pool] [-u user] [-s size] [-r] [-link pathname]" 1>&2
  echo "       [-U fun]" 1>&2
  echo "       filename" 1>&2
  exit 5
}
###############################################################################
#
#
#
# STAGE defaults for ALEPH
#
STAGELABEL=${STAGELABEL:-"sl"}
STAGEFSEQ=${STAGEFSEQ:-"1"}
STAGERECFM=${STAGERECFM:-"F"}
STAGELRECL=${STAGELRECL:-"32040"}
STAGEBLKSIZ=${STAGEBLKSIZ:-"32040"}
#STAGEFILID=${STAGEFILID:-"ALDATA"}
STAGECLEAN=${STAGECLEAN:-"/u/xu/closier/test/stage/stage-clean-sh"}
#
#  DPM defaults for ALEPH
#
DPMPOOL=${DPMPOOL:-"alephdata"}
DPMUSER=${DPMUSER:-"aleph"}
DPMSIZE=${DPMSIZE:-"400"}
DPMLINKDIR=${DPMLINKDIR:-"/aleph/data"}

para=""
parm=""
while [ $# -gt 0 ]
do
  case $1 in
  -link) parm="$parm $1 $2" 
         DPMLINKDIR="$2" ; shift ;; 
      *) para="$para $1";;
  esac
  shift
done
# parse parameters
#
set -- `getopt xrGKv:V:g:l:d:q:f:F:L:b:N:t:S:p:u:s:U: $para`
#
while [ $# -gt 0 ]
do
  case $1 in
  -x) set -x ; parm="$parm $1" ;;
  -r) parm="$parm $1"  ;;
  -G) parm="$parm $1"  ;;
  -K) parm="$parm $1" ;;
  --) ;;
  -?)
#     remaining options require a value
      if [ $# -lt 2 ]
        then
          usage
      fi
      case $1 in 
#     look for a tpread/tpwrite parameters
      -v)  VSNVID=TRUE
           ALEPHFILENAME=$2
           ALEPHFILENAME=`echo $ALEPHFILENAME | tr "[A-Z]" "[a-z]"`
	   parm="$parm $1 $2" ; shift ;; 
      -V)  VSNVID=TRUE
           ALEPHFILENAME=$2
           ALEPHFILENAME=`echo $ALEPHFILENAME | tr "[A-Z]" "[a-z]"`
	   parm="$parm $1 $2" ; shift ;; 
      -l)  STAGELABEL="$2"
           parm="$parm $1 $2" ; shift ;; 
      -g)  tmpparm="$1 $2" ; shift ;;
      -q)  STAGEFSEQ="$2"
           parm="$parm $1 $2" ; shift ;; 
      -f)  parm="$parm $1 $2" ; shift ;; 
      -F)  parm="$parm $1 $2" ; shift ;; 
      -b)  parm="$parm $1 $2" ; shift ;; 
#     and now sfget parameters
      -p)  DPMPOOL="$2"
           parm="$parm $1 $2" ; shift ;; 
      -s)  DPMSIZE="$2"
           parm="$parm $1 $2" ; shift ;; 
      -u)  DPMUSER="$2"
           parm="$parm $1 $2" ; shift ;; 
      -?)  parm="$parm $1 $2" ; shift ;; 
      *)   parm="$parm $1 $2" ;;
      esac
      ;;
# must be the filename
  *)
       if [ "$FILENAME" != "" ]
         then
           usage
       fi
       FILENAME=$1
       ;;
  esac
  shift
done
#
if [ -z "$FILENAME" ]
  then
       FILENAME="$ALEPHFILENAME.$STAGEFSEQ.$STAGELABEL"
  fi
if [ -z "$FILENAME" -o "$VSNVID" = "FALSE" ]
  then
    echo $CMD: "{vsn or vid} and filename required" 1>&2
    usage
fi
#
#
DPMFLAG="-p $DPMPOOL -u $DPMUSER -s $DPMSIZE -link $DPMLINKDIR"
tms=`sysreq tms q v $ALEPHFILENAME`
tmserr=$?
if [ $tmserr -eq 1 ]
  then
    parm="$parm $tmpparm" 
fi

ERR=-1
ERR1=-1
ERR2=-1
ERR3=0
USE=`id | cut -f2 -d"(" | cut -f1 -d")"`
DATE=`date`
DATEA=`echo $DATE | awk '{print $6}'`
DATEB=`echo $DATE | awk '{print $2}'`
DATEC=`echo $DATE | awk '{print $3}'`
DATEC=`expr ${DATEC} + 0`
DATED=`echo $DATE | awk '{print $4}'`
DATE=`echo $DATEA $DATEB $DATEC $DATED`
# check if there is enough space
sfget -t $DPMFLAG $FILENAME
ERRCHK=$?
if [ $ERRCHK -eq 5 ]
   then
# space problem
      echo sfget has not found enough space.  Invoke cleaning.
      /aleph/bin/stage-clean -s 3000M  >> /aleph/tmp/stage-clean.log
fi
#  call stagein with a retry (3 times) 
/usr/local/bin/newstagein $parm $FILENAME
ERR=$?
if [ $ERR -ne 0 ]
   then
     sleep 120
     /usr/local/bin/newstagein $parm $FILENAME
     ERR1=$?
     if [ $ERR1 -ne 0 ]
        then
          sleep 120
          /usr/local/bin/newstagein $parm $FILENAME
          ERR2=$?
          if [ $ERR2 -ne 0 ]
             then
               sleep 120
               /usr/local/bin/newstagein $parm $FILENAME
               ERR3=$?
          fi
     fi
fi
DATE2=`echo $DATE | awk '{print $4}'`
DATE1=`date`
DATE1=`echo $DATE1 | awk '{print $4}'`
DAYTIME=86400
h1=`echo $DATE2 | awk -F: '{print $1}'`
m1=`echo $DATE2 | awk -F: '{print $2}'`
s1=`echo $DATE2 | awk -F: '{print $3}'`
h1=`expr ${h1} \* 3600`
m1=`expr ${m1} \* 60`
SDATE=`expr ${h1} + ${m1} + ${s1}`
h2=`echo $DATE1 | awk -F: '{print $1}'`
m2=`echo $DATE1 | awk -F: '{print $2}'`
s2=`echo $DATE1 | awk -F: '{print $3}'`
h2=`expr ${h2} \* 3600`
m2=`expr ${m2} \* 60`
SDATE1=`expr ${h2} + ${m2} + ${s2}`
ELAPSED=`expr ${SDATE1} - ${SDATE}`
if [ $SDATE1 -lt $SDATE ]
  then
    ELAPSED=`expr ${DAYTIME} + ${ELAPSED}`
fi
he=`expr ${ELAPSED} / 3600 | awk -F. '{print $1}'`
me=`expr ${ELAPSED} - 3600 \* ${he}`
me=`expr ${me} / 60 | awk -F. '{print $1}'`
se=`expr ${ELAPSED} - 3600 \* ${he} - 60 \* ${me}`

echo "$DATE $he:$me:$se $USE $FILENAME rc=($ERRCHK $ERR $ERR1 $ERR2 $ERR3) $VER $NODE">> /aleph/log/stagein.log
sfget -q $DPMFLAG $FILENAME
if [ $ERR3 -ne 0 ]
 then
   sfrm $FILENAME
fi
exit $ERR3















