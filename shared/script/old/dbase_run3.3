#! /bin/csh
#==========================================================
# 14/10/92                                         F.Blin
#                        DBASE_RUN
#==========================================================
# dbase_run1.0                                     FLR
# 28/01/93  - add number of blocks as parameter
# dbase_run2.0                                     FLR
# 31/08/93  - spy on /aleph/dbase
# dbase_run2.1                                     FLR
# 15/09/93 - remove reference to $HOME/.netrc     
# dbase_run2.2                                     FLR 
# 28/09/93 - increase size of default data base to 420 blocks
# dbase_run2.3                                     FLR
# 14/10/93 - set echo on when last argument is "-v"
# dbase_run2.4                                     FLR 
# 10/03/94 - increase size of default data base to 440 blocks
# dbase_run2.5                                     FLR 
# 04/10/94 - increase size of default data base to 500 blocks
#            fetch files with sfetch
# dbase_run2.7
# 04/08/95 - get ADBSxxx.HACMOD and update $ALINC
# dbase_run2.8                                     JC
# 28/11/95 - use $ALEPH_ROOT instead of /al
# dbase_run3.0
# 24/06/96 - Change VM to ALWS for the source      JC
# dbase_run3.1                                     F.Loverre
# 16/07/96 - Set environment variable NORETRY to yes to avoid
#            to wait fetching the files on alws
#            Increase size of default data base to 650 blocks
#                                     nb of dir. blocks to 16
# dbase_run3.2                                     FLR
# 14/08/96 - use -h argument to get the usage.
# dbase_run3.3
# 07/03/97 - do not fetch all.assign, sbank.adr
#            sbank.lbf is still fetched from alws
#============================================================
#
# set echo on if last arg is "-v"
set verbflr = ""

set nar = $#argv
if (nar != 0) then
  if ($argv[${nar}] == "-v") then
     set echo on
     set verbflr =    "-v"
     set argv[${nar}] = ""
     @ nar = ${nar} - 1 
  endif
endif

set exec_name = "dbase_run3.3"

# set hacmod to only if given as last arg 
set hacmod = ""
if (nar != 0) then
  if ($argv[${nar}] == "hacmod") then
     set hacmod =    "only"
     set argv[${nar}] = ""
     @ nar = ${nar} - 1 
  endif
endif

# BIN is the path of runeptoda ==========
set BIN = ${ALEPH}/script
# =======================================
#
set def_rec = 650
set def_dir = 16
#
#*******>
if ($1 == "-h") then
  echo " "
  echo "usage: " 
  echo " dbase_run <version number> [<number of blocks>] [<number of directory blocks>]"
  echo " "
  echo " by default the number of blocks is set to ${def_rec} and the number of directory blocks to ${def_dir}."
  echo " dbase_run <version number> hacmod "
  echo " will not update the data base but the hac parameters contained in adbsnnn.hacmod"
  echo " "
  echo " necessary files are got from alws using ftp: "
  echo "      adbsxxx.epio (xxx being the version number), adbsxxx.hacmod and bankal.fmt"
  echo " if SBANK is installed on /aleph/doc then sbank.lbf is imported. "
  echo " eptoda is then executed on the current machine and remotely on this other"
  echo " temporary files are removed when daf has been created."
  exit (1)
else
  set cycle = $1
endif
#
if (${cycle} == "") goto error_end
#
#********
#
set sbank = "NO"
if (-e ${ALEPH}/bin/sbank) set sbank = "YES" 
set ref_dir = "${ALEPH_ROOT}/${MASTER}/dbase"
set alib_dir = "${ALEPH}/alib"
set doc_dir = "${ALEPH}/doc"
set dbase_dir = "${ALEPH}/dbase"
set dbase_name = "adbs${cycle}"
set dbase_type = "epio"
set DBASE = 'aleph$general:[dbase]'
set DOC = 'aleph$general:[doc]'
set BANKDOC = 'aleph$general:[doc.bankdoc]'
set HOST_SRC = "al1b02"
set USER_SRC = "alephnet"
# 
# Set environment variable NORETRY to yes to avoid to wait fetching the files on alws
setenv NORETRY yes
#
if (${hacmod} == "only") goto hacmod
#
# =========   fetch files from alws
# If the fetch returns an error give a warning or abend the script
#
# Fetch epio file - If an error occurs -> abend
sfetch ${ref_dir}/${dbase_name}.${dbase_type} \
       -t ${HOST_SRC}:"${DBASE}"${dbase_name}.${dbase_type} -u ${USER_SRC} -f binary
if ($status != 0) then
    echo " *** Fatal error -> Could not fetch file ${HOST_SRC}:${DBASE}${dbase_name}.${dbase_type}" 
    goto error_end
endif
#
# Fetch .news file - If an error occurs -> warning
sfetch ${ref_dir}/${dbase_name}.news \
        -t ${HOST_SRC}:"${DBASE}"${dbase_name}.news -u ${USER_SRC} -f ascii
if ($status != 0) then
    echo " *** Warning -> Could not fetch file ${HOST_SRC}:${DBASE}$dbase_name.news"
endif
#
# Fetch bankal.fmt - If an error occurs -> warning
sfetch ${ref_dir}/bankal.fmt -t ${HOST_SRC}:"${BANKDOC}"bankal.fmt -u ${USER_SRC} -f ascii
if ($status != 0) then
    echo " *** Warning -> Could not fetch file ${HOST_SRC}:${BANKDOC}bankal.fmt"
endif
# Fetch sbank.lbf - If an error occurs -> warning
if (${sbank} == "YES") then
   sfetch ${doc_dir}/sbank.lbf -t ${HOST_SRC}:"${DOC}"sbank.lbf -u ${USER_SRC} -f ascii
   if ($status != 0) then
       echo " *** Warning -> Could not fetch file ${HOST_SRC}:${DOC}sbank.lbf"
   endif
   if !(-f sbank.lbf) echo " *** WARNING -> file sbank.lbf is not here"
endif
#
# ============ check existence of files 
#

cd ${ref_dir}
if !(-f bankal.fmt) echo " *** WARNING -> file bankal.fmt is not here"
if !(-f ${dbase_name}.${dbase_type}) then
   echo " *** FATAL -> file ${dbase_name}.${dbase_type} is not here"
   goto error_end
endif
# 
#
hacmod:
# =========== if $HOME/fort.1 exists get new HAC parameters
cd
if (-e fort.1) then
    rm fort.1
endif
# Fetch .hacmod file - If an error occurs -> warning
sfetch ${HOME}/fort.1 \
       -t ${HOST_SRC}:"${DBASE}"${dbase_name}.hacmod -u ${USER_SRC} -f ascii
if ($status != 0) then
    echo " *** Warning -> Could not fetch ${HOST_SRC}:${DBASE}${dbase_name}.hacmod"
endif
echo " "
if !(-f fort.1) then
   echo " ==> NO HAC parameters to be updated"
else
   cd cvs/inc
   rm *.h
   cd
   hist2cvs
   ls -l *.h
   cp cvs/inc/*.h ${ALINC}/.
   cd ${ALINC}
#
list:
   echo -n "give list of new banks [i.e. abcdjj.h efghjj.h or quit] ->"
   set list = $<
   if ("${list}" != "quit") then
      cvs add ${list}
      goto list
   endif
   cd
endif
if (${hacmod} == "only") goto exit
#
# ================== create new daf
#
cd ${ref_dir}
#
set VERSION = $1
set dafb_rec = ${def_rec}
set dafb_dir = ${def_dir}
if (${nar} >= 2) set dafb_rec = $2
if (${nar} >= 3) set dafb_dir = $3

echo " "
echo " be patient... creation of adbs${VERSION}.daf"
echo " with ${dafb_rec} records and ${dafb_dir} directory records"
echo " will take a while..."
echo " output is written onto eptoda.out"
echo " "  
#
# =========== build data cards file
#
if (-e ${ref_dir}/eptoda.cards) rm -f ${ref_dir}/eptoda.cards
#
cat >${ref_dir}/eptoda.cards <<EOF
FEPI '${ref_dir}/adbs${VERSION}.epio | EPIO'
FDAF '${dbase_dir}/adbs${VERSION}.daf | DAF'
DAFB ${dafb_rec} ${dafb_dir}
NDOT
ENDQ
EOF
#
#
# ========    run eptoda to create .daf
#
${BIN}/runeptoda ${VERSION} ${verbflr}
#
if ( ${SERVICE} == "SHIFTALEPH" || ${SERVICE} == "CSF" ) \
 rsh saga ${BIN}/runeptoda ${VERSION} ${verbflr}
if ( ${SERVICE} == "AFAL" || ${SERVICE} == "SAGA" ) \
 rsh shift9 ${BIN}/runeptoda ${VERSION} ${verbflr}
goto exit
#
error_end:
echo "dbase_run abnormal exit"
#
exit:
unsetenv NORETRY
exit
 




















