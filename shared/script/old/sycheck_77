#!/bin/csh
#======================================================================
#                         sycheck
# 06/01/94                                                     F.Blin
#======================================================================
#08/06/94 add file -> /aleph/log/data_nocheck in section DF
#                     [exist also file /etc/STGCONFIG]
#10/06/94 add procedure -> /aleph/script/reboot_sycheck
#21/06/94 new logical to check DF on shift9
#         all disks on file /aleph/log/df_all [add one blank character
#         at the end of each line]
#12/07/94 add to check DF for disk /usr on all nodes
#14/07/94 add to check files daemon on all nodes [all_daemon]
#22/07/94 suppress afal16
#26/07/94 add protection for connection refused
#21/09/94 add nfsd on node afal01
#         add df -k /usr on shift9
#         add files nqsdaemon netdaemon logdaemon in all_daemon
#         add file nqs++daemon all nodes except saga02..saga07
#         add file stgdaemon only on shift9
#22/09/94 add afal12
#10/10/94 add acher@sun2.cern.ch in admin
#11/10/94 add to check file sendmail in all_daemon
#01/11/94 suppress dxal10 and add saga08
#14/11/94 check n_line > 50 in DT/TNEW  
#24/11/94 suppress df /usr for saga08
#05/12/94 changed al1f08 by a2f01
#08/12/94 changed to grep nfsd in top -d1 for node afal01
#28/02/95 suppress for afal00 [*daemon]
#04/04/95 add afal13, add cron for all nodes, changed ps -ef for all nodes
#11/04/95 check if DT/TT_ps empty
#27/04/95 add call stagerror for each stagein error
#         add check rfstat on ps -ef for all nodes
#04/05/95 add afal16 in all_nodes
#08/05/95 modify logical to call stagerror
#10/05/95 one rsh ps by node 
#11/05/95 append /aleph/stagerror.out only if $1 == w
#18/05/95 add afal20
#19/05/95 format stageout change if ok (0)
#29/05/95 suppress '!' in echo ( '!"'  changed to '"' ) R.Hag
#08/06/95 suppress check of obsolete sfmaked daemon
#22/07/95 suppress afal15 (went to munich) and afal16 (runs windowsNT) R.Hag
#         add afal22 and afal23 R.Hag
#11/09/95 check /u3 (disk on afal00, not seen with  df -l -k on shift9)  R.Hag/fblxu
#18/09/95 erase files > 1Mb in /aleph/data
#24/10/95 check if (-e /aleph/log/tapes.lock) and time > 1h 
#08/01/96 add afal15,afal21,afal24,shift50
#         add n_df_usr = 95 to test df -k /usr except shift9 and saga08
#         add shift50 in nodes_jobs
#29/01/96 removed afal02 Drevermann now VMS
#31/01/96 added 3 new errors after stagerror 
#         - does not exist
#         - cannot fork...
#         - CPTPDSK ! INCORRECT...
#13/03/96 added second parameter hh/mm for stagerror
#01/04/96 added "bad label structure" after stagerror
#         added in all_nodes afal25 afal26 afal27
#15/04/96 added in all_nodes afal28
#16/04/96 adapted all_nodes with file /aleph/log/aleph_hosts
#03/05/96 added rm if (-e /aleph/log/tapes.lock) and time > 1h after check ps 
#18/06/96 added the parameter -a all nodes 
#                             else only afal10, saga and shift 
#20/06/96 removed node CERNVM and replaced hagxu@cernvm by hag@aloha
#21/06/96 removed RETRY 
#         added run stagerror only if str_check != str_check_old 
#         replaced reboot_sycheck by who -b +++
#05/07/96 new logic to search nqs+++daemon  (was cut) 
#19/07/96 hag  -a in log-header line first (for sycheck-check)
#27/07/96 hag  egrep replaced by grep, to not come back on old stagein errors
#28/07/96 hag  add bin/zhm    
#28/08/96 checked .login after le node
#         added file check_stagerror to control stagerror done
#19/09/96 checked sycheck already running
#         checked out_file after sycheck_rsh
#31/10/96 before stagerror : length(str_check) = 6 if (index($7,"_") > 1
#08/11/96 added "/usr/etc/ping -c 3" if status = 1 after first ping with -c 1  
#20/11/96 changed BLIN to hag for ALWS sfetch, BLIN/aloff no more permission
#26/11/96 changed error ping notified on sycheck_out only if 100% lost after
#                 second ping -c 3
#         appended new file /aleph/log/ping.log, anyway % in second call ping 
#12/11/96 added grep "request cleared" after stagerror
#22/01/97 modified echo for tapes.lock
#05/02/97 added "vsn mistmatch" after stagerror
#27/02/97 modified sycheck_rsh
#17/04/97 modified DF for shit50 and aloha
#21/04/97 changed /aleph by $ALEPH
#06/05/97 changed "df -k /u3" by "df -k /u/xu"
#28/05/97 erased stageout
#         added check scwork and scweek shift50 and afal01
#03/06/97 adapted : . new log /u/xu/aleph/log/stagein.log
#                   . new date in log       
#                   . new tapes.lock /al/reference/log/tapes.lock
#06/06/97 added p_min = 80 for /usr in shift9
#09/06/97 added no stagerror if rc error 192...197 only string error
#26/06/97 added in sycheck_rsh qstat -b for shift9 shift50 and saga..
#         to check queue not AVAILABLE!
#12/08/97 rewrited . scwork scweek check
#                  . rsh for "who -b" now on sycheck_rsh_new
#                  . rsh for general "df -k" now on sycheck_rsh_new 
#                  . rsh for "top -d1 -n | grep nfsd" now on sycheck_rsh_new
#                  . while for all_nodes
#19/08/97 checked if who_b file exist
#         erased ps -ef in sycheck but added on sycheck_rsh
#28/08/97 replaced /al/reference/log/aleph_hosts by /aleph/log/aleph_hosts
#==============================================================================
set write_out = "n"
set begin_date = `date "+%Y %m %d %H:%M:%S"`
set par_a = ""
 
set n = 0
while ($n < $#argv)
      @ n++
      if ("$argv[$n]" == "-v") set echo on
      if ("$argv[$n]" == "-w") set write_out = "y"
      if ("$argv[$n]" == "-a") set par_a = "-a"
end

set node = `uname -n`
if ($node != "shift9") then
   echo "Runs only on shift9"
   exit
endif
if !(-e ".login") then
   echo "One file .login is necessary for dispose"
   exit
endif

set sycheck_out = "$ALEPH/log/sycheck.out"
set admin = "fblxu@aloha.cern.ch,system@aloha.cern.ch"
set DT = ${HOME}

 if (-e "{DT}/ps_aloff") rm -f ${DT}/ps_aloff
 ps -ef | grep aloff | grep sycheck | grep -v grep | grep -v $$ | grep -v " sh -c " > ${DT}/ps_aloff

 set n_l = `wc -l ${DT}/ps_aloff | awk '{print $1}'`
 if ($n_l == 0) rm -f ${DT}/ps_aloff
 if (-e "${DT}/ps_aloff") then
    if (${write_out} == "n") then
       echo "***Sycheck already running***"
       cat ${DT}/ps_aloff
    endif
    if (${write_out} == "y") then 
       cat ${DT}/ps_aloff | Mail -s "Sycheck already running" ${admin}
    endif
    rm -f ${DT}/ps_aloff 
    exit
 endif

unset noclobber

#set year_months = ('Jan' 'Feb' 'Mar' 'Apr' 'May' 'Jun' 'Jul' 'Aug' 'Sep' 'Oct' 'Nov' 'Dec')
set year_months = ('01' '02' '03' '04' '05' '06' '07' '08' '09' '10' '11' '12')
set day_months = ('31' '28' '31' '30' '31' '30' '31' '31' '30' '31' '30' '31')
 
set year = `date "+%Y %m %d %H:%M:%S" | awk '{print $1}'`
set day = `date "+%Y %m %d %H:%M:%S" | awk '{print $3}'`
set day_previous = ${day}
set month = `date "+%Y %m %d %H:%M:%S" | awk '{print $2}'`
set month_previous = ${month}
@ day_previous = ${day} - 1
#echo "$month $month_previous $day $day_previous"
 
if (${day_previous} > 0) goto BEGIN
set n = 1
set n_previous = 12
while (${n} <= 12)
   if (${year_months[$n]} == ${month}) then
      if (${n} > 1) @ n_previous = ${n} - 1
      set month_previous = ${year_months[${n_previous}]}
      set day_previous = ${day_months[${n_previous}]}
      goto BEGIN
   endif
   @ n++
end
 
BEGIN:
if (-z ${sycheck_out}) rm -f ${sycheck_out}
#set FSTAGEIN = "$ALEPH/log/stagein.log"
set FSTAGEIN = "/u/xu/aleph/log/stagein.log"
#set FSTAGEOUT = "$ALEPH/log/stageout.log"
set TAPELOCK = "/al/reference/log/tapes.lock"
 
if !(-e ${sycheck_out}) then
   set last_date = ""
   set last_day = "${day_previous}"
else
   set last_date = `grep "++++" ${sycheck_out} | tail -1`
   set last_day = `echo ${last_date} | awk '{print $3}'`
endif

set last_month = `echo ${last_date} | awk '{print $2}'`
set first_day = ${last_day}
set first_month = ${last_month}
#echo "last_month=$last_month first_month=$first_month"
@ n_df = 90
@ n_error = 0
 
set date4 = `date | awk '{print $2substr($4,1,2)substr($4,4,2)}'`
set TT = "tmp_sycheck_${day}${date4}"
set TOLD = "tmp_sycheck_old_${day}${date4}"
set TNEW = "tmp_sycheck_new_${day}${date4}"
set TRSH = "tmp_sycheck_rsh_${day}${date4}"
set TOUT = "tmp_sycheck_st_${day}${date4}"

#>>>> to check $ALEPH/log/tapes.lock time > 1h
if !(-e $TAPELOCK) goto END_TAPELOCK 
set str_lock = `ls -l $TAPELOCK` 
set lock_host = `awk '{print $1}' $TAPELOCK | tr "[A-Z]" "[a-z]"` 
set lock_user = `awk '{print $2}' $TAPELOCK | tr "[A-Z]" "[a-z]"`

set lock_D = `echo $str_lock | awk '{print $7}'`
if ($day != $lock_D) goto LOCK_WARN

set lock_H = `echo $str_lock | awk '{print substr($8,1,2)}'` 
set lock_M = `echo $str_lock | awk '{print substr($8,4,2)}'` 
@ lock_mm = (((${lock_H}) * 60) + ${lock_M})

set now = `date '+%y %m %d %H %M'`
set now_H = `echo $now | awk '{print $4}'`
set now_M = `echo $now | awk '{print $5}'`
@ check_mm = (((${now_H}) * 60) + ${now_M}) - 60
#   echo $day $now_H $now_M $check_mm
#   echo $lock_D $lock_H $lock_M $lock_mm  
if ($lock_mm >= $check_mm) goto END_TAPELOCK

LOCK_WARN:     
if (${write_out} == "n") echo "rsh $lock_host ps -ef "

set ps_lock = `rsh $lock_host ps -ef | grep $ALEPH/script/tapes | grep $lock_user `
echo "rsh $lock_host ps -ef | grep $ALEPH/script/tapes | grep $lock_user" >> ${DT}/${TOUT}
set lock_warn = `echo $str_lock | awk '{print $3" "$6" "$7" "$8" "$9}'`
echo "WARNING $lock_warn" >> ${DT}/${TOUT}
cat $TAPELOCK >> ${DT}/${TOUT}
if ("$ps_lock" != "") echo "${ps_lock}" >> ${DT}/${TOUT}
if ("$ps_lock" == "") then 
   rm -f $TAPELOCK
   echo "erase $TAPELOCK" >> ${DT}/${TOUT}
   cat ${DT}/${TOUT} | Mail -s "***rm -> TAPES.LOCK" fblxu@aloha.cern.ch,closier@aloha.cern.ch
   goto END_TAPELOCK
endif
#cat ${DT}/${TOUT} | Mail -s "***TAPES.LOCK" $lock_user@$lock_host.cern.ch
cat ${DT}/${TOUT} | Mail -s "***TAPES.LOCK" fblxu@aloha.cern.ch,closier@aloha.cern.ch

END_TAPELOCK:
#<<<<
set str_echo = '---- errors staging in ----'

set str_return = "OUT"

if !(-e ${sycheck_out}) goto LOOP
if (${write_out} == "n") then
   echo "====> Last lines on file output"
   tail -10 ${sycheck_out}
   echo "  "
endif
if (${write_out} == "n") echo `date` 
if (${write_out} == "n") echo "-->Begin stagein" 
 
LOOP:
set str_search = "${year} ${last_month} ${last_day} "
#echo "str_search -> ${str_search}"
#echo "str_return -> ${str_return}"
if (${str_return} == "OUT") egrep "${str_search}" ${FSTAGEIN} | grep -v " 0)" >> ${DT}/${TT}
#if (${str_return} == "DF") egrep "${str_search}" ${FSTAGEOUT} | grep -v "(0)" >> ${DT}/${TT}
#echo ${last_day} ${day}

if (${last_day} > 31) goto END
if (${last_day} != ${day}) then
   @ last_day++
   if ($last_day < 10) set last_day = "0${last_day}"
   if (${last_month} == ${month}) goto LOOP
   set last_day = "01"
   set last_month = ${month}
   goto LOOP
endif
 
ALREADY_SYCHECK:
set last_day = ${first_day}
set last_month = ${first_month}

if (-z ${DT}/${TT}) rm -f ${DT}/${TT}
if !(-e ${DT}/${TT}) goto ${str_return}
if !(-e ${sycheck_out}) then
   cp ${DT}/${TT} ${DT}/${TNEW}
else
   set n_lines = `wc -l ${DT}/${TT} | awk '{print $1}'`
#==> 14/11/94
   if (${n_lines} > 50) then
     @ n_error++
     cp ${DT}/${TT} ${DT}/${TT}ERROR${n_error}
     echo "TOO MANY ... ${str_echo} see ${DT}/${TT}ERROR${n_error}" >> ${DT}/${TOUT}
     rm ${DT}/${TT}
     goto ${str_return} 
   endif
#==<
   set n_fields = `awk '{print NF}' ${DT}/${TT}`
   set lines = `awk '{print $0}' ${DT}/${TT}`
   #echo ${str_return}
   #echo "n_lines -> $n_lines"
   #echo $n_fields
   #echo $lines
   @ i = 1
   @ nf = 0
#  str_check || str_check_old = name + substr(tape,1,5)
   if (${str_return} == "OUT") set str_check_old = ""
   while ($i <= $n_lines)
     @ n = $nf + 1
     @ nf = $nf + ${n_fields[$i]}
     grep "${lines[$n-$nf]}" ${sycheck_out} > ${DT}/${TOLD}
     if (-z ${DT}/${TOLD}) then
        echo "${lines[$n-$nf]}" >> ${DT}/${TNEW}
        if (${str_return} == "OUT") then 

           set t_index = `echo ${lines[$n-$nf]} | awk '{print index($7,"_")}'`
           if (${t_index} < 1) then 
              set str_check = `echo ${lines[$n-$nf]} | awk '{print $6 " " substr($7,1,5)}'`
           endif
           if (${t_index} > 1) then 
              set str_check = `echo ${lines[$n-$nf]} | awk '{print $6 " " substr($7,1,6)}'`
           endif
           if ("$str_check" != "$str_check_old") then
#=====> check rc_error
              set str_error = ""
              set rc_error = `echo ${lines[$n-$nf]} | awk '{print substr($9,1,length($9)-1)}'`
             if ($rc_error == 192) set str_error = "Request cancelled by stageclr"
             if ($rc_error == 193) set str_error = "Blocks were skipped only with  Option -E"
             if ($rc_error == 194) set str_error = "Blocks were skipped and stageing limited by size"
             if ($rc_error == 195) set str_error = "Stagein stopped: too many tape errors, but -E keep"
             if ($rc_error == 197) set str_error = "Stageing limited by size  given by option -s"
#             echo "rc_error=$rc_error str_error=$str_error"
             if ("$str_error" != "") then
                echo "${str_error}" >> ${DT}/${TNEW}
                goto END_GREP        
             endif

#======> call stagerror 
              set t_hm = `echo ${lines[$n-$nf]} | awk '{print substr($4,1,5)}'` 
             set t_f = `echo ${lines[$n-$nf]} | awk '{print $7}'`
             echo "${begin_date} : stagerror ${t_f} ${t_hm}" >> /u3/xu/fblxu/dir_sycheck/check_stagerror
             $ALEPH/script/stagerror ${t_f} ${t_hm} >& ${DT}/${TNEW}_stagerror
             set n_stagerror = `wc -l ${DT}/${TNEW}_stagerror | awk '{print $1}'`
             if (${n_stagerror} > 1) then
                grep -i "tms" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "CPTPDSK ! INCORRECT OR MISSING TRAILER LABEL ON TAPE" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "cannot fork: no swap space" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "bad label structure" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "label type mismatch" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "vsn mismatch" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "does not exist" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "kill received" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "fid mismatch" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "mount cancelled" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "request cleared" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep "stage returns 28" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
                grep -i "error " ${DT}/${TNEW}_stagerror | grep -v "+++++" >> ${DT}/${TNEW}
#               grep "write error" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
#               grep "ERROR READING" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
#               grep "rfio_open error" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
#               grep "stat error" ${DT}/${TNEW}_stagerror >> ${DT}/${TNEW}
             endif
END_GREP:
             if (-e "${DT}/${TNEW}_stagerror") then
                if ($write_out == "y") cat ${DT}/${TNEW}_stagerror >> $ALEPH/log/stagerror.out
                rm -f ${DT}/${TNEW}_stagerror
             endif
         endif
        set str_check_old = "$str_check"
      endif
#======< call stagerror 
     endif
     if (-e "${DT}/${TOLD}") rm -f ${DT}/${TOLD}
     @ i++
   end
endif
rm -f ${DT}/${TT}
if (-z ${DT}/${TNEW}) rm -f ${DT}/${TNEW}
if !(-e ${DT}/${TNEW}) goto ${str_return}
echo "${str_echo}" >> ${DT}/${TOUT} 
cat ${DT}/${TNEW} >> ${DT}/${TOUT}
rm -f ${DT}/${TNEW}
goto ${str_return}
 
 
OUT:
if (${write_out} == "n") echo `date` 
if (${write_out} == "n") echo "-->Begin ${str_return}" 
set str_echo = '---- errors in staging out ----'
set str_return = "DF"
goto LOOP

DF:
set nodes_DF = ('shift9' 'shift50' 'afal01')
@ n = 1
set n_machine_DF = `echo ${nodes_DF} | awk '{print NF}'`

if (${write_out} == "n") echo `date` 
if (${write_out} == "n") echo "-->Begin ${str_return}" 
set str_return = "MAX_DATA"

while ($n <= ${n_machine_DF})
     if (${write_out} == "n") echo "-->run sycheck_rsh ${nodes_DF[$n]}"
     if (${nodes_DF[$n]} == "shift9") /u3/xu/fblxu/dir_sycheck/sycheck_rsh
     if (${nodes_DF[$n]} != "shift9")  rsh ${nodes_DF[$n]} /u3/xu/fblxu/dir_sycheck/sycheck_rsh
#======>> scwork scweek
     set line_scwork = `awk '{print $0}' ${DT}/scwork_${nodes_DF[$n]}`
     set line_scweek = `awk '{print $0}' ${DT}/scweek_${nodes_DF[$n]}` 
#     echo $line_scwork
#     echo $line_scweek

     set line_check = "${line_scwork}"
     set str_sc = "scwork"
CHECK_SCWORK_SCWEEK:
#     echo "$str_sc : line_check=${line_check}"
     if (${nodes_DF[$n]} == "afal01" || ${nodes_DF[$n]} == "shift50") set p_df = `echo ${line_check} | awk '{print substr($5,1,length($5)-1)}'`
     if (${nodes_DF[$n]} == "shift9") set p_df = `echo ${line_check} | awk '{print substr($6,1,length($6)-1)}'`
     if (${str_sc} == "scwork") @ p_min_sc = 88
     if (${str_sc} == "scweek") @ p_min_sc = 95
#     echo " $str_sc : n_df=$n_df p_df=$p_df p_min_sc=$p_min_sc"

     if (${p_df} >= ${p_min_sc} || ${p_df} == 0) echo "WARNING ${nodes_DF[$n]} ${str_sc}: ${line_check}" >> ${DT}/${TT} 
     rm -f ${DT}/${str_sc}_${nodes_DF[$n]}

     if ("${str_sc}" == "scwork") then
         set line_check = "${line_scweek}"
         set str_sc = "scweek"
         goto CHECK_SCWORK_SCWEEK
     endif

#======>> df
  set str_echo = `echo ${n_df} | awk '{print "---- df on ${nodes_DF[$n]}, more "$0"% ----"}'`
  set n_df_line = `wc -l ${DT}/df_${nodes_DF[$n]} | awk '{print $1}'`
  set n_line = 3
  if (${nodes_DF[$n]} == "shift9") set p_df = `awk '{print substr($6,1,length($6)-1)}' ${DT}/df_${nodes_DF[$n]}`
  if (${nodes_DF[$n]} != "shift9") set p_df = `awk '{print substr($5,1,length($5)-1)}' ${DT}/df_${nodes_DF[$n]}`
  set dev_df = `awk '{print $1}' ${DT}/df_${nodes_DF[$n]}`
  if (${nodes_DF[$n]} == "shift9")  set disk_df = `awk '{print $7}' ${DT}/df_${nodes_DF[$n]}`
  if (${nodes_DF[$n]} != "shift9")  set disk_df = `awk '{print $6}' ${DT}/df_${nodes_DF[$n]}`
 
  while (${n_line} <= ${n_df_line})
     set line_add = ""
     set p_min = `grep " ${disk_df[${n_line}]} " $ALEPH/log/df_all | awk '{print substr($1,1,length($1)-1)}'`

     if ("${disk_df[${n_line}]}" == "/usr") @ p_min = ${n_df}
     if ("${disk_df[${n_line}]}" == "/usr" && ${nodes_DF[$n]} == "shift9") @ p_min = 80

     if ("${disk_df[${n_line}]}" == "/proc") @ p_min = 110
#     if ("${disk_df[${n_line}]}" == "/cernlib") @ p_min = 96
     if (${p_min} == "") @ p_min = ${n_df}

# echo ${disk_df[${n_line}]} ${p_df[${n_line}]} p_min=${p_min}
     if (${p_df[${n_line}]} >= ${p_min}) then 
        set line_add = `grep "${dev_df[${n_line}]} " ${DT}/df_${nodes_DF[$n]}`
        set line_add = "${nodes_DF[$n]} : ${line_add}"
        echo "${line_add}" >> ${DT}/${TT}
     endif
     @ n_line++
   end
   rm -f ${DT}/df_${nodes_DF[$n]}
#======<< df
   @ n++
end

goto ALREADY_SYCHECK
 
MAX_DATA:
set MAX_data = 1000 
ls -aouR /al/shared/data | sort -r -n +3 | head > ${DT}/ls-aouR
set P_1 = `awk '{print substr($1,1,1)}' ${DT}/ls-aouR`
set p_Mb = `awk '{print $4}' ${DT}/ls-aouR`
set file_aouR = `awk '{print $8}' ${DT}/ls-aouR`
@ n_line = 1
while (${p_Mb[$n_line]} > ${MAX_data})
 if (${P_1[$n_line]} != "d") then 
    rm -f $ALEPH/data/${file_aouR[$n_line]}
    set line_aouR = `grep ${p_Mb[$n_line]} ${DT}/ls-aouR | grep ${file_aouR[$n_line]}`
    echo "rm $ALEPH/data/${file_aouR[$n_line]} -> ${line_aouR}" >> ${DT}/${TOUT}
 endif
 @ n_line++ 
end 
rm -f ${DT}/ls-aouR

#set noretry = ""
#if ($?NORETRY) set noretry = $NORETRY 
setenv NORETRY yes
 
set n_log = $LOGNAME
if (${n_log} == "aloff") set n_log = "hag"
 
set node_search = "al2f01"
set command = `/usr/etc/ping -c 1 ${node_search} | grep ", 0% packet loss"`
if (${status} == 0) then
   set command = `sfetch ${DT}/alws_sfetch_test -t ${node_search}:'AL2$USER2:[HAG]LOGIN.COM' -u ${n_log} > ${DT}/error.txt`
   if !(-z ${DT}/error.txt) echo ">>> sfetch ERROR ALWS" >> ${DT}/${TOUT}
   rm -f ${DT}/error.txt

   rm -f ${DT}/alws_sfetch_test
else
   /usr/etc/ping -c 3 ${node_search} | tail -2 > ${DT}/error_${node_search}.ping
   set ms = `grep round-trip ${DT}/error_${node_search}.ping | awk '{print $5}'`
   set n_ping = `grep % ${DT}/error_${node_search}.ping | awk '{print $7}'`
   if ($n_ping == "100%") echo ">>> /usr/etc/ping ${node_search} 4 packets, $n_ping loss" >> ${DT}/${TOUT}
   echo "$begin_date ${node_search} 3 packets, $n_ping loss, $ms ms" >> $ALEPH/log/ping.log
   rm -f ${DT}/error_${node_search}.ping
endif

set nodes_jobs = ('saga01' 'shift9' 'shift50' 'csf')
@ n = 1
set n_machine_jobs = `echo ${nodes_jobs} | awk '{print NF}'`
#======>> rsh on afal10 :
if (${write_out} == "n") echo `date`
if (${write_out} == "n") echo "-->run sycheck_rsh afal10"
rsh afal10 /u3/xu/fblxu/dir_sycheck/sycheck_rsh
#======<<

while (${n} <= ${n_machine_jobs})
   set node_search = ${nodes_jobs[${n}]}
   if (-z ${DT}/error_${node_search}.rsh) echo ">>> NQS connection refused on ${node_search}, from afal01" >> ${DT}/${TRSH}
   rm -f ${DT}/error_${node_search}.rsh
   @ n++
end
if (-e ${DT}/${TRSH}) then
   cat ${DT}/${TRSH} >> ${DT}/${TOUT}
   rm -f ${DT}/${TRSH}
endif

if ("${par_a}" == "-a") then
   set all_nodes = `cat /aleph/log/aleph_hosts | grep -v "#" | grep -v "csf"`
else 
   set all_nodes = `cat /aleph/log/aleph_hosts | grep -v "saga" | grep -v "afal" | grep -v "csf" | grep -v "#"`
endif   
#echo "all_nodes=$all_nodes"
@ n = 1
set n_machines = `echo ${all_nodes} | awk '{print NF}'`

@ n_max_rfstat = 3
while (${n} <= ${n_machines})
   set node_search = ${all_nodes[${n}]}
   set status_ping = "OK"
   set command = `/usr/etc/ping -c 1 ${node_search} | grep ", 0% packet loss"`
   if (${status} != 0) then
      set status_ping = "BAD"
      /usr/etc/ping -c 3 ${node_search} | tail -2 > ${DT}/error_${node_search}.ping
      set ms = `grep round-trip ${DT}/error_${node_search}.ping | awk '{print $5}'`
      set n_ping = `grep % ${DT}/error_${node_search}.ping | awk '{print $7}'`
      if ($n_ping == "100%") echo ">>> /usr/etc/ping ${node_search} 4 packets, $n_ping loss" >> ${DT}/${TOUT}
      echo "$begin_date ${node_search} 4 packets, $n_ping loss, $ms ms" >> $ALEPH/log/ping.log
      rm -f ${DT}/error_${node_search}.ping
   endif
#   echo "$n_machines $n $node_search $status_ping"
   if (${status_ping} == "OK") then
      set command = `sfetch ${DT}/sfetch_${node_search}.check -t ${node_search}:/etc/motd  > ${DT}/error_${node_search}.sfetch`
      if !(-z ${DT}/error_${node_search}.sfetch) echo ">>> sfetch ERROR ${node_search}" >> ${DT}/${TOUT}
      rm -f ${DT}/error_${node_search}.sfetch
      rm -f ${DT}/sfetch_${node_search}.check

#====>> nfsd on node afal01 put on rsh_afal01 procedure
      if (${node_search} == "afal01") then
         set nfsd = `awk '{print $0}' ${DT}/nfsd_afal01`
         set nfsd_fields = `echo $nfsd | awk '{print NF}'`
         set n_check = 10
         set n_p = 1
         set n_bad = 0
         while (${n_p} <= ${nfsd_fields})
            if (${nfsd[$n_p]} > ${n_check}) @ n_bad = ${n_bad} + 1
            @ n_p++
         end
         if (${n_bad}>0) echo "WARNING nfsd on node ${node_search} > ${n_check}%  for ${n_bad} daemons" >> ${DT}/${TOUT} 
         rm -f ${DT}/nfsd_afal01           
      endif
#=====<<

# for afal10 and nodes_DF, sycheck_rsh already done
      if (${node_search} == "afal10" || ${node_search} == "shift9" || ${node_search} == "shift50" || ${node_search} == "afal01") goto BEGIN_CHECK_BY_NODE
      if (${write_out} == "n") echo `date`
      if (${write_out} == "n") echo "-->run sycheck_rsh ${node_search}"
      rsh ${node_search} /u3/xu/fblxu/dir_sycheck/sycheck_rsh

BEGIN_CHECK_BY_NODE:
#======> check queues not AVAILBL
      set string_4 = `echo ${node_search} | awk '{print substr($0,1,4)}'`
      if (${string_4} == "shif" || $string_4 == "saga") then
         if !(-e ${DT}/qstat_${node_search}) set n_queues = 10
         if (-e ${DT}/qstat_${node_search}) set n_queues = `wc -l ${DT}/qstat_${node_search} | awk '{print $1}'`
         if (${n_queues} > 1) then
            echo "-->Look-at qstat -b on ${node_search}" >> ${DT}/${TOUT} 
            if (-e ${DT}/qstat_${node_search}) cat ${DT}/qstat_${node_search} >> ${DT}/${TOUT} 
         endif
         if (-e ${DT}/qstat_${node_search}) rm -f ${DT}/qstat_${node_search} 
      endif  

#======> df -k /usr 
      @ n_df_usr = 96 
      if (${node_search} == "shift9") goto PS

      if !(-e ${DT}/df_usr_${node_search}) then
          echo ">>>WARNING on node ${node_search} -> connect refused" >> ${DT}/${TOUT}
          goto END_PS
      endif
      if (${node_search} == "saga08") goto PS
      if !(-z ${DT}/df_usr_${node_search}) then 
         set p = `awk '{print substr($5,1,length($5)-1)}' ${DT}/df_usr_${node_search}`
         if (${p[2]} >= ${n_df_usr}) echo ">>>WARNING df for disk /usr on node ${node_search} -> ${p[2]}%" >> ${DT}/${TOUT}
      endif

#=======>> ps begin
PS:
      rm -f ${DT}/df_usr_${node_search}
      if (-z ${DT}/ps_${node_search}) then
         echo "WARNING looks like rsh ${node_search} ps did not work " 
         goto END_PS
      endif

#=====>> check sendmail
      set n_sendmail = `grep sendmail ${DT}/ps_${node_search} | wc -l`
      if (${n_sendmail[1]} == 0) echo "WARNING on node ${node_search} sendmail not found" >> ${DT}/${TOUT}
#=====>> check cron
      set n_cron = `grep /sbin/cron ${DT}/ps_${node_search} | wc -l`
      if (${n_cron[1]} == 0) echo "WARNING on node ${node_search} cron not found" >> ${DT}/${TOUT}

#=====>> check rfstat
      if (${node_search} == "shift9") then
         set n_rfstat = `grep rfstat ${DT}/ps_${node_search} | wc -l` 
         if (${n_rfstat[1]} >= ${n_max_rfstat}) then 
            echo "WARNING on node ${node_search} more than ${n_max_rfstat} rfstat ...ALWS problems" >> ${DT}/${TOUT}
            @ n_max_rfstat = 1
         else @ n_max_rfstat = 0
         endif
      endif
      if (${node_search} != "shift9" & ${n_max_rfstat} > 0) then
         set n_rfstat = `grep rfstat ${DT}/ps_${node_search} | wc -l` 
         if (${n_rfstat[1]} >= ${n_max_rfstat}) then 
            echo "WARNING on node ${node_search} more than ${n_max_rfstat} rfstat ...ALWS problems" >> ${DT}/${TOUT}
         endif
      endif

      set node_4 = `echo ${node_search} | awk '{print substr ( $0,1,4 )}'`
#=====>> file /usr/lib/nqs/nqs++daemon [all nodes except afal00 and saga (-saga01)]
      if (${node_search} == "afal00") goto STAGDAEMON
      if (${node_4} == "saga" & ${node_search} != "saga01") goto STAGDAEMON 
      set n_nqs = `grep nqs++daemon ${DT}/ps_${node_search} | wc -l`
      if (${n_nqs[1]} == 0) echo "WARNING on node ${node_search} nqs++daemon not found" >> ${DT}/${TOUT}

#=====>> check stgdaemon on shift9
STAGDAEMON:
      if (${node_search} == "shift9") then
         set n_stgdaemon = `grep stgdaemon ${DT}/ps_${node_search} | wc -l`
         if (${n_stgdaemon[1]} == 0) echo "WARNING on node ${node_search} stgdaemon not found" >> ${DT}/${TOUT}
      endif

#=====>> all_daemon
      if (${node_search} == "afal00") set all_daemon = ('/usr/local/bin/rfiod' '/bin/zhm')
      if (${node_search} != "afal00" & ${node_4} == "afal" | ${node_search} == "shift50") set all_daemon = ('/usr/local/bin/rfiod' 'nqsdaemon' 'netdaemon' 'logdaemon' '/bin/zhm')
      if (${node_4} == "saga" | ${node_search} == "shift9") set all_daemon = ('/usr/local/bin/rfiod' 'nqsdaemon' 'netdaemon' 'logdaemon')
      @ n_daemon = 1
      set n_files = `echo ${all_daemon} | awk '{print NF}'`
      while (${n_daemon} <= ${n_files})
            set file_search = ${all_daemon[${n_daemon}]}
            grep ${file_search} ${DT}/ps_${node_search} > ${DT}/${TT}_ps_daemon
            if (-z ${DT}/${TT}_ps_daemon) echo "WARNING on node ${node_search} ${file_search} not found" >> ${DT}/${TOUT}
            rm -f ${DT}/${TT}_ps_daemon
            @ n_daemon++
      end

END_PS:
      rm -f ${DT}/ps_${node_search}
#========<< ps end

#======>> check dispose
      set command = `dispose .login -t ''${node_search}:/tmp/dispose_${node_search}.check'' > ${DT}/error_${node_search}.dispose`
      set command = `grep "successful"  ${DT}/error_${node_search}.dispose`
      if (${status} != 0) echo ">>> dispose ERROR ${node_search}" >> ${DT}/${TOUT}
      rm -f ${DT}/error_${node_search}.dispose
      rsh ${node_search} "rm -f /tmp/dispose_${node_search}.check"

#=======>> reboot
      if !(-e ${DT}/who_b_${node_search}) then
         echo "Please look-at who_b on ${node_search}" >> ${DT}/${TOUT} 
         goto REBOOT_end
      endif
      set node_4 = `echo ${node_search} | awk '{print substr($0,1,4)}'`
      if (${node_4} == "shif") set node_4 = "shift"
      set dat_last_reboot = `awk '{print $0}' ${DT}/who_b_${node_search}`
#      echo $dat_last_reboot
      set str_reboot = "$dat_last_reboot ${node_search} rebooted"
      grep "${str_reboot}" $ALEPH/log/problem_${node_4}.list > ${DT}/${TT}
      if (-z ${DT}/${TT}) then
         echo $str_reboot >> ${DT}/${TOUT}
         if (${write_out} == "y") echo "${year} $str_reboot" >> $ALEPH/log/problem_${node_4}.list
      endif
      rm -f ${DT}/${TT}
      rm -f ${DT}/who_b_${node_search}
REBOOT_end:
#=======<< reboot
   endif
   @ n++
end

#if ($noretry == "") unsetenv NORETRY
#if ($noretry != "") setenv NORETRY $noretry
unsetenv NORETRY
 
if (-e ${DT}/${TT}) then
   cat ${DT}/${TT} >> ${DT}/${TOUT}
   rm -f ${DT}/${TT}
endif
 
if ($write_out == "y") then
   set end_date = `date "+%Y %m %d %H:%M:%S"`
   echo "${par_a}++++${begin_date} => ${end_date}" >> ${sycheck_out}
   if !(-z ${DT}/${TOUT}) then
      set n_lines = `wc -l ${DT}/${TOUT}`
      set last_line = `tail -1 ${DT}/${TOUT}`
      cat ${DT}/${TOUT} >> ${sycheck_out}
      cat ${DT}/${TOUT} | Mail -s "${n_lines[1]} sycheck! ${last_line}" ${admin}
   endif
else
   if (-z ${DT}/${TOUT}) goto END
   echo "===> new WARNING"
   cat ${DT}/${TOUT}
endif
 
END:
rm -f ${DT}/${TOUT}
if (-z ${sycheck_out}) rm -f ${sycheck_out}
exit
