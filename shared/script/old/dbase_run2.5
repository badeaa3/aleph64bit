#! /bin/csh
#==========================================================
# 14/10/92                                         F.Blin
#                        DBASE_RUN
#==========================================================
# dbase_run1.0                                     FLR
# 28/01/93  - add number of blocks as parameter
# dbase_run2.0                                     FLR
# 31/08/93  - spy on /aleph/dbase
# dbase_run2.1                                     FLR
# 15/09/93 - remove reference to $HOME/.netrc     
# dbase_run2.2                                     FLR 
# 28/09/93 - increase size of default data base to 420 blocks
# dbase_run2.3                                     FLR
# 14/10/93 - set echo on when last argument is "-v"
# dbase_run2.4                                     FLR 
# 10/03/94 - increase size of default data base to 440 blocks
# dbase_run2.5                                     FLR 
# 04/10/94 - increase size of default data base to 500 blocks
#            fetch files with sfetch
#==========================================================
#
#set echo on if last arg is "-v"
set verbflr = ""
set nar = $#argv
if (nar != 0) then
  if ($argv[${nar}] == "-v") then
     set echo on
     set verbflr =    "-v"
     set argv[${nar}] = ""
     @ nar = ${nar} - 1 
  endif
endif
# BIN is the path of runeptoda ==========
set BIN = "${ALEPH}/script"
# =======================================
set def_rec = 500
set def_dir = 9
#*******>
if (${nar} < 1) then
  echo " "
  echo "usage: " 
  echo " dbase_run <version number> [<number of blocks>] [<number of directory blocks>]"
  echo " "
  echo " by default the number of blocks is set to ${def_rec} and the number of directory blocks to ${def_dir}."
  echo " "
  echo " necessary files are got from cernvm using sfetch: "
  echo "      adbsxxx.epio (xxx being the version number) and bankal.fmt"
  echo " if SBANK is installed on /aleph/doc necessary files are imported: "
  echo "       sbank.adr, sbank.lbf and all.assign"
  echo " eptoda is then executed on the current machine and remotely on this other"
  echo " temporary files are removed when daf has been created."
  exit(1)
else
  set cycle = $1
endif
#
if (${cycle} == "") goto error_end
#
#********
#
set sbank = "NO"
if (-e ${ALEPH}/bin/sbank) set sbank = "YES" 
set ref_dir = "/al/${MASTER}/dbase"
set alib_dir = "${ALEPH}/alib"
set doc_dir = "${ALEPH}/doc"
set dbase_dir = "${ALEPH}/dbase"
set dbase_name = "adbs${cycle}"
set dbase_type = "epio"
# 
set disk_ibm_name = "dbase"
set disk_ibm_dbase = `egrep "${disk_ibm_name} " ${alib_dir}/alibdisk | awk '{print $2 "." $3}'`
set disk_ibm_name = "genera"
set disk_ibm_genera = `egrep "${disk_ibm_name} " ${alib_dir}/alibdisk | awk '{print $2 "." $3}'`
#  
# =========   fetch files from cernvm
#
sfetch ${ref_dir}/bankal.fmt -t cernvm:bankal.fmt -u ${disk_ibm_dbase} -f ascii
sfetch ${ref_dir}/${dbase_name}.${dbase_type} \
       -t cernvm:${dbase_name}.${dbase_type} -u ${disk_ibm_dbase} -f binary
#
if (${sbank} == "YES") then
   sfetch ${doc_dir}/sbank.adr -t cernvm:sbank.adr -u ${disk_ibm_dbase} \
          -f ascii
   sfetch ${doc_dir}/sbank.lbf -t cernvm:sbank.lbf -u ${disk_ibm_dbase} \
          -f ascii
   sfetch ${doc_dir}/all.assign -t cernvm:all.assign \
          -u ${disk_ibm_genera} -f ascii
endif
#  
#
#
# ============ check existence of files 
#
if (${sbank} == "YES") then
	cd ${doc_dir}
	if !(-f sbank.adr) echo " *** WARNING -> file sbank.adr is not here"
	if !(-f sbank.lbf) echo " *** WARNING -> file sbank.lbf is not here"
	if !(-f all.assign) echo " *** WARNING -> file all.assign is not here"
endif 
cd ${ref_dir}
if !(-f bankal.fmt) echo " *** WARNING -> file bankal.fmt is not here"
if !(-f ${dbase_name}.${dbase_type}) then
   echo " *** FATAL -> file ${dbase_name}.${dbase_type} is not here"
   goto error_end
endif
# 
#
set VERSION = $1
set dafb_rec = ${def_rec}
set dafb_dir = ${def_dir}
if (${nar} >= 2) set dafb_rec = $2
if (${nar} >= 3) set dafb_dir = $3

echo " "
echo " be patient... creation of adbs${VERSION}.daf"
echo " with ${dafb_rec} records and ${dafb_dir} directory records"
echo " will take a while..."
echo " output is written onto eptoda.out"
echo " "  
#
# =========== build data cards file
#
if (-e ${ref_dir}/eptoda.cards) rm -f ${ref_dir}/eptoda.cards
#
cat >${ref_dir}/eptoda.cards <<EOF
FEPI '${ref_dir}/adbs${VERSION}.epio | EPIO'
FDAF '${dbase_dir}/adbs${VERSION}.daf | DAF'
DAFB ${dafb_rec} ${dafb_dir}
NDOT
ENDQ
EOF
#
#
# ========    run eptoda to create .daf
#
${BIN}/runeptoda ${VERSION} ${verbflr}
#
if ( ${SERVICE} == "SHIFTALEPH" || ${SERVICE} == "CSF" ) \
 rsh saga ${BIN}/runeptoda ${VERSION} ${verbflr}
if ( ${SERVICE} == "AFAL" || ${SERVICE} == "SAGA" ) \
 rsh shift9 ${BIN}/runeptoda ${VERSION} ${verbflr}
exit
#
error_end:
echo "dbase_run abnormal exit"
exit
 
 











