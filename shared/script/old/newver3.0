#! /bin/csh
#============================================================================
#                             newver
#                                                       F.Blin
#============================================================================
# procedure to create a new ALEPH library on various UNIX machines
#
#============================================================================
# All ALEPH CERNVM disks on file -> ${alib_dir}/alibdisk
#
# the /aleph/ directory of an ALEPH library is found in ${alib_dir}/pub/progl
# the last version number installed is taken from ${prog_dir}/alib.log
# if it exists.
# at the end ${prog_dir}/alib.log is updated with the new version number.
#
# All parameters for f77 on file without debug -> ${prog_dir}/f77_options
# All parameters for f77 on file with debug -> ${prog_dir}/f77_dbx_options
# Call "f77_compile -> to run f77 foreach routine
#
# source files are stored on ${prog_dir/src${prog_name}${cycle}
# compilation is done on ${prog_dir/src${prog_name}${cycle}/{OS} 
# special fortran files are stored on ${prog_dir}
# object files and library files are stored on ${lib_dir}
# usually ${prog_dir} and {lib_dir} are identical
# ----------------------------------------------
#
# If prog_name = ALPHA or JULIA or GALEPH then
#    Call updcorr -> to compile
# -> run FTP on CERNVM.CERN.CH
#            get ${file_name}.${file_type}
#            if ${prog_name}= alpha julia or galeph -> get ${file_type_corr}
#            if ${prog_name}= alpha -> get qxxxx .inc${cycle}
#            if ${prog_name}= alephlib -> get ${file_type_c}
# If prog_name = GALEPH -> ${prog_dir}/guser${cycle}.f
#                          ${lib_dir}/guser${cycle}.o
# If prog_name = JULIA  -> ${prog_dir}/jmuid${cycle}.f
#                          ${lib_dir}/jmuid${cycle}.o
#============================================================================
# P1 -> prog_name eg: alephlib
# P2 -> cycle     eg: 154
# P3 -> file_name eg: aleph154
#============================================================================
# 22/02/93 .add parameter -w for cc compilation
#          .suppress less fc.log
# 27/04/93 .add FTP for file type NEWS
# 11/05/93 .check status for rm * in src_dir, if status=1 then exit
# newver2.0
# 08/07/93 .add lib_dir to be able to test a new compiler (FLR)
#           lib_dir is set to `pwd` which can be different from prog_dir
# 12/07/93 .on SERVICE DXAL takes source from ULTRIX if not on /gen/  (FLR)
#          .on SERVICE CSF  takes source from IRIX4  if not on /gen/
# 12/07/93 .history is maintained on ${prog_dir}/alib.log  (FLR)
# newver2.1
# 19/07/93 .put the ibm_name on top of ftp_tmp file
#           let ftp ask for the ibm password
#           remove reference to ${HOME}/.netrc
# newver2.2
# 03/08/93 .add SHIFT9
# newver2.3
# 30/08/93 .use environment variable MASTER
#           source files are maintained on /al/${MASTER}/
#           when the machine is not the MASTER one links are created to
#           /al/${MASTER}/phy/ to reference include files
# newver2.4
# 14/09/93 .read tim_old from alib.log to replace it by new time
# newver2.5
# 12/10/93 . introduce "-v" argument as last argument to get "set echo on"
#  8/11/93 . bug correction when computing new BOS77 version
# 10/11/93 . set dmyh just before updating alib.log and spy
# newver2.6
#  7/03/94 . in case of /aleph/gen SAGA and ALFA system must get there own source
# newver3.0
# 11/03/94 . compile on obj_dir = src_dir/${OS} 
#            this directory is created and removed in newver.
#            call alibftp to get IBM files.
#            include P3 = y/n to return to the official directory
#                    P4 = y/n to get a new version from IBM
#============================================================================
# flag = OK .. always GOOD
#===========================================================================
#include "~/flr/bin/verbflr.h"
#
set verbflr = ""
set nar = $#argv
if (${nar} != 0) then
  if ($argv[${nar}] == "-v") then
     echo "newver3.0"
     set verbflr = "-v" 
     set echo on
     set argv[${nar}] = ""
  endif
endif
#
#*******>
set UNAME = `uname`
#*******<
unset noclobber
set exec_name = "newver"
set alib_dir = "/aleph/alib"
set lib_dir = `pwd`
set cycle_new = ""
set cycle_old = ""
set mnemonic = ""
set file_type = ""
set prog_aleph = "OK"
set file_name_c = "alc"
set file_type_c = "c"
set flag = "OK"
 
#===> first parameter
if ($1 == "") then
  echo -n "Enter Aleph program name [eg:alephlib <CR>=exit]-> "
   set prog_name = $<
   if (${prog_name} == "") goto exec_end
else
   set prog_name = $1
endif
#
# =============================================================================
#                  set idir, prog_dir and lib_dir and cycle number
#
set idir = `egrep ^" ${prog_name} " ${alib_dir}/pub/progl | awk '{print $2}'`
set mnemonic = `egrep ^" ${prog_name} " ${alib_dir}/pub/progl | awk '{print $4}'`
#
set prog_dir = "/al/${OS}/${idir}"
#
if (${idir} == "") then
   set prog_aleph = "NO"
   set mnemonic = "${prog_name}"
else
   if (${lib_dir} != "/al/${OS}/${idir}") then
      echo  "WARNING you are not in the official directory pwd= ${lib_dir}"
      if ($3 =="") then
         echo -n "do you want to go to the official directory [yes or no <CR>=no]-> "
         set oklib = $<
      else
         set oklib = $3
      endif
      if (${oklib} == "yes")  set lib_dir = "/al/${OS}/${idir}"
   endif
   if (-e ${prog_dir}/alib.log) then
      set cycle_old = `egrep ^" ${prog_name} " ${prog_dir}/alib.log | awk '{print $3}'`
      set dmy_old = `egrep ^" ${prog_name} " ${prog_dir}/alib.log | awk '{print $4}'`
      set tim_old = `egrep ^" ${prog_name} " ${prog_dir}/alib.log | awk '{print $5}'`
   endif
   if (${cycle_old} != "") then
      @ cycle_new =  ${cycle_old} + 1
      if (${mnemonic} == "bos") then
         @ cycle_new = (((${cycle_old} / 100) + 1) * 100) + 89
      endif
   endif
endif
# ===============================================================================
#
#===> second parameter
if ($2 == "") then
   if (${cycle_new} == "") then
      set string_cr = "<CR>=exit"
   else
      set string_cr = "<CR>=${cycle_new}"
   endif
   echo -n "Enter version number[${string_cr}]-> "
   set cycle = $<
   if (${cycle} == "") then
      if (${cycle_new} == "") then
         goto exec_end
      else
         set cycle = ${cycle_new}
      endif
   endif
else
   set cycle = $2
endif
# 
# =====================================================================
# 
set file_name = ${mnemonic}${cycle}
#
set file_type = `egrep ^" ${prog_name} " ${prog_dir}/f77_options | awk '{print $2}'`
if (${file_type} == "") then
   flag = "no file_type: look at f77_options" 
   goto spy
endif
#
# 
# =====================================================================
#                set src_dir and obj_dir
# source reside on the MASTER machine
# if it is a machine dependant program ( alephio or bos77 ) then
#    if it is on SERVICE=CSF or SAGA or AFAL  then
#        source files reside on ${prog_dir}
#    endif    
# endif

set src_dir = "/al/${MASTER}/${idir}/src${file_name}"
if ( ${prog_name} == "alephio" || ${prog_name} == "bos77") then
   if (${SERVICE} == "CSF" || ${SERVICE} == "SAGA" || ${SERVICE} == "AFAL") then
      set src_dir = "${prog_dir}/src${file_name}"
   endif
endif
#
# FLRFLR++++++++++++++++++++
######set prog_dir = `pwd`
######set src_dir = "${prog_dir}/src"
# FLRFLR+++++++++++++++++++++++++
set obj_dir = "${src_dir}/${OS}"
#
echo `date` "=== START ${exec_name} ${OS} ${prog_name} ${cycle} =======" >> ${prog_dir}/spy
echo "${exec_name} ${user} lib=${lib_dir} src=${src_dir} obj=${obj_dir}" >> ${prog_dir}/spy
 
# ======================= check existence of src_dir  ==============
# if src_dir exists then
#    ask if you want to restart from srcatch: remove src_dir and get
#    new one from CERNVM
#    or
#    recompile the existing one
# endif
 
if (-d ${src_dir}) then
   echo "*** WARNING directory -> ${src_dir} already there. "
   if ($4 == "") then
      echo "    y -> to get a new version from CERNVM"
      echo "    n -> to re-compile the existing version"
      echo -n " [y/n <CR>=exit] -> "
      set answer = $<
   else
      set answer = $4
   endif 
   set answer = `echo ${answer} | awk '{print substr($0,1,1)}'`
   if (${answer} == "") goto exec_end
   if (${answer} == "n") then 
      goto begin_compile
   endif
   cd ${src_dir}
   rm *
   if ($status == "1") then
      echo " Too many files in ${src_dir}: remove them by hand and restart"\
 >> ${prog_dir}/spy
      flag = "ERROR"
      goto spy
   endif
endif
 
# ===================================================================
 
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> begin
begin:
 
cd ${prog_dir}
 
# ================================================================
#                    ftp on CERNVM
alibftp ${prog_name} ${cycle} 
if !(-e ${prog_dir}/${file_name}.${file_type}) then
   set flag = "ERROR in alibftp"
   goto spy
endif
# ================= end of ftp on CERNVM ===================================
 
# ================= move to src_dir  =======================================
if !(-d ${src_dir}) mkdir ${src_dir}
cd ${src_dir}
 
echo `date`" ${exec_name} move ${file_name}.${file_type} from ${prog_dir} to \
 ${src_dir}/${file_name}.f" >> ${prog_dir}/spy 
mv -f ${prog_dir}/${file_name}.${file_type} ${file_name}.f
if (${prog_name} == "alephlib") mv -f ${prog_dir}/${file_name_c}.${file_type_c} .
#
# ================ begin of fnice, fsplit, put in lower case ======================
#*******> fnice : reformat .f files
# mv ugly input to ${file_name}.fugly and create a nice ${file_name}.f
#     a) removes training blancs
#     b) removes all col 72/80
#     c) change \ to \\
if (-e ${file_name}.f) then
   echo `date`" -> fnice for ${file_name}.f" >> ${prog_dir}/spy
   fnice ${file_name}.f && rm ${file_name}.fugly
else
   set flag = "ERROR:{file_name}.f does not exist"
   goto spy
endif
 
#*******> fplit : split the fortran into subroutines and functions
echo `date`" -> fsplit" >> ${prog_dir}/spy
fsplit ${file_name}.f > split.log && rm ${file_name}.f
rm split.log
if (-e ${file_name}.f) then
   set flag = "ERROR in fsplit"
   goto spy
endif
#********** put in lower case
if (${UNAME} != "ULTRIX") then
  set files = `ls *.f`
  foreach file ( $files[*] )
    set tmp = `echo ${file} | tr '[A-Z]' '[a-z]'`
    mv -f ${file} ${tmp}
  end
endif
# =================== end of fnice fsplit ==================================
 
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> begin_compile
begin_compile:
 
cd ${src_dir}
set file_para = "${prog_dir}/f77_options"
set all_para = `egrep ^" ${prog_name} " ${file_para} | awk '{print substr($0,15)}'`
 
if (-d ${obj_dir}) then
   cd ${obj_dir}
   rm *
   cd ${src_dir}
else
   mkdir ${obj_dir}
endif
 
if (${prog_aleph} == "OK") goto ${prog_name}
 
#************** if not a standard program goto compile
goto compile
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> alephlib
alephlib:
 
#************> library C
if !(-e ${src_dir}/${file_name_c}.${file_type_c}) then
   set flag = "ERROR:no ${file_name_c}.${file_type_c}"
   goto spy
endif
#
cd ${obj_dir}
echo `date`" -> cc -c -w ${src_dir}/*.c onto ${obj_dir}" >> ${prog_dir}/spy
cc -c -w ${src_dir}/*.c | & tee fc.log
#
grep -n 'Error' fc.log > fc_Error.log
if !(-z fc_Error.log) then
   set flag = "ERROR in C compilation: look at ${obj_dir}/*.log"
   goto spy
endif
#************< library C
goto compile
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> galeph/julia
 
galeph:
# get guser
set file_name_gj = "guser"
set string_gj = "qnext.f grndm.f gstmed.f gufld.f guhadr.f guinti.f guphad.f gusear.f gustep.f gutrak.f"
goto comp_gj
 
julia:
# get jmuid
set file_name_gj = "jmuid"${cycle}
set string_gj = "ftrack.f hmfind.f mpredg.f mpredm.f muass.f"
 
#*******> compile without debug file_name_gj
comp_gj:
cat ${string_gj} > ${prog_dir}/${file_name_gj}.f
 
cd ${lib_dir}

echo `date`" -> f77 ${all_para} ${prog_dir}/${file_name_gj}.f " >> ${prog_dir}/spy
 
f77 ${all_para} ${prog_dir}/${file_name_gj}.f | & tee ${file_name_gj}.log
 
if (${SERVICE} == "CSF" || (${SERVICE} == "DXAL" && ${OS} == "OSF1")) rm ${prog_dir}/${file_name_gj}.f
 
goto compile
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> look
look:
#*************> compile main program LKMAIN and move it to lib_dir
cd lib_dir
f77 ${all_para} ${src_dir}/lkmain.f | & tee lkmain.log

goto compile
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> alpha
alpha:
#********> on no MASTER machine create a link to MASTER include files
if (${OS} != ${MASTER}) then
   set inc_dir = "/al/${MASTER}/${idir}"
   ln -fs ${inc_dir}/qcde.inc${cycle} ${prog_dir}/qcde.inc${cycle}
   ln -fs ${inc_dir}/qhac.inc${cycle} ${prog_dir}/qhac.inc${cycle}
   ln -fs ${inc_dir}/qmacro.inc${cycle} ${prog_dir}/qmacro.inc${cycle}
   ln -fs ${inc_dir}/qdecl.inc${cycle} ${prog_dir}/qdecl.inc${cycle}
endif
goto compile

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> alephio bos mini tpcsim
alephio:
bos77:
mini:
tpcsim:
#
goto compile
 
# ====================== compile and make a library========================
compile:

#******> remove existing library if any 
if (-e ${lib_dir}/lib${file_name}.a) rm ${lib_dir}/lib${file_name}.a
if (-e ${lib_dir}/lib${file_name}_dbx.a) rm ${lib_dir}/lib${file_name}_dbx.a

#*******> f77_compile with optimization
echo `date`" -> Call f77_compile with optimization" >> ${prog_dir}/spy
#
cd ${src_dir}
f77_compile ${prog_name} ${verbflr}
#
if !(-z ${obj_dir}/${prog_name}.Error) then
   set flag = "FATAL:compilation errors"
   goto spy
endif
 
#*******> ar with optimization
cd ${obj_dir}
echo `date`" -> ar rsl ${lib_dir}/lib${file_name}.a *.o" >> ${prog_dir}/spy
ar rsl ${lib_dir}/lib${file_name}.a *.o | & tee ar.log
grep -n 'Error' ar.log > ar.Error
 if !(-z ar.Error) then
    set flag =  "FATAL ***> archive problems"
    goto spy
 endif
 
#*******> f77_compile with debug
echo `date`" -> Call f77_compile with dbx" >> ${prog_dir}/spy
#
cd ${src_dir}
f77_compile ${prog_name} dbx ${verbflr}
#
set dbxlog = "${prog_name}_dbx"
if !(-z ${obj_dir}/${dbxlog}.Error) then
   set flag = "FATAL:compilation_dbx errors"
   goto spy
endif
 
#*******> ar with debug
#                        ar = archive
#  parameters used :      r = replace
#                         s = sort
#                         l = place temporary files in the local directory
cd ${obj_dir}
echo `date`" -> ar rsl ${lib_dir}/lib${file_name}_dbx.a *.o" >> ${prog_dir}/spy
ar rsl ${lib_dir}/lib${file_name}_dbx.a *.o | & tee ar_dbx.log
grep -n 'Error' ar_dbx.log > ar_dbx.Error
 if !(-z ar_dbx.Error) then
    set flag = "FATAL ***> archive_dbx problems"
    goto spy
 endif
#*************> remove all object files 
rm *.o
# 
# ========================= end of compilation and library ====================# 
cd ${prog_dir}
# 
if (${prog_aleph} == "NO") goto spy
# 
#*******> update ${prog_dir}/alib.log
set dmyh = `date '+%d-%h-19%y %T'`
echo `date`" -> update ${prog_dir}/alib.log" >> ${prog_dir}/spy
if !(-e alib.log) then
   echo " ${prog_name} ${exec_name} ${cycle} ${dmyh}">>alib.log
else
   set pname = ""
   set pname = `egrep ^" ${prog_name} " alib.log | awk '{print $1}'`
   if (${pname} == "") then
      echo " ${prog_name} ${exec_name} ${cycle} ${dmyh}">>alib.log
   else
      set sold = " ${prog_name} ${exec_name} ${cycle_old} ${dmy_old} ${tim_old}"
      set snew = " ${prog_name} ${exec_name} ${cycle} ${dmyh}"
      sed s/"${sold}"/"${snew}"/ alib.log > alib.tmp
      mv -f alib.tmp alib.log
   endif
endif
 
# =================== build correction file for galeph, julia, alpha ============
 
cd ${lib_dir}
 
if (${prog_name} == "julia" || ${prog_name} == "galeph" || ${prog_name} == "alpha" ) then
   echo `date`" -> updcorr ${prog_name} newver" >> ${prog_dir}/spy
   updcorr ${prog_name} newver
endif
 
# ================================================================================
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> spy
spy:
#*******> spy
echo `date` " END of ${exec_name} ${OS} ${user} ${prog_name} ${cycle} ${flag}" >> ${prog_dir}/spy
 
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> exec_end
exec_end:
 exit
 
