#! /bin/csh
#============================================================================
#                             UPDCORR
# 16/10/92                                                      F.Blin
#============================================================================
# procedure to create a new ALEPH correction file on UNIX
#============================================================================
# all Aleph libraries on file -> ${alib_dir}/pub/progl
# Call sfetch to get correction file from CERNVM 
# Call by newver, newunix
#============================================================================
# P1 -> prog_name                          eg: julia
# P2 -> program version number             eg: 273
# P3 -> ="new" or "old"         to get a "new" or keep the "old" correction file
# P4 -> ="" or "pwd"            to store obj.file in the official directory or
#                               in the current directory
#============================================================================
# updcorr2.0                                                    FLR
# 11/07/93 - add lib_dir :*.o files are stored on lib_dir       
#            lib_dir is set to `pwd`
# 14/07/93 - get cycle number and last date from ${corr_dir}/alib.log
# 15/07/93 - on CSF and DXAL//OSF1 compile the existing correction
#            file on SHIFT or ULTRIX
# updcorr2.2                                                    FLR
# 31/08/93 - use the environment variable MASTER to retrieve the corr. file
# updcorr2.3                                                    FLR
# 13/10/93 - compile correction file without dbx
#            set echo on if last argv is "-v"
# updcorr2.4                                                    FLR
# 9/11/93 - fortran is stored on corr_dir = /al/${MASTER}/${idir}
#           object file is stored on lib_dir
#           lib_dir is set to `pwd` 
#           when updcorr is called directly a warning is printed when 
#           lib_dir is not /aleph/${idir}
# updcorr2.5
# 16/05/94 - introduce version number as argument# 2            FLR
#            the exec_name which can call updcorr is the 3rd argument
#            it can be "newver" which means that updcorr is called from newver
#            and the correction file has already been fetched from CERNVM.
# updcorr2.6                                                    
# 09/06/94 - it can be "new" or "" which means get a new correction file 
#            from CERNVM.
#            it can be "old" which means use the correction file from ${MASTER}
# updcorr2.7
# 27/06/94 - remove the exec-name as 3rd argument : it must be "new" or "old"
#            when called from newver or newlib it is "old"
#            by default it is "new"
# updcorr2.8
# 30/06/94 - if GALEPH or JULIA then
#              build a module and give it the name galnew or julnew
# updcorr2.9
# 04/07/94 - add a 4th argument : "pwd" to say that the .o will be kept in
#            the current directory.
#            by default it is the official one : "${prog_dir}
# updcorr3.0
# 22/09/94 - use $ALEPH instead of /aleph
# updcorr3.1 
# 13/02/95 - split the corr file in ./temp
#            compile ./temp/*.f
#            update lib and lib_dbx
#            move ./temp/*.f to src_dir
#            remove ./temp 
#            extract main program from libname.a
# updcorr3.2
# 17/02/95 - use $PUBXU instead of disk_ibm_name , set = pubxu.409 
# updcorr3.3 
# 04/07/95 - suppress test on file name
#============================================================================
#set echo on if last argument is "-v"
set exec_name = "updcorr3.3"
set verbflr = ""
set script_dir = ""
set nar = $#argv
if (${nar} != 0) then
  if ($argv[${nar}] == "-v") then
     set echo on
     set verbflr = "-v"
     set script_dir = "/u3/xu/flr/bin/"   
     echo "${exec_name}" 
     set argv[${nar}] = ""
     @ nar = ${nar} - 1 
  endif
endif
#
set lib_dir = ""
if (${nar} != 0) then
   if ($argv[${nar}] == "pwd") then
      set lib_dir = `pwd`
      set argv[${nar}] = ""
      @ nar = ${nar} - 1
   endif
endif
#
set fget = "new"
if (${nar} != 0) then
   if ($argv[${nar}] == "old") set fget = "old"  
   set argv[${nar}] = ""
endif
#*******>
set UNAME = `uname`
set alib_dir = "${ALEPH}/alib"
set mnemonic = ""
set all_para_dbx = ""
set flag = "OK"
#
#*******>
if ($1 == "") then
  echo -n "Enter Aleph program name [eg:julia <CR>=exit]-> "
   set prog_name = $<
   if (${prog_name} == "") goto end
else
   set prog_name = $1
endif
 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> begin
begin:
#*******
set idir = `egrep ^" ${prog_name} " ${alib_dir}/pub/progl | awk '{print $2}'`
if (${idir} == "") then
   echo " WARNING ***> see file ${alib_dir}/pub/ progl"
   goto end
endif
if (${prog_name} == "alpha") then
   set mnemonic = "alcor"
   set srcname = "srcalpha"
   set libname = "libalpha" 
else if (${prog_name} == "alephlib") then
   set mnemonic = "acor"
   set srcname = "srcaleph"
   set libname = "libalephio" 
else if (${prog_name} == "alephio") then
   set mnemonic = "iocor"
   set srcname = "srcalio"
   set libname = "libalephio"
else
   set ini = `echo ${prog_name} | awk '{print substr($0,1,1)}'`
   set mnemonic = ${ini}"cor"
   set name = `echo ${prog_name} | awk '{print substr($0,1,3)}'`
   set srcname = "src"${name}
   set libname = "lib"${name} 
endif
 
#*******
 
set prog_dir = "/al/${OS}/${idir}"

set cycle_old = `egrep ^" ${prog_name} " ${prog_dir}/alib.log | awk '{print $3}'`
set dmy_old = `egrep ^" ${prog_name} " ${prog_dir}/alib.log | awk '{print $4}'`

if ($2 == "") then
  set string = "<CR=${cycle_old}>"
  echo -n "Enter version number [${string}]->"
  set cycle = $<
  if (${cycle} == "") then
    set cycle = ${cycle_old}
  endif
else
  set cycle = $2
endif
 
set file_name = ${mnemonic}${cycle}
#*******

set ref_dir = "/al/${MASTER}/${idir}"

#*******> if a new file is requested run sfetch and fnice
if (${fget} == "new") then
   cd ${ref_dir}
   set file_type = `egrep ^" ${prog_name} " ${prog_dir}/f77_options | awk '{print $2}'`
   set transfert_type = "ascii"
   echo "Now run sfetch -> sfetch ${file_name} ${file_type} ${PUBXU} ${transfert_type}"
   sfetch ${file_name}.${file_type} -t 'cernvm:${file_name}.${file_type}' -u ${PUBXU} \ 
          -f ${transfert_type}
 
   if !(-e ${ref_dir}/${file_name}.${file_type}) then
      echo " WARNING ***> file ${ref_dir}/${file_name}.${file_type} is unknown"
      set flag = "problem with FTP"
      goto exec_end
   endif
 
   mv -f ${ref_dir}/${file_name}.${file_type} ${ref_dir}/${file_name}.f
 
   if (-e ${file_name}.f) then
      echo "Now -> fnice for ${file_name}.f"
      fnice ${file_name}.f && rm ${file_name}.fugly
   else
      echo " WARNING ***> fnice"
      set flag = "fnice problems"
      goto exec_end
   endif
endif 
#*******> set a link into prog_dir
unalias ln
ln -fs ${ref_dir}/${file_name}.f ${prog_dir}/${file_name}.f

#*******> compile ${ref_dir}/${file_name}.f on to ${lib_dir}
compile:
if (${lib_dir} == "") set lib_dir = ${prog_dir}
echo " lib_dir = ${lib_dir}"
cd ${lib_dir}

set file_para = "${lib_dir}/f77_options"
if !(-e ${file_para}) then
   echo " WARNING ***> file ${file_para} is unknown"
   goto end
endif

set all_para = `egrep ^" ${prog_name} " ${file_para} | awk '{print substr($0,15)}'`

echo "Now -> f77 ${all_para} ${ref_dir}/${file_name}.f"

#
# ===================== update the library and the source with the correction file =========
set src_dir = ${ref_dir}/${srcname}${cycle}
cd ${src_dir}/${OS}
rm *.o

f77 ${all_para} ../CORR/*.f | & tee ${file_name}.log

set file_error = "${file_name}_Error"
echo "Now -> grep -n 'Error' ${file_name}.log > ${file_error}.log"
grep -n 'Error' ${file_name}.log > ${file_error}.log
if !(-z ${file_error}.log) then
    set flag = "COMPILATION PROBLEMS"
    echo " WARNING ***> compilation problems"
    echo "see file -> ${file_error}.log"
endif

ar rls ${lib_dir}/${libname}${cycle}.a *.o
rm *.o

f77 ${all_para} -g ../CORR/*.f | & tee ${file_name}_dbx.log

set file_error = "${file_name}_dbx_Error"
echo "Now -> grep -n 'Error' ${file_name}_dbx.log > ${file_error}_dbx.log"
grep -n 'Error' ${file_name}_dbx.log > ${file_error}_dbx.log
if !(-z ${file_error}_dbx.log) then
    set flag = "COMPILATION PROBLEMS"
    echo " WARNING ***> compilation problems"
    echo "see file -> ${file_error}_dbx.log"
endif

ar rls ${lib_dir}/${libname}${cycle}_dbx.a *.o
rm *.o

# ===================== build a module if GALEPH or JULIA ===============
if ( ${prog_name} == "julia" || ${prog_name} == "galeph" ) then
  set main = "galeph"
  if (${prog_name} == "julia") set main = "aamain"
  cd ${lib_dir}
  ar x ${libname}${cycle}.a ${main}.o
  mv ${main}.o ${ini}main${cycle}.o
  makenew ${prog_name} ${cycle} ${verbflr}
endif
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> exec_end
exec_end:
#*******> spy
spy:
set dmyh = `date '+%d-%h-19%y %T'`
echo "${exec_name} ${user} ${dmyh} ${prog_name} ${fget} ${file_name} ${all_para_dbx} ${flag}" >> ${lib_dir}/spy

end:
exit


