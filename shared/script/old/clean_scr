#!/bin/csh -f
# Uli Schafer 15-2-94
# arguments: 1) directory tree to be cleaned 2) guaranteed life time
#            3) percentage
# example: /aleph/script/clean_scr /aleph/scweek 30 85   
#          This command forces cleanup of scweek to 85%
#          with 30 days retention since last usage guaranteed.
#          Mail is send if impossible to the users definded in $mailpath .
# This script can be inserted in a crontab and be executed
# e.g. every 5 minutes. 
# A log_file is written in /aleph/log/clean_${poold}.log
 set mailpath=hag
# set echo 
# set verbose
#  If no arguments are given then some defaults are taken for the guaranteed
#  days of retention since last usage, and the % to be left on the disk.
#  All 3 disks scwork, scweek and scmonth are then cleaned up.
#  The default values are defined hereafter.
 if ( $#argv == 0 ) then
   $0 /aleph/scwork 7 75     >>&! /aleph/tmp/clean_scwork.log
   $0 /aleph/scweek 21 95    >>&! /aleph/tmp/clean_scweek.log
   $0 /aleph/scmonth 60 95  >>&! /aleph/tmp/clean_scmonth.log
   exit
 endif
#  the log is put into e.g. /aleph/tmp/clean_scwork.log
#
 echo start `date`
 if ( $#argv != 3 ) then
 echo Supply 3 parameters, please
   exit
 endif
 cd $1
 set life_time=$2
 @ clmin = $life_time - 1
 set maxperc=$3
 alias echofile 'echo "$file"'
# so as not to clean permanently, clean a bit more than requested free space
 set free_add=1
 set poold=$1
 set poold=$poold:t
 set log_file=/aleph/log/clean_${poold}.log
# echo "Usage limit:   " $maxperc \% 
 set perc=`df . | tail -1 | awk '{ print $6 }' |tr -d "%"`
# echo "Present usage:  "$perc \% 
 if ( $perc <= $maxperc ) then
   exit
 endif
#
 echo Start `date` `pwd` $perc "%"  >>! $log_file
 @ maxperc = $maxperc - $free_add
 set cltime=$clmin
#
# check for oldest file on disk, use steps of 100 & 10 days
seek100:
 set files=`find . ! -type d -mtime +$cltime -atime +$cltime  -print | wc -l` 
 @ cltime = $cltime + 100
 if ( $files >= 1 ) then 
   goto seek100
 endif
 @ cltime = $cltime - 200
#
seek10:
 set files=`find . ! -type d -mtime +$cltime -atime +$cltime  -print | wc -l` 
 @ cltime = $cltime + 10
 if ( $files >= 1 ) then 
   goto seek10
 endif
 @ cltime = $cltime - 9
#
# clean disk up to required free space. use steps of 1 day
seek1:
 @ cltime = $cltime - 1
# echo ------- $cltime
 set files=""
seek2:
# echo $cltime
 if ( $cltime < $clmin ) then
   echo Cleanup not possible, no space
   set dates=`date '+%%%Y%m%d no space'`
   grep "$dates" $log_file >/dev/null || ( echo $dates >>$log_file ; \
     echo No space on `pwd` "( $poold )" \\n$maxperc\% required, \
     $perc\% used, $life_time days | Mail -s "Scratch cleanup error"  \
     $mailpath ) 
   exit
 endif
 set lastfiles="$files"
 
 set files0="`find . ! -type d -mtime +$cltime -atime +$cltime -print | head`"
# echo $files0
 set files="$files0"
 if ( "$files0" == "" ) then
   goto seek1
 endif
 if ( "$files" == "$lastfiles" ) then
#   echo files could not be deleted $files
   goto seek1
 endif
 set perc=`df . | tail -1 | awk '{ print $6 }' |tr -d "%"`
 if ( $perc <= $maxperc ) then
   exit
 endif
# echo To be deleted: $files
start:
 if ("$files0" != "") then
   set file="$files0[1]"
   shift files0
   set file="`echofile | cut -c 3-`"
   set own=`ls -l "$file" | awk '{ print $3}'`
   set cdate=`ls -l "$file" | awk '{ print $6" "$7" "$8 }'`
   set udate=`ls -lu "$file" | awk '{ print $6" "$7" "$8 }'`
   rm -f "$file"
   echo `date '+%Y-%m-%d %H:%M:%S'` $file $udate $cdate $own >>! $log_file
#   echo `date '+%Y-%m-%d %H:%M:%S'` $file $udate $cdate $own 
   if (-e "$file") then
     echo Could not delete "$file"  >>! $log_file
#     echo Could not delete "$file" 
   endif
   set perc=`df . | tail -1 | awk '{ print $6 }' |tr -d "%"`
   if ( $perc <= $maxperc ) then
     exit
   endif
   goto start
 endif
 goto seek2
